{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1491788469000},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1491788469000},{"_id":"themes/icarus/README.md","hash":"25c75503f044b817297995a96621c92ce037a098","modified":1491788469000},{"_id":"themes/icarus/_config.yml","hash":"d404fd2dd7d98367d7e43bf887565ec24da1229c","modified":1491788469000},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1491788469000},{"_id":"source/_posts/androidgoogleplacestutorial.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798580000},{"_id":"source/_posts/boostchatclient.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798683000},{"_id":"source/_posts/boostchatserver.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798699000},{"_id":"source/_posts/boozenet.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798375000},{"_id":"source/_posts/buildanapplicationlauncherwithandroid.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798351000},{"_id":"source/_posts/imagescrapeversion1.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798364000},{"_id":"source/_posts/imagescrapeversion2.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798564000},{"_id":"source/_posts/javasparkframeworktutorial.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798638000},{"_id":"source/_posts/jekyllblog.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798449000},{"_id":"source/_posts/learningmagentopart1.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798588000},{"_id":"source/_posts/newprojectspage.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798462000},{"_id":"source/_posts/patomicbeta.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798647000},{"_id":"source/_posts/pythonfinance1.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798555000},{"_id":"source/_posts/qalite.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798411000},{"_id":"source/_posts/rubycramprssfeed.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798539000},{"_id":"source/_posts/udpechoinc.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798656000},{"_id":"source/_posts/udpechoincp2.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798672000},{"_id":"source/_posts/writingabookandmisc.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491798572000},{"_id":"source/_posts/androidwatermark.md","hash":"2f3e8aa1ec49018d76f5e1f7c1d09581897c7a1c","modified":1491802193000},{"_id":"source/_posts/guestdialer.md","hash":"0492b7bc623b237632e2645be6706ff8d995c863","modified":1491891011000},{"_id":"source/_posts/rubyonrailsblogdemo.md","hash":"019b3be303760ba31a05cba29adf522fcc548996","modified":1491883238000},{"_id":"source/_posts/textbasedrpgpart1.md","hash":"d016766114b86359ba963f27deeabf615c105ad1","modified":1491896348000},{"_id":"source/_posts/textbasedrpgpart2.md","hash":"a609c271f87d8eb354698083e26894462e76c310","modified":1491966291000},{"_id":"source/_posts/textbasedrpgpart3.md","hash":"73eba2790eecc6bfad412fafdd0de6353edb139c","modified":1491886045000},{"_id":"source/_posts/textbasedrpgpart4.md","hash":"ff57c549bc7969a978962883ca669945920f6a60","modified":1491885858000},{"_id":"source/_posts/textbasedrpgpart5.md","hash":"4fdb7f0b94da0f9f55df69687ae2de2abd1f5d17","modified":1491886303000},{"_id":"source/_posts/textbasedrpgpart6.md","hash":"73fcabfb8cfd751cb8ff781dcb1917eef1151bf6","modified":1491886410000},{"_id":"source/_posts/textbasedrpgpart7.md","hash":"1f63aa156dc075d987a67c25ce57fa94caec5bd2","modified":1491886742000},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1491788469000},{"_id":"themes/icarus/.git/config","hash":"fde0e7c381af5e1c6f07bf907a573f47cbc6a661","modified":1491788469000},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1491788465000},{"_id":"themes/icarus/.git/index","hash":"21f2f1e23f31ec6d55689805f61ed49815e97d6c","modified":1491788622000},{"_id":"themes/icarus/.git/packed-refs","hash":"afd7a36dcb04bce77e5741908274aebc2297501c","modified":1491788469000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"9393fd3dbc943f1544facb66af7fd8b7a5b9ddbb","modified":1491788469000},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1491788469000},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1491788469000},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1491788469000},{"_id":"themes/icarus/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1491788469000},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1491788469000},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1491788469000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1491788469000},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1491788469000},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1491788469000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1491788469000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1491788469000},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1491788469000},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1491788469000},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1491788469000},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1491788469000},{"_id":"themes/icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1491788469000},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1491788469000},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1491788469000},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1491788469000},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1491788469000},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1491788469000},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1491788469000},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1491788465000},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1491788465000},{"_id":"themes/icarus/.git/logs/HEAD","hash":"9f53793e1a258bd7a8d84fa08f0188a513530c87","modified":1491788469000},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1491788469000},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1491788469000},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1491788469000},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"59abd552086c26cb0a6fd86d18ce380c3b1b3c55","modified":1491788469000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1491788469000},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1491788469000},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1491788469000},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"0913444317759c3ff0588ca3aa4a6a89b6595307","modified":1491788469000},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1491788469000},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"305aa07646ab03e00d8239a811f4ec6f75751e1e","modified":1491788469000},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1491788469000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"9c260a551596f71e93177f2289b5cb1c4bc7d96c","modified":1491788469000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1491788469000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"44f30945882afd27c89da2173da501fb1b531488","modified":1491788469000},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1491788469000},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1491788469000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1491788469000},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1491788469000},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1491788469000},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1491788469000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1491788469000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1491788469000},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"b349c7089a44302eaa8291c0ed13ef815f868a68","modified":1491788469000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1491788469000},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1491788469000},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1491788469000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1491788469000},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1491788469000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1491788469000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1491788469000},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1491788469000},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1491788469000},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1491788469000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1491788469000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1491788469000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1491788469000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1491788469000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1491788469000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1491788469000},{"_id":"themes/icarus/source/css/_extend.styl","hash":"539e02107f35e8b3bdb9bf160dc212a433a7b60e","modified":1491788469000},{"_id":"themes/icarus/source/css/_variables.styl","hash":"d62af931be6612ec8c3a917836379a8cd92fbce1","modified":1491788469000},{"_id":"themes/icarus/source/css/style.styl","hash":"1716b199dba80b26086f325d69c36fa682465106","modified":1491788469000},{"_id":"themes/icarus/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1491788469000},{"_id":"themes/icarus/source/js/main.js","hash":"93dc932946e2898bf4f39c42af1b27295e886af1","modified":1491788469000},{"_id":"themes/icarus/.git/objects/pack/pack-41016734246655e2b6d642b68b318ddbca05950d.idx","hash":"d964e3414ddef4f0facff0f0e0a25c46590301dc","modified":1491788469000},{"_id":"themes/icarus/.git/refs/heads/master","hash":"8cb36ed5379ce7ea17d93fa1677f95e96ecd7243","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"512b9252e1799b93a17c4ad847b0586814a030b4","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"fb0170075dc2a41e01dd11bbfdbccbed544c479a","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1491788469000},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1491788469000},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1491788469000},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1491788469000},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1491788469000},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1491788469000},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1491788469000},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1491788469000},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1491788469000},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"9f53793e1a258bd7a8d84fa08f0188a513530c87","modified":1491788469000},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1491788469000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1491788469000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1491788469000},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491788469000},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"9f53793e1a258bd7a8d84fa08f0188a513530c87","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1491788469000},{"_id":"themes/icarus/.git/objects/pack/pack-41016734246655e2b6d642b68b318ddbca05950d.pack","hash":"f0ca0d69454004623dce3a5989433dff02f3bce0","modified":1491788469000}],"Category":[{"name":"tutorial","_id":"cj1d8kr8v000mtswv9qnuzppx"},{"name":"ruby-on-rails","_id":"cj1d8kr93000rtswv2tef6r9i"}],"Data":[],"Page":[],"Post":[{"_content":"","source":"_posts/androidgoogleplacestutorial.md","raw":"","slug":"androidgoogleplacestutorial","published":1,"date":"2017-04-10T04:29:40.000Z","updated":"2017-04-10T04:29:40.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr660000tswv565lxvww","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/boostchatclient.md","raw":"","slug":"boostchatclient","published":1,"date":"2017-04-10T04:31:23.000Z","updated":"2017-04-10T04:31:23.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr6c0001tswvz00mc2cz","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/boostchatserver.md","raw":"","slug":"boostchatserver","published":1,"date":"2017-04-10T04:31:39.000Z","updated":"2017-04-10T04:31:39.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr6f0002tswvc0hzbo37","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/boozenet.md","raw":"","slug":"boozenet","published":1,"date":"2017-04-10T04:26:15.000Z","updated":"2017-04-10T04:26:15.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr6h0003tswv6sjlrj6a","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/buildanapplicationlauncherwithandroid.md","raw":"","slug":"buildanapplicationlauncherwithandroid","published":1,"date":"2017-04-10T04:25:51.000Z","updated":"2017-04-10T04:25:51.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr6i0004tswvgm5za4iy","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/imagescrapeversion1.md","raw":"","slug":"imagescrapeversion1","published":1,"date":"2017-04-10T04:26:04.000Z","updated":"2017-04-10T04:26:04.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr6k0005tswv9d35cyqg","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/imagescrapeversion2.md","raw":"","slug":"imagescrapeversion2","published":1,"date":"2017-04-10T04:29:24.000Z","updated":"2017-04-10T04:29:24.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr6n0006tswv1s58i5s8","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/javasparkframeworktutorial.md","raw":"","slug":"javasparkframeworktutorial","published":1,"date":"2017-04-10T04:30:38.000Z","updated":"2017-04-10T04:30:38.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr6p0007tswvfh7f93u0","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/jekyllblog.md","raw":"","slug":"jekyllblog","published":1,"date":"2017-04-10T04:27:29.000Z","updated":"2017-04-10T04:27:29.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr6u0008tswvu3ccolgw","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/learningmagentopart1.md","raw":"","slug":"learningmagentopart1","published":1,"date":"2017-04-10T04:29:48.000Z","updated":"2017-04-10T04:29:48.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr6v0009tswvhq6ekga4","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/newprojectspage.md","raw":"","slug":"newprojectspage","published":1,"date":"2017-04-10T04:27:42.000Z","updated":"2017-04-10T04:27:42.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr6x000atswv7jq0ffbl","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/patomicbeta.md","raw":"","slug":"patomicbeta","published":1,"date":"2017-04-10T04:30:47.000Z","updated":"2017-04-10T04:30:47.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr6z000btswv4rzj7nu8","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/pythonfinance1.md","raw":"","slug":"pythonfinance1","published":1,"date":"2017-04-10T04:29:15.000Z","updated":"2017-04-10T04:29:15.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr73000ctswvfo6ufg1o","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/qalite.md","raw":"","slug":"qalite","published":1,"date":"2017-04-10T04:26:51.000Z","updated":"2017-04-10T04:26:51.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr76000dtswvhf72ndl3","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/rubycramprssfeed.md","raw":"","slug":"rubycramprssfeed","published":1,"date":"2017-04-10T04:28:59.000Z","updated":"2017-04-10T04:28:59.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr78000etswvpr2aiql8","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/udpechoinc.md","raw":"","slug":"udpechoinc","published":1,"date":"2017-04-10T04:30:56.000Z","updated":"2017-04-10T04:30:56.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr7a000ftswvheapv4ja","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/udpechoincp2.md","raw":"","slug":"udpechoincp2","published":1,"date":"2017-04-10T04:31:12.000Z","updated":"2017-04-10T04:31:12.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr7b000gtswv5x4d8t7e","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/writingabookandmisc.md","raw":"","slug":"writingabookandmisc","published":1,"date":"2017-04-10T04:29:32.000Z","updated":"2017-04-10T04:29:32.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr7d000htswvcx1fl9g8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"My Experience Publishing My First Android App, Six Things I Learned","date":"2011-06-04T07:00:00.000Z","_content":"Here are some of the things I learned about developing for the [Android][link_android_dev_home] platform from publishing my first app which I hope will useful to others who want to but haven’t started developing for the Android platform.\n\nIts currently in the free beta mode(with ads) right now as I plan on adding more features later such as the ability to design/store your own logos as preferences and an actual user interface that uses the [action bar design pattern][link_android_dev_actionbar] which is so popular nowadays.\n\n### 1) Not knowing Java is not an excuse. \n\nIf you don’t know any Java but you’re proficient in a C-based or C-styled syntax programming language such as C#, C++, PHP  and or any others then you can easily absorb Java as you browse Android tutorials, read Android dev books and begin to poke around with the Android API. I myself only knew C++ but developing for the Android platform quickly allowed me to dive into Java and learn the fundamentals of such things as proper exception handling(ok I admit that I do use exceptions in C++ but I tend to use my own exception class rather than the standard library one); how garbage collected languages differ from non garbage collected ones, the [Eclipse IDE][link_eclipse_ide], the difference between classes and interfaces, how NULL referenced objects are treated by the JVM, lock based synchronization and much more. In short, developing an Android app was a great introduction to the Java programming language.\n\n### 2) Find a great intro level Android development book to supplement online tutorials.\n\nMost of the time when I started out I found that online tutorials and forum posts were often way too specific and narrowly focused to gain much useful knowledge from as a beginning Android dev. What I mean is that comments were often left out(necessary to understand the design choices) and or the solution posted was just a snippet of functionality and not something your could copy and paste into Eclipse and compile (unless you already knew what you were doing). Although there were a few good exceptions, I was only able to actually make sense of many online tutorials and such after I understood the basics of Android development. This also saves you the embarrassment of annoying people online when you ask questions which could be easily answered by a quick Google search or better yet printed in the first chapter of any of the numerous introductory level Android books.\n\nIf you want to know which ones I read, I found [Teach Yourself Android Application Development in 24 Hours][link_teach_yourself_android_in_24] to be very useful since each chapter(written to be read in 1 hour intervals) was very succinct and got straight to the point. In addition the Q&A sections at the end of the chapters gave me a chance to practice and try out new things and prevented me from just engaging in passive learning. I also used [APress Pro Android 2][link_apress_android_pro_2] which despite its less than stellar 3 out of 5 star rating(4 stars is my usual minimum) on Amazon.com it was a great source for fully functioning mini apps that you can run on your phone and the entire book covered almost all of the Android API.\n\n### 3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends. \n\nWhile developing my first Android app I struggled early on to properly deal with sudden program crashes and JVM out of memory exceptions being triggered. At first I was at lost, until I learned how to properly use the debugging tools which were bundled with the Android SDK installation. This isn’t necessarily a blog post on debugging techniques but here is one great tutorial I found which helped me through some difficult times, or how you should learn to properly \n\n### 4) Start using version control software if you haven’t been doing so.\n\nI’m going to be honest here but prior to becoming comfortable with version control, I would add new features to my existing app by doing the following.\n\n- Create a new project in Eclipse titled “New feature X”\n\n- Copy all necessary files from the existing project over to the new one\n\n- Implement the feature and debug\n\n- If the feature worked, copy and paste it back extra carefully into the original hoping that no squiggly red underlines would show up in the IDE\n\n- ???\n\n- Compile!!!!\n\nAfter a while I just grew tired of the fact that adding new features such as trying out multi-touch zooming and or testing out an alternative layout scheme became so immensely difficult and error prone(copy and pasting into the wrong Java class file and or creating variable naming conflicts). So I did a little research and found a neat tool called that was perfectly suited to my needs, a cool piece of software called [Git][link_git_scm]. Go check it out, it runs well on all the popular OSs and you will just plain grow to appreciate version control as much as I now do. Ok I know [Git][link_git_scm] isn’t the only version control software around, [wikipedia][link_wikipedia_scm] has a list of free ones but its incredibly easy to learn and crazy powerful once you get started(no pun intended) using its advanced capabilities such as [cloning][link_git_cloning].\n\n### 5) Whenever possible, debug on a real handset not the emulator.\n\nThere really isn’t much to say here but until you can actually run your application on a real handset you may never know if your layouts will display properly out in the wild. In addition if anyone you know has a different Android model ask them to try out your app and get some early feedback.\n\n### 6) Start a code journal or something; become influential.\n\nThis might sound a little cheezy or evoke just a “yeah whatever” type of reaction but it pays to set clear deadlines for yourself and to not slack off. Writing an Android application can quickly go from just a weekend hack to a month long ordeal depending on your app. Although you could go to the extreme case and install productivity software to [lock down your web browser during working hours][link_freedom_app], my alternative and the one I highly recommend is to start a code journal. A code journal to me at least is just a real journal(not this blog) where you jot down ideas about features you wish to implement or where you just plain brainstorm new web apps or something.\n\n[link_android_dev_home]: http://developer.android.com/index.html\n[link_android_dev_actionbar]: http://developer.android.com/guide/topics/ui/actionbar.html\n[link_eclipse_ide]: http://www.eclipse.org\n[link_apress_android_pro_2]: http://www.amazon.com/Pro-Android-Sayed-Y-Hashimi/dp/1430226595/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1307061714&amp;sr=1-1\n[link_teach_yourself_android_in_24]: http://www.amazon.com/Teach-Yourself-Android-Application-Development/dp/0321673352\n[link_git_scm]: http://git-scm.com/\n[link_wikipedia_scm]: http://en.wikipedia.org/wiki/List_of_revision_control_software#Free\n[link_git_cloning]: http://www.kernel.org/pub/software/scm/git/docs/git-clone.html\n[link_freedom_app]: https://freedom.to/\n","source":"_posts/androidwatermark.md","raw":"---\ntitle: My Experience Publishing My First Android App, Six Things I Learned\ndate: 2011-06-04\ntags: [java, android, mobile]\n---\nHere are some of the things I learned about developing for the [Android][link_android_dev_home] platform from publishing my first app which I hope will useful to others who want to but haven’t started developing for the Android platform.\n\nIts currently in the free beta mode(with ads) right now as I plan on adding more features later such as the ability to design/store your own logos as preferences and an actual user interface that uses the [action bar design pattern][link_android_dev_actionbar] which is so popular nowadays.\n\n### 1) Not knowing Java is not an excuse. \n\nIf you don’t know any Java but you’re proficient in a C-based or C-styled syntax programming language such as C#, C++, PHP  and or any others then you can easily absorb Java as you browse Android tutorials, read Android dev books and begin to poke around with the Android API. I myself only knew C++ but developing for the Android platform quickly allowed me to dive into Java and learn the fundamentals of such things as proper exception handling(ok I admit that I do use exceptions in C++ but I tend to use my own exception class rather than the standard library one); how garbage collected languages differ from non garbage collected ones, the [Eclipse IDE][link_eclipse_ide], the difference between classes and interfaces, how NULL referenced objects are treated by the JVM, lock based synchronization and much more. In short, developing an Android app was a great introduction to the Java programming language.\n\n### 2) Find a great intro level Android development book to supplement online tutorials.\n\nMost of the time when I started out I found that online tutorials and forum posts were often way too specific and narrowly focused to gain much useful knowledge from as a beginning Android dev. What I mean is that comments were often left out(necessary to understand the design choices) and or the solution posted was just a snippet of functionality and not something your could copy and paste into Eclipse and compile (unless you already knew what you were doing). Although there were a few good exceptions, I was only able to actually make sense of many online tutorials and such after I understood the basics of Android development. This also saves you the embarrassment of annoying people online when you ask questions which could be easily answered by a quick Google search or better yet printed in the first chapter of any of the numerous introductory level Android books.\n\nIf you want to know which ones I read, I found [Teach Yourself Android Application Development in 24 Hours][link_teach_yourself_android_in_24] to be very useful since each chapter(written to be read in 1 hour intervals) was very succinct and got straight to the point. In addition the Q&A sections at the end of the chapters gave me a chance to practice and try out new things and prevented me from just engaging in passive learning. I also used [APress Pro Android 2][link_apress_android_pro_2] which despite its less than stellar 3 out of 5 star rating(4 stars is my usual minimum) on Amazon.com it was a great source for fully functioning mini apps that you can run on your phone and the entire book covered almost all of the Android API.\n\n### 3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends. \n\nWhile developing my first Android app I struggled early on to properly deal with sudden program crashes and JVM out of memory exceptions being triggered. At first I was at lost, until I learned how to properly use the debugging tools which were bundled with the Android SDK installation. This isn’t necessarily a blog post on debugging techniques but here is one great tutorial I found which helped me through some difficult times, or how you should learn to properly \n\n### 4) Start using version control software if you haven’t been doing so.\n\nI’m going to be honest here but prior to becoming comfortable with version control, I would add new features to my existing app by doing the following.\n\n- Create a new project in Eclipse titled “New feature X”\n\n- Copy all necessary files from the existing project over to the new one\n\n- Implement the feature and debug\n\n- If the feature worked, copy and paste it back extra carefully into the original hoping that no squiggly red underlines would show up in the IDE\n\n- ???\n\n- Compile!!!!\n\nAfter a while I just grew tired of the fact that adding new features such as trying out multi-touch zooming and or testing out an alternative layout scheme became so immensely difficult and error prone(copy and pasting into the wrong Java class file and or creating variable naming conflicts). So I did a little research and found a neat tool called that was perfectly suited to my needs, a cool piece of software called [Git][link_git_scm]. Go check it out, it runs well on all the popular OSs and you will just plain grow to appreciate version control as much as I now do. Ok I know [Git][link_git_scm] isn’t the only version control software around, [wikipedia][link_wikipedia_scm] has a list of free ones but its incredibly easy to learn and crazy powerful once you get started(no pun intended) using its advanced capabilities such as [cloning][link_git_cloning].\n\n### 5) Whenever possible, debug on a real handset not the emulator.\n\nThere really isn’t much to say here but until you can actually run your application on a real handset you may never know if your layouts will display properly out in the wild. In addition if anyone you know has a different Android model ask them to try out your app and get some early feedback.\n\n### 6) Start a code journal or something; become influential.\n\nThis might sound a little cheezy or evoke just a “yeah whatever” type of reaction but it pays to set clear deadlines for yourself and to not slack off. Writing an Android application can quickly go from just a weekend hack to a month long ordeal depending on your app. Although you could go to the extreme case and install productivity software to [lock down your web browser during working hours][link_freedom_app], my alternative and the one I highly recommend is to start a code journal. A code journal to me at least is just a real journal(not this blog) where you jot down ideas about features you wish to implement or where you just plain brainstorm new web apps or something.\n\n[link_android_dev_home]: http://developer.android.com/index.html\n[link_android_dev_actionbar]: http://developer.android.com/guide/topics/ui/actionbar.html\n[link_eclipse_ide]: http://www.eclipse.org\n[link_apress_android_pro_2]: http://www.amazon.com/Pro-Android-Sayed-Y-Hashimi/dp/1430226595/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1307061714&amp;sr=1-1\n[link_teach_yourself_android_in_24]: http://www.amazon.com/Teach-Yourself-Android-Application-Development/dp/0321673352\n[link_git_scm]: http://git-scm.com/\n[link_wikipedia_scm]: http://en.wikipedia.org/wiki/List_of_revision_control_software#Free\n[link_git_cloning]: http://www.kernel.org/pub/software/scm/git/docs/git-clone.html\n[link_freedom_app]: https://freedom.to/\n","slug":"androidwatermark","published":1,"updated":"2017-04-10T05:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr88000itswv76rnw2lo","content":"<p>Here are some of the things I learned about developing for the <a href=\"http://developer.android.com/index.html\" target=\"_blank\" rel=\"external\">Android</a> platform from publishing my first app which I hope will useful to others who want to but haven’t started developing for the Android platform.</p>\n<p>Its currently in the free beta mode(with ads) right now as I plan on adding more features later such as the ability to design/store your own logos as preferences and an actual user interface that uses the <a href=\"http://developer.android.com/guide/topics/ui/actionbar.html\" target=\"_blank\" rel=\"external\">action bar design pattern</a> which is so popular nowadays.</p>\n<h3 id=\"1-Not-knowing-Java-is-not-an-excuse\"><a href=\"#1-Not-knowing-Java-is-not-an-excuse\" class=\"headerlink\" title=\"1) Not knowing Java is not an excuse.\"></a>1) Not knowing Java is not an excuse.</h3><p>If you don’t know any Java but you’re proficient in a C-based or C-styled syntax programming language such as C#, C++, PHP  and or any others then you can easily absorb Java as you browse Android tutorials, read Android dev books and begin to poke around with the Android API. I myself only knew C++ but developing for the Android platform quickly allowed me to dive into Java and learn the fundamentals of such things as proper exception handling(ok I admit that I do use exceptions in C++ but I tend to use my own exception class rather than the standard library one); how garbage collected languages differ from non garbage collected ones, the <a href=\"http://www.eclipse.org\" target=\"_blank\" rel=\"external\">Eclipse IDE</a>, the difference between classes and interfaces, how NULL referenced objects are treated by the JVM, lock based synchronization and much more. In short, developing an Android app was a great introduction to the Java programming language.</p>\n<h3 id=\"2-Find-a-great-intro-level-Android-development-book-to-supplement-online-tutorials\"><a href=\"#2-Find-a-great-intro-level-Android-development-book-to-supplement-online-tutorials\" class=\"headerlink\" title=\"2) Find a great intro level Android development book to supplement online tutorials.\"></a>2) Find a great intro level Android development book to supplement online tutorials.</h3><p>Most of the time when I started out I found that online tutorials and forum posts were often way too specific and narrowly focused to gain much useful knowledge from as a beginning Android dev. What I mean is that comments were often left out(necessary to understand the design choices) and or the solution posted was just a snippet of functionality and not something your could copy and paste into Eclipse and compile (unless you already knew what you were doing). Although there were a few good exceptions, I was only able to actually make sense of many online tutorials and such after I understood the basics of Android development. This also saves you the embarrassment of annoying people online when you ask questions which could be easily answered by a quick Google search or better yet printed in the first chapter of any of the numerous introductory level Android books.</p>\n<p>If you want to know which ones I read, I found <a href=\"http://www.amazon.com/Teach-Yourself-Android-Application-Development/dp/0321673352\" target=\"_blank\" rel=\"external\">Teach Yourself Android Application Development in 24 Hours</a> to be very useful since each chapter(written to be read in 1 hour intervals) was very succinct and got straight to the point. In addition the Q&amp;A sections at the end of the chapters gave me a chance to practice and try out new things and prevented me from just engaging in passive learning. I also used <a href=\"http://www.amazon.com/Pro-Android-Sayed-Y-Hashimi/dp/1430226595/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1307061714&amp;sr=1-1\" target=\"_blank\" rel=\"external\">APress Pro Android 2</a> which despite its less than stellar 3 out of 5 star rating(4 stars is my usual minimum) on Amazon.com it was a great source for fully functioning mini apps that you can run on your phone and the entire book covered almost all of the Android API.</p>\n<h3 id=\"3-Logcat-and-the-DDMS-Dalvik-Debug-Monitor-Server-are-your-best-friends\"><a href=\"#3-Logcat-and-the-DDMS-Dalvik-Debug-Monitor-Server-are-your-best-friends\" class=\"headerlink\" title=\"3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends.\"></a>3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends.</h3><p>While developing my first Android app I struggled early on to properly deal with sudden program crashes and JVM out of memory exceptions being triggered. At first I was at lost, until I learned how to properly use the debugging tools which were bundled with the Android SDK installation. This isn’t necessarily a blog post on debugging techniques but here is one great tutorial I found which helped me through some difficult times, or how you should learn to properly </p>\n<h3 id=\"4-Start-using-version-control-software-if-you-haven’t-been-doing-so\"><a href=\"#4-Start-using-version-control-software-if-you-haven’t-been-doing-so\" class=\"headerlink\" title=\"4) Start using version control software if you haven’t been doing so.\"></a>4) Start using version control software if you haven’t been doing so.</h3><p>I’m going to be honest here but prior to becoming comfortable with version control, I would add new features to my existing app by doing the following.</p>\n<ul>\n<li><p>Create a new project in Eclipse titled “New feature X”</p>\n</li>\n<li><p>Copy all necessary files from the existing project over to the new one</p>\n</li>\n<li><p>Implement the feature and debug</p>\n</li>\n<li><p>If the feature worked, copy and paste it back extra carefully into the original hoping that no squiggly red underlines would show up in the IDE</p>\n</li>\n<li><p>???</p>\n</li>\n<li><p>Compile!!!!</p>\n</li>\n</ul>\n<p>After a while I just grew tired of the fact that adding new features such as trying out multi-touch zooming and or testing out an alternative layout scheme became so immensely difficult and error prone(copy and pasting into the wrong Java class file and or creating variable naming conflicts). So I did a little research and found a neat tool called that was perfectly suited to my needs, a cool piece of software called <a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a>. Go check it out, it runs well on all the popular OSs and you will just plain grow to appreciate version control as much as I now do. Ok I know <a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a> isn’t the only version control software around, <a href=\"http://en.wikipedia.org/wiki/List_of_revision_control_software#Free\" target=\"_blank\" rel=\"external\">wikipedia</a> has a list of free ones but its incredibly easy to learn and crazy powerful once you get started(no pun intended) using its advanced capabilities such as <a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-clone.html\" target=\"_blank\" rel=\"external\">cloning</a>.</p>\n<h3 id=\"5-Whenever-possible-debug-on-a-real-handset-not-the-emulator\"><a href=\"#5-Whenever-possible-debug-on-a-real-handset-not-the-emulator\" class=\"headerlink\" title=\"5) Whenever possible, debug on a real handset not the emulator.\"></a>5) Whenever possible, debug on a real handset not the emulator.</h3><p>There really isn’t much to say here but until you can actually run your application on a real handset you may never know if your layouts will display properly out in the wild. In addition if anyone you know has a different Android model ask them to try out your app and get some early feedback.</p>\n<h3 id=\"6-Start-a-code-journal-or-something-become-influential\"><a href=\"#6-Start-a-code-journal-or-something-become-influential\" class=\"headerlink\" title=\"6) Start a code journal or something; become influential.\"></a>6) Start a code journal or something; become influential.</h3><p>This might sound a little cheezy or evoke just a “yeah whatever” type of reaction but it pays to set clear deadlines for yourself and to not slack off. Writing an Android application can quickly go from just a weekend hack to a month long ordeal depending on your app. Although you could go to the extreme case and install productivity software to <a href=\"https://freedom.to/\" target=\"_blank\" rel=\"external\">lock down your web browser during working hours</a>, my alternative and the one I highly recommend is to start a code journal. A code journal to me at least is just a real journal(not this blog) where you jot down ideas about features you wish to implement or where you just plain brainstorm new web apps or something.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Here are some of the things I learned about developing for the <a href=\"http://developer.android.com/index.html\">Android</a> platform from publishing my first app which I hope will useful to others who want to but haven’t started developing for the Android platform.</p>\n<p>Its currently in the free beta mode(with ads) right now as I plan on adding more features later such as the ability to design/store your own logos as preferences and an actual user interface that uses the <a href=\"http://developer.android.com/guide/topics/ui/actionbar.html\">action bar design pattern</a> which is so popular nowadays.</p>\n<h3 id=\"1-Not-knowing-Java-is-not-an-excuse\"><a href=\"#1-Not-knowing-Java-is-not-an-excuse\" class=\"headerlink\" title=\"1) Not knowing Java is not an excuse.\"></a>1) Not knowing Java is not an excuse.</h3><p>If you don’t know any Java but you’re proficient in a C-based or C-styled syntax programming language such as C#, C++, PHP  and or any others then you can easily absorb Java as you browse Android tutorials, read Android dev books and begin to poke around with the Android API. I myself only knew C++ but developing for the Android platform quickly allowed me to dive into Java and learn the fundamentals of such things as proper exception handling(ok I admit that I do use exceptions in C++ but I tend to use my own exception class rather than the standard library one); how garbage collected languages differ from non garbage collected ones, the <a href=\"http://www.eclipse.org\">Eclipse IDE</a>, the difference between classes and interfaces, how NULL referenced objects are treated by the JVM, lock based synchronization and much more. In short, developing an Android app was a great introduction to the Java programming language.</p>\n<h3 id=\"2-Find-a-great-intro-level-Android-development-book-to-supplement-online-tutorials\"><a href=\"#2-Find-a-great-intro-level-Android-development-book-to-supplement-online-tutorials\" class=\"headerlink\" title=\"2) Find a great intro level Android development book to supplement online tutorials.\"></a>2) Find a great intro level Android development book to supplement online tutorials.</h3><p>Most of the time when I started out I found that online tutorials and forum posts were often way too specific and narrowly focused to gain much useful knowledge from as a beginning Android dev. What I mean is that comments were often left out(necessary to understand the design choices) and or the solution posted was just a snippet of functionality and not something your could copy and paste into Eclipse and compile (unless you already knew what you were doing). Although there were a few good exceptions, I was only able to actually make sense of many online tutorials and such after I understood the basics of Android development. This also saves you the embarrassment of annoying people online when you ask questions which could be easily answered by a quick Google search or better yet printed in the first chapter of any of the numerous introductory level Android books.</p>\n<p>If you want to know which ones I read, I found <a href=\"http://www.amazon.com/Teach-Yourself-Android-Application-Development/dp/0321673352\">Teach Yourself Android Application Development in 24 Hours</a> to be very useful since each chapter(written to be read in 1 hour intervals) was very succinct and got straight to the point. In addition the Q&amp;A sections at the end of the chapters gave me a chance to practice and try out new things and prevented me from just engaging in passive learning. I also used <a href=\"http://www.amazon.com/Pro-Android-Sayed-Y-Hashimi/dp/1430226595/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1307061714&amp;sr=1-1\">APress Pro Android 2</a> which despite its less than stellar 3 out of 5 star rating(4 stars is my usual minimum) on Amazon.com it was a great source for fully functioning mini apps that you can run on your phone and the entire book covered almost all of the Android API.</p>\n<h3 id=\"3-Logcat-and-the-DDMS-Dalvik-Debug-Monitor-Server-are-your-best-friends\"><a href=\"#3-Logcat-and-the-DDMS-Dalvik-Debug-Monitor-Server-are-your-best-friends\" class=\"headerlink\" title=\"3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends.\"></a>3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends.</h3><p>While developing my first Android app I struggled early on to properly deal with sudden program crashes and JVM out of memory exceptions being triggered. At first I was at lost, until I learned how to properly use the debugging tools which were bundled with the Android SDK installation. This isn’t necessarily a blog post on debugging techniques but here is one great tutorial I found which helped me through some difficult times, or how you should learn to properly </p>\n<h3 id=\"4-Start-using-version-control-software-if-you-haven’t-been-doing-so\"><a href=\"#4-Start-using-version-control-software-if-you-haven’t-been-doing-so\" class=\"headerlink\" title=\"4) Start using version control software if you haven’t been doing so.\"></a>4) Start using version control software if you haven’t been doing so.</h3><p>I’m going to be honest here but prior to becoming comfortable with version control, I would add new features to my existing app by doing the following.</p>\n<ul>\n<li><p>Create a new project in Eclipse titled “New feature X”</p>\n</li>\n<li><p>Copy all necessary files from the existing project over to the new one</p>\n</li>\n<li><p>Implement the feature and debug</p>\n</li>\n<li><p>If the feature worked, copy and paste it back extra carefully into the original hoping that no squiggly red underlines would show up in the IDE</p>\n</li>\n<li><p>???</p>\n</li>\n<li><p>Compile!!!!</p>\n</li>\n</ul>\n<p>After a while I just grew tired of the fact that adding new features such as trying out multi-touch zooming and or testing out an alternative layout scheme became so immensely difficult and error prone(copy and pasting into the wrong Java class file and or creating variable naming conflicts). So I did a little research and found a neat tool called that was perfectly suited to my needs, a cool piece of software called <a href=\"http://git-scm.com/\">Git</a>. Go check it out, it runs well on all the popular OSs and you will just plain grow to appreciate version control as much as I now do. Ok I know <a href=\"http://git-scm.com/\">Git</a> isn’t the only version control software around, <a href=\"http://en.wikipedia.org/wiki/List_of_revision_control_software#Free\">wikipedia</a> has a list of free ones but its incredibly easy to learn and crazy powerful once you get started(no pun intended) using its advanced capabilities such as <a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-clone.html\">cloning</a>.</p>\n<h3 id=\"5-Whenever-possible-debug-on-a-real-handset-not-the-emulator\"><a href=\"#5-Whenever-possible-debug-on-a-real-handset-not-the-emulator\" class=\"headerlink\" title=\"5) Whenever possible, debug on a real handset not the emulator.\"></a>5) Whenever possible, debug on a real handset not the emulator.</h3><p>There really isn’t much to say here but until you can actually run your application on a real handset you may never know if your layouts will display properly out in the wild. In addition if anyone you know has a different Android model ask them to try out your app and get some early feedback.</p>\n<h3 id=\"6-Start-a-code-journal-or-something-become-influential\"><a href=\"#6-Start-a-code-journal-or-something-become-influential\" class=\"headerlink\" title=\"6) Start a code journal or something; become influential.\"></a>6) Start a code journal or something; become influential.</h3><p>This might sound a little cheezy or evoke just a “yeah whatever” type of reaction but it pays to set clear deadlines for yourself and to not slack off. Writing an Android application can quickly go from just a weekend hack to a month long ordeal depending on your app. Although you could go to the extreme case and install productivity software to <a href=\"https://freedom.to/\">lock down your web browser during working hours</a>, my alternative and the one I highly recommend is to start a code journal. A code journal to me at least is just a real journal(not this blog) where you jot down ideas about features you wish to implement or where you just plain brainstorm new web apps or something.</p>\n"},{"title":"A lightweight SqlLite Android tutorial","date":"2011-06-24T07:00:00.000Z","_content":"In this tutorial we'll step through the process of using the Android's builtin support for SqlLite to store a password and retrive it in a rather interesting attempt at creating a guest dialer application. When I first imagined a guest dialer I had in mind an application that would allow you to let someone use your phone without giving them total access to your incomming messages and other sensitive data. However, a lock-in application basically classifies as a virus when you think about it so whatever... at least I learned about the SqlLite api ^_^.\n","source":"_posts/guestdialer.md","raw":"---\ntitle: A lightweight SqlLite Android tutorial\ndate: 2011-06-24\ncategories: [tutorial]\ntags: [java, android]\n---\nIn this tutorial we'll step through the process of using the Android's builtin support for SqlLite to store a password and retrive it in a rather interesting attempt at creating a guest dialer application. When I first imagined a guest dialer I had in mind an application that would allow you to let someone use your phone without giving them total access to your incomming messages and other sensitive data. However, a lock-in application basically classifies as a virus when you think about it so whatever... at least I learned about the SqlLite api ^_^.\n","slug":"guestdialer","published":1,"updated":"2017-04-11T06:10:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr8b000jtswv0la5ehgs","content":"<p>In this tutorial we’ll step through the process of using the Android’s builtin support for SqlLite to store a password and retrive it in a rather interesting attempt at creating a guest dialer application. When I first imagined a guest dialer I had in mind an application that would allow you to let someone use your phone without giving them total access to your incomming messages and other sensitive data. However, a lock-in application basically classifies as a virus when you think about it so whatever… at least I learned about the SqlLite api ^_^.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In this tutorial we’ll step through the process of using the Android’s builtin support for SqlLite to store a password and retrive it in a rather interesting attempt at creating a guest dialer application. When I first imagined a guest dialer I had in mind an application that would allow you to let someone use your phone without giving them total access to your incomming messages and other sensitive data. However, a lock-in application basically classifies as a virus when you think about it so whatever… at least I learned about the SqlLite api ^_^.</p>\n"},{"title":"Ruby On Rails Blog Project Live Demo","date":"2011-06-10T07:00:00.000Z","_content":"A while ago I decided to get my feet wet with the awesome Ruby On Rails MVC framework for developing dynamic databased backed web applications. In this article you can see a short project I developed that highlights a typical blog you can create using the Ruby On Rails framework.\n","source":"_posts/rubyonrailsblogdemo.md","raw":"---\ntitle: Ruby On Rails Blog Project Live Demo\ndate: 2011-06-10\ncategories: [ruby-on-rails]\ntags: [ruby, javascript]\n---\nA while ago I decided to get my feet wet with the awesome Ruby On Rails MVC framework for developing dynamic databased backed web applications. In this article you can see a short project I developed that highlights a typical blog you can create using the Ruby On Rails framework.\n","slug":"rubyonrailsblogdemo","published":1,"updated":"2017-04-11T04:00:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr8t000ltswv44cxsxmf","content":"<p>A while ago I decided to get my feet wet with the awesome Ruby On Rails MVC framework for developing dynamic databased backed web applications. In this article you can see a short project I developed that highlights a typical blog you can create using the Ruby On Rails framework.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>A while ago I decided to get my feet wet with the awesome Ruby On Rails MVC framework for developing dynamic databased backed web applications. In this article you can see a short project I developed that highlights a typical blog you can create using the Ruby On Rails framework.</p>\n"},{"title":"Build A Text Based Multiplayer RPG Part I","date":"2011-06-05T07:00:00.000Z","_content":"[Click here for part II][link_part_2]\n\n# Intro\n\nThis is the first article in a multi-part series on how to develop a console based multiplayer MUD style RPG game. By the end of this series you will have a fully working console app that will run a typical client server model desktop application on Windows. This tutorial requires the Microsoft Visual C++ Compiler.\n\n## Review Material\n\n<a href=\"http://cslibrary.stanford.edu/102/\">Click here for a review on pointers if you need to brush up.</a>\n<a href=\"http://www.cprogramming.com/tutorial/stl/iterators.html\">Click here for a review on C++ iterators, if you can’t follow it then read the pointer review first.</a>\n\n## Background\n\nIf you happen to be curious as to what exactly a “text based role playing game(rpg)” is in my own words a text based rpg is simply a game in which the player or players input commands into a terminal and are fed back a description of the actions which took place within the game world. <a href=\"http://en.wikipedia.org/wiki/Online_text-based_role-playing_game\">For more info see the Wikipedia entry on it</a>.\n\nOk, now that we’re all familiar with the concept, lets first review why anyone would even want to build a text-based rpg in todays world of fancy <a href=\"http://us.battle.net/wow/en/\">3D graphics, special effects and semi-realistic computer rendered player models</a>. I believe text based rpgs are a great start for programmers who want to build more serious/professional grade rpgs for several reasons. First, text based rpgs allow programmers to focus purely on the game engine itself without the overhead of graphics and or animation.\n\nSecond, the core of any role playing game relies on the sophistication of its <a href=\"http://en.wikipedia.org/wiki/Role-playing_game_system\">role playing system</a>; or the game mechanics. Without a unique and interesting core system, gamers will quickly dismiss your rpg as a rehash or just another D&D clone.\n\nLastly, from a programming perspective it’s a great excuse to practice data structures, socket programming and object oriented design. In this first part of series we’re going to begin by writing out the code base for the header class which will hold all the definitions for the objects which will appear within our game. However before we even write a single line of code lets first think about how we want all the game objects to fit together. Take a look at the picture below, and take note of all the objects that are identified. We have the <em>player</em>, <em>monster</em>, <em>items</em>, <em>dungeon</em> and <em>terminal </em>objects which are all clearly identified within our simple mock up. Although those won’t be our exact classes that we’ll code in a moment, the rough picture just lets us better understand the model.\n<p style=\"text-align: center;\"><a class=\"lightbox\" href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\"><img class=\"aligncenter size-thumbnail wp-image-92\" src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\" alt=\"Photo\" width=\"150\" height=\"150\" /></a></p>\n\n## Initial Code\n\nNow lets start coding; call this file <strong>database.h,</strong> why we chose to name it database will be important in the future once we get to the multiplayer aspects of the game but enough talk.\n\n```c\n#include<iostream>\n#include<string>\n#include<list>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<iterator>\n#include<locale>\n#include<sstream>\n\nusing namespace std ;\n\nnamespace MUD\n{\n  class Player ;\n  class Item ;\n  class Room ;\n  class Dungeon ;\n  class Monster ;\n  class Dispatch ;\n  class Filter ;\n```\n\nOk so now we have our libraries all included and the forward declarations for our classes planned out. Don’t worry about the inclusion of the not so common libraries such as locale, and sstream yet as we’ll introduce them in the future.\n\n\n## Item and Monster Classes\n\nTo start off we begin with the Item class. The item class as you can guess will represent items within our rpg game. Due to this being a simple rpg game we will restrict ourselves to just three types; weapons, armor and health. At this moment you might be wondering why don’t we just make three different classes, one for each item. However, as you can see below, we’ll just stick with this one class and generalize it.\n\n```c\n    class Item\n    {\n      public:\n        enum TYPE { WEAPON, ARMOR, HEALTH } ;\n\n        Item( string name, Item::TYPE type, int power, int vitality, int health ) ;\n        Item operator=( Item& newItem ) ;\n        Item( void ) ;\n        //~Item()\n\n        void setPower( int value ) ;\n        int getPower( void ) ;\n\n        void setVitality( int value ) ;\n        int getVitality( void ) ;\n\n        void setHealth( int value ) ;\n        int getHealth( void ) ;\n\n        void setName( string name ) ;\n        string getName( void ) ;\n\n        void setType( TYPE newType ) ;\n        TYPE getType( void ) ;\n\n        string mName ;\n        int mPower ;\n        int mVitality ;\n        int mHealth ;\n        TYPE mType ;\n        bool mAvailiable ;\n    } ;\n```\n\nThe item class as you can look at above uses six different attributes, name, power, vitality, health, type and availability. We’ll discuss each of those further when we get to writing the actual methods for the class but for now try and think about how each of those attributes relate to the three different enum types or weapon, armor and health. Next, we are going to look at the monster class. This class being as its represents the monsters in our game should meet the following requirements. Monsters should have some measurement of life or hit points, a strength or attack power, a defense rating, a unique name and of course an indicator of whether or not they are currently in combat.\n\n```c\n    class Monster\n    {\n      public:\n        Monster( string name, int maxHp, int strength, int defence ) ;\n        //~Monster() \n\n        void setHp( int newHp ) ;\n        int getHp( void ) ;\n\n        void setStrength( int newStrength ) ;\n        int getStrength( void ) ;\n\n        void setDefence( int newDefence ) ;\n        int getDefence( void ) ;\n\n        void setName( string newName ) ;\n        string getName( void ) ;\n\n        void setMaxHp( int newMaxHp ) ;\n\n        int mMaxHp ;\n        int mHp ;\n        int mStrength ;\n        int mDefence ;\n        string mName ;\n        bool inCombat ;\n    } ;\n```\n\n## The Room Class and Player Classes\n\nFor more sophisticated games our monster class would probably have attributes for magic, speed, steal-able items and experience points rewarded if your into the experience points style of rpgs. But for this simple game; strength, hp and defense will do. Moving along we are ready to begin sketching out the code for the room class. The room class is a class which will represent a single room within our dungeon and will also contain items, monsters and allow players to traverse them. In order to best represent the interconnected nature of the rooms as they would appear in our game setting the data structure of choice will be a simple 4-way(technically 8-way since each rooms allows backtracking) linked list with each direction being the familiar north, south, east and west. When I first designed this application several months ago the room class was by far the most difficult class conceptually since most of the game revolves around traversing the rooms, finding items(within rooms), slaying monsters(again within rooms), updating the state of the player(moving about rooms) and keeping the state of the dungeon intact(managing the rooms). As you can tell the room class is key to this simple game we’re making.\n\n```c\n    class Room\n    {\n      public:\n        Room( string name, string description, Item* item = NULL ) ;\n        //Room( void ) ;\n        //~Room()\n\n        typedef bool success ;\n\n        void addMonster( Monster* newMonster ) ;\n        Monster& getMonsterRef( string monsterName ) ;\n        success killMonster( string monsterName ) ;\n        void itemTaken( void ) ;\n        string searchResponse( void ) ;\n        success link( char direction, Room& room ) ;\n        Room& north( void ) ;\n        Room& south( void ) ;\n        Room& east( void ) ;\n        Room& west( void ) ;\n\n        void setName( string newName ) ;\n\n        void setDescription( string newDescription ) ;\n        string getDescription( void ) ;\n\n        void setItem( Item* newItem ) ;\n\n        Item* mItem ;\n        Room* mNorth ;\n        Room* mSouth ;\n        Room* mEast ;\n        Room* mWest ;\n        list< Monster* > mMonsters ;\n        string mName ;\n        string mDescription ;\n    } ;\n```\n\nNext up is the player class, although for this simple game the player class resembles the monster class to an exceedingly high degree and you might be thinking “why are we not using inheritance from a general base class that has hp, str, def and such”. The answer to that question was due to me having originally planned out the player class to have multiple sub classes representing jobs such wizard, knight, archer, monk, ninja and such and to have different weapons and movement bonuses and so on until I realized that it was getting too large. So I cut all that stuff out and decided to keep things simple.\n\n```c\n    class Player\n    {\n      public:\n        Player( string name, Room* start = NULL ) ;\n        //~Player()\n\n        typedef bool dead ;\n\n        void setHp( int newHp ) ;\n        int getHp( void ) ;\n\n        void setStrength( int newStrength ) ;\n        int getStrength( void ) ;\n\n        void setDefence( int newDefence ) ;\n        int getDefence( void ) ;\n\n        string getLocation( void ) ;\n\n        void setName( string newName ) ;\n        string getName( void ) const ;\n\n        string equip( string itemName ) ;\n        string attack( string monsterName ) ;\n        string move( char direction ) ;\n        string search( void ) ;\n        dead death( void ) ;\n\n        int mMaxHp ;\n        int mHp ;\n        int mStrength ;\n        int mDefence ;\n        Room* mLocation ;\n        string mName ;\n        Item* mWeapon ;\n        Item* mArmor ;\n        dead mLife ;\n    } ;\n```\n\n## The Dungeon Class\n\nNow here is where the class design gets a little tricky. The dungeon class, the class we’re coding next will make use of two std::vector<> objects to hold both the current players and the references to the various rooms within the game. Also an interesting method within the dungeon class which we’ll describe in detail later on in this tutorial series is the combatLoop() method. If you recall from earlier, the player class already has an attack() method so why does the entire dungeon need to be aware of which players are in combat? Remember that the goal of this tutorial is a multiplayer game so important aspects of the dungeon such as which players are alive and which monsters have been slain should be propagated to each player. Ok, so here is the code.\n\n```c\nclass Dungeon\n{\n  public:\n    Dungeon( int maxPlayers, int maxRooms ) ;\n    //~Dungeon()\n\n    bool isComplete( void ) ;\n    string addPlayer( Player* newPlayer ) ;\n    string addRoom( Room* newRoom ) ;\n    string removePlayer( string playerName ) ;\n    void generatePlayerStats( Player* newPlayer ) ;\n    void combatLoop( Player& hero, Monster& villain ) ;\n    string* playerStatus( Player& player ) ;\n    void displayHelp( void ) ;\n\n    int mMaxRooms ;\n    int mMaxPlayers ;\n    vector< Room* > mRooms ;\n    vector< Player* > mPlayers ;\n} ;\n```\n\n## Utility helpers, \"Filter\" and \"Dispatch\"\n\nLastly there are two utility classes I wrote to help facilitate the ever important parsing of the user inputs into the game terminal. Being that this game is text based, players will undoubtedly type in all sorts of crazy commands and awkward inputs. So the design of the two utility classes dispatch and filter were put in place to basically filter all incoming messages to ensure validity and to dispatch valid messages based on a simple protocol I crafted to handle commands. In other words, in order to avoid players attempting to cheat the game say by equipping from rooms which they currently don’t occupy or grabbing all the health items from other players the filter class serves to clean up dirty commands before they even reach the dungeon class.\n\n```c\nclass Filter\n{\n  public:\n    typedef bool valid ;\n\n    valid validateMessage( string message ) ;\n    string chat( string message ) ;\n} ;\n\nclass Dispatch\n{\n  public:\n    char extractCommand( string fromFilter ) ;\n    string extractValue( string fromFilter ) ;\n} ;\n```\n\nOk folks that’s about all for now; just remember to stay tuned for the next parts of this tutorial which I’ll roll out when I get the time.\n\n-Thanks-\n\nOh and here is the whole code if you're in a hurry\n\n```c\n// database.h\n#include<iostream>\n#include<string>\n#include<list>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<iterator>\n#include<locale>\n#include<sstream>\n\nusing namespace std ;\n\nnamespace MUD\n{\n  class Player ;\n  class Item ;\n  class Room ;\n  class Dungeon ;\n  class Monster ;\n  class Dispatch ;\n  class Filter ;\n\n  class Item\n  {\n    public:\n      enum TYPE { WEAPON, ARMOR, HEALTH } ;\n\n      Item( string name, Item::TYPE type, int power, int vitality, int health ) ;\n      Item operator=( Item& newItem ) ;\n      Item( void ) ;\n      //~Item()\n\n      void setPower( int value ) ;\n      int getPower( void ) ;\n\n      void setVitality( int value ) ;\n      int getVitality( void ) ;\n\n      void setHealth( int value ) ;\n      int getHealth( void ) ;\n\n      void setName( string name ) ;\n      string getName( void ) ;\n\n      void setType( TYPE newType ) ;\n      TYPE getType( void ) ;\n\n      string mName ;\n      int mPower ;\n      int mVitality ;\n      int mHealth ;\n      TYPE mType ;\n      bool mAvailiable ;\n  } ;\n\n  class Monster\n  {\n    public:\n      Monster( string name, int maxHp, int strength, int defence ) ;\n      //~Monster() \n\n      void setHp( int newHp ) ;\n      int getHp( void ) ;\n\n      void setStrength( int newStrength ) ;\n      int getStrength( void ) ;\n\n      void setDefence( int newDefence ) ;\n      int getDefence( void ) ;\n\n      void setName( string newName ) ;\n      string getName( void ) ;\n\n      void setMaxHp( int newMaxHp ) ;\n\n      int mMaxHp ;\n      int mHp ;\n      int mStrength ;\n      int mDefence ;\n      string mName ;\n      bool inCombat ;\n  } ;\n\n  class Room \n  {\n    public:\n      Room( string name, string description, Item* item = NULL ) ;\n      //Room( void ) ;\n      //~Room()\n\n      typedef bool success ;\n\n      void addMonster( Monster* newMonster ) ;\n      Monster& getMonsterRef( string monsterName ) ;\n      success killMonster( string monsterName ) ;\n      void itemTaken( void ) ;\n      string searchResponse( void ) ;\n      success link( char direction, Room& room ) ;\n      Room& north( void ) ;\n      Room& south( void ) ;\n      Room& east( void ) ;\n      Room& west( void ) ;\n\n      void setName( string newName ) ;\n\n      void setDescription( string newDescription ) ;\n      string getDescription( void ) ;\n\n      void setItem( Item* newItem ) ;\n\n      Item* mItem ;\n      Room* mNorth ;\n      Room* mSouth ;\n      Room* mEast ;\n      Room* mWest ;\n      list< Monster* > mMonsters ;\n      string mName ;\n      string mDescription ;\n  } ;\n\n  class Player\n  {\n    public:\n      Player( string name, Room* start = NULL ) ;\n      //~Player()\n\n      typedef bool dead ;\n\n      void setHp( int newHp ) ;\n      int getHp( void ) ;\n\n      void setStrength( int newStrength ) ;\n      int getStrength( void ) ;\n\n      void setDefence( int newDefence ) ;\n      int getDefence( void ) ;\n\n      string getLocation( void ) ;\n\n      void setName( string newName ) ;\n      string getName( void ) const ;\n\n      string equip( string itemName ) ;\n      string attack( string monsterName ) ;\n      string move( char direction ) ;\n      string search( void ) ;\n      dead death( void ) ;\n\n      int mMaxHp ;\n      int mHp ;\n      int mStrength ;\n      int mDefence ;\n      Room* mLocation ;\n      string mName ;\n      Item* mWeapon ;\n      Item* mArmor ;\n      dead mLife ;\n  } ;\n\n  class Dungeon\n  {\n    public:\n      Dungeon( int maxPlayers, int maxRooms ) ;\n      //~Dungeon()\n\n      bool isComplete( void ) ;\n      string addPlayer( Player* newPlayer ) ;\n      string addRoom( Room* newRoom ) ;\n      string removePlayer( string playerName ) ;\n      void generatePlayerStats( Player* newPlayer ) ;\n      void combatLoop( Player& hero, Monster& villain ) ;\n      string* playerStatus( Player& player ) ;\n      void displayHelp( void ) ;\n\n      int mMaxRooms ;\n      int mMaxPlayers ;\n      vector< Room* > mRooms ;\n      vector< Player* > mPlayers ;\n  } ;\n\n  class Filter\n  {\n    public:\n      typedef bool valid ;\n\n      valid validateMessage( string message ) ;\n      string chat( string message ) ;\n  } ;\n\n  class Dispatch\n  {\n    public:\n      char extractCommand( string fromFilter ) ;\n      string extractValue( string fromFilter ) ;\n  } ;\n}\n```\n\n[Click here for part II][link_part_2]\n\n[link_part_2]: /2011/06/08/textbasedrpgpart2\n","source":"_posts/textbasedrpgpart1.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part I\ndate: 2011-06-05\ncategories: [tutorial]\ntags: [cpp]\n---\n[Click here for part II][link_part_2]\n\n# Intro\n\nThis is the first article in a multi-part series on how to develop a console based multiplayer MUD style RPG game. By the end of this series you will have a fully working console app that will run a typical client server model desktop application on Windows. This tutorial requires the Microsoft Visual C++ Compiler.\n\n## Review Material\n\n<a href=\"http://cslibrary.stanford.edu/102/\">Click here for a review on pointers if you need to brush up.</a>\n<a href=\"http://www.cprogramming.com/tutorial/stl/iterators.html\">Click here for a review on C++ iterators, if you can’t follow it then read the pointer review first.</a>\n\n## Background\n\nIf you happen to be curious as to what exactly a “text based role playing game(rpg)” is in my own words a text based rpg is simply a game in which the player or players input commands into a terminal and are fed back a description of the actions which took place within the game world. <a href=\"http://en.wikipedia.org/wiki/Online_text-based_role-playing_game\">For more info see the Wikipedia entry on it</a>.\n\nOk, now that we’re all familiar with the concept, lets first review why anyone would even want to build a text-based rpg in todays world of fancy <a href=\"http://us.battle.net/wow/en/\">3D graphics, special effects and semi-realistic computer rendered player models</a>. I believe text based rpgs are a great start for programmers who want to build more serious/professional grade rpgs for several reasons. First, text based rpgs allow programmers to focus purely on the game engine itself without the overhead of graphics and or animation.\n\nSecond, the core of any role playing game relies on the sophistication of its <a href=\"http://en.wikipedia.org/wiki/Role-playing_game_system\">role playing system</a>; or the game mechanics. Without a unique and interesting core system, gamers will quickly dismiss your rpg as a rehash or just another D&D clone.\n\nLastly, from a programming perspective it’s a great excuse to practice data structures, socket programming and object oriented design. In this first part of series we’re going to begin by writing out the code base for the header class which will hold all the definitions for the objects which will appear within our game. However before we even write a single line of code lets first think about how we want all the game objects to fit together. Take a look at the picture below, and take note of all the objects that are identified. We have the <em>player</em>, <em>monster</em>, <em>items</em>, <em>dungeon</em> and <em>terminal </em>objects which are all clearly identified within our simple mock up. Although those won’t be our exact classes that we’ll code in a moment, the rough picture just lets us better understand the model.\n<p style=\"text-align: center;\"><a class=\"lightbox\" href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\"><img class=\"aligncenter size-thumbnail wp-image-92\" src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\" alt=\"Photo\" width=\"150\" height=\"150\" /></a></p>\n\n## Initial Code\n\nNow lets start coding; call this file <strong>database.h,</strong> why we chose to name it database will be important in the future once we get to the multiplayer aspects of the game but enough talk.\n\n```c\n#include<iostream>\n#include<string>\n#include<list>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<iterator>\n#include<locale>\n#include<sstream>\n\nusing namespace std ;\n\nnamespace MUD\n{\n  class Player ;\n  class Item ;\n  class Room ;\n  class Dungeon ;\n  class Monster ;\n  class Dispatch ;\n  class Filter ;\n```\n\nOk so now we have our libraries all included and the forward declarations for our classes planned out. Don’t worry about the inclusion of the not so common libraries such as locale, and sstream yet as we’ll introduce them in the future.\n\n\n## Item and Monster Classes\n\nTo start off we begin with the Item class. The item class as you can guess will represent items within our rpg game. Due to this being a simple rpg game we will restrict ourselves to just three types; weapons, armor and health. At this moment you might be wondering why don’t we just make three different classes, one for each item. However, as you can see below, we’ll just stick with this one class and generalize it.\n\n```c\n    class Item\n    {\n      public:\n        enum TYPE { WEAPON, ARMOR, HEALTH } ;\n\n        Item( string name, Item::TYPE type, int power, int vitality, int health ) ;\n        Item operator=( Item& newItem ) ;\n        Item( void ) ;\n        //~Item()\n\n        void setPower( int value ) ;\n        int getPower( void ) ;\n\n        void setVitality( int value ) ;\n        int getVitality( void ) ;\n\n        void setHealth( int value ) ;\n        int getHealth( void ) ;\n\n        void setName( string name ) ;\n        string getName( void ) ;\n\n        void setType( TYPE newType ) ;\n        TYPE getType( void ) ;\n\n        string mName ;\n        int mPower ;\n        int mVitality ;\n        int mHealth ;\n        TYPE mType ;\n        bool mAvailiable ;\n    } ;\n```\n\nThe item class as you can look at above uses six different attributes, name, power, vitality, health, type and availability. We’ll discuss each of those further when we get to writing the actual methods for the class but for now try and think about how each of those attributes relate to the three different enum types or weapon, armor and health. Next, we are going to look at the monster class. This class being as its represents the monsters in our game should meet the following requirements. Monsters should have some measurement of life or hit points, a strength or attack power, a defense rating, a unique name and of course an indicator of whether or not they are currently in combat.\n\n```c\n    class Monster\n    {\n      public:\n        Monster( string name, int maxHp, int strength, int defence ) ;\n        //~Monster() \n\n        void setHp( int newHp ) ;\n        int getHp( void ) ;\n\n        void setStrength( int newStrength ) ;\n        int getStrength( void ) ;\n\n        void setDefence( int newDefence ) ;\n        int getDefence( void ) ;\n\n        void setName( string newName ) ;\n        string getName( void ) ;\n\n        void setMaxHp( int newMaxHp ) ;\n\n        int mMaxHp ;\n        int mHp ;\n        int mStrength ;\n        int mDefence ;\n        string mName ;\n        bool inCombat ;\n    } ;\n```\n\n## The Room Class and Player Classes\n\nFor more sophisticated games our monster class would probably have attributes for magic, speed, steal-able items and experience points rewarded if your into the experience points style of rpgs. But for this simple game; strength, hp and defense will do. Moving along we are ready to begin sketching out the code for the room class. The room class is a class which will represent a single room within our dungeon and will also contain items, monsters and allow players to traverse them. In order to best represent the interconnected nature of the rooms as they would appear in our game setting the data structure of choice will be a simple 4-way(technically 8-way since each rooms allows backtracking) linked list with each direction being the familiar north, south, east and west. When I first designed this application several months ago the room class was by far the most difficult class conceptually since most of the game revolves around traversing the rooms, finding items(within rooms), slaying monsters(again within rooms), updating the state of the player(moving about rooms) and keeping the state of the dungeon intact(managing the rooms). As you can tell the room class is key to this simple game we’re making.\n\n```c\n    class Room\n    {\n      public:\n        Room( string name, string description, Item* item = NULL ) ;\n        //Room( void ) ;\n        //~Room()\n\n        typedef bool success ;\n\n        void addMonster( Monster* newMonster ) ;\n        Monster& getMonsterRef( string monsterName ) ;\n        success killMonster( string monsterName ) ;\n        void itemTaken( void ) ;\n        string searchResponse( void ) ;\n        success link( char direction, Room& room ) ;\n        Room& north( void ) ;\n        Room& south( void ) ;\n        Room& east( void ) ;\n        Room& west( void ) ;\n\n        void setName( string newName ) ;\n\n        void setDescription( string newDescription ) ;\n        string getDescription( void ) ;\n\n        void setItem( Item* newItem ) ;\n\n        Item* mItem ;\n        Room* mNorth ;\n        Room* mSouth ;\n        Room* mEast ;\n        Room* mWest ;\n        list< Monster* > mMonsters ;\n        string mName ;\n        string mDescription ;\n    } ;\n```\n\nNext up is the player class, although for this simple game the player class resembles the monster class to an exceedingly high degree and you might be thinking “why are we not using inheritance from a general base class that has hp, str, def and such”. The answer to that question was due to me having originally planned out the player class to have multiple sub classes representing jobs such wizard, knight, archer, monk, ninja and such and to have different weapons and movement bonuses and so on until I realized that it was getting too large. So I cut all that stuff out and decided to keep things simple.\n\n```c\n    class Player\n    {\n      public:\n        Player( string name, Room* start = NULL ) ;\n        //~Player()\n\n        typedef bool dead ;\n\n        void setHp( int newHp ) ;\n        int getHp( void ) ;\n\n        void setStrength( int newStrength ) ;\n        int getStrength( void ) ;\n\n        void setDefence( int newDefence ) ;\n        int getDefence( void ) ;\n\n        string getLocation( void ) ;\n\n        void setName( string newName ) ;\n        string getName( void ) const ;\n\n        string equip( string itemName ) ;\n        string attack( string monsterName ) ;\n        string move( char direction ) ;\n        string search( void ) ;\n        dead death( void ) ;\n\n        int mMaxHp ;\n        int mHp ;\n        int mStrength ;\n        int mDefence ;\n        Room* mLocation ;\n        string mName ;\n        Item* mWeapon ;\n        Item* mArmor ;\n        dead mLife ;\n    } ;\n```\n\n## The Dungeon Class\n\nNow here is where the class design gets a little tricky. The dungeon class, the class we’re coding next will make use of two std::vector<> objects to hold both the current players and the references to the various rooms within the game. Also an interesting method within the dungeon class which we’ll describe in detail later on in this tutorial series is the combatLoop() method. If you recall from earlier, the player class already has an attack() method so why does the entire dungeon need to be aware of which players are in combat? Remember that the goal of this tutorial is a multiplayer game so important aspects of the dungeon such as which players are alive and which monsters have been slain should be propagated to each player. Ok, so here is the code.\n\n```c\nclass Dungeon\n{\n  public:\n    Dungeon( int maxPlayers, int maxRooms ) ;\n    //~Dungeon()\n\n    bool isComplete( void ) ;\n    string addPlayer( Player* newPlayer ) ;\n    string addRoom( Room* newRoom ) ;\n    string removePlayer( string playerName ) ;\n    void generatePlayerStats( Player* newPlayer ) ;\n    void combatLoop( Player& hero, Monster& villain ) ;\n    string* playerStatus( Player& player ) ;\n    void displayHelp( void ) ;\n\n    int mMaxRooms ;\n    int mMaxPlayers ;\n    vector< Room* > mRooms ;\n    vector< Player* > mPlayers ;\n} ;\n```\n\n## Utility helpers, \"Filter\" and \"Dispatch\"\n\nLastly there are two utility classes I wrote to help facilitate the ever important parsing of the user inputs into the game terminal. Being that this game is text based, players will undoubtedly type in all sorts of crazy commands and awkward inputs. So the design of the two utility classes dispatch and filter were put in place to basically filter all incoming messages to ensure validity and to dispatch valid messages based on a simple protocol I crafted to handle commands. In other words, in order to avoid players attempting to cheat the game say by equipping from rooms which they currently don’t occupy or grabbing all the health items from other players the filter class serves to clean up dirty commands before they even reach the dungeon class.\n\n```c\nclass Filter\n{\n  public:\n    typedef bool valid ;\n\n    valid validateMessage( string message ) ;\n    string chat( string message ) ;\n} ;\n\nclass Dispatch\n{\n  public:\n    char extractCommand( string fromFilter ) ;\n    string extractValue( string fromFilter ) ;\n} ;\n```\n\nOk folks that’s about all for now; just remember to stay tuned for the next parts of this tutorial which I’ll roll out when I get the time.\n\n-Thanks-\n\nOh and here is the whole code if you're in a hurry\n\n```c\n// database.h\n#include<iostream>\n#include<string>\n#include<list>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<iterator>\n#include<locale>\n#include<sstream>\n\nusing namespace std ;\n\nnamespace MUD\n{\n  class Player ;\n  class Item ;\n  class Room ;\n  class Dungeon ;\n  class Monster ;\n  class Dispatch ;\n  class Filter ;\n\n  class Item\n  {\n    public:\n      enum TYPE { WEAPON, ARMOR, HEALTH } ;\n\n      Item( string name, Item::TYPE type, int power, int vitality, int health ) ;\n      Item operator=( Item& newItem ) ;\n      Item( void ) ;\n      //~Item()\n\n      void setPower( int value ) ;\n      int getPower( void ) ;\n\n      void setVitality( int value ) ;\n      int getVitality( void ) ;\n\n      void setHealth( int value ) ;\n      int getHealth( void ) ;\n\n      void setName( string name ) ;\n      string getName( void ) ;\n\n      void setType( TYPE newType ) ;\n      TYPE getType( void ) ;\n\n      string mName ;\n      int mPower ;\n      int mVitality ;\n      int mHealth ;\n      TYPE mType ;\n      bool mAvailiable ;\n  } ;\n\n  class Monster\n  {\n    public:\n      Monster( string name, int maxHp, int strength, int defence ) ;\n      //~Monster() \n\n      void setHp( int newHp ) ;\n      int getHp( void ) ;\n\n      void setStrength( int newStrength ) ;\n      int getStrength( void ) ;\n\n      void setDefence( int newDefence ) ;\n      int getDefence( void ) ;\n\n      void setName( string newName ) ;\n      string getName( void ) ;\n\n      void setMaxHp( int newMaxHp ) ;\n\n      int mMaxHp ;\n      int mHp ;\n      int mStrength ;\n      int mDefence ;\n      string mName ;\n      bool inCombat ;\n  } ;\n\n  class Room \n  {\n    public:\n      Room( string name, string description, Item* item = NULL ) ;\n      //Room( void ) ;\n      //~Room()\n\n      typedef bool success ;\n\n      void addMonster( Monster* newMonster ) ;\n      Monster& getMonsterRef( string monsterName ) ;\n      success killMonster( string monsterName ) ;\n      void itemTaken( void ) ;\n      string searchResponse( void ) ;\n      success link( char direction, Room& room ) ;\n      Room& north( void ) ;\n      Room& south( void ) ;\n      Room& east( void ) ;\n      Room& west( void ) ;\n\n      void setName( string newName ) ;\n\n      void setDescription( string newDescription ) ;\n      string getDescription( void ) ;\n\n      void setItem( Item* newItem ) ;\n\n      Item* mItem ;\n      Room* mNorth ;\n      Room* mSouth ;\n      Room* mEast ;\n      Room* mWest ;\n      list< Monster* > mMonsters ;\n      string mName ;\n      string mDescription ;\n  } ;\n\n  class Player\n  {\n    public:\n      Player( string name, Room* start = NULL ) ;\n      //~Player()\n\n      typedef bool dead ;\n\n      void setHp( int newHp ) ;\n      int getHp( void ) ;\n\n      void setStrength( int newStrength ) ;\n      int getStrength( void ) ;\n\n      void setDefence( int newDefence ) ;\n      int getDefence( void ) ;\n\n      string getLocation( void ) ;\n\n      void setName( string newName ) ;\n      string getName( void ) const ;\n\n      string equip( string itemName ) ;\n      string attack( string monsterName ) ;\n      string move( char direction ) ;\n      string search( void ) ;\n      dead death( void ) ;\n\n      int mMaxHp ;\n      int mHp ;\n      int mStrength ;\n      int mDefence ;\n      Room* mLocation ;\n      string mName ;\n      Item* mWeapon ;\n      Item* mArmor ;\n      dead mLife ;\n  } ;\n\n  class Dungeon\n  {\n    public:\n      Dungeon( int maxPlayers, int maxRooms ) ;\n      //~Dungeon()\n\n      bool isComplete( void ) ;\n      string addPlayer( Player* newPlayer ) ;\n      string addRoom( Room* newRoom ) ;\n      string removePlayer( string playerName ) ;\n      void generatePlayerStats( Player* newPlayer ) ;\n      void combatLoop( Player& hero, Monster& villain ) ;\n      string* playerStatus( Player& player ) ;\n      void displayHelp( void ) ;\n\n      int mMaxRooms ;\n      int mMaxPlayers ;\n      vector< Room* > mRooms ;\n      vector< Player* > mPlayers ;\n  } ;\n\n  class Filter\n  {\n    public:\n      typedef bool valid ;\n\n      valid validateMessage( string message ) ;\n      string chat( string message ) ;\n  } ;\n\n  class Dispatch\n  {\n    public:\n      char extractCommand( string fromFilter ) ;\n      string extractValue( string fromFilter ) ;\n  } ;\n}\n```\n\n[Click here for part II][link_part_2]\n\n[link_part_2]: /2011/06/08/textbasedrpgpart2\n","slug":"textbasedrpgpart1","published":1,"updated":"2017-04-11T07:39:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr8w000ntswvw7j45zql","content":"<p><a href=\"/2011/06/08/textbasedrpgpart2\">Click here for part II</a></p>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>This is the first article in a multi-part series on how to develop a console based multiplayer MUD style RPG game. By the end of this series you will have a fully working console app that will run a typical client server model desktop application on Windows. This tutorial requires the Microsoft Visual C++ Compiler.</p>\n<h2 id=\"Review-Material\"><a href=\"#Review-Material\" class=\"headerlink\" title=\"Review Material\"></a>Review Material</h2><p><a href=\"http://cslibrary.stanford.edu/102/\" target=\"_blank\" rel=\"external\">Click here for a review on pointers if you need to brush up.</a><br><a href=\"http://www.cprogramming.com/tutorial/stl/iterators.html\" target=\"_blank\" rel=\"external\">Click here for a review on C++ iterators, if you can’t follow it then read the pointer review first.</a></p>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>If you happen to be curious as to what exactly a “text based role playing game(rpg)” is in my own words a text based rpg is simply a game in which the player or players input commands into a terminal and are fed back a description of the actions which took place within the game world. <a href=\"http://en.wikipedia.org/wiki/Online_text-based_role-playing_game\" target=\"_blank\" rel=\"external\">For more info see the Wikipedia entry on it</a>.</p>\n<p>Ok, now that we’re all familiar with the concept, lets first review why anyone would even want to build a text-based rpg in todays world of fancy <a href=\"http://us.battle.net/wow/en/\" target=\"_blank\" rel=\"external\">3D graphics, special effects and semi-realistic computer rendered player models</a>. I believe text based rpgs are a great start for programmers who want to build more serious/professional grade rpgs for several reasons. First, text based rpgs allow programmers to focus purely on the game engine itself without the overhead of graphics and or animation.</p>\n<p>Second, the core of any role playing game relies on the sophistication of its <a href=\"http://en.wikipedia.org/wiki/Role-playing_game_system\" target=\"_blank\" rel=\"external\">role playing system</a>; or the game mechanics. Without a unique and interesting core system, gamers will quickly dismiss your rpg as a rehash or just another D&amp;D clone.</p>\n<p>Lastly, from a programming perspective it’s a great excuse to practice data structures, socket programming and object oriented design. In this first part of series we’re going to begin by writing out the code base for the header class which will hold all the definitions for the objects which will appear within our game. However before we even write a single line of code lets first think about how we want all the game objects to fit together. Take a look at the picture below, and take note of all the objects that are identified. We have the <em>player</em>, <em>monster</em>, <em>items</em>, <em>dungeon</em> and <em>terminal </em>objects which are all clearly identified within our simple mock up. Although those won’t be our exact classes that we’ll code in a moment, the rough picture just lets us better understand the model.</p>\n<p style=\"text-align: center;\"><a class=\"lightbox\" href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\" target=\"_blank\" rel=\"external\"><img class=\"aligncenter size-thumbnail wp-image-92\" src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\" alt=\"Photo\" width=\"150\" height=\"150\"></a></p>\n\n<h2 id=\"Initial-Code\"><a href=\"#Initial-Code\" class=\"headerlink\" title=\"Initial Code\"></a>Initial Code</h2><p>Now lets start coding; call this file <strong>database.h,</strong> why we chose to name it database will be important in the future once we get to the multiplayer aspects of the game but enough talk.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iterator&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;locale&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> MUD</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">class</span> Player ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Item ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Room ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Monster ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Filter ;</div></pre></td></tr></table></figure>\n<p>Ok so now we have our libraries all included and the forward declarations for our classes planned out. Don’t worry about the inclusion of the not so common libraries such as locale, and sstream yet as we’ll introduce them in the future.</p>\n<h2 id=\"Item-and-Monster-Classes\"><a href=\"#Item-and-Monster-Classes\" class=\"headerlink\" title=\"Item and Monster Classes\"></a>Item and Monster Classes</h2><p>To start off we begin with the Item class. The item class as you can guess will represent items within our rpg game. Due to this being a simple rpg game we will restrict ourselves to just three types; weapons, armor and health. At this moment you might be wondering why don’t we just make three different classes, one for each item. However, as you can see below, we’ll just stick with this one class and generalize it.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Item</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span> TYPE &#123; WEAPON, ARMOR, HEALTH &#125; ;</div><div class=\"line\"></div><div class=\"line\">    Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) ;</div><div class=\"line\">    Item <span class=\"keyword\">operator</span>=( Item&amp; newItem ) ;</div><div class=\"line\">    Item( <span class=\"keyword\">void</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//~Item()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPower</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPower</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setVitality</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVitality</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHealth</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHealth</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> name )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">( TYPE newType )</span> </span>;</div><div class=\"line\">    <span class=\"function\">TYPE <span class=\"title\">getType</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mPower ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mVitality ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHealth ;</div><div class=\"line\">    TYPE mType ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> mAvailiable ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>The item class as you can look at above uses six different attributes, name, power, vitality, health, type and availability. We’ll discuss each of those further when we get to writing the actual methods for the class but for now try and think about how each of those attributes relate to the three different enum types or weapon, armor and health. Next, we are going to look at the monster class. This class being as its represents the monsters in our game should meet the following requirements. Monsters should have some measurement of life or hit points, a strength or attack power, a defense rating, a unique name and of course an indicator of whether or not they are currently in combat.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Monster</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence ) ;</div><div class=\"line\">    <span class=\"comment\">//~Monster() </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMaxHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newMaxHp )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> inCombat ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"The-Room-Class-and-Player-Classes\"><a href=\"#The-Room-Class-and-Player-Classes\" class=\"headerlink\" title=\"The Room Class and Player Classes\"></a>The Room Class and Player Classes</h2><p>For more sophisticated games our monster class would probably have attributes for magic, speed, steal-able items and experience points rewarded if your into the experience points style of rpgs. But for this simple game; strength, hp and defense will do. Moving along we are ready to begin sketching out the code for the room class. The room class is a class which will represent a single room within our dungeon and will also contain items, monsters and allow players to traverse them. In order to best represent the interconnected nature of the rooms as they would appear in our game setting the data structure of choice will be a simple 4-way(technically 8-way since each rooms allows backtracking) linked list with each direction being the familiar north, south, east and west. When I first designed this application several months ago the room class was by far the most difficult class conceptually since most of the game revolves around traversing the rooms, finding items(within rooms), slaying monsters(again within rooms), updating the state of the player(moving about rooms) and keeping the state of the dungeon intact(managing the rooms). As you can tell the room class is key to this simple game we’re making.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Room</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//Room( void ) ;</span></div><div class=\"line\">    <span class=\"comment\">//~Room()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> success ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addMonster</span><span class=\"params\">( Monster* newMonster )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Monster&amp; <span class=\"title\">getMonsterRef</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">killMonster</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">itemTaken</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">searchResponse</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">link</span><span class=\"params\">( <span class=\"keyword\">char</span> direction, Room&amp; room )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">north</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">south</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">east</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">west</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">( <span class=\"built_in\">string</span> newDescription )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getDescription</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setItem</span><span class=\"params\">( Item* newItem )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    Item* mItem ;</div><div class=\"line\">    Room* mNorth ;</div><div class=\"line\">    Room* mSouth ;</div><div class=\"line\">    Room* mEast ;</div><div class=\"line\">    Room* mWest ;</div><div class=\"line\">    <span class=\"built_in\">list</span>&lt; Monster* &gt; mMonsters ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mDescription ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>Next up is the player class, although for this simple game the player class resembles the monster class to an exceedingly high degree and you might be thinking “why are we not using inheritance from a general base class that has hp, str, def and such”. The answer to that question was due to me having originally planned out the player class to have multiple sub classes representing jobs such wizard, knight, archer, monk, ninja and such and to have different weapons and movement bonuses and so on until I realized that it was getting too large. So I cut all that stuff out and decided to keep things simple.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Player</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Player( <span class=\"built_in\">string</span> name, Room* start = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//~Player()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> dead ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getLocation</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">equip</span><span class=\"params\">( <span class=\"built_in\">string</span> itemName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">attack</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">move</span><span class=\"params\">( <span class=\"keyword\">char</span> direction )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">search</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">dead <span class=\"title\">death</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">    Room* mLocation ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    Item* mWeapon ;</div><div class=\"line\">    Item* mArmor ;</div><div class=\"line\">    dead mLife ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"The-Dungeon-Class\"><a href=\"#The-Dungeon-Class\" class=\"headerlink\" title=\"The Dungeon Class\"></a>The Dungeon Class</h2><p>Now here is where the class design gets a little tricky. The dungeon class, the class we’re coding next will make use of two std::vector&lt;&gt; objects to hold both the current players and the references to the various rooms within the game. Also an interesting method within the dungeon class which we’ll describe in detail later on in this tutorial series is the combatLoop() method. If you recall from earlier, the player class already has an attack() method so why does the entire dungeon need to be aware of which players are in combat? Remember that the goal of this tutorial is a multiplayer game so important aspects of the dungeon such as which players are alive and which monsters have been slain should be propagated to each player. Ok, so here is the code.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Dungeon</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Dungeon( <span class=\"keyword\">int</span> maxPlayers, <span class=\"keyword\">int</span> maxRooms ) ;</div><div class=\"line\">    <span class=\"comment\">//~Dungeon()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isComplete</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addPlayer</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addRoom</span><span class=\"params\">( Room* newRoom )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">removePlayer</span><span class=\"params\">( <span class=\"built_in\">string</span> playerName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePlayerStats</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">combatLoop</span><span class=\"params\">( Player&amp; hero, Monster&amp; villain )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">playerStatus</span><span class=\"params\">( Player&amp; player )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayHelp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxRooms ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxPlayers ;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt; Room* &gt; mRooms ;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt; Player* &gt; mPlayers ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"Utility-helpers-“Filter”-and-“Dispatch”\"><a href=\"#Utility-helpers-“Filter”-and-“Dispatch”\" class=\"headerlink\" title=\"Utility helpers, “Filter” and “Dispatch”\"></a>Utility helpers, “Filter” and “Dispatch”</h2><p>Lastly there are two utility classes I wrote to help facilitate the ever important parsing of the user inputs into the game terminal. Being that this game is text based, players will undoubtedly type in all sorts of crazy commands and awkward inputs. So the design of the two utility classes dispatch and filter were put in place to basically filter all incoming messages to ensure validity and to dispatch valid messages based on a simple protocol I crafted to handle commands. In other words, in order to avoid players attempting to cheat the game say by equipping from rooms which they currently don’t occupy or grabbing all the health items from other players the filter class serves to clean up dirty commands before they even reach the dungeon class.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Filter</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> valid ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">valid <span class=\"title\">validateMessage</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">chat</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Dispatch</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">extractCommand</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">extractValue</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>Ok folks that’s about all for now; just remember to stay tuned for the next parts of this tutorial which I’ll roll out when I get the time.</p>\n<p>-Thanks-</p>\n<p>Oh and here is the whole code if you’re in a hurry</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// database.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iterator&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;locale&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> MUD</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">class</span> Player ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Item ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Room ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Monster ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Filter ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Item</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"keyword\">enum</span> TYPE &#123; WEAPON, ARMOR, HEALTH &#125; ;</div><div class=\"line\"></div><div class=\"line\">      Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) ;</div><div class=\"line\">      Item <span class=\"keyword\">operator</span>=( Item&amp; newItem ) ;</div><div class=\"line\">      Item( <span class=\"keyword\">void</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//~Item()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPower</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPower</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setVitality</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVitality</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHealth</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHealth</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> name )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">( TYPE newType )</span> </span>;</div><div class=\"line\">      <span class=\"function\">TYPE <span class=\"title\">getType</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mPower ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mVitality ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHealth ;</div><div class=\"line\">      TYPE mType ;</div><div class=\"line\">      <span class=\"keyword\">bool</span> mAvailiable ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Monster</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence ) ;</div><div class=\"line\">      <span class=\"comment\">//~Monster() </span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMaxHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newMaxHp )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"keyword\">bool</span> inCombat ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Room </div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//Room( void ) ;</span></div><div class=\"line\">      <span class=\"comment\">//~Room()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> success ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addMonster</span><span class=\"params\">( Monster* newMonster )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Monster&amp; <span class=\"title\">getMonsterRef</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\">success <span class=\"title\">killMonster</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">itemTaken</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">searchResponse</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">success <span class=\"title\">link</span><span class=\"params\">( <span class=\"keyword\">char</span> direction, Room&amp; room )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">north</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">south</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">east</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">west</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">( <span class=\"built_in\">string</span> newDescription )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getDescription</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setItem</span><span class=\"params\">( Item* newItem )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      Item* mItem ;</div><div class=\"line\">      Room* mNorth ;</div><div class=\"line\">      Room* mSouth ;</div><div class=\"line\">      Room* mEast ;</div><div class=\"line\">      Room* mWest ;</div><div class=\"line\">      <span class=\"built_in\">list</span>&lt; Monster* &gt; mMonsters ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mDescription ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Player</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Player( <span class=\"built_in\">string</span> name, Room* start = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//~Player()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> dead ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getLocation</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">equip</span><span class=\"params\">( <span class=\"built_in\">string</span> itemName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">attack</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">move</span><span class=\"params\">( <span class=\"keyword\">char</span> direction )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">search</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">dead <span class=\"title\">death</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">      Room* mLocation ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      Item* mWeapon ;</div><div class=\"line\">      Item* mArmor ;</div><div class=\"line\">      dead mLife ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Dungeon( <span class=\"keyword\">int</span> maxPlayers, <span class=\"keyword\">int</span> maxRooms ) ;</div><div class=\"line\">      <span class=\"comment\">//~Dungeon()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isComplete</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addPlayer</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addRoom</span><span class=\"params\">( Room* newRoom )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">removePlayer</span><span class=\"params\">( <span class=\"built_in\">string</span> playerName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePlayerStats</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">combatLoop</span><span class=\"params\">( Player&amp; hero, Monster&amp; villain )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">playerStatus</span><span class=\"params\">( Player&amp; player )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayHelp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxRooms ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxPlayers ;</div><div class=\"line\">      <span class=\"built_in\">vector</span>&lt; Room* &gt; mRooms ;</div><div class=\"line\">      <span class=\"built_in\">vector</span>&lt; Player* &gt; mPlayers ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Filter</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> valid ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\">valid <span class=\"title\">validateMessage</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">chat</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">extractCommand</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">extractValue</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">  &#125; ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"/2011/06/08/textbasedrpgpart2\">Click here for part II</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/2011/06/08/textbasedrpgpart2\">Click here for part II</a></p>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>This is the first article in a multi-part series on how to develop a console based multiplayer MUD style RPG game. By the end of this series you will have a fully working console app that will run a typical client server model desktop application on Windows. This tutorial requires the Microsoft Visual C++ Compiler.</p>\n<h2 id=\"Review-Material\"><a href=\"#Review-Material\" class=\"headerlink\" title=\"Review Material\"></a>Review Material</h2><p><a href=\"http://cslibrary.stanford.edu/102/\">Click here for a review on pointers if you need to brush up.</a><br><a href=\"http://www.cprogramming.com/tutorial/stl/iterators.html\">Click here for a review on C++ iterators, if you can’t follow it then read the pointer review first.</a></p>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>If you happen to be curious as to what exactly a “text based role playing game(rpg)” is in my own words a text based rpg is simply a game in which the player or players input commands into a terminal and are fed back a description of the actions which took place within the game world. <a href=\"http://en.wikipedia.org/wiki/Online_text-based_role-playing_game\">For more info see the Wikipedia entry on it</a>.</p>\n<p>Ok, now that we’re all familiar with the concept, lets first review why anyone would even want to build a text-based rpg in todays world of fancy <a href=\"http://us.battle.net/wow/en/\">3D graphics, special effects and semi-realistic computer rendered player models</a>. I believe text based rpgs are a great start for programmers who want to build more serious/professional grade rpgs for several reasons. First, text based rpgs allow programmers to focus purely on the game engine itself without the overhead of graphics and or animation.</p>\n<p>Second, the core of any role playing game relies on the sophistication of its <a href=\"http://en.wikipedia.org/wiki/Role-playing_game_system\">role playing system</a>; or the game mechanics. Without a unique and interesting core system, gamers will quickly dismiss your rpg as a rehash or just another D&amp;D clone.</p>\n<p>Lastly, from a programming perspective it’s a great excuse to practice data structures, socket programming and object oriented design. In this first part of series we’re going to begin by writing out the code base for the header class which will hold all the definitions for the objects which will appear within our game. However before we even write a single line of code lets first think about how we want all the game objects to fit together. Take a look at the picture below, and take note of all the objects that are identified. We have the <em>player</em>, <em>monster</em>, <em>items</em>, <em>dungeon</em> and <em>terminal </em>objects which are all clearly identified within our simple mock up. Although those won’t be our exact classes that we’ll code in a moment, the rough picture just lets us better understand the model.</p>\n<p style=\"text-align: center;\"><a class=\"lightbox\" href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\"><img class=\"aligncenter size-thumbnail wp-image-92\" src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\" alt=\"Photo\" width=\"150\" height=\"150\" /></a></p>\n\n<h2 id=\"Initial-Code\"><a href=\"#Initial-Code\" class=\"headerlink\" title=\"Initial Code\"></a>Initial Code</h2><p>Now lets start coding; call this file <strong>database.h,</strong> why we chose to name it database will be important in the future once we get to the multiplayer aspects of the game but enough talk.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iterator&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;locale&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> MUD</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">class</span> Player ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Item ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Room ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Monster ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Filter ;</div></pre></td></tr></table></figure>\n<p>Ok so now we have our libraries all included and the forward declarations for our classes planned out. Don’t worry about the inclusion of the not so common libraries such as locale, and sstream yet as we’ll introduce them in the future.</p>\n<h2 id=\"Item-and-Monster-Classes\"><a href=\"#Item-and-Monster-Classes\" class=\"headerlink\" title=\"Item and Monster Classes\"></a>Item and Monster Classes</h2><p>To start off we begin with the Item class. The item class as you can guess will represent items within our rpg game. Due to this being a simple rpg game we will restrict ourselves to just three types; weapons, armor and health. At this moment you might be wondering why don’t we just make three different classes, one for each item. However, as you can see below, we’ll just stick with this one class and generalize it.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Item</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span> TYPE &#123; WEAPON, ARMOR, HEALTH &#125; ;</div><div class=\"line\"></div><div class=\"line\">    Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) ;</div><div class=\"line\">    Item <span class=\"keyword\">operator</span>=( Item&amp; newItem ) ;</div><div class=\"line\">    Item( <span class=\"keyword\">void</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//~Item()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPower</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPower</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setVitality</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVitality</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHealth</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHealth</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> name )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">( TYPE newType )</span> </span>;</div><div class=\"line\">    <span class=\"function\">TYPE <span class=\"title\">getType</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mPower ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mVitality ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHealth ;</div><div class=\"line\">    TYPE mType ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> mAvailiable ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>The item class as you can look at above uses six different attributes, name, power, vitality, health, type and availability. We’ll discuss each of those further when we get to writing the actual methods for the class but for now try and think about how each of those attributes relate to the three different enum types or weapon, armor and health. Next, we are going to look at the monster class. This class being as its represents the monsters in our game should meet the following requirements. Monsters should have some measurement of life or hit points, a strength or attack power, a defense rating, a unique name and of course an indicator of whether or not they are currently in combat.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Monster</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence ) ;</div><div class=\"line\">    <span class=\"comment\">//~Monster() </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMaxHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newMaxHp )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> inCombat ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"The-Room-Class-and-Player-Classes\"><a href=\"#The-Room-Class-and-Player-Classes\" class=\"headerlink\" title=\"The Room Class and Player Classes\"></a>The Room Class and Player Classes</h2><p>For more sophisticated games our monster class would probably have attributes for magic, speed, steal-able items and experience points rewarded if your into the experience points style of rpgs. But for this simple game; strength, hp and defense will do. Moving along we are ready to begin sketching out the code for the room class. The room class is a class which will represent a single room within our dungeon and will also contain items, monsters and allow players to traverse them. In order to best represent the interconnected nature of the rooms as they would appear in our game setting the data structure of choice will be a simple 4-way(technically 8-way since each rooms allows backtracking) linked list with each direction being the familiar north, south, east and west. When I first designed this application several months ago the room class was by far the most difficult class conceptually since most of the game revolves around traversing the rooms, finding items(within rooms), slaying monsters(again within rooms), updating the state of the player(moving about rooms) and keeping the state of the dungeon intact(managing the rooms). As you can tell the room class is key to this simple game we’re making.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Room</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//Room( void ) ;</span></div><div class=\"line\">    <span class=\"comment\">//~Room()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> success ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addMonster</span><span class=\"params\">( Monster* newMonster )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Monster&amp; <span class=\"title\">getMonsterRef</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">killMonster</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">itemTaken</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">searchResponse</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">link</span><span class=\"params\">( <span class=\"keyword\">char</span> direction, Room&amp; room )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">north</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">south</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">east</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">west</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">( <span class=\"built_in\">string</span> newDescription )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getDescription</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setItem</span><span class=\"params\">( Item* newItem )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    Item* mItem ;</div><div class=\"line\">    Room* mNorth ;</div><div class=\"line\">    Room* mSouth ;</div><div class=\"line\">    Room* mEast ;</div><div class=\"line\">    Room* mWest ;</div><div class=\"line\">    <span class=\"built_in\">list</span>&lt; Monster* &gt; mMonsters ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mDescription ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>Next up is the player class, although for this simple game the player class resembles the monster class to an exceedingly high degree and you might be thinking “why are we not using inheritance from a general base class that has hp, str, def and such”. The answer to that question was due to me having originally planned out the player class to have multiple sub classes representing jobs such wizard, knight, archer, monk, ninja and such and to have different weapons and movement bonuses and so on until I realized that it was getting too large. So I cut all that stuff out and decided to keep things simple.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Player</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Player( <span class=\"built_in\">string</span> name, Room* start = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//~Player()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> dead ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getLocation</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">equip</span><span class=\"params\">( <span class=\"built_in\">string</span> itemName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">attack</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">move</span><span class=\"params\">( <span class=\"keyword\">char</span> direction )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">search</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">dead <span class=\"title\">death</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">    Room* mLocation ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    Item* mWeapon ;</div><div class=\"line\">    Item* mArmor ;</div><div class=\"line\">    dead mLife ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"The-Dungeon-Class\"><a href=\"#The-Dungeon-Class\" class=\"headerlink\" title=\"The Dungeon Class\"></a>The Dungeon Class</h2><p>Now here is where the class design gets a little tricky. The dungeon class, the class we’re coding next will make use of two std::vector&lt;&gt; objects to hold both the current players and the references to the various rooms within the game. Also an interesting method within the dungeon class which we’ll describe in detail later on in this tutorial series is the combatLoop() method. If you recall from earlier, the player class already has an attack() method so why does the entire dungeon need to be aware of which players are in combat? Remember that the goal of this tutorial is a multiplayer game so important aspects of the dungeon such as which players are alive and which monsters have been slain should be propagated to each player. Ok, so here is the code.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Dungeon</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Dungeon( <span class=\"keyword\">int</span> maxPlayers, <span class=\"keyword\">int</span> maxRooms ) ;</div><div class=\"line\">    <span class=\"comment\">//~Dungeon()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isComplete</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addPlayer</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addRoom</span><span class=\"params\">( Room* newRoom )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">removePlayer</span><span class=\"params\">( <span class=\"built_in\">string</span> playerName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePlayerStats</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">combatLoop</span><span class=\"params\">( Player&amp; hero, Monster&amp; villain )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">playerStatus</span><span class=\"params\">( Player&amp; player )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayHelp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxRooms ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxPlayers ;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt; Room* &gt; mRooms ;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt; Player* &gt; mPlayers ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"Utility-helpers-“Filter”-and-“Dispatch”\"><a href=\"#Utility-helpers-“Filter”-and-“Dispatch”\" class=\"headerlink\" title=\"Utility helpers, “Filter” and “Dispatch”\"></a>Utility helpers, “Filter” and “Dispatch”</h2><p>Lastly there are two utility classes I wrote to help facilitate the ever important parsing of the user inputs into the game terminal. Being that this game is text based, players will undoubtedly type in all sorts of crazy commands and awkward inputs. So the design of the two utility classes dispatch and filter were put in place to basically filter all incoming messages to ensure validity and to dispatch valid messages based on a simple protocol I crafted to handle commands. In other words, in order to avoid players attempting to cheat the game say by equipping from rooms which they currently don’t occupy or grabbing all the health items from other players the filter class serves to clean up dirty commands before they even reach the dungeon class.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Filter</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> valid ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">valid <span class=\"title\">validateMessage</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">chat</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Dispatch</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">extractCommand</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">extractValue</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>Ok folks that’s about all for now; just remember to stay tuned for the next parts of this tutorial which I’ll roll out when I get the time.</p>\n<p>-Thanks-</p>\n<p>Oh and here is the whole code if you’re in a hurry</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// database.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iterator&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;locale&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> MUD</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">class</span> Player ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Item ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Room ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Monster ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Filter ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Item</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"keyword\">enum</span> TYPE &#123; WEAPON, ARMOR, HEALTH &#125; ;</div><div class=\"line\"></div><div class=\"line\">      Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) ;</div><div class=\"line\">      Item <span class=\"keyword\">operator</span>=( Item&amp; newItem ) ;</div><div class=\"line\">      Item( <span class=\"keyword\">void</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//~Item()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPower</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPower</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setVitality</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVitality</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHealth</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHealth</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> name )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">( TYPE newType )</span> </span>;</div><div class=\"line\">      <span class=\"function\">TYPE <span class=\"title\">getType</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mPower ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mVitality ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHealth ;</div><div class=\"line\">      TYPE mType ;</div><div class=\"line\">      <span class=\"keyword\">bool</span> mAvailiable ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Monster</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence ) ;</div><div class=\"line\">      <span class=\"comment\">//~Monster() </span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMaxHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newMaxHp )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"keyword\">bool</span> inCombat ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Room </div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//Room( void ) ;</span></div><div class=\"line\">      <span class=\"comment\">//~Room()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> success ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addMonster</span><span class=\"params\">( Monster* newMonster )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Monster&amp; <span class=\"title\">getMonsterRef</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\">success <span class=\"title\">killMonster</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">itemTaken</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">searchResponse</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">success <span class=\"title\">link</span><span class=\"params\">( <span class=\"keyword\">char</span> direction, Room&amp; room )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">north</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">south</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">east</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">west</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">( <span class=\"built_in\">string</span> newDescription )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getDescription</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setItem</span><span class=\"params\">( Item* newItem )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      Item* mItem ;</div><div class=\"line\">      Room* mNorth ;</div><div class=\"line\">      Room* mSouth ;</div><div class=\"line\">      Room* mEast ;</div><div class=\"line\">      Room* mWest ;</div><div class=\"line\">      <span class=\"built_in\">list</span>&lt; Monster* &gt; mMonsters ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mDescription ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Player</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Player( <span class=\"built_in\">string</span> name, Room* start = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//~Player()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> dead ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getLocation</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">equip</span><span class=\"params\">( <span class=\"built_in\">string</span> itemName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">attack</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">move</span><span class=\"params\">( <span class=\"keyword\">char</span> direction )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">search</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">dead <span class=\"title\">death</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">      Room* mLocation ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      Item* mWeapon ;</div><div class=\"line\">      Item* mArmor ;</div><div class=\"line\">      dead mLife ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Dungeon( <span class=\"keyword\">int</span> maxPlayers, <span class=\"keyword\">int</span> maxRooms ) ;</div><div class=\"line\">      <span class=\"comment\">//~Dungeon()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isComplete</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addPlayer</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addRoom</span><span class=\"params\">( Room* newRoom )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">removePlayer</span><span class=\"params\">( <span class=\"built_in\">string</span> playerName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePlayerStats</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">combatLoop</span><span class=\"params\">( Player&amp; hero, Monster&amp; villain )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">playerStatus</span><span class=\"params\">( Player&amp; player )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayHelp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxRooms ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxPlayers ;</div><div class=\"line\">      <span class=\"built_in\">vector</span>&lt; Room* &gt; mRooms ;</div><div class=\"line\">      <span class=\"built_in\">vector</span>&lt; Player* &gt; mPlayers ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Filter</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> valid ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\">valid <span class=\"title\">validateMessage</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">chat</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">extractCommand</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">extractValue</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">  &#125; ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"/2011/06/08/textbasedrpgpart2\">Click here for part II</a></p>\n"},{"title":"Build A Text Based Multiplayer RPG Part II","date":"2011-06-08T07:00:00.000Z","_content":"[Click here for part I][link_part_1]\n[Click here for part III][link_part_3]\n\n# Intro\n\nIn this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.\n\nUsing a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.\n\n## The Test Singleton\n\nSo create a new C++ header file for your project and title it “Test.h” and type the following.\n\nIn this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.\n\nUsing a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.\n\nSo create a new C++ header file for your project and title it “Test.h” and type the following.\n```c\n// Filename Test.h\n#pragma once\n\n#include\"database.h\"\n\n#include<cassert>\n\nusing namespace MUD;\n```\n\nFor the test class we will implement it as a singleton. Singleton in short means that only a single reference to the class can be accessed at any given time during the program’s execution. However, there are some pitfalls to watch out for when using singleton for objects which clearly should not have a single instance, but in this case we only need to run our test cases once so having multiple test objects each running separate tests will only add confusion to our codebase. \n\n```c\n/*\n   The Test class uses the singleton design pattern in order to insure \n   that only one Test object will be availiable during program execution.\n */\nclass Test\n{\n  public:\n    // To call Test methods you have to get the Test instance reference.\n    static Test* get_instance();\n\n    // Place additional test methods here.\n    void test_item_class(void);\n\n  private:\n    // In singleton we have to keep the constuctor private\n    // to prevent accidental creation of more than one object.\n    Test(void){};\n    // Same deal with the copy constructor and the assignment operator,\n    // to prevent making duplicates.\n    Test(const Test& test_object){}; \n    Test& operator=(const Test& test_object){};\n\n    // This pointer will be the only instance of the Test class.\n    static Test* instance;\n};\n```\nNext, create a new C++ file and title it “Test.cpp”, now add the following lines of code.\n```c\n// Filename Test.cpp\n#include\"Test.h\"\n```\nIn order to utilize singleton we have to rely on a global reference to our Test instance which will only be initialized once as you can see below.\n```c\n// The only instance of the Test class we allow.\nTest* Test::instance = NULL; \n\n// Must be called in order to use the Test methods.\nTest* Test::get_instance()\n{\n  if(Test::instance == NULL)\n  {\n    instance = new Test;\n  }\n\n  return instance;\n}\n```\n\n<p>Therefore, whenever we want to run a method from our Test class we have to first get the reference and then call the proper test method.</p> <p>Enter the following code.</p> \n\n```c\nvoid Test::test_item_class(void)\n{\n```\n\n<p>If you recall from part 1 of this tutorial, the Item class represents things players can pick up and use to their advantage during the game. Thus we want to make sure that items can be named, have their effects set, their type set and lastly whether or not they are currently available within the dungeon for use. </p> <p>We’ll begin by testing the Item constructor, so enter the code below.</p> \n\n```c\n  // Item constructor test\n  Item test_sword(\"sword\", Item::WEAPON, 10, 0, 0);\n\n  assert(\"sword\" == test_sword.getName());\n  assert(Item::WEAPON == test_sword.getType());\n  assert(10 == test_sword.getPower());\n  assert(0 == test_sword.getVitality());\n  assert(0 == test_sword.getHealth());\n  assert(true == test_sword.mAvailiable);\n```\n<p>The idea with unit testing is that we check assertions or in other words we test our assumptions about how we believe the code should function. </p><p>There are many other types of testing such as functional testing and integration testing but all we need for this simple game is unit testing so don’t worry about testing becoming overkill we will get back to the game design soon enough.</p> <p>Next we test the assignment operator for the item class. Type the following,</p>\n\n```c\n// Item operator= test\nItem another_sword = test_sword;\n\nassert(\"sword\" == another_sword.getName());\nassert(Item::WEAPON == another_sword.getType());\nassert(10 == another_sword.getPower());\nassert(0 == another_sword.getVitality());\nassert(0 == another_sword.getHealth());\nassert(true == another_sword.mAvailiable);\n// The weapons shouldn't share the same memory address.\nassert(&another_sword != &test_sword);\n```\n\n<strong>Pay special attention to the last test.</strong>\n\n```c\n// The weapons shouldn't share the same memory address.\nassert(&another_sword != &test_sword);\n```\nOne of the reasons why C++ is considered a tough language to learn is that many programmers just want to avoid learning how pointers and references impact the use of C++’s object model. So lets check this out right quick with a short example.\n\nLets imagine the following scenario<strong><em>(don’t type these in yet since we haven’t implemented the actual methods in database.cpp)</em></strong>\n\n ```c\nItem woodsword = Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem barksword = woodsword;\n\ncout << \"barksword memory address = \" << &barksword << endl;\ncout << \"woodsword memory address = \" << &woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword.getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword.setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword.getName() << endl;\n```\n\nNote the different memory addresses of the two items. After changing the name of the “barksword” item, the “woodsword” remained intact. However, consider the next example...\n\n ```c\nItem* woodsword = new Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem* barksword = woodsword;\n\ncout << \"barksword memory address = \" << barksword << endl;\ncout << \"woodsword memory address = \" << woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword->setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\n```\n\nDid you notice that changing the name of the “barksword” also changed the name of the “woodsword” to “happysword”. In addition look again at the memory address’, they are exactly the same. Here the C++ compiler did exactly what we told it to do and nothing more but we were unaware that the assignment of pointers meant that the bark and wood swords now reference the same item in memory. Here is what we meant to say to the compiler.\n\n ```c\nItem* woodsword = new Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem* barksword = new Item(woodsword->getName(), woodsword->getType(),\nwoodsword->getPower(), woodsword->getVitality(),\nwoodsword->getHealth());\n\ncout << \"barksword memory address = \" << barksword << endl;\ncout << \"woodsword memory address = \" << woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword->setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\n```\n\nThus we meant for the attributes of the “woodsword” to be assigned to the “barksword” and for the “barksword” to have its own memory address. Now that we have demonstrated the reasoning behind the reference assertion in the unit test you can finally finish up the Item class test cases for the getter and setter methods.\n\n ```c\n  // Item void constructor test\n  Item void_sword;\n\n  assert(\"\" == void_sword.getName());\n  assert(Item::WEAPON == void_sword.getType());\n  assert(0 == void_sword.getPower());\n  assert(0 == void_sword.getVitality());\n  assert(0 == void_sword.getHealth());\n  assert(true == void_sword.mAvailiable);\n\n  // Item setters and getters test\n  void_sword.setPower(99);\n  void_sword.setName(\"steel sword\");\n  void_sword.setVitality(100);\n  void_sword.setType(Item::ARMOR);\n  void_sword.setHealth(36);\n  void_sword.mAvailiable = false;\n\n  assert(\"steel sword\" == void_sword.getName());\n  assert(Item::ARMOR == void_sword.getType());\n  assert(99 == void_sword.getPower());\n  assert(100 == void_sword.getVitality());\n  assert(36 == void_sword.getHealth());\n  assert(false == void_sword.mAvailiable);\n}\n```\n\nThat’s it for now. Oh wait, here is the whole source for Test.h and Test.cpp for reference.\n\n```c\n// Filename Test.h\n#pragma once\n\n#include\"database.h\"\n\n#include<cassert>\n\nusing namespace MUD;\n\n/*\n  The Test class uses the singleton design pattern in order to insure \n  that only one Test object will be availiable during program execution.\n*/\nclass Test\n{\n  public:\n    // To call Test methods you have to get the Test instance reference.\n    static Test* get_instance();\n\n    // Place additional test methods here.\n    void test_item_class(void);\n\n  private:\n    // In singleton we have to keep the constuctor private\n    // to prevent accidental creation of more than one object.\n    Test(void){};\n    // Same deal with the copy constructor and the assignment operator,\n    // to prevent making duplicates.\n    Test(const Test& test_object){}; \n    Test& operator=(const Test& test_object){};\n\n    // This pointer will be the only instance of the Test class.\n    static Test* instance;\n};\n```\n\n## Code Listing\n\n```c\n// Filename Test.cpp\n#include\"Test.h\"\n\n// The only instance of the Test class we allow.\nTest* Test::instance = NULL; \n\n// Must be called in order to use the Test methods.\nTest* Test::get_instance()\n{\n  if(Test::instance == NULL)\n  {\n    instance = new Test;\n  }\n\n  return instance;\n}\n\nvoid Test::test_item_class(void)\n{\n  // Item constructor test\n  Item test_sword(\"sword\", Item::WEAPON, 10, 0, 0);\n\n  assert(\"sword\" == test_sword.getName());\n  assert(Item::WEAPON == test_sword.getType());\n  assert(10 == test_sword.getPower());\n  assert(0 == test_sword.getVitality());\n  assert(0 == test_sword.getHealth());\n  assert(true == test_sword.mAvailiable);\n\n  // Item operator= test\n  Item another_sword = test_sword;\n\n  assert(\"sword\" == another_sword.getName());\n  assert(Item::WEAPON == another_sword.getType());\n  assert(10 == another_sword.getPower());\n  assert(0 == another_sword.getVitality());\n  assert(0 == another_sword.getHealth());\n  assert(true == another_sword.mAvailiable);\n  // The weapons shouldn't share the same memory address.\n  assert(&another_sword != &test_sword);\n\n  // Item void constructor test\n  Item void_sword;\n\n  assert(\"\" == void_sword.getName());\n  assert(Item::WEAPON == void_sword.getType());\n  assert(0 == void_sword.getPower());\n  assert(0 == void_sword.getVitality());\n  assert(0 == void_sword.getHealth());\n  assert(true == void_sword.mAvailiable);\n\n  // Item setters and getters test\n  void_sword.setPower(99);\n  void_sword.setName(\"steel sword\");\n  void_sword.setVitality(100);\n  void_sword.setType(Item::ARMOR);\n  void_sword.setHealth(36);\n  void_sword.mAvailiable = false;\n\n  assert(\"steel sword\" == void_sword.getName());\n  assert(Item::ARMOR == void_sword.getType());\n  assert(99 == void_sword.getPower());\n  assert(100 == void_sword.getVitality());\n  assert(36 == void_sword.getHealth());\n  assert(false == void_sword.mAvailiable);\n}\n```\n \n[Click here for part III][link_part_3]\n\n[link_part_1]: /2011/06/05/textbasedrpgpart1\n[link_part_3]: /2011/06/09/textbasedrpgpart3\n","source":"_posts/textbasedrpgpart2.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part II\ndate: 2011-06-08\ncategories: [tutorial]\ntags: [cpp]\n---\n[Click here for part I][link_part_1]\n[Click here for part III][link_part_3]\n\n# Intro\n\nIn this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.\n\nUsing a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.\n\n## The Test Singleton\n\nSo create a new C++ header file for your project and title it “Test.h” and type the following.\n\nIn this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.\n\nUsing a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.\n\nSo create a new C++ header file for your project and title it “Test.h” and type the following.\n```c\n// Filename Test.h\n#pragma once\n\n#include\"database.h\"\n\n#include<cassert>\n\nusing namespace MUD;\n```\n\nFor the test class we will implement it as a singleton. Singleton in short means that only a single reference to the class can be accessed at any given time during the program’s execution. However, there are some pitfalls to watch out for when using singleton for objects which clearly should not have a single instance, but in this case we only need to run our test cases once so having multiple test objects each running separate tests will only add confusion to our codebase. \n\n```c\n/*\n   The Test class uses the singleton design pattern in order to insure \n   that only one Test object will be availiable during program execution.\n */\nclass Test\n{\n  public:\n    // To call Test methods you have to get the Test instance reference.\n    static Test* get_instance();\n\n    // Place additional test methods here.\n    void test_item_class(void);\n\n  private:\n    // In singleton we have to keep the constuctor private\n    // to prevent accidental creation of more than one object.\n    Test(void){};\n    // Same deal with the copy constructor and the assignment operator,\n    // to prevent making duplicates.\n    Test(const Test& test_object){}; \n    Test& operator=(const Test& test_object){};\n\n    // This pointer will be the only instance of the Test class.\n    static Test* instance;\n};\n```\nNext, create a new C++ file and title it “Test.cpp”, now add the following lines of code.\n```c\n// Filename Test.cpp\n#include\"Test.h\"\n```\nIn order to utilize singleton we have to rely on a global reference to our Test instance which will only be initialized once as you can see below.\n```c\n// The only instance of the Test class we allow.\nTest* Test::instance = NULL; \n\n// Must be called in order to use the Test methods.\nTest* Test::get_instance()\n{\n  if(Test::instance == NULL)\n  {\n    instance = new Test;\n  }\n\n  return instance;\n}\n```\n\n<p>Therefore, whenever we want to run a method from our Test class we have to first get the reference and then call the proper test method.</p> <p>Enter the following code.</p> \n\n```c\nvoid Test::test_item_class(void)\n{\n```\n\n<p>If you recall from part 1 of this tutorial, the Item class represents things players can pick up and use to their advantage during the game. Thus we want to make sure that items can be named, have their effects set, their type set and lastly whether or not they are currently available within the dungeon for use. </p> <p>We’ll begin by testing the Item constructor, so enter the code below.</p> \n\n```c\n  // Item constructor test\n  Item test_sword(\"sword\", Item::WEAPON, 10, 0, 0);\n\n  assert(\"sword\" == test_sword.getName());\n  assert(Item::WEAPON == test_sword.getType());\n  assert(10 == test_sword.getPower());\n  assert(0 == test_sword.getVitality());\n  assert(0 == test_sword.getHealth());\n  assert(true == test_sword.mAvailiable);\n```\n<p>The idea with unit testing is that we check assertions or in other words we test our assumptions about how we believe the code should function. </p><p>There are many other types of testing such as functional testing and integration testing but all we need for this simple game is unit testing so don’t worry about testing becoming overkill we will get back to the game design soon enough.</p> <p>Next we test the assignment operator for the item class. Type the following,</p>\n\n```c\n// Item operator= test\nItem another_sword = test_sword;\n\nassert(\"sword\" == another_sword.getName());\nassert(Item::WEAPON == another_sword.getType());\nassert(10 == another_sword.getPower());\nassert(0 == another_sword.getVitality());\nassert(0 == another_sword.getHealth());\nassert(true == another_sword.mAvailiable);\n// The weapons shouldn't share the same memory address.\nassert(&another_sword != &test_sword);\n```\n\n<strong>Pay special attention to the last test.</strong>\n\n```c\n// The weapons shouldn't share the same memory address.\nassert(&another_sword != &test_sword);\n```\nOne of the reasons why C++ is considered a tough language to learn is that many programmers just want to avoid learning how pointers and references impact the use of C++’s object model. So lets check this out right quick with a short example.\n\nLets imagine the following scenario<strong><em>(don’t type these in yet since we haven’t implemented the actual methods in database.cpp)</em></strong>\n\n ```c\nItem woodsword = Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem barksword = woodsword;\n\ncout << \"barksword memory address = \" << &barksword << endl;\ncout << \"woodsword memory address = \" << &woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword.getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword.setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword.getName() << endl;\n```\n\nNote the different memory addresses of the two items. After changing the name of the “barksword” item, the “woodsword” remained intact. However, consider the next example...\n\n ```c\nItem* woodsword = new Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem* barksword = woodsword;\n\ncout << \"barksword memory address = \" << barksword << endl;\ncout << \"woodsword memory address = \" << woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword->setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\n```\n\nDid you notice that changing the name of the “barksword” also changed the name of the “woodsword” to “happysword”. In addition look again at the memory address’, they are exactly the same. Here the C++ compiler did exactly what we told it to do and nothing more but we were unaware that the assignment of pointers meant that the bark and wood swords now reference the same item in memory. Here is what we meant to say to the compiler.\n\n ```c\nItem* woodsword = new Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem* barksword = new Item(woodsword->getName(), woodsword->getType(),\nwoodsword->getPower(), woodsword->getVitality(),\nwoodsword->getHealth());\n\ncout << \"barksword memory address = \" << barksword << endl;\ncout << \"woodsword memory address = \" << woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword->setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\n```\n\nThus we meant for the attributes of the “woodsword” to be assigned to the “barksword” and for the “barksword” to have its own memory address. Now that we have demonstrated the reasoning behind the reference assertion in the unit test you can finally finish up the Item class test cases for the getter and setter methods.\n\n ```c\n  // Item void constructor test\n  Item void_sword;\n\n  assert(\"\" == void_sword.getName());\n  assert(Item::WEAPON == void_sword.getType());\n  assert(0 == void_sword.getPower());\n  assert(0 == void_sword.getVitality());\n  assert(0 == void_sword.getHealth());\n  assert(true == void_sword.mAvailiable);\n\n  // Item setters and getters test\n  void_sword.setPower(99);\n  void_sword.setName(\"steel sword\");\n  void_sword.setVitality(100);\n  void_sword.setType(Item::ARMOR);\n  void_sword.setHealth(36);\n  void_sword.mAvailiable = false;\n\n  assert(\"steel sword\" == void_sword.getName());\n  assert(Item::ARMOR == void_sword.getType());\n  assert(99 == void_sword.getPower());\n  assert(100 == void_sword.getVitality());\n  assert(36 == void_sword.getHealth());\n  assert(false == void_sword.mAvailiable);\n}\n```\n\nThat’s it for now. Oh wait, here is the whole source for Test.h and Test.cpp for reference.\n\n```c\n// Filename Test.h\n#pragma once\n\n#include\"database.h\"\n\n#include<cassert>\n\nusing namespace MUD;\n\n/*\n  The Test class uses the singleton design pattern in order to insure \n  that only one Test object will be availiable during program execution.\n*/\nclass Test\n{\n  public:\n    // To call Test methods you have to get the Test instance reference.\n    static Test* get_instance();\n\n    // Place additional test methods here.\n    void test_item_class(void);\n\n  private:\n    // In singleton we have to keep the constuctor private\n    // to prevent accidental creation of more than one object.\n    Test(void){};\n    // Same deal with the copy constructor and the assignment operator,\n    // to prevent making duplicates.\n    Test(const Test& test_object){}; \n    Test& operator=(const Test& test_object){};\n\n    // This pointer will be the only instance of the Test class.\n    static Test* instance;\n};\n```\n\n## Code Listing\n\n```c\n// Filename Test.cpp\n#include\"Test.h\"\n\n// The only instance of the Test class we allow.\nTest* Test::instance = NULL; \n\n// Must be called in order to use the Test methods.\nTest* Test::get_instance()\n{\n  if(Test::instance == NULL)\n  {\n    instance = new Test;\n  }\n\n  return instance;\n}\n\nvoid Test::test_item_class(void)\n{\n  // Item constructor test\n  Item test_sword(\"sword\", Item::WEAPON, 10, 0, 0);\n\n  assert(\"sword\" == test_sword.getName());\n  assert(Item::WEAPON == test_sword.getType());\n  assert(10 == test_sword.getPower());\n  assert(0 == test_sword.getVitality());\n  assert(0 == test_sword.getHealth());\n  assert(true == test_sword.mAvailiable);\n\n  // Item operator= test\n  Item another_sword = test_sword;\n\n  assert(\"sword\" == another_sword.getName());\n  assert(Item::WEAPON == another_sword.getType());\n  assert(10 == another_sword.getPower());\n  assert(0 == another_sword.getVitality());\n  assert(0 == another_sword.getHealth());\n  assert(true == another_sword.mAvailiable);\n  // The weapons shouldn't share the same memory address.\n  assert(&another_sword != &test_sword);\n\n  // Item void constructor test\n  Item void_sword;\n\n  assert(\"\" == void_sword.getName());\n  assert(Item::WEAPON == void_sword.getType());\n  assert(0 == void_sword.getPower());\n  assert(0 == void_sword.getVitality());\n  assert(0 == void_sword.getHealth());\n  assert(true == void_sword.mAvailiable);\n\n  // Item setters and getters test\n  void_sword.setPower(99);\n  void_sword.setName(\"steel sword\");\n  void_sword.setVitality(100);\n  void_sword.setType(Item::ARMOR);\n  void_sword.setHealth(36);\n  void_sword.mAvailiable = false;\n\n  assert(\"steel sword\" == void_sword.getName());\n  assert(Item::ARMOR == void_sword.getType());\n  assert(99 == void_sword.getPower());\n  assert(100 == void_sword.getVitality());\n  assert(36 == void_sword.getHealth());\n  assert(false == void_sword.mAvailiable);\n}\n```\n \n[Click here for part III][link_part_3]\n\n[link_part_1]: /2011/06/05/textbasedrpgpart1\n[link_part_3]: /2011/06/09/textbasedrpgpart3\n","slug":"textbasedrpgpart2","published":1,"updated":"2017-04-12T03:24:54.000Z","_id":"cj1d8kr8y000otswvbs676i04","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"/2011/06/05/textbasedrpgpart1\">Click here for part I</a><br><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a></p>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>In this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.</p>\n<p>Using a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.</p>\n<h2 id=\"The-Test-Singleton\"><a href=\"#The-Test-Singleton\" class=\"headerlink\" title=\"The Test Singleton\"></a>The Test Singleton</h2><p>So create a new C++ header file for your project and title it “Test.h” and type the following.</p>\n<p>In this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.</p>\n<p>Using a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.</p>\n<p>So create a new C++ header file for your project and title it “Test.h” and type the following.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"database.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cassert&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD;</div></pre></td></tr></table></figure></p>\n<p>For the test class we will implement it as a singleton. Singleton in short means that only a single reference to the class can be accessed at any given time during the program’s execution. However, there are some pitfalls to watch out for when using singleton for objects which clearly should not have a single instance, but in this case we only need to run our test cases once so having multiple test objects each running separate tests will only add confusion to our codebase. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">   The Test class uses the singleton design pattern in order to insure </div><div class=\"line\">   that only one Test object will be availiable during program execution.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">class</span> Test</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"comment\">// To call Test methods you have to get the Test instance reference.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Test* <span class=\"title\">get_instance</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Place additional test methods here.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_item_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">// In singleton we have to keep the constuctor private</span></div><div class=\"line\">    <span class=\"comment\">// to prevent accidental creation of more than one object.</span></div><div class=\"line\">    Test(<span class=\"keyword\">void</span>)&#123;&#125;;</div><div class=\"line\">    <span class=\"comment\">// Same deal with the copy constructor and the assignment operator,</span></div><div class=\"line\">    <span class=\"comment\">// to prevent making duplicates.</span></div><div class=\"line\">    Test(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;; </div><div class=\"line\">    Test&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This pointer will be the only instance of the Test class.</span></div><div class=\"line\">    <span class=\"keyword\">static</span> Test* instance;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Next, create a new C++ file and title it “Test.cpp”, now add the following lines of code.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div></pre></td></tr></table></figure></p>\n<p>In order to utilize singleton we have to rely on a global reference to our Test instance which will only be initialized once as you can see below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The only instance of the Test class we allow.</span></div><div class=\"line\">Test* Test::instance = <span class=\"literal\">NULL</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Must be called in order to use the Test methods.</span></div><div class=\"line\">Test* Test::get_instance()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(Test::instance == <span class=\"literal\">NULL</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    instance = <span class=\"keyword\">new</span> Test;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Therefore, whenever we want to run a method from our Test class we have to first get the reference and then call the proper test method.</p> <p>Enter the following code.</p> \n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_item_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div></pre></td></tr></table></figure>\n<p>If you recall from part 1 of this tutorial, the Item class represents things players can pick up and use to their advantage during the game. Thus we want to make sure that items can be named, have their effects set, their type set and lastly whether or not they are currently available within the dungeon for use. </p> <p>We’ll begin by testing the Item constructor, so enter the code below.</p> \n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Item constructor test</span></div><div class=\"line\"><span class=\"function\">Item <span class=\"title\">test_sword</span><span class=\"params\">(<span class=\"string\">\"sword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">assert(<span class=\"string\">\"sword\"</span> == test_sword.getName());</div><div class=\"line\">assert(Item::WEAPON == test_sword.getType());</div><div class=\"line\">assert(<span class=\"number\">10</span> == test_sword.getPower());</div><div class=\"line\">assert(<span class=\"number\">0</span> == test_sword.getVitality());</div><div class=\"line\">assert(<span class=\"number\">0</span> == test_sword.getHealth());</div><div class=\"line\">assert(<span class=\"literal\">true</span> == test_sword.mAvailiable);</div></pre></td></tr></table></figure>\n<p>The idea with unit testing is that we check assertions or in other words we test our assumptions about how we believe the code should function. </p><p>There are many other types of testing such as functional testing and integration testing but all we need for this simple game is unit testing so don’t worry about testing becoming overkill we will get back to the game design soon enough.</p> <p>Next we test the assignment operator for the item class. Type the following,</p>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Item operator= test</span></div><div class=\"line\">Item another_sword = test_sword;</div><div class=\"line\"></div><div class=\"line\">assert(<span class=\"string\">\"sword\"</span> == another_sword.getName());</div><div class=\"line\">assert(Item::WEAPON == another_sword.getType());</div><div class=\"line\">assert(<span class=\"number\">10</span> == another_sword.getPower());</div><div class=\"line\">assert(<span class=\"number\">0</span> == another_sword.getVitality());</div><div class=\"line\">assert(<span class=\"number\">0</span> == another_sword.getHealth());</div><div class=\"line\">assert(<span class=\"literal\">true</span> == another_sword.mAvailiable);</div><div class=\"line\"><span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">assert(&amp;another_sword != &amp;test_sword);</div></pre></td></tr></table></figure>\n<p><strong>Pay special attention to the last test.</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">assert(&amp;another_sword != &amp;test_sword);</div></pre></td></tr></table></figure>\n<p>One of the reasons why C++ is considered a tough language to learn is that many programmers just want to avoid learning how pointers and references impact the use of C++’s object model. So lets check this out right quick with a short example.</p>\n<p>Lets imagine the following scenario<strong><em>(don’t type these in yet since we haven’t implemented the actual methods in database.cpp)</em></strong></p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item woodsword = Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item barksword = woodsword;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; &amp;barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; &amp;woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword.setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Note the different memory addresses of the two items. After changing the name of the “barksword” item, the “woodsword” remained intact. However, consider the next example…</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item* woodsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item* barksword = woodsword;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword-&gt;setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Did you notice that changing the name of the “barksword” also changed the name of the “woodsword” to “happysword”. In addition look again at the memory address’, they are exactly the same. Here the C++ compiler did exactly what we told it to do and nothing more but we were unaware that the assignment of pointers meant that the bark and wood swords now reference the same item in memory. Here is what we meant to say to the compiler.</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item* woodsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item* barksword = <span class=\"keyword\">new</span> Item(woodsword-&gt;getName(), woodsword-&gt;getType(),</div><div class=\"line\">woodsword-&gt;getPower(), woodsword-&gt;getVitality(),</div><div class=\"line\">woodsword-&gt;getHealth());</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword-&gt;setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Thus we meant for the attributes of the “woodsword” to be assigned to the “barksword” and for the “barksword” to have its own memory address. Now that we have demonstrated the reasoning behind the reference assertion in the unit test you can finally finish up the Item class test cases for the getter and setter methods.</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Item void constructor test</span></div><div class=\"line\">  Item void_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == void_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item setters and getters test</span></div><div class=\"line\">  void_sword.setPower(<span class=\"number\">99</span>);</div><div class=\"line\">  void_sword.setName(<span class=\"string\">\"steel sword\"</span>);</div><div class=\"line\">  void_sword.setVitality(<span class=\"number\">100</span>);</div><div class=\"line\">  void_sword.setType(Item::ARMOR);</div><div class=\"line\">  void_sword.setHealth(<span class=\"number\">36</span>);</div><div class=\"line\">  void_sword.mAvailiable = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"steel sword\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::ARMOR == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">99</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">100</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">36</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == void_sword.mAvailiable);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>That’s it for now. Oh wait, here is the whole source for Test.h and Test.cpp for reference.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"database.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cassert&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  The Test class uses the singleton design pattern in order to insure </div><div class=\"line\">  that only one Test object will be availiable during program execution.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">class</span> Test</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"comment\">// To call Test methods you have to get the Test instance reference.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Test* <span class=\"title\">get_instance</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Place additional test methods here.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_item_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">// In singleton we have to keep the constuctor private</span></div><div class=\"line\">    <span class=\"comment\">// to prevent accidental creation of more than one object.</span></div><div class=\"line\">    Test(<span class=\"keyword\">void</span>)&#123;&#125;;</div><div class=\"line\">    <span class=\"comment\">// Same deal with the copy constructor and the assignment operator,</span></div><div class=\"line\">    <span class=\"comment\">// to prevent making duplicates.</span></div><div class=\"line\">    Test(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;; </div><div class=\"line\">    Test&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This pointer will be the only instance of the Test class.</span></div><div class=\"line\">    <span class=\"keyword\">static</span> Test* instance;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"Code-Listing\"><a href=\"#Code-Listing\" class=\"headerlink\" title=\"Code Listing\"></a>Code Listing</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The only instance of the Test class we allow.</span></div><div class=\"line\">Test* Test::instance = <span class=\"literal\">NULL</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Must be called in order to use the Test methods.</span></div><div class=\"line\">Test* Test::get_instance()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(Test::instance == <span class=\"literal\">NULL</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    instance = <span class=\"keyword\">new</span> Test;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Test::test_item_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Item constructor test</span></div><div class=\"line\">  <span class=\"function\">Item <span class=\"title\">test_sword</span><span class=\"params\">(<span class=\"string\">\"sword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"sword\"</span> == test_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == test_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">10</span> == test_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == test_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == test_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == test_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item operator= test</span></div><div class=\"line\">  Item another_sword = test_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"sword\"</span> == another_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == another_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">10</span> == another_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == another_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == another_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == another_sword.mAvailiable);</div><div class=\"line\">  <span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">  assert(&amp;another_sword != &amp;test_sword);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item void constructor test</span></div><div class=\"line\">  Item void_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == void_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item setters and getters test</span></div><div class=\"line\">  void_sword.setPower(<span class=\"number\">99</span>);</div><div class=\"line\">  void_sword.setName(<span class=\"string\">\"steel sword\"</span>);</div><div class=\"line\">  void_sword.setVitality(<span class=\"number\">100</span>);</div><div class=\"line\">  void_sword.setType(Item::ARMOR);</div><div class=\"line\">  void_sword.setHealth(<span class=\"number\">36</span>);</div><div class=\"line\">  void_sword.mAvailiable = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"steel sword\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::ARMOR == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">99</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">100</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">36</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == void_sword.mAvailiable);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/2011/06/05/textbasedrpgpart1\">Click here for part I</a><br><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a></p>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>In this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.</p>\n<p>Using a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.</p>\n<h2 id=\"The-Test-Singleton\"><a href=\"#The-Test-Singleton\" class=\"headerlink\" title=\"The Test Singleton\"></a>The Test Singleton</h2><p>So create a new C++ header file for your project and title it “Test.h” and type the following.</p>\n<p>In this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.</p>\n<p>Using a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.</p>\n<p>So create a new C++ header file for your project and title it “Test.h” and type the following.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"database.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cassert&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD;</div></pre></td></tr></table></figure></p>\n<p>For the test class we will implement it as a singleton. Singleton in short means that only a single reference to the class can be accessed at any given time during the program’s execution. However, there are some pitfalls to watch out for when using singleton for objects which clearly should not have a single instance, but in this case we only need to run our test cases once so having multiple test objects each running separate tests will only add confusion to our codebase. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">   The Test class uses the singleton design pattern in order to insure </div><div class=\"line\">   that only one Test object will be availiable during program execution.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">class</span> Test</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"comment\">// To call Test methods you have to get the Test instance reference.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Test* <span class=\"title\">get_instance</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Place additional test methods here.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_item_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">// In singleton we have to keep the constuctor private</span></div><div class=\"line\">    <span class=\"comment\">// to prevent accidental creation of more than one object.</span></div><div class=\"line\">    Test(<span class=\"keyword\">void</span>)&#123;&#125;;</div><div class=\"line\">    <span class=\"comment\">// Same deal with the copy constructor and the assignment operator,</span></div><div class=\"line\">    <span class=\"comment\">// to prevent making duplicates.</span></div><div class=\"line\">    Test(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;; </div><div class=\"line\">    Test&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This pointer will be the only instance of the Test class.</span></div><div class=\"line\">    <span class=\"keyword\">static</span> Test* instance;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Next, create a new C++ file and title it “Test.cpp”, now add the following lines of code.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div></pre></td></tr></table></figure></p>\n<p>In order to utilize singleton we have to rely on a global reference to our Test instance which will only be initialized once as you can see below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The only instance of the Test class we allow.</span></div><div class=\"line\">Test* Test::instance = <span class=\"literal\">NULL</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Must be called in order to use the Test methods.</span></div><div class=\"line\">Test* Test::get_instance()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(Test::instance == <span class=\"literal\">NULL</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    instance = <span class=\"keyword\">new</span> Test;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Therefore, whenever we want to run a method from our Test class we have to first get the reference and then call the proper test method.</p> <p>Enter the following code.</p> \n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_item_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div></pre></td></tr></table></figure>\n<p>If you recall from part 1 of this tutorial, the Item class represents things players can pick up and use to their advantage during the game. Thus we want to make sure that items can be named, have their effects set, their type set and lastly whether or not they are currently available within the dungeon for use. </p> <p>We’ll begin by testing the Item constructor, so enter the code below.</p> \n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Item constructor test</span></div><div class=\"line\"><span class=\"function\">Item <span class=\"title\">test_sword</span><span class=\"params\">(<span class=\"string\">\"sword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">assert(<span class=\"string\">\"sword\"</span> == test_sword.getName());</div><div class=\"line\">assert(Item::WEAPON == test_sword.getType());</div><div class=\"line\">assert(<span class=\"number\">10</span> == test_sword.getPower());</div><div class=\"line\">assert(<span class=\"number\">0</span> == test_sword.getVitality());</div><div class=\"line\">assert(<span class=\"number\">0</span> == test_sword.getHealth());</div><div class=\"line\">assert(<span class=\"literal\">true</span> == test_sword.mAvailiable);</div></pre></td></tr></table></figure>\n<p>The idea with unit testing is that we check assertions or in other words we test our assumptions about how we believe the code should function. </p><p>There are many other types of testing such as functional testing and integration testing but all we need for this simple game is unit testing so don’t worry about testing becoming overkill we will get back to the game design soon enough.</p> <p>Next we test the assignment operator for the item class. Type the following,</p>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Item operator= test</span></div><div class=\"line\">Item another_sword = test_sword;</div><div class=\"line\"></div><div class=\"line\">assert(<span class=\"string\">\"sword\"</span> == another_sword.getName());</div><div class=\"line\">assert(Item::WEAPON == another_sword.getType());</div><div class=\"line\">assert(<span class=\"number\">10</span> == another_sword.getPower());</div><div class=\"line\">assert(<span class=\"number\">0</span> == another_sword.getVitality());</div><div class=\"line\">assert(<span class=\"number\">0</span> == another_sword.getHealth());</div><div class=\"line\">assert(<span class=\"literal\">true</span> == another_sword.mAvailiable);</div><div class=\"line\"><span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">assert(&amp;another_sword != &amp;test_sword);</div></pre></td></tr></table></figure>\n<p><strong>Pay special attention to the last test.</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">assert(&amp;another_sword != &amp;test_sword);</div></pre></td></tr></table></figure>\n<p>One of the reasons why C++ is considered a tough language to learn is that many programmers just want to avoid learning how pointers and references impact the use of C++’s object model. So lets check this out right quick with a short example.</p>\n<p>Lets imagine the following scenario<strong><em>(don’t type these in yet since we haven’t implemented the actual methods in database.cpp)</em></strong></p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item woodsword = Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item barksword = woodsword;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; &amp;barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; &amp;woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword.setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Note the different memory addresses of the two items. After changing the name of the “barksword” item, the “woodsword” remained intact. However, consider the next example…</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item* woodsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item* barksword = woodsword;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword-&gt;setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Did you notice that changing the name of the “barksword” also changed the name of the “woodsword” to “happysword”. In addition look again at the memory address’, they are exactly the same. Here the C++ compiler did exactly what we told it to do and nothing more but we were unaware that the assignment of pointers meant that the bark and wood swords now reference the same item in memory. Here is what we meant to say to the compiler.</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item* woodsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item* barksword = <span class=\"keyword\">new</span> Item(woodsword-&gt;getName(), woodsword-&gt;getType(),</div><div class=\"line\">woodsword-&gt;getPower(), woodsword-&gt;getVitality(),</div><div class=\"line\">woodsword-&gt;getHealth());</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword-&gt;setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Thus we meant for the attributes of the “woodsword” to be assigned to the “barksword” and for the “barksword” to have its own memory address. Now that we have demonstrated the reasoning behind the reference assertion in the unit test you can finally finish up the Item class test cases for the getter and setter methods.</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Item void constructor test</span></div><div class=\"line\">  Item void_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == void_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item setters and getters test</span></div><div class=\"line\">  void_sword.setPower(<span class=\"number\">99</span>);</div><div class=\"line\">  void_sword.setName(<span class=\"string\">\"steel sword\"</span>);</div><div class=\"line\">  void_sword.setVitality(<span class=\"number\">100</span>);</div><div class=\"line\">  void_sword.setType(Item::ARMOR);</div><div class=\"line\">  void_sword.setHealth(<span class=\"number\">36</span>);</div><div class=\"line\">  void_sword.mAvailiable = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"steel sword\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::ARMOR == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">99</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">100</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">36</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == void_sword.mAvailiable);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>That’s it for now. Oh wait, here is the whole source for Test.h and Test.cpp for reference.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"database.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cassert&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  The Test class uses the singleton design pattern in order to insure </div><div class=\"line\">  that only one Test object will be availiable during program execution.</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">class</span> Test</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"comment\">// To call Test methods you have to get the Test instance reference.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Test* <span class=\"title\">get_instance</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Place additional test methods here.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_item_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">// In singleton we have to keep the constuctor private</span></div><div class=\"line\">    <span class=\"comment\">// to prevent accidental creation of more than one object.</span></div><div class=\"line\">    Test(<span class=\"keyword\">void</span>)&#123;&#125;;</div><div class=\"line\">    <span class=\"comment\">// Same deal with the copy constructor and the assignment operator,</span></div><div class=\"line\">    <span class=\"comment\">// to prevent making duplicates.</span></div><div class=\"line\">    Test(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;; </div><div class=\"line\">    Test&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This pointer will be the only instance of the Test class.</span></div><div class=\"line\">    <span class=\"keyword\">static</span> Test* instance;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"Code-Listing\"><a href=\"#Code-Listing\" class=\"headerlink\" title=\"Code Listing\"></a>Code Listing</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The only instance of the Test class we allow.</span></div><div class=\"line\">Test* Test::instance = <span class=\"literal\">NULL</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Must be called in order to use the Test methods.</span></div><div class=\"line\">Test* Test::get_instance()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(Test::instance == <span class=\"literal\">NULL</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    instance = <span class=\"keyword\">new</span> Test;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Test::test_item_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Item constructor test</span></div><div class=\"line\">  <span class=\"function\">Item <span class=\"title\">test_sword</span><span class=\"params\">(<span class=\"string\">\"sword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"sword\"</span> == test_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == test_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">10</span> == test_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == test_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == test_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == test_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item operator= test</span></div><div class=\"line\">  Item another_sword = test_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"sword\"</span> == another_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == another_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">10</span> == another_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == another_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == another_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == another_sword.mAvailiable);</div><div class=\"line\">  <span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">  assert(&amp;another_sword != &amp;test_sword);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item void constructor test</span></div><div class=\"line\">  Item void_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == void_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item setters and getters test</span></div><div class=\"line\">  void_sword.setPower(<span class=\"number\">99</span>);</div><div class=\"line\">  void_sword.setName(<span class=\"string\">\"steel sword\"</span>);</div><div class=\"line\">  void_sword.setVitality(<span class=\"number\">100</span>);</div><div class=\"line\">  void_sword.setType(Item::ARMOR);</div><div class=\"line\">  void_sword.setHealth(<span class=\"number\">36</span>);</div><div class=\"line\">  void_sword.mAvailiable = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"steel sword\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::ARMOR == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">99</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">100</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">36</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == void_sword.mAvailiable);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a></p>\n"},{"title":"Build A Text Based Multiplayer RPG Part III","date":"2011-06-09T07:00:00.000Z","_content":"[Click here for part II][link_part_2]\n[Click here for part IV][link_part_4]\n\n# Intro\n\nAfter writing the code to support the unit test in part II, beginning in this part we'll look at the code behind the test to verify that our test are sound and correct.\n\n[link_part_2]: /2011/06/05/textbasedrpgpart2\n[link_part_4]: /2011/06/11/textbasedrpgpart4\n","source":"_posts/textbasedrpgpart3.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part III\ndate: 2011-06-09\ncategories: [tutorial]\ntags: [cpp]\n---\n[Click here for part II][link_part_2]\n[Click here for part IV][link_part_4]\n\n# Intro\n\nAfter writing the code to support the unit test in part II, beginning in this part we'll look at the code behind the test to verify that our test are sound and correct.\n\n[link_part_2]: /2011/06/05/textbasedrpgpart2\n[link_part_4]: /2011/06/11/textbasedrpgpart4\n","slug":"textbasedrpgpart3","published":1,"updated":"2017-04-12T03:28:48.000Z","_id":"cj1d8kr92000qtswvsarciqss","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"/2011/06/05/textbasedrpgpart2\">Click here for part II</a><br><a href=\"/2011/06/11/textbasedrpgpart4\">Click here for part IV</a></p>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>After writing the code to support the unit test in part II, beginning in this part we’ll look at the code behind the test to verify that our test are sound and correct.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/2011/06/05/textbasedrpgpart2\">Click here for part II</a><br><a href=\"/2011/06/11/textbasedrpgpart4\">Click here for part IV</a></p>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>After writing the code to support the unit test in part II, beginning in this part we’ll look at the code behind the test to verify that our test are sound and correct.</p>\n"},{"title":"Build A Text Based Multiplayer RPG Part IV","date":"2011-06-11T07:00:00.000Z","_content":"- [Click here for part III][link_part_3]\n- [Click here for part V][link_part_5]\n\n# Intro\nWe continue our quest to design a console based multiplayer RPG game in this article we'll implement the code for the Monster and Room classes. Both of these classes are critical to our application so pay close attention to the instructions.\n\n[link_part_3]: /2011/06/09/textbasedrpgpart3\n[link_part_5]: /2011/06/15/textbasedrpgpart5\n","source":"_posts/textbasedrpgpart4.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part IV\ndate: 2011-06-11\ncategories: [tutorial]\ntags: [cpp]\n---\n- [Click here for part III][link_part_3]\n- [Click here for part V][link_part_5]\n\n# Intro\nWe continue our quest to design a console based multiplayer RPG game in this article we'll implement the code for the Monster and Room classes. Both of these classes are critical to our application so pay close attention to the instructions.\n\n[link_part_3]: /2011/06/09/textbasedrpgpart3\n[link_part_5]: /2011/06/15/textbasedrpgpart5\n","slug":"textbasedrpgpart4","published":1,"updated":"2017-04-11T04:44:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr94000stswv3oymbspf","content":"<ul>\n<li><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a></li>\n<li><a href=\"/2011/06/15/textbasedrpgpart5\">Click here for part V</a></li>\n</ul>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>We continue our quest to design a console based multiplayer RPG game in this article we’ll implement the code for the Monster and Room classes. Both of these classes are critical to our application so pay close attention to the instructions.</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a></li>\n<li><a href=\"/2011/06/15/textbasedrpgpart5\">Click here for part V</a></li>\n</ul>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>We continue our quest to design a console based multiplayer RPG game in this article we’ll implement the code for the Monster and Room classes. Both of these classes are critical to our application so pay close attention to the instructions.</p>\n"},{"title":"Build A Text Based Multiplayer RPG Part VI","date":"2011-06-16T07:00:00.000Z","_content":"- [Click here for part V][link_part_5]\n- [Click here for part VII][link_part_7]\n\n# Intro\nIn part six of the tutorial we build the client side code for the multiplayer game which will connect to the server. After completion of this part you can run the client code by itself to simulate a single player version of the game.\n\n[link_part_5]: /2011/06/15/textbasedrpgpart5\n[link_part_7]: /2011/06/17/textbasedrpgpart7\n","source":"_posts/textbasedrpgpart6.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part VI\ndate: 2011-06-16\ncategories: [tutorial]\ntags: [cpp]\n---\n- [Click here for part V][link_part_5]\n- [Click here for part VII][link_part_7]\n\n# Intro\nIn part six of the tutorial we build the client side code for the multiplayer game which will connect to the server. After completion of this part you can run the client code by itself to simulate a single player version of the game.\n\n[link_part_5]: /2011/06/15/textbasedrpgpart5\n[link_part_7]: /2011/06/17/textbasedrpgpart7\n","slug":"textbasedrpgpart6","published":1,"updated":"2017-04-11T04:53:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr96000vtswv2egdtwox","content":"<ul>\n<li><a href=\"/2011/06/15/textbasedrpgpart5\">Click here for part V</a></li>\n<li><a href=\"/2011/06/17/textbasedrpgpart7\">Click here for part VII</a></li>\n</ul>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>In part six of the tutorial we build the client side code for the multiplayer game which will connect to the server. After completion of this part you can run the client code by itself to simulate a single player version of the game.</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/2011/06/15/textbasedrpgpart5\">Click here for part V</a></li>\n<li><a href=\"/2011/06/17/textbasedrpgpart7\">Click here for part VII</a></li>\n</ul>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>In part six of the tutorial we build the client side code for the multiplayer game which will connect to the server. After completion of this part you can run the client code by itself to simulate a single player version of the game.</p>\n"},{"title":"Build A Text Based Multiplayer RPG Part V","date":"2011-06-15T07:00:00.000Z","_content":"- [Click here for part IV][link_part_4]\n- [Click here for part VI][link_part_6]\n\n# Intro\nThe fifth part of the tutorial on creating a text based multiplayer RPG game will see us creating the last part of the testing and game mechanics before the next section where we'll launch the client and server code to actually test our game in action.\n\n[link_part_4]: /2011/06/11/textbasedrpgpart4\n[link_part_6]: /2011/06/16/textbasedrpgpart6\n","source":"_posts/textbasedrpgpart5.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part V\ndate: 2011-06-15\ncategories: [tutorial]\ntags: [cpp]\n---\n- [Click here for part IV][link_part_4]\n- [Click here for part VI][link_part_6]\n\n# Intro\nThe fifth part of the tutorial on creating a text based multiplayer RPG game will see us creating the last part of the testing and game mechanics before the next section where we'll launch the client and server code to actually test our game in action.\n\n[link_part_4]: /2011/06/11/textbasedrpgpart4\n[link_part_6]: /2011/06/16/textbasedrpgpart6\n","slug":"textbasedrpgpart5","published":1,"updated":"2017-04-11T04:51:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr9a000ytswv83z8nb1r","content":"<ul>\n<li><a href=\"/2011/06/11/textbasedrpgpart4\">Click here for part IV</a></li>\n<li><a href=\"/2011/06/16/textbasedrpgpart6\">Click here for part VI</a></li>\n</ul>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>The fifth part of the tutorial on creating a text based multiplayer RPG game will see us creating the last part of the testing and game mechanics before the next section where we’ll launch the client and server code to actually test our game in action.</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/2011/06/11/textbasedrpgpart4\">Click here for part IV</a></li>\n<li><a href=\"/2011/06/16/textbasedrpgpart6\">Click here for part VI</a></li>\n</ul>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>The fifth part of the tutorial on creating a text based multiplayer RPG game will see us creating the last part of the testing and game mechanics before the next section where we’ll launch the client and server code to actually test our game in action.</p>\n"},{"title":"Build A Text Based Multiplayer RPG Part VII","date":"2011-06-17T07:00:00.000Z","_content":"- [Click here for part VI][link_part_6]\n\n# Intro\nThe Final part of our tutorial, after completing this tutorial you will have successfully created a multiplayer text based rpg. Read on to learn how to design the game server that will connect to the client code written in part six.\n\n[link_part_6]: /2011/06/16/textbasedrpgpart6\n","source":"_posts/textbasedrpgpart7.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part VII\ndate: 2011-06-17\ncategories: [tutorial]\ntags: [cpp]\n---\n- [Click here for part VI][link_part_6]\n\n# Intro\nThe Final part of our tutorial, after completing this tutorial you will have successfully created a multiplayer text based rpg. Read on to learn how to design the game server that will connect to the client code written in part six.\n\n[link_part_6]: /2011/06/16/textbasedrpgpart6\n","slug":"textbasedrpgpart7","published":1,"updated":"2017-04-11T04:59:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d8kr9f0011tswv44xyt7rp","content":"<ul>\n<li><a href=\"/2011/06/16/textbasedrpgpart6\">Click here for part VI</a></li>\n</ul>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>The Final part of our tutorial, after completing this tutorial you will have successfully created a multiplayer text based rpg. Read on to learn how to design the game server that will connect to the client code written in part six.</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/2011/06/16/textbasedrpgpart6\">Click here for part VI</a></li>\n</ul>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>The Final part of our tutorial, after completing this tutorial you will have successfully created a multiplayer text based rpg. Read on to learn how to design the game server that will connect to the client code written in part six.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1d8kr8y000otswvbs676i04","category_id":"cj1d8kr8v000mtswv9qnuzppx","_id":"cj1d8kr96000utswvl2sezpkz"},{"post_id":"cj1d8kr8b000jtswv0la5ehgs","category_id":"cj1d8kr8v000mtswv9qnuzppx","_id":"cj1d8kr99000xtswvhqrn82cl"},{"post_id":"cj1d8kr92000qtswvsarciqss","category_id":"cj1d8kr8v000mtswv9qnuzppx","_id":"cj1d8kr9e0010tswvnsz62dou"},{"post_id":"cj1d8kr94000stswv3oymbspf","category_id":"cj1d8kr8v000mtswv9qnuzppx","_id":"cj1d8kr9q0013tswvhjvf2vqp"},{"post_id":"cj1d8kr8t000ltswv44cxsxmf","category_id":"cj1d8kr93000rtswv2tef6r9i","_id":"cj1d8kr9r0016tswv3p2flwq5"},{"post_id":"cj1d8kr96000vtswv2egdtwox","category_id":"cj1d8kr8v000mtswv9qnuzppx","_id":"cj1d8kr9s0018tswvg41mt62o"},{"post_id":"cj1d8kr9a000ytswv83z8nb1r","category_id":"cj1d8kr8v000mtswv9qnuzppx","_id":"cj1d8kr9t001atswvwtj7gmu0"},{"post_id":"cj1d8kr8w000ntswvw7j45zql","category_id":"cj1d8kr8v000mtswv9qnuzppx","_id":"cj1d8kr9t001ctswvktjjtegk"},{"post_id":"cj1d8kr9f0011tswv44xyt7rp","category_id":"cj1d8kr8v000mtswv9qnuzppx","_id":"cj1d8kr9u001etswvt6molnlw"}],"PostTag":[{"post_id":"cj1d8kr88000itswv76rnw2lo","tag_id":"cj1d8kr8e000ktswvl8fa30nx","_id":"cj1d8kr9p0012tswvtmqip9sb"},{"post_id":"cj1d8kr88000itswv76rnw2lo","tag_id":"cj1d8kr91000ptswvzpy4kcl0","_id":"cj1d8kr9q0014tswvedwl9yrs"},{"post_id":"cj1d8kr88000itswv76rnw2lo","tag_id":"cj1d8kr95000ttswvnlsp1awp","_id":"cj1d8kr9r0017tswv5h535voo"},{"post_id":"cj1d8kr8b000jtswv0la5ehgs","tag_id":"cj1d8kr8e000ktswvl8fa30nx","_id":"cj1d8kr9t001btswvvdy1rkdu"},{"post_id":"cj1d8kr8b000jtswv0la5ehgs","tag_id":"cj1d8kr91000ptswvzpy4kcl0","_id":"cj1d8kr9u001dtswv6ukhkcwu"},{"post_id":"cj1d8kr8t000ltswv44cxsxmf","tag_id":"cj1d8kr9s0019tswvj5c28u8r","_id":"cj1d8kr9y001htswvz64s5390"},{"post_id":"cj1d8kr8t000ltswv44cxsxmf","tag_id":"cj1d8kr9u001ftswvyzf0au7l","_id":"cj1d8kr9y001itswvyekgbgyv"},{"post_id":"cj1d8kr8w000ntswvw7j45zql","tag_id":"cj1d8kr9x001gtswvv87hj3a6","_id":"cj1d8kr9z001ktswv3hastimn"},{"post_id":"cj1d8kr8y000otswvbs676i04","tag_id":"cj1d8kr9x001gtswvv87hj3a6","_id":"cj1d8kra0001mtswv2ps6vs2i"},{"post_id":"cj1d8kr92000qtswvsarciqss","tag_id":"cj1d8kr9x001gtswvv87hj3a6","_id":"cj1d8kra2001otswvbgwtm613"},{"post_id":"cj1d8kr94000stswv3oymbspf","tag_id":"cj1d8kr9x001gtswvv87hj3a6","_id":"cj1d8kra3001qtswvj2y96gke"},{"post_id":"cj1d8kr96000vtswv2egdtwox","tag_id":"cj1d8kr9x001gtswvv87hj3a6","_id":"cj1d8kra4001stswvo9lyxk7u"},{"post_id":"cj1d8kr9a000ytswv83z8nb1r","tag_id":"cj1d8kr9x001gtswvv87hj3a6","_id":"cj1d8kra6001utswv1rair1ao"},{"post_id":"cj1d8kr9f0011tswv44xyt7rp","tag_id":"cj1d8kr9x001gtswvv87hj3a6","_id":"cj1d8kra6001vtswvio6e7ihl"}],"Tag":[{"name":"java","_id":"cj1d8kr8e000ktswvl8fa30nx"},{"name":"android","_id":"cj1d8kr91000ptswvzpy4kcl0"},{"name":"mobile","_id":"cj1d8kr95000ttswvnlsp1awp"},{"name":"ruby","_id":"cj1d8kr9s0019tswvj5c28u8r"},{"name":"javascript","_id":"cj1d8kr9u001ftswvyzf0au7l"},{"name":"cpp","_id":"cj1d8kr9x001gtswvv87hj3a6"}]}}