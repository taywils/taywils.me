{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"043afbe7de4fe1bbe0dc07c03c242bc361e52c45","modified":1493607777000},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1491788469000},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1491788469000},{"_id":"themes/icarus/README.md","hash":"25c75503f044b817297995a96621c92ce037a098","modified":1491788469000},{"_id":"themes/icarus/_config.yml","hash":"f8814a4d49d233b4a1b61c37d317d42d81ee7636","modified":1493620180000},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1491788469000},{"_id":"source/_posts/androidgoogleplacestutorial.md","hash":"da70955cae3fcf62d291257ee0d0e0742fb7430c","modified":1493620270000},{"_id":"source/_posts/androidwatermark.md","hash":"a6b01f9266af73a106e53b2f0bd426e3d315b9e4","modified":1493620270000},{"_id":"source/_posts/boostchatclient.md","hash":"4975ad2a1e094def6813f5182b2be558444032f7","modified":1493620270000},{"_id":"source/_posts/boostchatserver.md","hash":"7dec3c22000fdfcc883a13c4fe6d7fe4720863db","modified":1493620270000},{"_id":"source/_posts/boozenet.md","hash":"bb8826e701024e5fd84105de9d1507e6eeda1fb5","modified":1493620270000},{"_id":"source/_posts/buildanapplicationlauncherwithandroid.md","hash":"a2672e6d59867f6951cce7e65e3eca32dd2d63b8","modified":1493620270000},{"_id":"source/_posts/imagescrapeversion1.md","hash":"f9424dd0519cb99993cfbbad8e5aa1bef98e6f46","modified":1493620270000},{"_id":"source/_posts/guestdialer.md","hash":"ef31b691c65d5fc65152ac3d9d022e0ff5a6ae17","modified":1493620270000},{"_id":"source/_posts/imagescrapeversion2.md","hash":"297fe04881aa07c457f4deb337866e55714b855b","modified":1493620270000},{"_id":"source/_posts/javasparkframeworktutorial.md","hash":"7a8534a9b38ef83e51bc8889e08f277dbac60fe7","modified":1493620270000},{"_id":"source/_posts/jekyllblog.md","hash":"bde79b7187e812959e4e0ff3a1a019cec3e838ca","modified":1493620270000},{"_id":"source/_posts/learningmagentopart1.md","hash":"0e410d08a5550412c800859cb9e48836e70b8754","modified":1493620270000},{"_id":"source/_posts/newprojectspage.md","hash":"3e64e678c6e6253aa00733c20abfecb15578928d","modified":1493620270000},{"_id":"source/_posts/patomicbeta.md","hash":"240d7d6ae3386a402f816454466a33c638cdd5c3","modified":1493620270000},{"_id":"source/_posts/pythonfinance1.md","hash":"cefdcf03c0076d64959ff3142a3ec9ab0479f52c","modified":1493620270000},{"_id":"source/_posts/qalite.md","hash":"0d840ea01e535594f91bf83b49835fd76d72a883","modified":1493620270000},{"_id":"source/_posts/rubycramprssfeed.md","hash":"937e7864ceca9d406b028249e831c4befce220d9","modified":1493620270000},{"_id":"source/_posts/rubyonrailsblogdemo.md","hash":"18cfe585be7fbe7d7a2d9d04805dd1569db92a10","modified":1493620270000},{"_id":"source/_posts/textbasedrpgpart1.md","hash":"0ea4f27feacc96cb5a6adce6f928889c2814ad8c","modified":1493620270000},{"_id":"source/_posts/textbasedrpgpart2.md","hash":"8f215839dac4cd3ee295fc7f6427014a92fdde83","modified":1493620270000},{"_id":"source/_posts/textbasedrpgpart3.md","hash":"97cccfc89e317d9663bc942da18fa39e58a1ee61","modified":1493620270000},{"_id":"source/_posts/textbasedrpgpart4.md","hash":"736a5a581d939869c497660c56fa64dc5513f066","modified":1493620270000},{"_id":"source/_posts/textbasedrpgpart5.md","hash":"a53cde0053d7364f512c95d52ec4115eb81400e0","modified":1493620270000},{"_id":"source/_posts/textbasedrpgpart6.md","hash":"9181aed47e16333ed82880983d20adcb30fb69d2","modified":1493620270000},{"_id":"source/_posts/textbasedrpgpart7.md","hash":"66c86289f3031df14043719a9dda84d0b035fabd","modified":1493620270000},{"_id":"source/_posts/udpechoinc.md","hash":"92ae59edc59b8385a2e9f1cf60caf2aa0b0f81a1","modified":1493620270000},{"_id":"source/_posts/udpechoincp2.md","hash":"531a04912ca4bd6a3aed18adf3e3af82e8084ecf","modified":1493620270000},{"_id":"source/_posts/writingabookandmisc.md","hash":"03bdbf355c664a2f85e666dd9db194c16e21c682","modified":1493620270000},{"_id":"source/about/index.md","hash":"547a6679c4bb31cc8c0cb5f4f79bfe1df7c6ca73","modified":1493620196000},{"_id":"source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1493524825000},{"_id":"source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1493525313000},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1491788469000},{"_id":"themes/icarus/.git/config","hash":"fde0e7c381af5e1c6f07bf907a573f47cbc6a661","modified":1491788469000},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1491788465000},{"_id":"themes/icarus/.git/index","hash":"21f2f1e23f31ec6d55689805f61ed49815e97d6c","modified":1491788622000},{"_id":"themes/icarus/.git/packed-refs","hash":"afd7a36dcb04bce77e5741908274aebc2297501c","modified":1491788469000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"9393fd3dbc943f1544facb66af7fd8b7a5b9ddbb","modified":1491788469000},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1491788469000},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1491788469000},{"_id":"themes/icarus/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1491788469000},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1491788469000},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1491788469000},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1491788469000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1491788469000},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1491788469000},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1491788469000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1491788469000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1491788469000},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1491788469000},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1491788469000},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1491788469000},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1491788469000},{"_id":"themes/icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1491788469000},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1491788469000},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1491788469000},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1491788469000},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1491788469000},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1491788469000},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1491788469000},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1491788465000},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1491788465000},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1491788465000},{"_id":"themes/icarus/.git/logs/HEAD","hash":"9f53793e1a258bd7a8d84fa08f0188a513530c87","modified":1491788469000},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1491788469000},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1491788469000},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1491788469000},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"59abd552086c26cb0a6fd86d18ce380c3b1b3c55","modified":1491788469000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1491788469000},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1491788469000},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1491788469000},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"0913444317759c3ff0588ca3aa4a6a89b6595307","modified":1491788469000},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1491788469000},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"305aa07646ab03e00d8239a811f4ec6f75751e1e","modified":1491788469000},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1491788469000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"9c260a551596f71e93177f2289b5cb1c4bc7d96c","modified":1491788469000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1491788469000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"44f30945882afd27c89da2173da501fb1b531488","modified":1491788469000},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1491788469000},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1491788469000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1491788469000},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1491788469000},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1491788469000},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1491788469000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1491788469000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1491788469000},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"b349c7089a44302eaa8291c0ed13ef815f868a68","modified":1491788469000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1491788469000},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1491788469000},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1491788469000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1491788469000},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1491788469000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1491788469000},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1491788469000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1491788469000},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1491788469000},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1491788469000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1491788469000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1491788469000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1491788469000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1491788469000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1491788469000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1491788469000},{"_id":"themes/icarus/source/css/_extend.styl","hash":"539e02107f35e8b3bdb9bf160dc212a433a7b60e","modified":1491788469000},{"_id":"themes/icarus/source/css/_variables.styl","hash":"d62af931be6612ec8c3a917836379a8cd92fbce1","modified":1491788469000},{"_id":"themes/icarus/source/css/style.styl","hash":"1716b199dba80b26086f325d69c36fa682465106","modified":1491788469000},{"_id":"themes/icarus/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1491788469000},{"_id":"themes/icarus/source/js/main.js","hash":"93dc932946e2898bf4f39c42af1b27295e886af1","modified":1491788469000},{"_id":"themes/icarus/.git/objects/pack/pack-41016734246655e2b6d642b68b318ddbca05950d.idx","hash":"d964e3414ddef4f0facff0f0e0a25c46590301dc","modified":1491788469000},{"_id":"themes/icarus/.git/refs/heads/master","hash":"8cb36ed5379ce7ea17d93fa1677f95e96ecd7243","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1491788469000},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1491788469000},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"512b9252e1799b93a17c4ad847b0586814a030b4","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"fb0170075dc2a41e01dd11bbfdbccbed544c479a","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1491788469000},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1491788469000},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1491788469000},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1491788469000},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1491788469000},{"_id":"themes/icarus/source/css/images/favicon.ico","hash":"7734b256b60fd599b54fd71a8a35a8bf99d60b2d","modified":1493603225000},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1491788469000},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1491788469000},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1491788469000},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1491788469000},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1491788469000},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"9f53793e1a258bd7a8d84fa08f0188a513530c87","modified":1491788469000},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1491788469000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1491788469000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1491788469000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1491788469000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1491788469000},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491788469000},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"9f53793e1a258bd7a8d84fa08f0188a513530c87","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1491788469000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1491788469000},{"_id":"themes/icarus/.git/objects/pack/pack-41016734246655e2b6d642b68b318ddbca05950d.pack","hash":"f0ca0d69454004623dce3a5989433dff02f3bce0","modified":1491788469000},{"_id":"public/content.json","hash":"06c66258736bd5013ce2da9b72ade262dfa50f38","modified":1493620422526},{"_id":"public/about/index.html","hash":"fbd17276c38bc198060551aca5b1316c8e634fc8","modified":1493620423169},{"_id":"public/categories/index.html","hash":"3c9a61b92b250a5d2a25e0450fa4b0eaa44fac0c","modified":1493620423169},{"_id":"public/tags/index.html","hash":"dfd7ce3c1ddc039b41f9195ee759ea7f11d5642a","modified":1493620423170},{"_id":"public/2011/06/04/androidwatermark/index.html","hash":"4bc9ced34407a3a16c62292dc9aed30068778c88","modified":1493620423170},{"_id":"public/2011/06/05/textbasedrpgpart1/index.html","hash":"7ce44e5b2c78aa96bdbe060a276e008d24dfe6ce","modified":1493620423170},{"_id":"public/2011/06/08/textbasedrpgpart2/index.html","hash":"b4fe6bf48747bcfbdd3dd56472b28551941a9d58","modified":1493620423170},{"_id":"public/2011/06/09/textbasedrpgpart3/index.html","hash":"31999e2f5fcd724e40e55cff00020d2bc50dfe7c","modified":1493620423170},{"_id":"public/2011/06/10/rubyonrailsblogdemo/index.html","hash":"944d6e25dbca1bb8cc6177f8386ca2c41db8af3a","modified":1493620423170},{"_id":"public/2011/06/11/textbasedrpgpart4/index.html","hash":"3e7931813a7cc563dfafc6770d6999496ed9b945","modified":1493620423170},{"_id":"public/2011/06/15/textbasedrpgpart5/index.html","hash":"42363b3595fb01a21af6eb6abd152a91860c8e57","modified":1493620423170},{"_id":"public/2011/06/16/textbasedrpgpart6/index.html","hash":"dbe6ab6d8f6d5e9abda5866a832010ebe890d634","modified":1493620423170},{"_id":"public/2011/06/17/textbasedrpgpart7/index.html","hash":"d2debff07bc670191613d8de183e65506eb1b3b1","modified":1493620423170},{"_id":"public/2011/06/24/guestdialer/index.html","hash":"7d2c12db728695931db30e2b2a160ea85079988a","modified":1493620423170},{"_id":"public/2011/07/05/buildanapplicationlauncherwithandroid/index.html","hash":"a0920e6fd348eaf80193ac566c9da6bfdd3e8a98","modified":1493620423170},{"_id":"public/2011/09/04/imagescrapeversion1/index.html","hash":"e8cbf6cfa59b17e4ed90fb61b438369ea7a935ec","modified":1493620423171},{"_id":"public/2012/03/26/boozenet/index.html","hash":"1ff4d61efa45e47cc0975776b6a6fb586e14b543","modified":1493620423171},{"_id":"public/2012/07/15/qalite/index.html","hash":"e98f3589eb4accc2d29e18fa8d5790681019e036","modified":1493620423171},{"_id":"public/2012/07/25/jekyllblog/index.html","hash":"390425e77bcb237ecd8a84d655385d4cf97c6766","modified":1493620423171},{"_id":"public/2012/09/12/newprojectspage/index.html","hash":"178193bea570348374d2da9843fd355669b6b9cf","modified":1493620423171},{"_id":"public/2012/10/28/rubycramprssfeed/index.html","hash":"3794ccf19037e96f3ced69cec965ba068620a9bf","modified":1493620423171},{"_id":"public/2012/12/23/pythonfinance1/index.html","hash":"572877cd29a8833230f117ab11aca2951bfdf471","modified":1493620423171},{"_id":"public/2013/02/09/imagescrapeversion2/index.html","hash":"781cb5b645e0b8e25958aba8dabd03bff857ecd8","modified":1493620423171},{"_id":"public/2013/03/13/writingabookandmisc/index.html","hash":"a6af192320c7e38ad4a8ebf34fc52d7a33be0e63","modified":1493620423171},{"_id":"public/2013/05/06/androidgoogleplacestutorial/index.html","hash":"f35866862835f5add94814c2a29e61b8d7d62457","modified":1493620423171},{"_id":"public/2013/07/16/learningmagentopart1/index.html","hash":"ebfec45c6d99b367ff51b8f105c73bc8ccbc0dba","modified":1493620423171},{"_id":"public/2013/11/05/javasparkframeworktutorial/index.html","hash":"2b1b6a3c442ad796887b09ee0c10ccd706409ca1","modified":1493620423171},{"_id":"public/2014/07/02/patomicbeta/index.html","hash":"f9b54817ccbc5f82c6bdb6f113b388e9a89ef012","modified":1493620423171},{"_id":"public/2014/11/08/udpechoinc/index.html","hash":"5891317306a35c5ccf8a9b6d047d894980757fe3","modified":1493620423172},{"_id":"public/2014/11/09/udpechoincp2/index.html","hash":"e643431acb0aa514e3851699e84d70aa97c4b462","modified":1493620423172},{"_id":"public/2014/11/15/boostchatclient/index.html","hash":"a88624ef3321f89704804cd18ea6283e477ab390","modified":1493620423172},{"_id":"public/2014/11/28/boostchatserver/index.html","hash":"1d4b41d90a0c5ab46bb6ab95813eaa0024a6b054","modified":1493620423172},{"_id":"public/archives/index.html","hash":"d54672a881ddf3163de20281597824f278a529b7","modified":1493620423172},{"_id":"public/archives/page/2/index.html","hash":"399efb6fc404b38c020c70b593b1e445bf8075f4","modified":1493620423172},{"_id":"public/archives/page/3/index.html","hash":"38e4aa9a2f628928450084574179ec3fc246d14e","modified":1493620423172},{"_id":"public/archives/2011/index.html","hash":"9151ed1e777770f5fea73428dedfc0ec7cbde2d5","modified":1493620423172},{"_id":"public/archives/2011/page/2/index.html","hash":"d3fefaac834b1f7c1311bbc8bbd1772767b701e1","modified":1493620423172},{"_id":"public/archives/2011/06/index.html","hash":"84050551c88c2e8f156a388a2ef2fcc74ba9dfba","modified":1493620423172},{"_id":"public/archives/2011/07/index.html","hash":"979e4055afe39b3bc1ffb61891f3caa8fb8d549c","modified":1493620423172},{"_id":"public/archives/2011/09/index.html","hash":"5280b9872949375dae7ab2e2a18c39fc63bfb393","modified":1493620423172},{"_id":"public/archives/2012/index.html","hash":"d34a65c68b215531f48191ab9ec0b64261b8773f","modified":1493620423172},{"_id":"public/archives/2012/03/index.html","hash":"abdec11bb92f31a8a3714fbad8b78a1854c0f601","modified":1493620423173},{"_id":"public/archives/2012/07/index.html","hash":"611b5a75f7dd28fb2bb6bfabe89fbd8ed0f29861","modified":1493620423173},{"_id":"public/archives/2012/09/index.html","hash":"8ea3f2e657c9ceee7b41e1fe34ffd05335885ef2","modified":1493620423173},{"_id":"public/archives/2012/10/index.html","hash":"05eb786fff4efd509bdc7aaa6557014333d1fdfb","modified":1493620423173},{"_id":"public/archives/2012/12/index.html","hash":"768acb305def559d9b5656989ba2d25957ece9a9","modified":1493620423173},{"_id":"public/archives/2013/index.html","hash":"96f94a7fbce3341ef0d5836b09867c9ddf795a42","modified":1493620423173},{"_id":"public/archives/2013/02/index.html","hash":"77946080ca80fc17de615ceb584cac43b948751a","modified":1493620423173},{"_id":"public/archives/2013/03/index.html","hash":"2af7f7c0abc5f6394ed2c8878b43f3aed14e344b","modified":1493620423173},{"_id":"public/archives/2013/05/index.html","hash":"1991741ea449349687b85727937d00223806ea9a","modified":1493620423173},{"_id":"public/archives/2013/07/index.html","hash":"fc0a7ae6d4e088c9c0beebb316038cffbdb7a36d","modified":1493620423173},{"_id":"public/archives/2013/11/index.html","hash":"5e16296205698db248a67625d9b94a74bdc53b77","modified":1493620423173},{"_id":"public/archives/2014/index.html","hash":"5c09982b6cdb81e59beae1845939c66bdeda5503","modified":1493620423173},{"_id":"public/archives/2014/07/index.html","hash":"7d2e7d46fdbbf88105f081ef601df6042599c739","modified":1493620423173},{"_id":"public/archives/2014/11/index.html","hash":"abc64c70cca46df432d619ba1ba0ab0a84364a78","modified":1493620423173},{"_id":"public/categories/mobile/index.html","hash":"4b9c0c5b6fd7e6d65118fbc8bb3cf5377b593df2","modified":1493620423173},{"_id":"public/categories/tutorial/index.html","hash":"e514ebe5a3211e0beddf280dd98d7126d0334223","modified":1493620423174},{"_id":"public/categories/tutorial/page/2/index.html","hash":"64a50d7f68b3091364e0c5f8d66c3b10ecd72f43","modified":1493620423174},{"_id":"public/categories/mobile/android/index.html","hash":"c238bf59c8da5424f84c28ba53d9d8cd282b632e","modified":1493620423174},{"_id":"public/categories/tutorial/socket-programming/index.html","hash":"cab8027edce5b8d3b11d061fc8fd7331f3a4deb7","modified":1493620423174},{"_id":"public/categories/mobile/android/tutorial/index.html","hash":"b4d885a156a962ee5b1e828f3bee7e80540f7135","modified":1493620423174},{"_id":"public/categories/open-source/index.html","hash":"6fddc1a84837a25a234902de9cbaecd01be3f6ca","modified":1493620423174},{"_id":"public/categories/web/index.html","hash":"5e65883e04970af7d8f703dd6eac544a3fe32ff0","modified":1493620423174},{"_id":"public/categories/tutorial/socket-programming/multi-threading/index.html","hash":"47dde16dd5c11c5381c9f34d676f582bb99074e7","modified":1493620423174},{"_id":"public/categories/ruby-on-rails/index.html","hash":"34220c4622501166ebc3762509f97e9edf7c3d78","modified":1493620423174},{"_id":"public/categories/open-source/project/index.html","hash":"e5d9d245bf5079d0b60a75ac8d7dfa7fd44b0853","modified":1493620423174},{"_id":"public/categories/web/tutorial/index.html","hash":"dacfefc87cdf914aa472e205b4b33cc32d9597f2","modified":1493620423174},{"_id":"public/categories/web/magento/index.html","hash":"97c36aeab19bf6fb2dd3867c37c608453dc201b8","modified":1493620423174},{"_id":"public/categories/open-source/project/datomic/index.html","hash":"0e2701282ef29358f15c2486a4d44b8cd2f3fc4b","modified":1493620423174},{"_id":"public/index.html","hash":"4c96881731dc6b423b37859adb86dbd9d8ea6e47","modified":1493620423174},{"_id":"public/page/2/index.html","hash":"b277edc8c1dc83fd061528293dce2bc691e90366","modified":1493620423175},{"_id":"public/page/3/index.html","hash":"93bf94c1c0637e0ac1918b5be63c38e2dbf42724","modified":1493620423175},{"_id":"public/tags/java/index.html","hash":"25102cea1b360049756abc8a38dbb428efa2b3c6","modified":1493620423175},{"_id":"public/tags/android/index.html","hash":"8b6b9ccd1575fd37de88805a980c4bb97f585004","modified":1493620423175},{"_id":"public/tags/cpp/index.html","hash":"a3cd26536472451382340a389d171d17ce4e9c80","modified":1493620423175},{"_id":"public/tags/cpp/page/2/index.html","hash":"b28a68051dee55c79f2a0dd9cee34a75ec6b8353","modified":1493620423175},{"_id":"public/tags/mobile/index.html","hash":"2b391c54db7781ec6d6ca8f27f7ac6ba86cadc09","modified":1493620423175},{"_id":"public/tags/javascript/index.html","hash":"b64bd7586a660f494577b078166a220afc6fb474","modified":1493620423175},{"_id":"public/tags/nodejs/index.html","hash":"b01587265a7a333537810e467bfe35cd772c909d","modified":1493620423175},{"_id":"public/tags/ruby/index.html","hash":"d403ab7afdfc136ece403ec084e9e8fcf956fa9b","modified":1493620423176},{"_id":"public/tags/php/index.html","hash":"78ec081078da15cf79c4480969a0508388521b34","modified":1493620423176},{"_id":"public/tags/python/index.html","hash":"bd0ccc2949e37b7a875815e0b08e3fef04b6dde1","modified":1493620423176},{"_id":"public/tags/redis/index.html","hash":"12e62a51b3e98cae953128a6fb8281b215f35714","modified":1493620423176},{"_id":"public/tags/rant/index.html","hash":"052c3f78cb1a67dff8f7f7be86d892a6d8aaf213","modified":1493620423176},{"_id":"public/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1493620423188},{"_id":"public/css/images/favicon.ico","hash":"7734b256b60fd599b54fd71a8a35a8bf99d60b2d","modified":1493620423188},{"_id":"public/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1493620423188},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1493620423188},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1493620423188},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1493620423188},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1493620423188},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1493620423188},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1493620423188},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1493620423189},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1493620423189},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1493620423189},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1493620423189},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1493620423189},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1493620423189},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1493620423189},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1493620423189},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1493620423189},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1493620423189},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1493620423189},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1493620423189},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1493620423189},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1493620423189},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1493620423190},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1493620423190},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1493620423190},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1493620423190},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1493620423908},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1493620423911},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1493620423911},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1493620423911},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1493620423919},{"_id":"public/js/main.js","hash":"93dc932946e2898bf4f39c42af1b27295e886af1","modified":1493620423919},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1493620423919},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1493620423919},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1493620423919},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1493620423919},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1493620423919},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1493620423920},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1493620423920},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1493620423920},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1493620423920},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1493620423920},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1493620423921},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1493620423921},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1493620423921},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1493620423921},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1493620423921},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1493620423921},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1493620423921},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1493620423921},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1493620423921},{"_id":"public/css/style.css","hash":"ed9335ed8194400e5fcf31a5b478c24337ebebd5","modified":1493620423921},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1493620423921},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1493620423921},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1493620423921},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1493620423921},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1493620423921},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1493620423921},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1493620423921},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1493620423921},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1493620423922},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1493620423922},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1493620423922},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1493620423922},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1493620423922},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1493620423952}],"Category":[{"name":"mobile","_id":"cj25qv3gj0004yswvnwt2b2ah"},{"name":"tutorial","_id":"cj25qv3gz0009yswvpjheonm2"},{"name":"android","parent":"cj25qv3gj0004yswvnwt2b2ah","_id":"cj25qv3hf000jyswv97hbf1n2"},{"name":"socket-programming","parent":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3hr000wyswvram91qn0"},{"name":"tutorial","parent":"cj25qv3hf000jyswv97hbf1n2","_id":"cj25qv3i6001ayswvbypaiqbx"},{"name":"open-source","_id":"cj25qv3if001iyswvcpybsscq"},{"name":"web","_id":"cj25qv3io001pyswvxnpez95o"},{"name":"multi-threading","parent":"cj25qv3hr000wyswvram91qn0","_id":"cj25qv3j20025yswvidhyibq0"},{"name":"ruby-on-rails","_id":"cj25qv3jm002syswv2dzn9xjb"},{"name":"project","parent":"cj25qv3if001iyswvcpybsscq","_id":"cj25qv3jo002yyswvjn04taj5"},{"name":"tutorial","parent":"cj25qv3io001pyswvxnpez95o","_id":"cj25qv3jp0034yswvmi7xhjd8"},{"name":"magento","parent":"cj25qv3io001pyswvxnpez95o","_id":"cj25qv3jq003ayswv4996dl6s"},{"name":"datomic","parent":"cj25qv3jo002yyswvjn04taj5","_id":"cj25qv3ju003nyswv6zam6ula"}],"Data":[],"Page":[{"title":"About","layout":"page","comments":0,"_content":"Welcome to taywils.me my blog for everything programming, software engineering and math related subjects that interest me. Occasionally there will longer posts that form multi-part tutorials however; a majority of the code I write can be found on my Github.\n\nOriginally I started off on a hosted Wordpress site, then moved to a private Linode server and re-wrote this blog using Jeykll, stopped blogging for about 3 years and recently discovered Hexo which gave me renewed faith in customizable static-site blogging platforms that give you just enough but not too much.\n","source":"about/index.md","raw":"title: \"About\"\nlayout: \"page\"\ncomments: false\n---\nWelcome to taywils.me my blog for everything programming, software engineering and math related subjects that interest me. Occasionally there will longer posts that form multi-part tutorials however; a majority of the code I write can be found on my Github.\n\nOriginally I started off on a hosted Wordpress site, then moved to a private Linode server and re-wrote this blog using Jeykll, stopped blogging for about 3 years and recently discovered Hexo which gave me renewed faith in customizable static-site blogging platforms that give you just enough but not too much.\n","date":"2017-05-01T06:29:56.000Z","updated":"2017-05-01T06:29:56.000Z","path":"about/index.html","_id":"cj25qv3gd0001yswvxjvq9qqm","content":"<p>Welcome to taywils.me my blog for everything programming, software engineering and math related subjects that interest me. Occasionally there will longer posts that form multi-part tutorials however; a majority of the code I write can be found on my Github.</p>\n<p>Originally I started off on a hosted Wordpress site, then moved to a private Linode server and re-wrote this blog using Jeykll, stopped blogging for about 3 years and recently discovered Hexo which gave me renewed faith in customizable static-site blogging platforms that give you just enough but not too much.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to taywils.me my blog for everything programming, software engineering and math related subjects that interest me. Occasionally there will longer posts that form multi-part tutorials however; a majority of the code I write can be found on my Github.</p>\n<p>Originally I started off on a hosted Wordpress site, then moved to a private Linode server and re-wrote this blog using Jeykll, stopped blogging for about 3 years and recently discovered Hexo which gave me renewed faith in customizable static-site blogging platforms that give you just enough but not too much.</p>\n"},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2017-04-30T04:00:25.000Z","updated":"2017-04-30T04:00:25.000Z","path":"categories/index.html","comments":1,"_id":"cj25qv3gi0003yswvvxz257o0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2017-04-30T04:08:33.000Z","updated":"2017-04-30T04:08:33.000Z","path":"tags/index.html","comments":1,"_id":"cj25qv3ko004ayswvxa4mbsuj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android Google Places Tutorial","date":"2013-05-06T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/androidgoogleplacestutorial.jpg","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/androidgoogleplacestutorial.jpg","comments":0,"_content":"I had just installed IntelliJ version 12.1.2 the other day and I saw an old Android project in the recent projects list. Thinking back I was satisfied with the result so I thought I should post it to my blog. It was a proof of concept application I wrote to list nearby restaurants based on your current location.\n\n<!-- more -->\n### __FOR READERS IN A HURRY__\nThe entire Java class files themselves are located at the end of this post just before the comments.\n\n### Pre-reqs\n1. An Android phone you can debug and test with. Please don't use the Android Emulator its just not fair to end users who might discover UX bugs.\n2. Get yourself a Google Places API Key if you don't have one already. [How to get a Google Places API Key](https://developers.google.com/places/documentation/)\n3. Download the latest Android SDK or check for updates on your current installation. [developer.android.com](http://developer.android.com/index.html)\n4. Setup a new Android Project environment on your favorite IDE or do whatever it is you do to develop for Android\n5. You'll need the Android Maps Jar file or map.jar to be within your External Library dependencies. This requires adding the maps.jar file to your classpath... there are many ways to do this  but depending on your environment they may differ. Google is your friend. \n6. Don't yell at me for not being a total hipster and using Scala to write Android like all the other cool kids these days [Android Dev with Scala](https://github.com/pocorall/scaloid)\n7. Anyways I don't even know Scala... besides it will probably be another year or so before big enterprise Java code bases start to migrate to it so I have some time to learn.\n\n### What You Will Create\nBelow is a snapshot of the Android app we're going to develop today. It uses a simple ListView and doesn't support any click events. The reason as I mentioned in the pre-reqs section assuming you read it was that this app was a proof of concept for the Google Places API. Think of it as \"Hello World\" but using places instead of the TextView GUI widget.\n\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/places_api.jpg\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/places_api.jpg\" width=\"30%\" height=\"30%\" alt=\"Google Places API Demo\"/></a>\n\nIn the meantime create a new Android application and name it HttpTestActivity like I did for some odd reason or come up with a better sounding name for your project. On the current topic of boring and dull names I choose the exciting name of com.example for the package... you can use that name if you wish but I warn you to strive for excellence and excitment by chooing demonstrative package names.\n\n### The Android Manifest File\n\nOur Android manifest file will include the usual suspects which are the various uses-permission tags, the application tag and the intent-filter to designate the starting activity. If there was anything noteworthy I would go into further detail but the manifest for this project is slightly boring to be honest. So add the lines you need from the code below to your AndroidManifest.xml file. Don't despair Android Manifest files can become quite complex such as the ones I've written for apps I plan to ship to Google Play but for this tutorial we're stuck with a lame one.\n\n<script src=\"https://gist.github.com/taywils/5533980.js\"> </script>\n\nThe manifest xml did reference a string via the @string value so you'll need to include the XML file listed below and replace it with your /res/values/strings.xml \n\n<script src=\"https://gist.github.com/taywils/5534449.js\"> </script>\n\n### The Main Activity\n\nWe'll start off by listing the various packages to import. For the most part I highly reccommend you look up the documentation for the imported packages you are not familiar with such as org.apache.http or many of the other packages not typically used by Android Devs. It would be tough to describe each package in detail but as I explain the source code it should be much clearer to see how each of the packages contribute to the app. So go ahead and add the package imports to your main activity file.\n\n<script src=\"https://gist.github.com/taywils/5534247.js\"> </script>\n\nStart off by extending our main class from the Android Activity. As for class properties you'll want to store things such as the latitude and logitude for obvious reasons and in addition you'll need to encode your Google Places API Key as a string. The property radius can be thought of as the length of the radius of the circle expanding outward from the position of the phone owner when the places API returns results. We're setting the property *String type* to food but if you refer to the Google Places documenation there are other types which you can use but they will of course give you an entirely different set of places. As for the rest of the properties they are given more descriptive names which match their use cases.\n\n<script src=\"https://gist.github.com/taywils/5543754.js\"> </script>\n\n### onCreate And Other Initialization Stuff\n\nAs with most typical Android apps the onCreate method needs to load starting view taken from one of the XML files within your Layout folder.\nOnce we set the content view to the httptestlist layout we'll need to start listnening for our current location.\nWe represent the action of listening for a location by creating a new instance of the MyLocation class and overriding the gotLocation method.\nAny code we add within the gotLocation method will be immediately called just after the location has been determined by the GPS.\nNote how we don't explicitly tell the application within the onCreate method to start listening for the current location.\nWe actually defer the task of acquiring the current location to a Java Runnable object and stall the main activity thread using a progress spinner(progressDialog).\nThis is the reason why there is a line of code within the gotLocation method to dismiss the progressDialog.\n<script src=\"https://gist.github.com/taywils/5633124.js\"> </script>\n\n### A Utility Method To Pre-Parse XML And An AsyncTask To Ping Google's API\n\nWe need a utility method to take an XML file represented by a String object and parse it into a Java Document object which we can then use to actually parse the data.\nThe loadXMLFromString method is rather straight forward if you are familiar with how Java uses the Factory Design pattern.\nNext we define an inner class called GetCurrentLocation. Do you recall the gotLocation() method from the onCreate? Here is the async task we create which does two things.\nFirst it checks if the latitude and longitude have been properly set; and second it constructs a valid Google Places API query and sends it off to get a XML result.\nThe minor assertion line of code within the onPostExecute method is me just being paranoid; it assures that we don't waste Google's resources by trying to call the API before we are ready. If you carefully analyze the onPostExecute method you'll see that the last line which creates a new QueryGooglePlaces object is deferring the HTTP GET\ncall to yet another AsyncTask. I'm not too confident that this style of chained AsyncTask calls is a best practice but I've been using it for a while in my Android Applications and it has yet to fail me. If you have experience with chained AsyncTasks let me know; I'm only using because I need to synchronize the call to Google's Places API such that it will only be made once we have correctly set our request string. I wonder if the newest Android API has jumped on the coroutine bandwagon... hey don't blame me its just that the Go programming language made coroutines all fancy again.\n<script src=\"https://gist.github.com/taywils/5633146.js\"> </script>\n\n### Restful Call To Google Places API... This Is The Only Actual Code The Rest Is Bloat... 100% Serious\nOur wonderful QueryGooglePlaces async task must make a HTTP GET request to Google and return some XML. Sounds simple enough but remember that we need to handle possible \nthrown exceptions and properly turn the HTTP response from an array of bytes only meant to be understood by your processor to a nice String object meant for human consumption. I took time to think of useful variable names so when reading pay attention to the obvious names such as httpclient and or responseString; they indicate what they were created to contain. Other than that the background task part of the QueryGooglePlaces class makes sure to close HttpResponse object if the status code is not HTTP:200.<script src=\"https://gist.github.com/taywils/5633162.js\"> </script> Ok I have to admit, the onPostExecute method here could be simplified a great deal using because all its doing is going through each XML element and taking only the values we need to full in the data members of an instance of a Place class. In short, we got the XML from Google so for each restuarant returned lets create a Place object and fill in its data. I didn't use any external XML jars such as the famous JAXB(Jackson XML Binding) which any sane Java developer would do but its only because I didn't know about Jackson until I did some more research into parsing XML with Android. Enough with my personal issues and back to article; the for loop which traverses the XML file is the primary focus.\n\nXML files and constructed of elements which contain tags, attributes and values. As such we look for a node element and check for all of the attributes which correspond to the data members of the Place object based on tag name alone. Once all of the place nodes have been parsed the view or what you see on your Android device is only updated PlaceAdapter has taken our collection of places and inflated a layout file with each of the place object's data members. We'll go onto the code for the Place class before showing how the PlaceAdapater was designed. \n<script src=\"https://gist.github.com/taywils/5633166.js\"> </script>\n\n### The Place Class\nAbout 98% of the code in the place class was auto-generated, I wrote the lovely comments.\nNow if only IntelliJ could just build Apps... wait then I would need to find a new occupation.\n<script src=\"https://gist.github.com/taywils/5633170.js\"> </script>\n\n### ArrayAdapters, Are Not Fun But You Should Learn To Use Them Regardless\nArrayAdapters in my opinion are the glue objects that bind views together with a Java class. For instance in this app we are trying to display a list of for the user to look at and scroll through. We managed to build a HTTP GET request, parse the returned XML and store it within a collection of Place objects so now comes the time to let the layout know that we are ready to display the list of places. In fact we are actually alerting two different layouts(the httptestrow and the httptestlist) of our intentions. Remember from the QueryGooglePlaces AsyncTask where we had a line of code that created a new PlaceAdapter. Go look at that line again and see how we passed both the layout resource and the collection of places as an array. Next before you glance over the code for the PlaceAdapter take a look at the XML layout file for the httptestrow. It contains TextView tags for both name and vicinity. Since name and vicinity are both data memebers of our Place class you can guess that the PlaceAdapter will generate a listing of all our Places by both name and distance from the app user.\n\nThe meat of any class extending ArrayAdapter is the getView override. What you have to do within the getView override is create a LayoutInflater object and bind its layout resource to a row object. Then for each row, we treat it just as we would any view resource and use the good ole findViewById to select only the parts of the layout we're actrually interested in so we can populate them with some data. It sounds nice until you realize that the getView method returns the row and you have to do strange ritual code such as checking for null rows else the entire view explodes in your face. Its not that I hate ArrayAdapters but I would much rather have the Android API introduce finer tuned XML tags that represent data bindings directly to classes but then I thought to myself that such a thing would be possible only if Android used a templating engine such as Apache Velocity instead of just using vanilla XML for layouts. Ok ok.... Scala for Android(The Scaloid Project) solves this by using a custom DSL instead of vanilla XML... why the heck has Google not hired the project lead for Scaloid yet?\n<script src=\"https://gist.github.com/taywils/5633177.js\"> </script>\n\n### Implementing The LocationListener Interface\nAside from the complexities of writing methods for classes that extend from ArrayAdapters, implementing the LocationListener interface is much less headache \nFor the simplicity of this demonstration code we're only going to handle the event when the physical location of the user has changed.\n<script src=\"https://gist.github.com/taywils/5633181.js\"> </script>\n\n### Remember When We Needed To Load The Location Data In A Thread?\nHere is the class that implements the Runnable interface to be ran on a thread.\n<script src=\"https://gist.github.com/taywils/5633183.js\"> </script>\n\n### A Class To Figure Out MyLocation \nThe MyLocation class was wonderfully designed by a fellow who provided it as an answer to a stackoverflow.com question.\nI've modified it slightly to fit the needs of this application but for the most part it remains the same. See the stackoverflow link to learn more about the class itself.\n<script src=\"https://gist.github.com/taywils/5633195.js\"> </script>\n\n### Layout Files\nListed below are the layout files you'll need, just be sure to place them within the correct folder of your Android project directory.\n<script src=\"https://gist.github.com/taywils/5633207.js\"> </script>\n<script src=\"https://gist.github.com/taywils/5633216.js\"> </script>\n\n### Summary\nWe've covered quite a bit of intermediate Android development topics with the useage of AsyncTask and LocationListener interfaces. There is always much more to learn about Android development and as you can probably tell Google will continue to make working with the API\nmuch easier in the future so we can rely upon less confusing base classes such as ArrayAdapters(did I tell you how much I find these things overly complex) and focus more on creating wonderful experiences to delight our users. I might continue to write some more Android articles if I buy a Kindle Fire HD  but I've been tempted to start learning iOS development. However, if Scala gains more popularity Android development could become rather interesting  when you consider all the benefits of using Scala.\n\nAnyways, write comments, ask questions and enjoy your Google places API demo.\n\n### Java class file dumps\nThe HttpTestActivity.java file.\n<script src=\"https://gist.github.com/taywils/5689259.js\"> </script>\n\nThe MyLocation.java file.\n<script src=\"https://gist.github.com/taywils/5689262.js\"> </script>\n","source":"_posts/androidgoogleplacestutorial.md","raw":"---\ntitle: Android Google Places Tutorial\ndate: 2013-05-06\ntags: [java, android]\ncategories: [mobile, android, tutorial]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/androidgoogleplacestutorial.jpg\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/androidgoogleplacestutorial.jpg\ncomments: false\n---\nI had just installed IntelliJ version 12.1.2 the other day and I saw an old Android project in the recent projects list. Thinking back I was satisfied with the result so I thought I should post it to my blog. It was a proof of concept application I wrote to list nearby restaurants based on your current location.\n\n<!-- more -->\n### __FOR READERS IN A HURRY__\nThe entire Java class files themselves are located at the end of this post just before the comments.\n\n### Pre-reqs\n1. An Android phone you can debug and test with. Please don't use the Android Emulator its just not fair to end users who might discover UX bugs.\n2. Get yourself a Google Places API Key if you don't have one already. [How to get a Google Places API Key](https://developers.google.com/places/documentation/)\n3. Download the latest Android SDK or check for updates on your current installation. [developer.android.com](http://developer.android.com/index.html)\n4. Setup a new Android Project environment on your favorite IDE or do whatever it is you do to develop for Android\n5. You'll need the Android Maps Jar file or map.jar to be within your External Library dependencies. This requires adding the maps.jar file to your classpath... there are many ways to do this  but depending on your environment they may differ. Google is your friend. \n6. Don't yell at me for not being a total hipster and using Scala to write Android like all the other cool kids these days [Android Dev with Scala](https://github.com/pocorall/scaloid)\n7. Anyways I don't even know Scala... besides it will probably be another year or so before big enterprise Java code bases start to migrate to it so I have some time to learn.\n\n### What You Will Create\nBelow is a snapshot of the Android app we're going to develop today. It uses a simple ListView and doesn't support any click events. The reason as I mentioned in the pre-reqs section assuming you read it was that this app was a proof of concept for the Google Places API. Think of it as \"Hello World\" but using places instead of the TextView GUI widget.\n\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/places_api.jpg\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/places_api.jpg\" width=\"30%\" height=\"30%\" alt=\"Google Places API Demo\"/></a>\n\nIn the meantime create a new Android application and name it HttpTestActivity like I did for some odd reason or come up with a better sounding name for your project. On the current topic of boring and dull names I choose the exciting name of com.example for the package... you can use that name if you wish but I warn you to strive for excellence and excitment by chooing demonstrative package names.\n\n### The Android Manifest File\n\nOur Android manifest file will include the usual suspects which are the various uses-permission tags, the application tag and the intent-filter to designate the starting activity. If there was anything noteworthy I would go into further detail but the manifest for this project is slightly boring to be honest. So add the lines you need from the code below to your AndroidManifest.xml file. Don't despair Android Manifest files can become quite complex such as the ones I've written for apps I plan to ship to Google Play but for this tutorial we're stuck with a lame one.\n\n<script src=\"https://gist.github.com/taywils/5533980.js\"> </script>\n\nThe manifest xml did reference a string via the @string value so you'll need to include the XML file listed below and replace it with your /res/values/strings.xml \n\n<script src=\"https://gist.github.com/taywils/5534449.js\"> </script>\n\n### The Main Activity\n\nWe'll start off by listing the various packages to import. For the most part I highly reccommend you look up the documentation for the imported packages you are not familiar with such as org.apache.http or many of the other packages not typically used by Android Devs. It would be tough to describe each package in detail but as I explain the source code it should be much clearer to see how each of the packages contribute to the app. So go ahead and add the package imports to your main activity file.\n\n<script src=\"https://gist.github.com/taywils/5534247.js\"> </script>\n\nStart off by extending our main class from the Android Activity. As for class properties you'll want to store things such as the latitude and logitude for obvious reasons and in addition you'll need to encode your Google Places API Key as a string. The property radius can be thought of as the length of the radius of the circle expanding outward from the position of the phone owner when the places API returns results. We're setting the property *String type* to food but if you refer to the Google Places documenation there are other types which you can use but they will of course give you an entirely different set of places. As for the rest of the properties they are given more descriptive names which match their use cases.\n\n<script src=\"https://gist.github.com/taywils/5543754.js\"> </script>\n\n### onCreate And Other Initialization Stuff\n\nAs with most typical Android apps the onCreate method needs to load starting view taken from one of the XML files within your Layout folder.\nOnce we set the content view to the httptestlist layout we'll need to start listnening for our current location.\nWe represent the action of listening for a location by creating a new instance of the MyLocation class and overriding the gotLocation method.\nAny code we add within the gotLocation method will be immediately called just after the location has been determined by the GPS.\nNote how we don't explicitly tell the application within the onCreate method to start listening for the current location.\nWe actually defer the task of acquiring the current location to a Java Runnable object and stall the main activity thread using a progress spinner(progressDialog).\nThis is the reason why there is a line of code within the gotLocation method to dismiss the progressDialog.\n<script src=\"https://gist.github.com/taywils/5633124.js\"> </script>\n\n### A Utility Method To Pre-Parse XML And An AsyncTask To Ping Google's API\n\nWe need a utility method to take an XML file represented by a String object and parse it into a Java Document object which we can then use to actually parse the data.\nThe loadXMLFromString method is rather straight forward if you are familiar with how Java uses the Factory Design pattern.\nNext we define an inner class called GetCurrentLocation. Do you recall the gotLocation() method from the onCreate? Here is the async task we create which does two things.\nFirst it checks if the latitude and longitude have been properly set; and second it constructs a valid Google Places API query and sends it off to get a XML result.\nThe minor assertion line of code within the onPostExecute method is me just being paranoid; it assures that we don't waste Google's resources by trying to call the API before we are ready. If you carefully analyze the onPostExecute method you'll see that the last line which creates a new QueryGooglePlaces object is deferring the HTTP GET\ncall to yet another AsyncTask. I'm not too confident that this style of chained AsyncTask calls is a best practice but I've been using it for a while in my Android Applications and it has yet to fail me. If you have experience with chained AsyncTasks let me know; I'm only using because I need to synchronize the call to Google's Places API such that it will only be made once we have correctly set our request string. I wonder if the newest Android API has jumped on the coroutine bandwagon... hey don't blame me its just that the Go programming language made coroutines all fancy again.\n<script src=\"https://gist.github.com/taywils/5633146.js\"> </script>\n\n### Restful Call To Google Places API... This Is The Only Actual Code The Rest Is Bloat... 100% Serious\nOur wonderful QueryGooglePlaces async task must make a HTTP GET request to Google and return some XML. Sounds simple enough but remember that we need to handle possible \nthrown exceptions and properly turn the HTTP response from an array of bytes only meant to be understood by your processor to a nice String object meant for human consumption. I took time to think of useful variable names so when reading pay attention to the obvious names such as httpclient and or responseString; they indicate what they were created to contain. Other than that the background task part of the QueryGooglePlaces class makes sure to close HttpResponse object if the status code is not HTTP:200.<script src=\"https://gist.github.com/taywils/5633162.js\"> </script> Ok I have to admit, the onPostExecute method here could be simplified a great deal using because all its doing is going through each XML element and taking only the values we need to full in the data members of an instance of a Place class. In short, we got the XML from Google so for each restuarant returned lets create a Place object and fill in its data. I didn't use any external XML jars such as the famous JAXB(Jackson XML Binding) which any sane Java developer would do but its only because I didn't know about Jackson until I did some more research into parsing XML with Android. Enough with my personal issues and back to article; the for loop which traverses the XML file is the primary focus.\n\nXML files and constructed of elements which contain tags, attributes and values. As such we look for a node element and check for all of the attributes which correspond to the data members of the Place object based on tag name alone. Once all of the place nodes have been parsed the view or what you see on your Android device is only updated PlaceAdapter has taken our collection of places and inflated a layout file with each of the place object's data members. We'll go onto the code for the Place class before showing how the PlaceAdapater was designed. \n<script src=\"https://gist.github.com/taywils/5633166.js\"> </script>\n\n### The Place Class\nAbout 98% of the code in the place class was auto-generated, I wrote the lovely comments.\nNow if only IntelliJ could just build Apps... wait then I would need to find a new occupation.\n<script src=\"https://gist.github.com/taywils/5633170.js\"> </script>\n\n### ArrayAdapters, Are Not Fun But You Should Learn To Use Them Regardless\nArrayAdapters in my opinion are the glue objects that bind views together with a Java class. For instance in this app we are trying to display a list of for the user to look at and scroll through. We managed to build a HTTP GET request, parse the returned XML and store it within a collection of Place objects so now comes the time to let the layout know that we are ready to display the list of places. In fact we are actually alerting two different layouts(the httptestrow and the httptestlist) of our intentions. Remember from the QueryGooglePlaces AsyncTask where we had a line of code that created a new PlaceAdapter. Go look at that line again and see how we passed both the layout resource and the collection of places as an array. Next before you glance over the code for the PlaceAdapter take a look at the XML layout file for the httptestrow. It contains TextView tags for both name and vicinity. Since name and vicinity are both data memebers of our Place class you can guess that the PlaceAdapter will generate a listing of all our Places by both name and distance from the app user.\n\nThe meat of any class extending ArrayAdapter is the getView override. What you have to do within the getView override is create a LayoutInflater object and bind its layout resource to a row object. Then for each row, we treat it just as we would any view resource and use the good ole findViewById to select only the parts of the layout we're actrually interested in so we can populate them with some data. It sounds nice until you realize that the getView method returns the row and you have to do strange ritual code such as checking for null rows else the entire view explodes in your face. Its not that I hate ArrayAdapters but I would much rather have the Android API introduce finer tuned XML tags that represent data bindings directly to classes but then I thought to myself that such a thing would be possible only if Android used a templating engine such as Apache Velocity instead of just using vanilla XML for layouts. Ok ok.... Scala for Android(The Scaloid Project) solves this by using a custom DSL instead of vanilla XML... why the heck has Google not hired the project lead for Scaloid yet?\n<script src=\"https://gist.github.com/taywils/5633177.js\"> </script>\n\n### Implementing The LocationListener Interface\nAside from the complexities of writing methods for classes that extend from ArrayAdapters, implementing the LocationListener interface is much less headache \nFor the simplicity of this demonstration code we're only going to handle the event when the physical location of the user has changed.\n<script src=\"https://gist.github.com/taywils/5633181.js\"> </script>\n\n### Remember When We Needed To Load The Location Data In A Thread?\nHere is the class that implements the Runnable interface to be ran on a thread.\n<script src=\"https://gist.github.com/taywils/5633183.js\"> </script>\n\n### A Class To Figure Out MyLocation \nThe MyLocation class was wonderfully designed by a fellow who provided it as an answer to a stackoverflow.com question.\nI've modified it slightly to fit the needs of this application but for the most part it remains the same. See the stackoverflow link to learn more about the class itself.\n<script src=\"https://gist.github.com/taywils/5633195.js\"> </script>\n\n### Layout Files\nListed below are the layout files you'll need, just be sure to place them within the correct folder of your Android project directory.\n<script src=\"https://gist.github.com/taywils/5633207.js\"> </script>\n<script src=\"https://gist.github.com/taywils/5633216.js\"> </script>\n\n### Summary\nWe've covered quite a bit of intermediate Android development topics with the useage of AsyncTask and LocationListener interfaces. There is always much more to learn about Android development and as you can probably tell Google will continue to make working with the API\nmuch easier in the future so we can rely upon less confusing base classes such as ArrayAdapters(did I tell you how much I find these things overly complex) and focus more on creating wonderful experiences to delight our users. I might continue to write some more Android articles if I buy a Kindle Fire HD  but I've been tempted to start learning iOS development. However, if Scala gains more popularity Android development could become rather interesting  when you consider all the benefits of using Scala.\n\nAnyways, write comments, ask questions and enjoy your Google places API demo.\n\n### Java class file dumps\nThe HttpTestActivity.java file.\n<script src=\"https://gist.github.com/taywils/5689259.js\"> </script>\n\nThe MyLocation.java file.\n<script src=\"https://gist.github.com/taywils/5689262.js\"> </script>\n","slug":"androidgoogleplacestutorial","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3g80000yswv196f1v9d","layout":"post","photos":[],"link":"","content":"<p>I had just installed IntelliJ version 12.1.2 the other day and I saw an old Android project in the recent projects list. Thinking back I was satisfied with the result so I thought I should post it to my blog. It was a proof of concept application I wrote to list nearby restaurants based on your current location.</p>\n<a id=\"more\"></a>\n<h3 id=\"FOR-READERS-IN-A-HURRY\"><a href=\"#FOR-READERS-IN-A-HURRY\" class=\"headerlink\" title=\"FOR READERS IN A HURRY\"></a><strong>FOR READERS IN A HURRY</strong></h3><p>The entire Java class files themselves are located at the end of this post just before the comments.</p>\n<h3 id=\"Pre-reqs\"><a href=\"#Pre-reqs\" class=\"headerlink\" title=\"Pre-reqs\"></a>Pre-reqs</h3><ol>\n<li>An Android phone you can debug and test with. Please don’t use the Android Emulator its just not fair to end users who might discover UX bugs.</li>\n<li>Get yourself a Google Places API Key if you don’t have one already. <a href=\"https://developers.google.com/places/documentation/\" target=\"_blank\" rel=\"external\">How to get a Google Places API Key</a></li>\n<li>Download the latest Android SDK or check for updates on your current installation. <a href=\"http://developer.android.com/index.html\" target=\"_blank\" rel=\"external\">developer.android.com</a></li>\n<li>Setup a new Android Project environment on your favorite IDE or do whatever it is you do to develop for Android</li>\n<li>You’ll need the Android Maps Jar file or map.jar to be within your External Library dependencies. This requires adding the maps.jar file to your classpath… there are many ways to do this  but depending on your environment they may differ. Google is your friend. </li>\n<li>Don’t yell at me for not being a total hipster and using Scala to write Android like all the other cool kids these days <a href=\"https://github.com/pocorall/scaloid\" target=\"_blank\" rel=\"external\">Android Dev with Scala</a></li>\n<li>Anyways I don’t even know Scala… besides it will probably be another year or so before big enterprise Java code bases start to migrate to it so I have some time to learn.</li>\n</ol>\n<h3 id=\"What-You-Will-Create\"><a href=\"#What-You-Will-Create\" class=\"headerlink\" title=\"What You Will Create\"></a>What You Will Create</h3><p>Below is a snapshot of the Android app we’re going to develop today. It uses a simple ListView and doesn’t support any click events. The reason as I mentioned in the pre-reqs section assuming you read it was that this app was a proof of concept for the Google Places API. Think of it as “Hello World” but using places instead of the TextView GUI widget.</p>\n<p><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/places_api.jpg\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/places_api.jpg\" width=\"30%\" height=\"30%\" alt=\"Google Places API Demo\"></a></p>\n<p>In the meantime create a new Android application and name it HttpTestActivity like I did for some odd reason or come up with a better sounding name for your project. On the current topic of boring and dull names I choose the exciting name of com.example for the package… you can use that name if you wish but I warn you to strive for excellence and excitment by chooing demonstrative package names.</p>\n<h3 id=\"The-Android-Manifest-File\"><a href=\"#The-Android-Manifest-File\" class=\"headerlink\" title=\"The Android Manifest File\"></a>The Android Manifest File</h3><p>Our Android manifest file will include the usual suspects which are the various uses-permission tags, the application tag and the intent-filter to designate the starting activity. If there was anything noteworthy I would go into further detail but the manifest for this project is slightly boring to be honest. So add the lines you need from the code below to your AndroidManifest.xml file. Don’t despair Android Manifest files can become quite complex such as the ones I’ve written for apps I plan to ship to Google Play but for this tutorial we’re stuck with a lame one.</p>\n<script src=\"https://gist.github.com/taywils/5533980.js\"> </script>\n\n<p>The manifest xml did reference a string via the @string value so you’ll need to include the XML file listed below and replace it with your /res/values/strings.xml </p>\n<script src=\"https://gist.github.com/taywils/5534449.js\"> </script>\n\n<h3 id=\"The-Main-Activity\"><a href=\"#The-Main-Activity\" class=\"headerlink\" title=\"The Main Activity\"></a>The Main Activity</h3><p>We’ll start off by listing the various packages to import. For the most part I highly reccommend you look up the documentation for the imported packages you are not familiar with such as org.apache.http or many of the other packages not typically used by Android Devs. It would be tough to describe each package in detail but as I explain the source code it should be much clearer to see how each of the packages contribute to the app. So go ahead and add the package imports to your main activity file.</p>\n<script src=\"https://gist.github.com/taywils/5534247.js\"> </script>\n\n<p>Start off by extending our main class from the Android Activity. As for class properties you’ll want to store things such as the latitude and logitude for obvious reasons and in addition you’ll need to encode your Google Places API Key as a string. The property radius can be thought of as the length of the radius of the circle expanding outward from the position of the phone owner when the places API returns results. We’re setting the property <em>String type</em> to food but if you refer to the Google Places documenation there are other types which you can use but they will of course give you an entirely different set of places. As for the rest of the properties they are given more descriptive names which match their use cases.</p>\n<script src=\"https://gist.github.com/taywils/5543754.js\"> </script>\n\n<h3 id=\"onCreate-And-Other-Initialization-Stuff\"><a href=\"#onCreate-And-Other-Initialization-Stuff\" class=\"headerlink\" title=\"onCreate And Other Initialization Stuff\"></a>onCreate And Other Initialization Stuff</h3><p>As with most typical Android apps the onCreate method needs to load starting view taken from one of the XML files within your Layout folder.<br>Once we set the content view to the httptestlist layout we’ll need to start listnening for our current location.<br>We represent the action of listening for a location by creating a new instance of the MyLocation class and overriding the gotLocation method.<br>Any code we add within the gotLocation method will be immediately called just after the location has been determined by the GPS.<br>Note how we don’t explicitly tell the application within the onCreate method to start listening for the current location.<br>We actually defer the task of acquiring the current location to a Java Runnable object and stall the main activity thread using a progress spinner(progressDialog).<br>This is the reason why there is a line of code within the gotLocation method to dismiss the progressDialog.</p>\n<script src=\"https://gist.github.com/taywils/5633124.js\"> </script>\n\n<h3 id=\"A-Utility-Method-To-Pre-Parse-XML-And-An-AsyncTask-To-Ping-Google’s-API\"><a href=\"#A-Utility-Method-To-Pre-Parse-XML-And-An-AsyncTask-To-Ping-Google’s-API\" class=\"headerlink\" title=\"A Utility Method To Pre-Parse XML And An AsyncTask To Ping Google’s API\"></a>A Utility Method To Pre-Parse XML And An AsyncTask To Ping Google’s API</h3><p>We need a utility method to take an XML file represented by a String object and parse it into a Java Document object which we can then use to actually parse the data.<br>The loadXMLFromString method is rather straight forward if you are familiar with how Java uses the Factory Design pattern.<br>Next we define an inner class called GetCurrentLocation. Do you recall the gotLocation() method from the onCreate? Here is the async task we create which does two things.<br>First it checks if the latitude and longitude have been properly set; and second it constructs a valid Google Places API query and sends it off to get a XML result.<br>The minor assertion line of code within the onPostExecute method is me just being paranoid; it assures that we don’t waste Google’s resources by trying to call the API before we are ready. If you carefully analyze the onPostExecute method you’ll see that the last line which creates a new QueryGooglePlaces object is deferring the HTTP GET<br>call to yet another AsyncTask. I’m not too confident that this style of chained AsyncTask calls is a best practice but I’ve been using it for a while in my Android Applications and it has yet to fail me. If you have experience with chained AsyncTasks let me know; I’m only using because I need to synchronize the call to Google’s Places API such that it will only be made once we have correctly set our request string. I wonder if the newest Android API has jumped on the coroutine bandwagon… hey don’t blame me its just that the Go programming language made coroutines all fancy again.</p>\n<script src=\"https://gist.github.com/taywils/5633146.js\"> </script>\n\n<h3 id=\"Restful-Call-To-Google-Places-API…-This-Is-The-Only-Actual-Code-The-Rest-Is-Bloat…-100-Serious\"><a href=\"#Restful-Call-To-Google-Places-API…-This-Is-The-Only-Actual-Code-The-Rest-Is-Bloat…-100-Serious\" class=\"headerlink\" title=\"Restful Call To Google Places API… This Is The Only Actual Code The Rest Is Bloat… 100% Serious\"></a>Restful Call To Google Places API… This Is The Only Actual Code The Rest Is Bloat… 100% Serious</h3><p>Our wonderful QueryGooglePlaces async task must make a HTTP GET request to Google and return some XML. Sounds simple enough but remember that we need to handle possible<br>thrown exceptions and properly turn the HTTP response from an array of bytes only meant to be understood by your processor to a nice String object meant for human consumption. I took time to think of useful variable names so when reading pay attention to the obvious names such as httpclient and or responseString; they indicate what they were created to contain. Other than that the background task part of the QueryGooglePlaces class makes sure to close HttpResponse object if the status code is not HTTP:200.<script src=\"https://gist.github.com/taywils/5633162.js\"> </script> Ok I have to admit, the onPostExecute method here could be simplified a great deal using because all its doing is going through each XML element and taking only the values we need to full in the data members of an instance of a Place class. In short, we got the XML from Google so for each restuarant returned lets create a Place object and fill in its data. I didn’t use any external XML jars such as the famous JAXB(Jackson XML Binding) which any sane Java developer would do but its only because I didn’t know about Jackson until I did some more research into parsing XML with Android. Enough with my personal issues and back to article; the for loop which traverses the XML file is the primary focus.</p>\n<p>XML files and constructed of elements which contain tags, attributes and values. As such we look for a node element and check for all of the attributes which correspond to the data members of the Place object based on tag name alone. Once all of the place nodes have been parsed the view or what you see on your Android device is only updated PlaceAdapter has taken our collection of places and inflated a layout file with each of the place object’s data members. We’ll go onto the code for the Place class before showing how the PlaceAdapater was designed. </p>\n<script src=\"https://gist.github.com/taywils/5633166.js\"> </script>\n\n<h3 id=\"The-Place-Class\"><a href=\"#The-Place-Class\" class=\"headerlink\" title=\"The Place Class\"></a>The Place Class</h3><p>About 98% of the code in the place class was auto-generated, I wrote the lovely comments.<br>Now if only IntelliJ could just build Apps… wait then I would need to find a new occupation.</p>\n<script src=\"https://gist.github.com/taywils/5633170.js\"> </script>\n\n<h3 id=\"ArrayAdapters-Are-Not-Fun-But-You-Should-Learn-To-Use-Them-Regardless\"><a href=\"#ArrayAdapters-Are-Not-Fun-But-You-Should-Learn-To-Use-Them-Regardless\" class=\"headerlink\" title=\"ArrayAdapters, Are Not Fun But You Should Learn To Use Them Regardless\"></a>ArrayAdapters, Are Not Fun But You Should Learn To Use Them Regardless</h3><p>ArrayAdapters in my opinion are the glue objects that bind views together with a Java class. For instance in this app we are trying to display a list of for the user to look at and scroll through. We managed to build a HTTP GET request, parse the returned XML and store it within a collection of Place objects so now comes the time to let the layout know that we are ready to display the list of places. In fact we are actually alerting two different layouts(the httptestrow and the httptestlist) of our intentions. Remember from the QueryGooglePlaces AsyncTask where we had a line of code that created a new PlaceAdapter. Go look at that line again and see how we passed both the layout resource and the collection of places as an array. Next before you glance over the code for the PlaceAdapter take a look at the XML layout file for the httptestrow. It contains TextView tags for both name and vicinity. Since name and vicinity are both data memebers of our Place class you can guess that the PlaceAdapter will generate a listing of all our Places by both name and distance from the app user.</p>\n<p>The meat of any class extending ArrayAdapter is the getView override. What you have to do within the getView override is create a LayoutInflater object and bind its layout resource to a row object. Then for each row, we treat it just as we would any view resource and use the good ole findViewById to select only the parts of the layout we’re actrually interested in so we can populate them with some data. It sounds nice until you realize that the getView method returns the row and you have to do strange ritual code such as checking for null rows else the entire view explodes in your face. Its not that I hate ArrayAdapters but I would much rather have the Android API introduce finer tuned XML tags that represent data bindings directly to classes but then I thought to myself that such a thing would be possible only if Android used a templating engine such as Apache Velocity instead of just using vanilla XML for layouts. Ok ok…. Scala for Android(The Scaloid Project) solves this by using a custom DSL instead of vanilla XML… why the heck has Google not hired the project lead for Scaloid yet?</p>\n<script src=\"https://gist.github.com/taywils/5633177.js\"> </script>\n\n<h3 id=\"Implementing-The-LocationListener-Interface\"><a href=\"#Implementing-The-LocationListener-Interface\" class=\"headerlink\" title=\"Implementing The LocationListener Interface\"></a>Implementing The LocationListener Interface</h3><p>Aside from the complexities of writing methods for classes that extend from ArrayAdapters, implementing the LocationListener interface is much less headache<br>For the simplicity of this demonstration code we’re only going to handle the event when the physical location of the user has changed.</p>\n<script src=\"https://gist.github.com/taywils/5633181.js\"> </script>\n\n<h3 id=\"Remember-When-We-Needed-To-Load-The-Location-Data-In-A-Thread\"><a href=\"#Remember-When-We-Needed-To-Load-The-Location-Data-In-A-Thread\" class=\"headerlink\" title=\"Remember When We Needed To Load The Location Data In A Thread?\"></a>Remember When We Needed To Load The Location Data In A Thread?</h3><p>Here is the class that implements the Runnable interface to be ran on a thread.</p>\n<script src=\"https://gist.github.com/taywils/5633183.js\"> </script>\n\n<h3 id=\"A-Class-To-Figure-Out-MyLocation\"><a href=\"#A-Class-To-Figure-Out-MyLocation\" class=\"headerlink\" title=\"A Class To Figure Out MyLocation\"></a>A Class To Figure Out MyLocation</h3><p>The MyLocation class was wonderfully designed by a fellow who provided it as an answer to a stackoverflow.com question.<br>I’ve modified it slightly to fit the needs of this application but for the most part it remains the same. See the stackoverflow link to learn more about the class itself.</p>\n<script src=\"https://gist.github.com/taywils/5633195.js\"> </script>\n\n<h3 id=\"Layout-Files\"><a href=\"#Layout-Files\" class=\"headerlink\" title=\"Layout Files\"></a>Layout Files</h3><p>Listed below are the layout files you’ll need, just be sure to place them within the correct folder of your Android project directory.</p>\n<script src=\"https://gist.github.com/taywils/5633207.js\"> </script>\n<script src=\"https://gist.github.com/taywils/5633216.js\"> </script>\n\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>We’ve covered quite a bit of intermediate Android development topics with the useage of AsyncTask and LocationListener interfaces. There is always much more to learn about Android development and as you can probably tell Google will continue to make working with the API<br>much easier in the future so we can rely upon less confusing base classes such as ArrayAdapters(did I tell you how much I find these things overly complex) and focus more on creating wonderful experiences to delight our users. I might continue to write some more Android articles if I buy a Kindle Fire HD  but I’ve been tempted to start learning iOS development. However, if Scala gains more popularity Android development could become rather interesting  when you consider all the benefits of using Scala.</p>\n<p>Anyways, write comments, ask questions and enjoy your Google places API demo.</p>\n<h3 id=\"Java-class-file-dumps\"><a href=\"#Java-class-file-dumps\" class=\"headerlink\" title=\"Java class file dumps\"></a>Java class file dumps</h3><p>The HttpTestActivity.java file.</p>\n<script src=\"https://gist.github.com/taywils/5689259.js\"> </script>\n\n<p>The MyLocation.java file.</p>\n<script src=\"https://gist.github.com/taywils/5689262.js\"> </script>\n","site":{"data":{}},"excerpt":"<p>I had just installed IntelliJ version 12.1.2 the other day and I saw an old Android project in the recent projects list. Thinking back I was satisfied with the result so I thought I should post it to my blog. It was a proof of concept application I wrote to list nearby restaurants based on your current location.</p>","more":"<h3 id=\"FOR-READERS-IN-A-HURRY\"><a href=\"#FOR-READERS-IN-A-HURRY\" class=\"headerlink\" title=\"FOR READERS IN A HURRY\"></a><strong>FOR READERS IN A HURRY</strong></h3><p>The entire Java class files themselves are located at the end of this post just before the comments.</p>\n<h3 id=\"Pre-reqs\"><a href=\"#Pre-reqs\" class=\"headerlink\" title=\"Pre-reqs\"></a>Pre-reqs</h3><ol>\n<li>An Android phone you can debug and test with. Please don’t use the Android Emulator its just not fair to end users who might discover UX bugs.</li>\n<li>Get yourself a Google Places API Key if you don’t have one already. <a href=\"https://developers.google.com/places/documentation/\">How to get a Google Places API Key</a></li>\n<li>Download the latest Android SDK or check for updates on your current installation. <a href=\"http://developer.android.com/index.html\">developer.android.com</a></li>\n<li>Setup a new Android Project environment on your favorite IDE or do whatever it is you do to develop for Android</li>\n<li>You’ll need the Android Maps Jar file or map.jar to be within your External Library dependencies. This requires adding the maps.jar file to your classpath… there are many ways to do this  but depending on your environment they may differ. Google is your friend. </li>\n<li>Don’t yell at me for not being a total hipster and using Scala to write Android like all the other cool kids these days <a href=\"https://github.com/pocorall/scaloid\">Android Dev with Scala</a></li>\n<li>Anyways I don’t even know Scala… besides it will probably be another year or so before big enterprise Java code bases start to migrate to it so I have some time to learn.</li>\n</ol>\n<h3 id=\"What-You-Will-Create\"><a href=\"#What-You-Will-Create\" class=\"headerlink\" title=\"What You Will Create\"></a>What You Will Create</h3><p>Below is a snapshot of the Android app we’re going to develop today. It uses a simple ListView and doesn’t support any click events. The reason as I mentioned in the pre-reqs section assuming you read it was that this app was a proof of concept for the Google Places API. Think of it as “Hello World” but using places instead of the TextView GUI widget.</p>\n<p><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/places_api.jpg\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/places_api.jpg\" width=\"30%\" height=\"30%\" alt=\"Google Places API Demo\"/></a></p>\n<p>In the meantime create a new Android application and name it HttpTestActivity like I did for some odd reason or come up with a better sounding name for your project. On the current topic of boring and dull names I choose the exciting name of com.example for the package… you can use that name if you wish but I warn you to strive for excellence and excitment by chooing demonstrative package names.</p>\n<h3 id=\"The-Android-Manifest-File\"><a href=\"#The-Android-Manifest-File\" class=\"headerlink\" title=\"The Android Manifest File\"></a>The Android Manifest File</h3><p>Our Android manifest file will include the usual suspects which are the various uses-permission tags, the application tag and the intent-filter to designate the starting activity. If there was anything noteworthy I would go into further detail but the manifest for this project is slightly boring to be honest. So add the lines you need from the code below to your AndroidManifest.xml file. Don’t despair Android Manifest files can become quite complex such as the ones I’ve written for apps I plan to ship to Google Play but for this tutorial we’re stuck with a lame one.</p>\n<script src=\"https://gist.github.com/taywils/5533980.js\"> </script>\n\n<p>The manifest xml did reference a string via the @string value so you’ll need to include the XML file listed below and replace it with your /res/values/strings.xml </p>\n<script src=\"https://gist.github.com/taywils/5534449.js\"> </script>\n\n<h3 id=\"The-Main-Activity\"><a href=\"#The-Main-Activity\" class=\"headerlink\" title=\"The Main Activity\"></a>The Main Activity</h3><p>We’ll start off by listing the various packages to import. For the most part I highly reccommend you look up the documentation for the imported packages you are not familiar with such as org.apache.http or many of the other packages not typically used by Android Devs. It would be tough to describe each package in detail but as I explain the source code it should be much clearer to see how each of the packages contribute to the app. So go ahead and add the package imports to your main activity file.</p>\n<script src=\"https://gist.github.com/taywils/5534247.js\"> </script>\n\n<p>Start off by extending our main class from the Android Activity. As for class properties you’ll want to store things such as the latitude and logitude for obvious reasons and in addition you’ll need to encode your Google Places API Key as a string. The property radius can be thought of as the length of the radius of the circle expanding outward from the position of the phone owner when the places API returns results. We’re setting the property <em>String type</em> to food but if you refer to the Google Places documenation there are other types which you can use but they will of course give you an entirely different set of places. As for the rest of the properties they are given more descriptive names which match their use cases.</p>\n<script src=\"https://gist.github.com/taywils/5543754.js\"> </script>\n\n<h3 id=\"onCreate-And-Other-Initialization-Stuff\"><a href=\"#onCreate-And-Other-Initialization-Stuff\" class=\"headerlink\" title=\"onCreate And Other Initialization Stuff\"></a>onCreate And Other Initialization Stuff</h3><p>As with most typical Android apps the onCreate method needs to load starting view taken from one of the XML files within your Layout folder.<br>Once we set the content view to the httptestlist layout we’ll need to start listnening for our current location.<br>We represent the action of listening for a location by creating a new instance of the MyLocation class and overriding the gotLocation method.<br>Any code we add within the gotLocation method will be immediately called just after the location has been determined by the GPS.<br>Note how we don’t explicitly tell the application within the onCreate method to start listening for the current location.<br>We actually defer the task of acquiring the current location to a Java Runnable object and stall the main activity thread using a progress spinner(progressDialog).<br>This is the reason why there is a line of code within the gotLocation method to dismiss the progressDialog.</p>\n<script src=\"https://gist.github.com/taywils/5633124.js\"> </script>\n\n<h3 id=\"A-Utility-Method-To-Pre-Parse-XML-And-An-AsyncTask-To-Ping-Google’s-API\"><a href=\"#A-Utility-Method-To-Pre-Parse-XML-And-An-AsyncTask-To-Ping-Google’s-API\" class=\"headerlink\" title=\"A Utility Method To Pre-Parse XML And An AsyncTask To Ping Google’s API\"></a>A Utility Method To Pre-Parse XML And An AsyncTask To Ping Google’s API</h3><p>We need a utility method to take an XML file represented by a String object and parse it into a Java Document object which we can then use to actually parse the data.<br>The loadXMLFromString method is rather straight forward if you are familiar with how Java uses the Factory Design pattern.<br>Next we define an inner class called GetCurrentLocation. Do you recall the gotLocation() method from the onCreate? Here is the async task we create which does two things.<br>First it checks if the latitude and longitude have been properly set; and second it constructs a valid Google Places API query and sends it off to get a XML result.<br>The minor assertion line of code within the onPostExecute method is me just being paranoid; it assures that we don’t waste Google’s resources by trying to call the API before we are ready. If you carefully analyze the onPostExecute method you’ll see that the last line which creates a new QueryGooglePlaces object is deferring the HTTP GET<br>call to yet another AsyncTask. I’m not too confident that this style of chained AsyncTask calls is a best practice but I’ve been using it for a while in my Android Applications and it has yet to fail me. If you have experience with chained AsyncTasks let me know; I’m only using because I need to synchronize the call to Google’s Places API such that it will only be made once we have correctly set our request string. I wonder if the newest Android API has jumped on the coroutine bandwagon… hey don’t blame me its just that the Go programming language made coroutines all fancy again.</p>\n<script src=\"https://gist.github.com/taywils/5633146.js\"> </script>\n\n<h3 id=\"Restful-Call-To-Google-Places-API…-This-Is-The-Only-Actual-Code-The-Rest-Is-Bloat…-100-Serious\"><a href=\"#Restful-Call-To-Google-Places-API…-This-Is-The-Only-Actual-Code-The-Rest-Is-Bloat…-100-Serious\" class=\"headerlink\" title=\"Restful Call To Google Places API… This Is The Only Actual Code The Rest Is Bloat… 100% Serious\"></a>Restful Call To Google Places API… This Is The Only Actual Code The Rest Is Bloat… 100% Serious</h3><p>Our wonderful QueryGooglePlaces async task must make a HTTP GET request to Google and return some XML. Sounds simple enough but remember that we need to handle possible<br>thrown exceptions and properly turn the HTTP response from an array of bytes only meant to be understood by your processor to a nice String object meant for human consumption. I took time to think of useful variable names so when reading pay attention to the obvious names such as httpclient and or responseString; they indicate what they were created to contain. Other than that the background task part of the QueryGooglePlaces class makes sure to close HttpResponse object if the status code is not HTTP:200.<script src=\"https://gist.github.com/taywils/5633162.js\"> </script> Ok I have to admit, the onPostExecute method here could be simplified a great deal using because all its doing is going through each XML element and taking only the values we need to full in the data members of an instance of a Place class. In short, we got the XML from Google so for each restuarant returned lets create a Place object and fill in its data. I didn’t use any external XML jars such as the famous JAXB(Jackson XML Binding) which any sane Java developer would do but its only because I didn’t know about Jackson until I did some more research into parsing XML with Android. Enough with my personal issues and back to article; the for loop which traverses the XML file is the primary focus.</p>\n<p>XML files and constructed of elements which contain tags, attributes and values. As such we look for a node element and check for all of the attributes which correspond to the data members of the Place object based on tag name alone. Once all of the place nodes have been parsed the view or what you see on your Android device is only updated PlaceAdapter has taken our collection of places and inflated a layout file with each of the place object’s data members. We’ll go onto the code for the Place class before showing how the PlaceAdapater was designed. </p>\n<script src=\"https://gist.github.com/taywils/5633166.js\"> </script>\n\n<h3 id=\"The-Place-Class\"><a href=\"#The-Place-Class\" class=\"headerlink\" title=\"The Place Class\"></a>The Place Class</h3><p>About 98% of the code in the place class was auto-generated, I wrote the lovely comments.<br>Now if only IntelliJ could just build Apps… wait then I would need to find a new occupation.</p>\n<script src=\"https://gist.github.com/taywils/5633170.js\"> </script>\n\n<h3 id=\"ArrayAdapters-Are-Not-Fun-But-You-Should-Learn-To-Use-Them-Regardless\"><a href=\"#ArrayAdapters-Are-Not-Fun-But-You-Should-Learn-To-Use-Them-Regardless\" class=\"headerlink\" title=\"ArrayAdapters, Are Not Fun But You Should Learn To Use Them Regardless\"></a>ArrayAdapters, Are Not Fun But You Should Learn To Use Them Regardless</h3><p>ArrayAdapters in my opinion are the glue objects that bind views together with a Java class. For instance in this app we are trying to display a list of for the user to look at and scroll through. We managed to build a HTTP GET request, parse the returned XML and store it within a collection of Place objects so now comes the time to let the layout know that we are ready to display the list of places. In fact we are actually alerting two different layouts(the httptestrow and the httptestlist) of our intentions. Remember from the QueryGooglePlaces AsyncTask where we had a line of code that created a new PlaceAdapter. Go look at that line again and see how we passed both the layout resource and the collection of places as an array. Next before you glance over the code for the PlaceAdapter take a look at the XML layout file for the httptestrow. It contains TextView tags for both name and vicinity. Since name and vicinity are both data memebers of our Place class you can guess that the PlaceAdapter will generate a listing of all our Places by both name and distance from the app user.</p>\n<p>The meat of any class extending ArrayAdapter is the getView override. What you have to do within the getView override is create a LayoutInflater object and bind its layout resource to a row object. Then for each row, we treat it just as we would any view resource and use the good ole findViewById to select only the parts of the layout we’re actrually interested in so we can populate them with some data. It sounds nice until you realize that the getView method returns the row and you have to do strange ritual code such as checking for null rows else the entire view explodes in your face. Its not that I hate ArrayAdapters but I would much rather have the Android API introduce finer tuned XML tags that represent data bindings directly to classes but then I thought to myself that such a thing would be possible only if Android used a templating engine such as Apache Velocity instead of just using vanilla XML for layouts. Ok ok…. Scala for Android(The Scaloid Project) solves this by using a custom DSL instead of vanilla XML… why the heck has Google not hired the project lead for Scaloid yet?</p>\n<script src=\"https://gist.github.com/taywils/5633177.js\"> </script>\n\n<h3 id=\"Implementing-The-LocationListener-Interface\"><a href=\"#Implementing-The-LocationListener-Interface\" class=\"headerlink\" title=\"Implementing The LocationListener Interface\"></a>Implementing The LocationListener Interface</h3><p>Aside from the complexities of writing methods for classes that extend from ArrayAdapters, implementing the LocationListener interface is much less headache<br>For the simplicity of this demonstration code we’re only going to handle the event when the physical location of the user has changed.</p>\n<script src=\"https://gist.github.com/taywils/5633181.js\"> </script>\n\n<h3 id=\"Remember-When-We-Needed-To-Load-The-Location-Data-In-A-Thread\"><a href=\"#Remember-When-We-Needed-To-Load-The-Location-Data-In-A-Thread\" class=\"headerlink\" title=\"Remember When We Needed To Load The Location Data In A Thread?\"></a>Remember When We Needed To Load The Location Data In A Thread?</h3><p>Here is the class that implements the Runnable interface to be ran on a thread.</p>\n<script src=\"https://gist.github.com/taywils/5633183.js\"> </script>\n\n<h3 id=\"A-Class-To-Figure-Out-MyLocation\"><a href=\"#A-Class-To-Figure-Out-MyLocation\" class=\"headerlink\" title=\"A Class To Figure Out MyLocation\"></a>A Class To Figure Out MyLocation</h3><p>The MyLocation class was wonderfully designed by a fellow who provided it as an answer to a stackoverflow.com question.<br>I’ve modified it slightly to fit the needs of this application but for the most part it remains the same. See the stackoverflow link to learn more about the class itself.</p>\n<script src=\"https://gist.github.com/taywils/5633195.js\"> </script>\n\n<h3 id=\"Layout-Files\"><a href=\"#Layout-Files\" class=\"headerlink\" title=\"Layout Files\"></a>Layout Files</h3><p>Listed below are the layout files you’ll need, just be sure to place them within the correct folder of your Android project directory.</p>\n<script src=\"https://gist.github.com/taywils/5633207.js\"> </script>\n<script src=\"https://gist.github.com/taywils/5633216.js\"> </script>\n\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>We’ve covered quite a bit of intermediate Android development topics with the useage of AsyncTask and LocationListener interfaces. There is always much more to learn about Android development and as you can probably tell Google will continue to make working with the API<br>much easier in the future so we can rely upon less confusing base classes such as ArrayAdapters(did I tell you how much I find these things overly complex) and focus more on creating wonderful experiences to delight our users. I might continue to write some more Android articles if I buy a Kindle Fire HD  but I’ve been tempted to start learning iOS development. However, if Scala gains more popularity Android development could become rather interesting  when you consider all the benefits of using Scala.</p>\n<p>Anyways, write comments, ask questions and enjoy your Google places API demo.</p>\n<h3 id=\"Java-class-file-dumps\"><a href=\"#Java-class-file-dumps\" class=\"headerlink\" title=\"Java class file dumps\"></a>Java class file dumps</h3><p>The HttpTestActivity.java file.</p>\n<script src=\"https://gist.github.com/taywils/5689259.js\"> </script>\n\n<p>The MyLocation.java file.</p>\n<script src=\"https://gist.github.com/taywils/5689262.js\"> </script>"},{"title":"C++ Chat Server Tutorial Part I","date":"2014-11-15T08:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boostchatclient.jpg","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boostchatclient.jpg","comments":0,"_content":"In this tutorial we'll learn how to write a client for a feature limited chat server in C++ using the Boost libraries. The codebase for this tutorial is a bit dated as many of the features included by Boost are now apart of the C++ standard library but knowledege of Boost is still worthy of merit in case you run into the many C++ projects which make use of it.\n\n<!-- more -->\n\n[Click here for Part II](/2014/11/28/boostchatserver)\n\n### Tutorial Assumes Boost Version >= 1.53\n\nWe'll be making use of the Boost C++ libraries for this tutorial so before we begin make sure you have read through the installation documentation on the Boost website on. Below I have included some links for each operating system on how to install a recent version of Boost; its not extremely difficult but sometimes installing Boost can be tricky for those of us not familiar with compiling C++ projects from source code or the difference between the header-file only libraries and the rest of Boost.\n\n- [Windows users Boost Installation Guide](http://www.boost.org/doc/libs/1_57_0/more/getting_started/windows.html)\n- [Ubuntu/Debian Linux can use the aptitude Boost](http://stackoverflow.com/questions/12578499/how-to-install-boost-on-ubuntu)\n- [Ubuntu/Debian Linux can also use the Upstream Boost which is recommended](http://www.boost.org/doc/libs/1_57_0/more/getting_started/unix-variants.html)\n- [Mac OS X should use Homebrew](http://brewformulas.org/Boost)\n\nIf you need extra help installing the Boost C++ libraries or making sure that you can compile a project using Boost and properly link the libraries Google and or Stackoverflow are your best bets. Once you're comfortable building projects and or compiling single files with Boost we're ready to begin.\n\n### Part I: The Chat Client Code\n\nOur client code for the Chat application will rely upon the use of threads to divide our code into three distinct sub-routines.\n\n- A thread for displaying chat messages\n- Another thread for sending messages to the Chat server\n- And a third thread for receiving messages routed by the server from other connected clients\n\nThere are many approaches to designing multi-threaded applications and its a big topic that often rears its head during interviews with top tech companies but for the sake of this tutorial we'll only need to concern ourselves with just a small subset of concurrent programming. For the purposes of the application we're going to build in this tutorial series we're going to be using what is known as the _\"Producer-Consumer\"_ pattern for organizing our code. As a side note for the pedantics reading this article I'm not claiming that this code will follow _Producer-Consumer_ to the exact sepcification but for the most part it will resemble a typical _Producer-Consumer_ setup.\n\n### Producer-Consumer Overview For The Chat Client\n\nQuoting from the [Wikipedia page on the pattern](http://en.wikipedia.org/wiki/Producer-consumer_problem)...\n\n<blockquote class=\"quote\">\nIn computing, the producer–consumer's problem (also known as the bounded-buffer problem) is a classic example of a multi-process synchronization problem. The problem describes two processes, the producer and the consumer, who share a common, fixed-size buffer used as a queue.\n</blockquote>\n\nThus the following is a list of C++ objects used by our Client to implement the _Producer-Consumer_ pattern.\n\n- **boost::thread_group** to address multi-processing\n\n- **std::queue< std::string >** to represent the bounded-buffer of messages\n\n- **boost::thread** objects for adding and removing messages from the queue\n\n### Preprocessor Directives And Function Prototypes\n\nLets start off, create a new working directory called **chat_app** wherever you want on your system.\n\nNext change into the **chat_app** directory and create a new file, name it **boostChatClient.cpp**.\n\nFirst we'll need to include a few libraries; some from the C++ standard template library and others from Boost.\n\n```cpp\n#include<iostream>\n#include<queue>\n#include<string>\n#include<cstdlib>\n\n#include<boost/thread.hpp>\n#include<boost/bind.hpp>\n#include<boost/asio.hpp>\n#include<boost/asio/ip/tcp.hpp>\n#include<boost/algorithm/string.hpp>\n```\n\nThe above library includes are fairly basic for a C++ console application but unfamiliar to most are probably the Boost includes.\n\n- **boost/thread** Multithreading support\n\n- **boost/bind** A library for functional programming but used here to create sub-rountines for threads\n\n- **boost/asio** System socket and network programming library\n\n- **boost/algorithm/string** Pretty self-explainatory; gives use some new string methods\n\nI will be using namespace aliasing in this application, it can be a pain sometimes to read code without namespace aliasing so lets at least make an effort to strive for clean human readable code. So add the lines below to the current file right after the preprocessor library includes.\n\n```cpp\n/* boostChatClient.cpp */\nusing namespace std;\nusing namespace boost;\nusing namespace boost::asio;\nusing namespace boost::asio::ip;\n``\n\nNext we define some typedefs for quickly describing some boost shared pointers. Shared pointers are now apart of the C++ standard but there are problems abound when you try and mix and match C++ std shared pointers with Boost library shared pointers. Not so much for performance but more from the fact that using Boost shared pointers introduces a dependency on the Boost libraries; so to keep your code Boost friendly just stick with the Boost versions of the smart pointer collection.\n\n```cpp\n/* boostChatClient.cpp */\ntypedef boost::shared_ptr<tcp::socket> socket_ptr;\ntypedef boost::shared_ptr<string> string_ptr;\ntypedef boost::shared_ptr< queue<string_ptr> > messageQueue_ptr;\n```\n\nIn order to initialize the boost::asio networking methods we need to create a special object called **io_service**. The best way to think of **io_service** is as shared queue which only accepts functions that deal with asynchronous I/O. Thus you can represent a socket bound to a network port within your application and in order to send the socket a method such as __connect()__ the method must get enqueued within the `io_service` before its sent down to the operating system.\n\n<blockquote class=\"quote\" markdown=\"1\">\nThe documentation on the anatomy of Boost::asio is the most helpful for understanding the architecture of the library. [Basic Boost.Asio Anatomy](http://www.boost.org/doc/libs/1_57_0/doc/html/boost_asio/overview/core/basics.html)\n</blockquote>\n\n```cpp\n/* boostChatClient.cpp */\nio_service service; // Boost Asio io_service\nmessageQueue_ptr messageQueue(new queue<string_ptr>); // Queue for producer consumer pattern\ntcp::endpoint ep(ip::address::from_string(\"127.0.0.1\"), 8001); // TCP socket for connecting to server\nconst int inputSize = 256; // Maximum size for input buffer\nstring_ptr promptCpy; // Terminal prompt displayed to chat users\n```\n\nAdd the following function prototypes; we'll discuss the functions as they get implemented. As you can already guess by the descriptive names of each function the function's with the suffix __Loop__ will be ran on threads and interact with the __messageQueue__ we defined earlier.\n\n```cpp\n/* boostChatClient.cpp */\n// Function Prototypes\nbool isOwnMessage(string_ptr);\nvoid displayLoop(socket_ptr);\nvoid inboundLoop(socket_ptr, string_ptr);\nvoid writeLoop(socket_ptr, string_ptr);\nstring* buildPrompt();\n// End of Function Prototypes\n```\n\n### The main() Function, Thread Creation And Socket Initialization\n\nFrom the explaination earlier in the article we create a `thread_group` facilitate the all of our async functions. In regards to the producer-consumer pattern, \n\n- **inboundLoop()** Will push items from the socket to our messageQueue; i.e producer\n\n- **displayLoop()** Removes items from messageQueue to display on the client terminal; i.e consumer\n\n```cpp\n  /* boostChatClient.cpp */\nint main(int argc, char** argv)\n{\n  try\n  {\n    boost::thread_group threads;\n    socket_ptr sock(new tcp::socket(service));\n\n    string_ptr prompt( buildPrompt() );\n    promptCpy = prompt;\n\n    sock->connect(ep);\n\n    cout << \"Welcome to the ChatApplication\\nType \\\"exit\\\" to quit\" << endl;\n\n    threads.create_thread(boost::bind(displayLoop, sock));\n    threads.create_thread(boost::bind(inboundLoop, sock, prompt));\n    threads.create_thread(boost::bind(writeLoop, sock, prompt));\n\n    threads.join_all();\n  }\n  catch(std::exception&amp; e)\n  {\n    cerr << e.what() << endl;\n  }\n\n  puts(\"Press any key to continue...\");\n  getc(stdin);\n  return EXIT_SUCCESS;\n}\n```\n\n### Function Definitions\n\nThe first function _buildPrompt_ is a function which handles the display of the terminal input for clients.\n\nIts fairly simple in that it takes a string of the clients name and assigns it to the value of the prompt pointer we declared earlier.\n\n```cpp\n/* boostChatClient.cpp */\nstring* buildPrompt()\n{\n  const int inputSize = 256;\n  char inputBuf[inputSize] = {0};\n  char nameBuf[inputSize] = {0};\n  string* prompt = new string(\": \");\n\n  cout << \"Please input a new username: \";\n  cin.getline(nameBuf, inputSize);\n  *prompt = (string)nameBuf + *prompt;\n  boost::algorithm::to_lower(*prompt);\n\n  return prompt;\n}\n```\n\nFollowing the buildPrompt() function the first of the threaded functions is the _inboundLoop()_.\n\n```cpp\n/* boostChatClient.cpp */\nvoid inboundLoop(socket_ptr sock, string_ptr prompt)\n{\n  int bytesRead = 0;\n  char readBuf[1024] = {0};\n\n  for(;;)\n  {\n    if(sock->available())\n    {\n      bytesRead = sock->read_some(buffer(readBuf, inputSize));\n      string_ptr msg(new string(readBuf, bytesRead));\n\n      messageQueue->push(msg);\n    }\n\n    boost::this_thread::sleep( boost::posix_time::millisec(1000));\n  }\n}\n```\nOur code for the _inboundLoop()_ is self-explainatory but in particular it creates a loop which only inserts into the thread when a message is available on the socket connected to the server. Reading from the socket object is an operation which may potentially interfere with writing to the socket so we put a one second delay on checks for reading.\n\nAs for writting mesasges to the socket to send off to other members of the Chat session we need a loop that will constantly poll for user input. Once the user input is read write the message to the socket wait for the next input. Recall that this operation is threaded so in-comming messages can still be displayed since that happens on an entirely different thread.\n\n```cpp\n/* boostChatClient.cpp */\nvoid writeLoop(socket_ptr sock, string_ptr prompt)\n{\n  char inputBuf[inputSize] = {0};\n  string inputMsg;\n\n  for(;;)\n  {\n    cin.getline(inputBuf, inputSize);\n    inputMsg = *prompt + (string)inputBuf + '\\n';\n\n    if(!inputMsg.empty())\n    {\n      sock->write_some(buffer(inputMsg, inputSize));\n    }\n\n    // The string for quitting the application\n    // On the server-side there is also a check for \"quit\" to terminate the TCP socket\n    if(inputMsg.find(\"exit\") != string::npos)\n      exit(1); // Replace with cleanup code if you want but for this tutorial exit is enough\n\n    inputMsg.clear();\n    memset(inputBuf, 0, inputSize);\n  }\n}\n```\n\nFor the extra pedantic, you might be wondering why there is no extraneous clean-up code and instead we just call exit(1); for the sake of keeping this tutorial brief and to the point we are not launching a production ready scalable service oriented distributed ChatApplication to be used by thousands of clients. Anyhow moving on the last of the threaded funtions is for displaying the messages read from the socket to the terminal.\n\n```cpp\n/* boostChatClient.cpp */\nvoid displayLoop(socket_ptr sock)\n{\n  for(;;)\n  {\n    if(!messageQueue->empty())\n    {\n      // Can you refactor this code to handle multiple users with the same prompt?\n      if(!isOwnMessage(messageQueue->front()))\n      {\n        cout << \"\\n\" + *(messageQueue->front());\n      }\n\n      messageQueue->pop();\n    }\n\n    boost::this_thread::sleep( boost::posix_time::millisec(1000));\n  }\n}\n```\n\nThe _displayLoop()_ function is fairly crude but it gets the job done. We rely on the fact that every message begins with a user prompt in order to determine if the message belonged to the client or not. When I say crude I mean that a proper chat application with tag each user with a specific id number because our code fails to handle the error when multiple users share the same prompt. Speaking of which here is the last of the utility functions; the one which checks if the prompt from _buildPrompt()_ is found within the string arriving from the socket.\n\n```cpp\nbool isOwnMessage(string_ptr message)\n{\n  if(message->find(*promptCpy) != string::npos)\n    return true;\n  else\n    return false;\n}\n```\n\nThanks for reading my tutorial on how to setup a chat client using C++ and the Boost Libraries; this code deserves a refactor considering that many of the Boost code used is now apart of the latest C++ standard. In addition the introduction of a protocol could be useful for unique identification of clients and other things as well.\nStay tuned for the second part of this tutorial where we code the server side of the Chat applciation.\n\n### Full Source Code\n<script src=\"https://gist.github.com/taywils/9e8019fe72ff3ab16e0f.js\"> </script>\n\n[Click here for Part II](/2014/11/28/boostchatserver.html)\n  </div>\n","source":"_posts/boostchatclient.md","raw":"---\ntitle: C++ Chat Server Tutorial Part I\ndate: 2014-11-15\ntags: [cpp]\ncategories: [tutorial, socket-programming, multi-threading]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boostchatclient.jpg\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boostchatclient.jpg\ncomments: false\n---\nIn this tutorial we'll learn how to write a client for a feature limited chat server in C++ using the Boost libraries. The codebase for this tutorial is a bit dated as many of the features included by Boost are now apart of the C++ standard library but knowledege of Boost is still worthy of merit in case you run into the many C++ projects which make use of it.\n\n<!-- more -->\n\n[Click here for Part II](/2014/11/28/boostchatserver)\n\n### Tutorial Assumes Boost Version >= 1.53\n\nWe'll be making use of the Boost C++ libraries for this tutorial so before we begin make sure you have read through the installation documentation on the Boost website on. Below I have included some links for each operating system on how to install a recent version of Boost; its not extremely difficult but sometimes installing Boost can be tricky for those of us not familiar with compiling C++ projects from source code or the difference between the header-file only libraries and the rest of Boost.\n\n- [Windows users Boost Installation Guide](http://www.boost.org/doc/libs/1_57_0/more/getting_started/windows.html)\n- [Ubuntu/Debian Linux can use the aptitude Boost](http://stackoverflow.com/questions/12578499/how-to-install-boost-on-ubuntu)\n- [Ubuntu/Debian Linux can also use the Upstream Boost which is recommended](http://www.boost.org/doc/libs/1_57_0/more/getting_started/unix-variants.html)\n- [Mac OS X should use Homebrew](http://brewformulas.org/Boost)\n\nIf you need extra help installing the Boost C++ libraries or making sure that you can compile a project using Boost and properly link the libraries Google and or Stackoverflow are your best bets. Once you're comfortable building projects and or compiling single files with Boost we're ready to begin.\n\n### Part I: The Chat Client Code\n\nOur client code for the Chat application will rely upon the use of threads to divide our code into three distinct sub-routines.\n\n- A thread for displaying chat messages\n- Another thread for sending messages to the Chat server\n- And a third thread for receiving messages routed by the server from other connected clients\n\nThere are many approaches to designing multi-threaded applications and its a big topic that often rears its head during interviews with top tech companies but for the sake of this tutorial we'll only need to concern ourselves with just a small subset of concurrent programming. For the purposes of the application we're going to build in this tutorial series we're going to be using what is known as the _\"Producer-Consumer\"_ pattern for organizing our code. As a side note for the pedantics reading this article I'm not claiming that this code will follow _Producer-Consumer_ to the exact sepcification but for the most part it will resemble a typical _Producer-Consumer_ setup.\n\n### Producer-Consumer Overview For The Chat Client\n\nQuoting from the [Wikipedia page on the pattern](http://en.wikipedia.org/wiki/Producer-consumer_problem)...\n\n<blockquote class=\"quote\">\nIn computing, the producer–consumer's problem (also known as the bounded-buffer problem) is a classic example of a multi-process synchronization problem. The problem describes two processes, the producer and the consumer, who share a common, fixed-size buffer used as a queue.\n</blockquote>\n\nThus the following is a list of C++ objects used by our Client to implement the _Producer-Consumer_ pattern.\n\n- **boost::thread_group** to address multi-processing\n\n- **std::queue< std::string >** to represent the bounded-buffer of messages\n\n- **boost::thread** objects for adding and removing messages from the queue\n\n### Preprocessor Directives And Function Prototypes\n\nLets start off, create a new working directory called **chat_app** wherever you want on your system.\n\nNext change into the **chat_app** directory and create a new file, name it **boostChatClient.cpp**.\n\nFirst we'll need to include a few libraries; some from the C++ standard template library and others from Boost.\n\n```cpp\n#include<iostream>\n#include<queue>\n#include<string>\n#include<cstdlib>\n\n#include<boost/thread.hpp>\n#include<boost/bind.hpp>\n#include<boost/asio.hpp>\n#include<boost/asio/ip/tcp.hpp>\n#include<boost/algorithm/string.hpp>\n```\n\nThe above library includes are fairly basic for a C++ console application but unfamiliar to most are probably the Boost includes.\n\n- **boost/thread** Multithreading support\n\n- **boost/bind** A library for functional programming but used here to create sub-rountines for threads\n\n- **boost/asio** System socket and network programming library\n\n- **boost/algorithm/string** Pretty self-explainatory; gives use some new string methods\n\nI will be using namespace aliasing in this application, it can be a pain sometimes to read code without namespace aliasing so lets at least make an effort to strive for clean human readable code. So add the lines below to the current file right after the preprocessor library includes.\n\n```cpp\n/* boostChatClient.cpp */\nusing namespace std;\nusing namespace boost;\nusing namespace boost::asio;\nusing namespace boost::asio::ip;\n``\n\nNext we define some typedefs for quickly describing some boost shared pointers. Shared pointers are now apart of the C++ standard but there are problems abound when you try and mix and match C++ std shared pointers with Boost library shared pointers. Not so much for performance but more from the fact that using Boost shared pointers introduces a dependency on the Boost libraries; so to keep your code Boost friendly just stick with the Boost versions of the smart pointer collection.\n\n```cpp\n/* boostChatClient.cpp */\ntypedef boost::shared_ptr<tcp::socket> socket_ptr;\ntypedef boost::shared_ptr<string> string_ptr;\ntypedef boost::shared_ptr< queue<string_ptr> > messageQueue_ptr;\n```\n\nIn order to initialize the boost::asio networking methods we need to create a special object called **io_service**. The best way to think of **io_service** is as shared queue which only accepts functions that deal with asynchronous I/O. Thus you can represent a socket bound to a network port within your application and in order to send the socket a method such as __connect()__ the method must get enqueued within the `io_service` before its sent down to the operating system.\n\n<blockquote class=\"quote\" markdown=\"1\">\nThe documentation on the anatomy of Boost::asio is the most helpful for understanding the architecture of the library. [Basic Boost.Asio Anatomy](http://www.boost.org/doc/libs/1_57_0/doc/html/boost_asio/overview/core/basics.html)\n</blockquote>\n\n```cpp\n/* boostChatClient.cpp */\nio_service service; // Boost Asio io_service\nmessageQueue_ptr messageQueue(new queue<string_ptr>); // Queue for producer consumer pattern\ntcp::endpoint ep(ip::address::from_string(\"127.0.0.1\"), 8001); // TCP socket for connecting to server\nconst int inputSize = 256; // Maximum size for input buffer\nstring_ptr promptCpy; // Terminal prompt displayed to chat users\n```\n\nAdd the following function prototypes; we'll discuss the functions as they get implemented. As you can already guess by the descriptive names of each function the function's with the suffix __Loop__ will be ran on threads and interact with the __messageQueue__ we defined earlier.\n\n```cpp\n/* boostChatClient.cpp */\n// Function Prototypes\nbool isOwnMessage(string_ptr);\nvoid displayLoop(socket_ptr);\nvoid inboundLoop(socket_ptr, string_ptr);\nvoid writeLoop(socket_ptr, string_ptr);\nstring* buildPrompt();\n// End of Function Prototypes\n```\n\n### The main() Function, Thread Creation And Socket Initialization\n\nFrom the explaination earlier in the article we create a `thread_group` facilitate the all of our async functions. In regards to the producer-consumer pattern, \n\n- **inboundLoop()** Will push items from the socket to our messageQueue; i.e producer\n\n- **displayLoop()** Removes items from messageQueue to display on the client terminal; i.e consumer\n\n```cpp\n  /* boostChatClient.cpp */\nint main(int argc, char** argv)\n{\n  try\n  {\n    boost::thread_group threads;\n    socket_ptr sock(new tcp::socket(service));\n\n    string_ptr prompt( buildPrompt() );\n    promptCpy = prompt;\n\n    sock->connect(ep);\n\n    cout << \"Welcome to the ChatApplication\\nType \\\"exit\\\" to quit\" << endl;\n\n    threads.create_thread(boost::bind(displayLoop, sock));\n    threads.create_thread(boost::bind(inboundLoop, sock, prompt));\n    threads.create_thread(boost::bind(writeLoop, sock, prompt));\n\n    threads.join_all();\n  }\n  catch(std::exception&amp; e)\n  {\n    cerr << e.what() << endl;\n  }\n\n  puts(\"Press any key to continue...\");\n  getc(stdin);\n  return EXIT_SUCCESS;\n}\n```\n\n### Function Definitions\n\nThe first function _buildPrompt_ is a function which handles the display of the terminal input for clients.\n\nIts fairly simple in that it takes a string of the clients name and assigns it to the value of the prompt pointer we declared earlier.\n\n```cpp\n/* boostChatClient.cpp */\nstring* buildPrompt()\n{\n  const int inputSize = 256;\n  char inputBuf[inputSize] = {0};\n  char nameBuf[inputSize] = {0};\n  string* prompt = new string(\": \");\n\n  cout << \"Please input a new username: \";\n  cin.getline(nameBuf, inputSize);\n  *prompt = (string)nameBuf + *prompt;\n  boost::algorithm::to_lower(*prompt);\n\n  return prompt;\n}\n```\n\nFollowing the buildPrompt() function the first of the threaded functions is the _inboundLoop()_.\n\n```cpp\n/* boostChatClient.cpp */\nvoid inboundLoop(socket_ptr sock, string_ptr prompt)\n{\n  int bytesRead = 0;\n  char readBuf[1024] = {0};\n\n  for(;;)\n  {\n    if(sock->available())\n    {\n      bytesRead = sock->read_some(buffer(readBuf, inputSize));\n      string_ptr msg(new string(readBuf, bytesRead));\n\n      messageQueue->push(msg);\n    }\n\n    boost::this_thread::sleep( boost::posix_time::millisec(1000));\n  }\n}\n```\nOur code for the _inboundLoop()_ is self-explainatory but in particular it creates a loop which only inserts into the thread when a message is available on the socket connected to the server. Reading from the socket object is an operation which may potentially interfere with writing to the socket so we put a one second delay on checks for reading.\n\nAs for writting mesasges to the socket to send off to other members of the Chat session we need a loop that will constantly poll for user input. Once the user input is read write the message to the socket wait for the next input. Recall that this operation is threaded so in-comming messages can still be displayed since that happens on an entirely different thread.\n\n```cpp\n/* boostChatClient.cpp */\nvoid writeLoop(socket_ptr sock, string_ptr prompt)\n{\n  char inputBuf[inputSize] = {0};\n  string inputMsg;\n\n  for(;;)\n  {\n    cin.getline(inputBuf, inputSize);\n    inputMsg = *prompt + (string)inputBuf + '\\n';\n\n    if(!inputMsg.empty())\n    {\n      sock->write_some(buffer(inputMsg, inputSize));\n    }\n\n    // The string for quitting the application\n    // On the server-side there is also a check for \"quit\" to terminate the TCP socket\n    if(inputMsg.find(\"exit\") != string::npos)\n      exit(1); // Replace with cleanup code if you want but for this tutorial exit is enough\n\n    inputMsg.clear();\n    memset(inputBuf, 0, inputSize);\n  }\n}\n```\n\nFor the extra pedantic, you might be wondering why there is no extraneous clean-up code and instead we just call exit(1); for the sake of keeping this tutorial brief and to the point we are not launching a production ready scalable service oriented distributed ChatApplication to be used by thousands of clients. Anyhow moving on the last of the threaded funtions is for displaying the messages read from the socket to the terminal.\n\n```cpp\n/* boostChatClient.cpp */\nvoid displayLoop(socket_ptr sock)\n{\n  for(;;)\n  {\n    if(!messageQueue->empty())\n    {\n      // Can you refactor this code to handle multiple users with the same prompt?\n      if(!isOwnMessage(messageQueue->front()))\n      {\n        cout << \"\\n\" + *(messageQueue->front());\n      }\n\n      messageQueue->pop();\n    }\n\n    boost::this_thread::sleep( boost::posix_time::millisec(1000));\n  }\n}\n```\n\nThe _displayLoop()_ function is fairly crude but it gets the job done. We rely on the fact that every message begins with a user prompt in order to determine if the message belonged to the client or not. When I say crude I mean that a proper chat application with tag each user with a specific id number because our code fails to handle the error when multiple users share the same prompt. Speaking of which here is the last of the utility functions; the one which checks if the prompt from _buildPrompt()_ is found within the string arriving from the socket.\n\n```cpp\nbool isOwnMessage(string_ptr message)\n{\n  if(message->find(*promptCpy) != string::npos)\n    return true;\n  else\n    return false;\n}\n```\n\nThanks for reading my tutorial on how to setup a chat client using C++ and the Boost Libraries; this code deserves a refactor considering that many of the Boost code used is now apart of the latest C++ standard. In addition the introduction of a protocol could be useful for unique identification of clients and other things as well.\nStay tuned for the second part of this tutorial where we code the server side of the Chat applciation.\n\n### Full Source Code\n<script src=\"https://gist.github.com/taywils/9e8019fe72ff3ab16e0f.js\"> </script>\n\n[Click here for Part II](/2014/11/28/boostchatserver.html)\n  </div>\n","slug":"boostchatclient","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3gf0002yswv5zjk3axd","layout":"post","photos":[],"link":"","content":"<p>In this tutorial we’ll learn how to write a client for a feature limited chat server in C++ using the Boost libraries. The codebase for this tutorial is a bit dated as many of the features included by Boost are now apart of the C++ standard library but knowledege of Boost is still worthy of merit in case you run into the many C++ projects which make use of it.</p>\n<a id=\"more\"></a>\n<p><a href=\"/2014/11/28/boostchatserver\">Click here for Part II</a></p>\n<h3 id=\"Tutorial-Assumes-Boost-Version-gt-1-53\"><a href=\"#Tutorial-Assumes-Boost-Version-gt-1-53\" class=\"headerlink\" title=\"Tutorial Assumes Boost Version &gt;= 1.53\"></a>Tutorial Assumes Boost Version &gt;= 1.53</h3><p>We’ll be making use of the Boost C++ libraries for this tutorial so before we begin make sure you have read through the installation documentation on the Boost website on. Below I have included some links for each operating system on how to install a recent version of Boost; its not extremely difficult but sometimes installing Boost can be tricky for those of us not familiar with compiling C++ projects from source code or the difference between the header-file only libraries and the rest of Boost.</p>\n<ul>\n<li><a href=\"http://www.boost.org/doc/libs/1_57_0/more/getting_started/windows.html\" target=\"_blank\" rel=\"external\">Windows users Boost Installation Guide</a></li>\n<li><a href=\"http://stackoverflow.com/questions/12578499/how-to-install-boost-on-ubuntu\" target=\"_blank\" rel=\"external\">Ubuntu/Debian Linux can use the aptitude Boost</a></li>\n<li><a href=\"http://www.boost.org/doc/libs/1_57_0/more/getting_started/unix-variants.html\" target=\"_blank\" rel=\"external\">Ubuntu/Debian Linux can also use the Upstream Boost which is recommended</a></li>\n<li><a href=\"http://brewformulas.org/Boost\" target=\"_blank\" rel=\"external\">Mac OS X should use Homebrew</a></li>\n</ul>\n<p>If you need extra help installing the Boost C++ libraries or making sure that you can compile a project using Boost and properly link the libraries Google and or Stackoverflow are your best bets. Once you’re comfortable building projects and or compiling single files with Boost we’re ready to begin.</p>\n<h3 id=\"Part-I-The-Chat-Client-Code\"><a href=\"#Part-I-The-Chat-Client-Code\" class=\"headerlink\" title=\"Part I: The Chat Client Code\"></a>Part I: The Chat Client Code</h3><p>Our client code for the Chat application will rely upon the use of threads to divide our code into three distinct sub-routines.</p>\n<ul>\n<li>A thread for displaying chat messages</li>\n<li>Another thread for sending messages to the Chat server</li>\n<li>And a third thread for receiving messages routed by the server from other connected clients</li>\n</ul>\n<p>There are many approaches to designing multi-threaded applications and its a big topic that often rears its head during interviews with top tech companies but for the sake of this tutorial we’ll only need to concern ourselves with just a small subset of concurrent programming. For the purposes of the application we’re going to build in this tutorial series we’re going to be using what is known as the <em>“Producer-Consumer”</em> pattern for organizing our code. As a side note for the pedantics reading this article I’m not claiming that this code will follow <em>Producer-Consumer</em> to the exact sepcification but for the most part it will resemble a typical <em>Producer-Consumer</em> setup.</p>\n<h3 id=\"Producer-Consumer-Overview-For-The-Chat-Client\"><a href=\"#Producer-Consumer-Overview-For-The-Chat-Client\" class=\"headerlink\" title=\"Producer-Consumer Overview For The Chat Client\"></a>Producer-Consumer Overview For The Chat Client</h3><p>Quoting from the <a href=\"http://en.wikipedia.org/wiki/Producer-consumer_problem\" target=\"_blank\" rel=\"external\">Wikipedia page on the pattern</a>…</p>\n<blockquote class=\"quote\"><br>In computing, the producer–consumer’s problem (also known as the bounded-buffer problem) is a classic example of a multi-process synchronization problem. The problem describes two processes, the producer and the consumer, who share a common, fixed-size buffer used as a queue.<br></blockquote>\n\n<p>Thus the following is a list of C++ objects used by our Client to implement the <em>Producer-Consumer</em> pattern.</p>\n<ul>\n<li><p><strong>boost::thread_group</strong> to address multi-processing</p>\n</li>\n<li><p><strong>std::queue&lt; std::string &gt;</strong> to represent the bounded-buffer of messages</p>\n</li>\n<li><p><strong>boost::thread</strong> objects for adding and removing messages from the queue</p>\n</li>\n</ul>\n<h3 id=\"Preprocessor-Directives-And-Function-Prototypes\"><a href=\"#Preprocessor-Directives-And-Function-Prototypes\" class=\"headerlink\" title=\"Preprocessor Directives And Function Prototypes\"></a>Preprocessor Directives And Function Prototypes</h3><p>Lets start off, create a new working directory called <strong>chat_app</strong> wherever you want on your system.</p>\n<p>Next change into the <strong>chat_app</strong> directory and create a new file, name it <strong>boostChatClient.cpp</strong>.</p>\n<p>First we’ll need to include a few libraries; some from the C++ standard template library and others from Boost.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/thread.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/bind.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/asio.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/asio/ip/tcp.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/algorithm/string.hpp&gt;</span></span></div></pre></td></tr></table></figure>\n<p>The above library includes are fairly basic for a C++ console application but unfamiliar to most are probably the Boost includes.</p>\n<ul>\n<li><p><strong>boost/thread</strong> Multithreading support</p>\n</li>\n<li><p><strong>boost/bind</strong> A library for functional programming but used here to create sub-rountines for threads</p>\n</li>\n<li><p><strong>boost/asio</strong> System socket and network programming library</p>\n</li>\n<li><p><strong>boost/algorithm/string</strong> Pretty self-explainatory; gives use some new string methods</p>\n</li>\n</ul>\n<p>I will be using namespace aliasing in this application, it can be a pain sometimes to read code without namespace aliasing so lets at least make an effort to strive for clean human readable code. So add the lines below to the current file right after the preprocessor library includes.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost::asio;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost::asio::ip;</div><div class=\"line\">``</div><div class=\"line\"></div><div class=\"line\">Next we define some typedefs <span class=\"keyword\">for</span> quickly describing some boost shared pointers. Shared pointers are now apart of the C++ standard but there are problems abound when you <span class=\"keyword\">try</span> and mix and match C++ <span class=\"built_in\">std</span> shared pointers with Boost library shared pointers. Not so much <span class=\"keyword\">for</span> performance but more from the fact that <span class=\"keyword\">using</span> Boost shared pointers introduces a dependency on the Boost libraries; so to keep your code Boost friendly just stick with the Boost versions of the smart pointer collection.</div><div class=\"line\"></div><div class=\"line\">```cpp</div><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt;tcp::socket&gt; socket_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; string_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt; <span class=\"built_in\">queue</span>&lt;string_ptr&gt; &gt; messageQueue_ptr;</div></pre></td></tr></table></figure>\n<p>In order to initialize the boost::asio networking methods we need to create a special object called <strong>io_service</strong>. The best way to think of <strong>io_service</strong> is as shared queue which only accepts functions that deal with asynchronous I/O. Thus you can represent a socket bound to a network port within your application and in order to send the socket a method such as <strong>connect()</strong> the method must get enqueued within the <code>io_service</code> before its sent down to the operating system.</p>\n<blockquote class=\"quote\" markdown=\"1\"><br>The documentation on the anatomy of Boost::asio is the most helpful for understanding the architecture of the library. <a href=\"http://www.boost.org/doc/libs/1_57_0/doc/html/boost_asio/overview/core/basics.html\" target=\"_blank\" rel=\"external\">Basic Boost.Asio Anatomy</a><br></blockquote>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* boostChatClient.cpp */</div><div class=\"line\">io_service service; // Boost Asio io_service</div><div class=\"line\">messageQueue_ptr messageQueue(new queue&lt;string_ptr&gt;); // Queue for producer consumer pattern</div><div class=\"line\">tcp::endpoint ep(ip::address::from_string(\"127.0.0.1\"), 8001); // TCP socket for connecting to server</div><div class=\"line\">const int inputSize = 256; // Maximum size for input buffer</div><div class=\"line\">string_ptr promptCpy; // Terminal prompt displayed to chat users</div></pre></td></tr></table></figure>\n<p>Add the following function prototypes; we’ll discuss the functions as they get implemented. As you can already guess by the descriptive names of each function the function’s with the suffix <strong>Loop</strong> will be ran on threads and interact with the <strong>messageQueue</strong> we defined earlier.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"comment\">// Function Prototypes</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isOwnMessage</span><span class=\"params\">(string_ptr)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayLoop</span><span class=\"params\">(socket_ptr)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inboundLoop</span><span class=\"params\">(socket_ptr, string_ptr)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeLoop</span><span class=\"params\">(socket_ptr, string_ptr)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">buildPrompt</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">// End of Function Prototypes</span></div></pre></td></tr></table></figure>\n<h3 id=\"The-main-Function-Thread-Creation-And-Socket-Initialization\"><a href=\"#The-main-Function-Thread-Creation-And-Socket-Initialization\" class=\"headerlink\" title=\"The main() Function, Thread Creation And Socket Initialization\"></a>The main() Function, Thread Creation And Socket Initialization</h3><p>From the explaination earlier in the article we create a <code>thread_group</code> facilitate the all of our async functions. In regards to the producer-consumer pattern, </p>\n<ul>\n<li><p><strong>inboundLoop()</strong> Will push items from the socket to our messageQueue; i.e producer</p>\n</li>\n<li><p><strong>displayLoop()</strong> Removes items from messageQueue to display on the client terminal; i.e consumer</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">  /* boostChatClient.cpp */</div><div class=\"line\">int main(int argc, char** argv)</div><div class=\"line\">&#123;</div><div class=\"line\">  try</div><div class=\"line\">  &#123;</div><div class=\"line\">    boost::thread_group threads;</div><div class=\"line\">    socket_ptr sock(new tcp::socket(service));</div><div class=\"line\"></div><div class=\"line\">    string_ptr prompt( buildPrompt() );</div><div class=\"line\">    promptCpy = prompt;</div><div class=\"line\"></div><div class=\"line\">    sock-&gt;connect(ep);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Welcome to the ChatApplication\\nType \\\"exit\\\" to quit\" &lt;&lt; endl;</div><div class=\"line\"></div><div class=\"line\">    threads.create_thread(boost::bind(displayLoop, sock));</div><div class=\"line\">    threads.create_thread(boost::bind(inboundLoop, sock, prompt));</div><div class=\"line\">    threads.create_thread(boost::bind(writeLoop, sock, prompt));</div><div class=\"line\"></div><div class=\"line\">    threads.join_all();</div><div class=\"line\">  &#125;</div><div class=\"line\">  catch(std::exception&amp;amp; e)</div><div class=\"line\">  &#123;</div><div class=\"line\">    cerr &lt;&lt; e.what() &lt;&lt; endl;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  puts(\"Press any key to continue...\");</div><div class=\"line\">  getc(stdin);</div><div class=\"line\">  return EXIT_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Function-Definitions\"><a href=\"#Function-Definitions\" class=\"headerlink\" title=\"Function Definitions\"></a>Function Definitions</h3><p>The first function <em>buildPrompt</em> is a function which handles the display of the terminal input for clients.</p>\n<p>Its fairly simple in that it takes a string of the clients name and assigns it to the value of the prompt pointer we declared earlier.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">buildPrompt</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inputSize = <span class=\"number\">256</span>;</div><div class=\"line\">  <span class=\"keyword\">char</span> inputBuf[inputSize] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">  <span class=\"keyword\">char</span> nameBuf[inputSize] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">  <span class=\"built_in\">string</span>* prompt = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">\": \"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Please input a new username: \"</span>;</div><div class=\"line\">  <span class=\"built_in\">cin</span>.getline(nameBuf, inputSize);</div><div class=\"line\">  *prompt = (<span class=\"built_in\">string</span>)nameBuf + *prompt;</div><div class=\"line\">  boost::algorithm::to_lower(*prompt);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> prompt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Following the buildPrompt() function the first of the threaded functions is the <em>inboundLoop()</em>.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* boostChatClient.cpp */</div><div class=\"line\">void inboundLoop(socket_ptr sock, string_ptr prompt)</div><div class=\"line\">&#123;</div><div class=\"line\">  int bytesRead = 0;</div><div class=\"line\">  char readBuf[1024] = &#123;0&#125;;</div><div class=\"line\"></div><div class=\"line\">  for(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    if(sock-&gt;available())</div><div class=\"line\">    &#123;</div><div class=\"line\">      bytesRead = sock-&gt;read_some(buffer(readBuf, inputSize));</div><div class=\"line\">      string_ptr msg(new string(readBuf, bytesRead));</div><div class=\"line\"></div><div class=\"line\">      messageQueue-&gt;push(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boost::this_thread::sleep( boost::posix_time::millisec(1000));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Our code for the <em>inboundLoop()</em> is self-explainatory but in particular it creates a loop which only inserts into the thread when a message is available on the socket connected to the server. Reading from the socket object is an operation which may potentially interfere with writing to the socket so we put a one second delay on checks for reading.</p>\n<p>As for writting mesasges to the socket to send off to other members of the Chat session we need a loop that will constantly poll for user input. Once the user input is read write the message to the socket wait for the next input. Recall that this operation is threaded so in-comming messages can still be displayed since that happens on an entirely different thread.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeLoop</span><span class=\"params\">(socket_ptr sock, string_ptr prompt)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> inputBuf[inputSize] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">  <span class=\"built_in\">string</span> inputMsg;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>.getline(inputBuf, inputSize);</div><div class=\"line\">    inputMsg = *prompt + (<span class=\"built_in\">string</span>)inputBuf + <span class=\"string\">'\\n'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!inputMsg.empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">      sock-&gt;write_some(buffer(inputMsg, inputSize));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The string for quitting the application</span></div><div class=\"line\">    <span class=\"comment\">// On the server-side there is also a check for \"quit\" to terminate the TCP socket</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(inputMsg.find(<span class=\"string\">\"exit\"</span>) != <span class=\"built_in\">string</span>::npos)</div><div class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>); <span class=\"comment\">// Replace with cleanup code if you want but for this tutorial exit is enough</span></div><div class=\"line\"></div><div class=\"line\">    inputMsg.clear();</div><div class=\"line\">    <span class=\"built_in\">memset</span>(inputBuf, <span class=\"number\">0</span>, inputSize);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>For the extra pedantic, you might be wondering why there is no extraneous clean-up code and instead we just call exit(1); for the sake of keeping this tutorial brief and to the point we are not launching a production ready scalable service oriented distributed ChatApplication to be used by thousands of clients. Anyhow moving on the last of the threaded funtions is for displaying the messages read from the socket to the terminal.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayLoop</span><span class=\"params\">(socket_ptr sock)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!messageQueue-&gt;empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">// Can you refactor this code to handle multiple users with the same prompt?</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(!isOwnMessage(messageQueue-&gt;front()))</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\"</span> + *(messageQueue-&gt;front());</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      messageQueue-&gt;pop();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boost::this_thread::sleep( boost::posix_time::millisec(<span class=\"number\">1000</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The <em>displayLoop()</em> function is fairly crude but it gets the job done. We rely on the fact that every message begins with a user prompt in order to determine if the message belonged to the client or not. When I say crude I mean that a proper chat application with tag each user with a specific id number because our code fails to handle the error when multiple users share the same prompt. Speaking of which here is the last of the utility functions; the one which checks if the prompt from <em>buildPrompt()</em> is found within the string arriving from the socket.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isOwnMessage</span><span class=\"params\">(string_ptr message)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(message-&gt;find(*promptCpy) != <span class=\"built_in\">string</span>::npos)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Thanks for reading my tutorial on how to setup a chat client using C++ and the Boost Libraries; this code deserves a refactor considering that many of the Boost code used is now apart of the latest C++ standard. In addition the introduction of a protocol could be useful for unique identification of clients and other things as well.<br>Stay tuned for the second part of this tutorial where we code the server side of the Chat applciation.</p>\n<h3 id=\"Full-Source-Code\"><a href=\"#Full-Source-Code\" class=\"headerlink\" title=\"Full Source Code\"></a>Full Source Code</h3><script src=\"https://gist.github.com/taywils/9e8019fe72ff3ab16e0f.js\"> </script>\n\n<p><a href=\"/2014/11/28/boostchatserver.html\">Click here for Part II</a><br>  </p>\n","site":{"data":{}},"excerpt":"<p>In this tutorial we’ll learn how to write a client for a feature limited chat server in C++ using the Boost libraries. The codebase for this tutorial is a bit dated as many of the features included by Boost are now apart of the C++ standard library but knowledege of Boost is still worthy of merit in case you run into the many C++ projects which make use of it.</p>","more":"<p><a href=\"/2014/11/28/boostchatserver\">Click here for Part II</a></p>\n<h3 id=\"Tutorial-Assumes-Boost-Version-gt-1-53\"><a href=\"#Tutorial-Assumes-Boost-Version-gt-1-53\" class=\"headerlink\" title=\"Tutorial Assumes Boost Version &gt;= 1.53\"></a>Tutorial Assumes Boost Version &gt;= 1.53</h3><p>We’ll be making use of the Boost C++ libraries for this tutorial so before we begin make sure you have read through the installation documentation on the Boost website on. Below I have included some links for each operating system on how to install a recent version of Boost; its not extremely difficult but sometimes installing Boost can be tricky for those of us not familiar with compiling C++ projects from source code or the difference between the header-file only libraries and the rest of Boost.</p>\n<ul>\n<li><a href=\"http://www.boost.org/doc/libs/1_57_0/more/getting_started/windows.html\">Windows users Boost Installation Guide</a></li>\n<li><a href=\"http://stackoverflow.com/questions/12578499/how-to-install-boost-on-ubuntu\">Ubuntu/Debian Linux can use the aptitude Boost</a></li>\n<li><a href=\"http://www.boost.org/doc/libs/1_57_0/more/getting_started/unix-variants.html\">Ubuntu/Debian Linux can also use the Upstream Boost which is recommended</a></li>\n<li><a href=\"http://brewformulas.org/Boost\">Mac OS X should use Homebrew</a></li>\n</ul>\n<p>If you need extra help installing the Boost C++ libraries or making sure that you can compile a project using Boost and properly link the libraries Google and or Stackoverflow are your best bets. Once you’re comfortable building projects and or compiling single files with Boost we’re ready to begin.</p>\n<h3 id=\"Part-I-The-Chat-Client-Code\"><a href=\"#Part-I-The-Chat-Client-Code\" class=\"headerlink\" title=\"Part I: The Chat Client Code\"></a>Part I: The Chat Client Code</h3><p>Our client code for the Chat application will rely upon the use of threads to divide our code into three distinct sub-routines.</p>\n<ul>\n<li>A thread for displaying chat messages</li>\n<li>Another thread for sending messages to the Chat server</li>\n<li>And a third thread for receiving messages routed by the server from other connected clients</li>\n</ul>\n<p>There are many approaches to designing multi-threaded applications and its a big topic that often rears its head during interviews with top tech companies but for the sake of this tutorial we’ll only need to concern ourselves with just a small subset of concurrent programming. For the purposes of the application we’re going to build in this tutorial series we’re going to be using what is known as the <em>“Producer-Consumer”</em> pattern for organizing our code. As a side note for the pedantics reading this article I’m not claiming that this code will follow <em>Producer-Consumer</em> to the exact sepcification but for the most part it will resemble a typical <em>Producer-Consumer</em> setup.</p>\n<h3 id=\"Producer-Consumer-Overview-For-The-Chat-Client\"><a href=\"#Producer-Consumer-Overview-For-The-Chat-Client\" class=\"headerlink\" title=\"Producer-Consumer Overview For The Chat Client\"></a>Producer-Consumer Overview For The Chat Client</h3><p>Quoting from the <a href=\"http://en.wikipedia.org/wiki/Producer-consumer_problem\">Wikipedia page on the pattern</a>…</p>\n<blockquote class=\"quote\"><br>In computing, the producer–consumer’s problem (also known as the bounded-buffer problem) is a classic example of a multi-process synchronization problem. The problem describes two processes, the producer and the consumer, who share a common, fixed-size buffer used as a queue.<br></blockquote>\n\n<p>Thus the following is a list of C++ objects used by our Client to implement the <em>Producer-Consumer</em> pattern.</p>\n<ul>\n<li><p><strong>boost::thread_group</strong> to address multi-processing</p>\n</li>\n<li><p><strong>std::queue&lt; std::string &gt;</strong> to represent the bounded-buffer of messages</p>\n</li>\n<li><p><strong>boost::thread</strong> objects for adding and removing messages from the queue</p>\n</li>\n</ul>\n<h3 id=\"Preprocessor-Directives-And-Function-Prototypes\"><a href=\"#Preprocessor-Directives-And-Function-Prototypes\" class=\"headerlink\" title=\"Preprocessor Directives And Function Prototypes\"></a>Preprocessor Directives And Function Prototypes</h3><p>Lets start off, create a new working directory called <strong>chat_app</strong> wherever you want on your system.</p>\n<p>Next change into the <strong>chat_app</strong> directory and create a new file, name it <strong>boostChatClient.cpp</strong>.</p>\n<p>First we’ll need to include a few libraries; some from the C++ standard template library and others from Boost.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/thread.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/bind.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/asio.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/asio/ip/tcp.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/algorithm/string.hpp&gt;</span></span></div></pre></td></tr></table></figure>\n<p>The above library includes are fairly basic for a C++ console application but unfamiliar to most are probably the Boost includes.</p>\n<ul>\n<li><p><strong>boost/thread</strong> Multithreading support</p>\n</li>\n<li><p><strong>boost/bind</strong> A library for functional programming but used here to create sub-rountines for threads</p>\n</li>\n<li><p><strong>boost/asio</strong> System socket and network programming library</p>\n</li>\n<li><p><strong>boost/algorithm/string</strong> Pretty self-explainatory; gives use some new string methods</p>\n</li>\n</ul>\n<p>I will be using namespace aliasing in this application, it can be a pain sometimes to read code without namespace aliasing so lets at least make an effort to strive for clean human readable code. So add the lines below to the current file right after the preprocessor library includes.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost::asio;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost::asio::ip;</div><div class=\"line\">``</div><div class=\"line\"></div><div class=\"line\">Next we define some typedefs <span class=\"keyword\">for</span> quickly describing some boost shared pointers. Shared pointers are now apart of the C++ standard but there are problems abound when you <span class=\"keyword\">try</span> and mix and match C++ <span class=\"built_in\">std</span> shared pointers with Boost library shared pointers. Not so much <span class=\"keyword\">for</span> performance but more from the fact that <span class=\"keyword\">using</span> Boost shared pointers introduces a dependency on the Boost libraries; so to keep your code Boost friendly just stick with the Boost versions of the smart pointer collection.</div><div class=\"line\"></div><div class=\"line\">```cpp</div><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt;tcp::socket&gt; socket_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; string_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt; <span class=\"built_in\">queue</span>&lt;string_ptr&gt; &gt; messageQueue_ptr;</div></pre></td></tr></table></figure>\n<p>In order to initialize the boost::asio networking methods we need to create a special object called <strong>io_service</strong>. The best way to think of <strong>io_service</strong> is as shared queue which only accepts functions that deal with asynchronous I/O. Thus you can represent a socket bound to a network port within your application and in order to send the socket a method such as <strong>connect()</strong> the method must get enqueued within the <code>io_service</code> before its sent down to the operating system.</p>\n<blockquote class=\"quote\" markdown=\"1\"><br>The documentation on the anatomy of Boost::asio is the most helpful for understanding the architecture of the library. <a href=\"http://www.boost.org/doc/libs/1_57_0/doc/html/boost_asio/overview/core/basics.html\">Basic Boost.Asio Anatomy</a><br></blockquote>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* boostChatClient.cpp */</div><div class=\"line\">io_service service; // Boost Asio io_service</div><div class=\"line\">messageQueue_ptr messageQueue(new queue&lt;string_ptr&gt;); // Queue for producer consumer pattern</div><div class=\"line\">tcp::endpoint ep(ip::address::from_string(\"127.0.0.1\"), 8001); // TCP socket for connecting to server</div><div class=\"line\">const int inputSize = 256; // Maximum size for input buffer</div><div class=\"line\">string_ptr promptCpy; // Terminal prompt displayed to chat users</div></pre></td></tr></table></figure>\n<p>Add the following function prototypes; we’ll discuss the functions as they get implemented. As you can already guess by the descriptive names of each function the function’s with the suffix <strong>Loop</strong> will be ran on threads and interact with the <strong>messageQueue</strong> we defined earlier.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"comment\">// Function Prototypes</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isOwnMessage</span><span class=\"params\">(string_ptr)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayLoop</span><span class=\"params\">(socket_ptr)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inboundLoop</span><span class=\"params\">(socket_ptr, string_ptr)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeLoop</span><span class=\"params\">(socket_ptr, string_ptr)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">buildPrompt</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">// End of Function Prototypes</span></div></pre></td></tr></table></figure>\n<h3 id=\"The-main-Function-Thread-Creation-And-Socket-Initialization\"><a href=\"#The-main-Function-Thread-Creation-And-Socket-Initialization\" class=\"headerlink\" title=\"The main() Function, Thread Creation And Socket Initialization\"></a>The main() Function, Thread Creation And Socket Initialization</h3><p>From the explaination earlier in the article we create a <code>thread_group</code> facilitate the all of our async functions. In regards to the producer-consumer pattern, </p>\n<ul>\n<li><p><strong>inboundLoop()</strong> Will push items from the socket to our messageQueue; i.e producer</p>\n</li>\n<li><p><strong>displayLoop()</strong> Removes items from messageQueue to display on the client terminal; i.e consumer</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">  /* boostChatClient.cpp */</div><div class=\"line\">int main(int argc, char** argv)</div><div class=\"line\">&#123;</div><div class=\"line\">  try</div><div class=\"line\">  &#123;</div><div class=\"line\">    boost::thread_group threads;</div><div class=\"line\">    socket_ptr sock(new tcp::socket(service));</div><div class=\"line\"></div><div class=\"line\">    string_ptr prompt( buildPrompt() );</div><div class=\"line\">    promptCpy = prompt;</div><div class=\"line\"></div><div class=\"line\">    sock-&gt;connect(ep);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Welcome to the ChatApplication\\nType \\\"exit\\\" to quit\" &lt;&lt; endl;</div><div class=\"line\"></div><div class=\"line\">    threads.create_thread(boost::bind(displayLoop, sock));</div><div class=\"line\">    threads.create_thread(boost::bind(inboundLoop, sock, prompt));</div><div class=\"line\">    threads.create_thread(boost::bind(writeLoop, sock, prompt));</div><div class=\"line\"></div><div class=\"line\">    threads.join_all();</div><div class=\"line\">  &#125;</div><div class=\"line\">  catch(std::exception&amp;amp; e)</div><div class=\"line\">  &#123;</div><div class=\"line\">    cerr &lt;&lt; e.what() &lt;&lt; endl;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  puts(\"Press any key to continue...\");</div><div class=\"line\">  getc(stdin);</div><div class=\"line\">  return EXIT_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Function-Definitions\"><a href=\"#Function-Definitions\" class=\"headerlink\" title=\"Function Definitions\"></a>Function Definitions</h3><p>The first function <em>buildPrompt</em> is a function which handles the display of the terminal input for clients.</p>\n<p>Its fairly simple in that it takes a string of the clients name and assigns it to the value of the prompt pointer we declared earlier.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">buildPrompt</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inputSize = <span class=\"number\">256</span>;</div><div class=\"line\">  <span class=\"keyword\">char</span> inputBuf[inputSize] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">  <span class=\"keyword\">char</span> nameBuf[inputSize] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">  <span class=\"built_in\">string</span>* prompt = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">\": \"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Please input a new username: \"</span>;</div><div class=\"line\">  <span class=\"built_in\">cin</span>.getline(nameBuf, inputSize);</div><div class=\"line\">  *prompt = (<span class=\"built_in\">string</span>)nameBuf + *prompt;</div><div class=\"line\">  boost::algorithm::to_lower(*prompt);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> prompt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Following the buildPrompt() function the first of the threaded functions is the <em>inboundLoop()</em>.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* boostChatClient.cpp */</div><div class=\"line\">void inboundLoop(socket_ptr sock, string_ptr prompt)</div><div class=\"line\">&#123;</div><div class=\"line\">  int bytesRead = 0;</div><div class=\"line\">  char readBuf[1024] = &#123;0&#125;;</div><div class=\"line\"></div><div class=\"line\">  for(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    if(sock-&gt;available())</div><div class=\"line\">    &#123;</div><div class=\"line\">      bytesRead = sock-&gt;read_some(buffer(readBuf, inputSize));</div><div class=\"line\">      string_ptr msg(new string(readBuf, bytesRead));</div><div class=\"line\"></div><div class=\"line\">      messageQueue-&gt;push(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boost::this_thread::sleep( boost::posix_time::millisec(1000));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Our code for the <em>inboundLoop()</em> is self-explainatory but in particular it creates a loop which only inserts into the thread when a message is available on the socket connected to the server. Reading from the socket object is an operation which may potentially interfere with writing to the socket so we put a one second delay on checks for reading.</p>\n<p>As for writting mesasges to the socket to send off to other members of the Chat session we need a loop that will constantly poll for user input. Once the user input is read write the message to the socket wait for the next input. Recall that this operation is threaded so in-comming messages can still be displayed since that happens on an entirely different thread.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeLoop</span><span class=\"params\">(socket_ptr sock, string_ptr prompt)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> inputBuf[inputSize] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">  <span class=\"built_in\">string</span> inputMsg;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"built_in\">cin</span>.getline(inputBuf, inputSize);</div><div class=\"line\">    inputMsg = *prompt + (<span class=\"built_in\">string</span>)inputBuf + <span class=\"string\">'\\n'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!inputMsg.empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">      sock-&gt;write_some(buffer(inputMsg, inputSize));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The string for quitting the application</span></div><div class=\"line\">    <span class=\"comment\">// On the server-side there is also a check for \"quit\" to terminate the TCP socket</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(inputMsg.find(<span class=\"string\">\"exit\"</span>) != <span class=\"built_in\">string</span>::npos)</div><div class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>); <span class=\"comment\">// Replace with cleanup code if you want but for this tutorial exit is enough</span></div><div class=\"line\"></div><div class=\"line\">    inputMsg.clear();</div><div class=\"line\">    <span class=\"built_in\">memset</span>(inputBuf, <span class=\"number\">0</span>, inputSize);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>For the extra pedantic, you might be wondering why there is no extraneous clean-up code and instead we just call exit(1); for the sake of keeping this tutorial brief and to the point we are not launching a production ready scalable service oriented distributed ChatApplication to be used by thousands of clients. Anyhow moving on the last of the threaded funtions is for displaying the messages read from the socket to the terminal.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatClient.cpp */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayLoop</span><span class=\"params\">(socket_ptr sock)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!messageQueue-&gt;empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">// Can you refactor this code to handle multiple users with the same prompt?</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(!isOwnMessage(messageQueue-&gt;front()))</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\"</span> + *(messageQueue-&gt;front());</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      messageQueue-&gt;pop();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boost::this_thread::sleep( boost::posix_time::millisec(<span class=\"number\">1000</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The <em>displayLoop()</em> function is fairly crude but it gets the job done. We rely on the fact that every message begins with a user prompt in order to determine if the message belonged to the client or not. When I say crude I mean that a proper chat application with tag each user with a specific id number because our code fails to handle the error when multiple users share the same prompt. Speaking of which here is the last of the utility functions; the one which checks if the prompt from <em>buildPrompt()</em> is found within the string arriving from the socket.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isOwnMessage</span><span class=\"params\">(string_ptr message)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(message-&gt;find(*promptCpy) != <span class=\"built_in\">string</span>::npos)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Thanks for reading my tutorial on how to setup a chat client using C++ and the Boost Libraries; this code deserves a refactor considering that many of the Boost code used is now apart of the latest C++ standard. In addition the introduction of a protocol could be useful for unique identification of clients and other things as well.<br>Stay tuned for the second part of this tutorial where we code the server side of the Chat applciation.</p>\n<h3 id=\"Full-Source-Code\"><a href=\"#Full-Source-Code\" class=\"headerlink\" title=\"Full Source Code\"></a>Full Source Code</h3><script src=\"https://gist.github.com/taywils/9e8019fe72ff3ab16e0f.js\"> </script>\n\n<p><a href=\"/2014/11/28/boostchatserver.html\">Click here for Part II</a><br>  </div></p>"},{"title":"My Experience Publishing My First Android App, Six Things I Learned","date":"2011-06-04T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/androidwatermark.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/androidwatermark.JPG","comments":0,"_content":"Publishing my first Android app to the Google App store was quite the interesting experience. In this article I'll explain six basic things I learned in the process. Some of the highlights include getting comfortable using version control and how to properly debug Android apps using the free tools provided by Google.\n\n<!-- more -->\nHere are some of the things I learned about developing for the [Android][link_android_dev_home] platform from publishing my first app which I hope will useful to others who want to but haven’t started developing for the Android platform.\n\nIts currently in the free beta mode(with ads) right now as I plan on adding more features later such as the ability to design/store your own logos as preferences and an actual user interface that uses the [action bar design pattern][link_android_dev_actionbar] which is so popular nowadays.\n\n### 1) Not knowing Java is not an excuse. \n\nIf you don’t know any Java but you’re proficient in a C-based or C-styled syntax programming language such as C#, C++, PHP  and or any others then you can easily absorb Java as you browse Android tutorials, read Android dev books and begin to poke around with the Android API. I myself only knew C++ but developing for the Android platform quickly allowed me to dive into Java and learn the fundamentals of such things as proper exception handling(ok I admit that I do use exceptions in C++ but I tend to use my own exception class rather than the standard library one); how garbage collected languages differ from non garbage collected ones, the [Eclipse IDE][link_eclipse_ide], the difference between classes and interfaces, how NULL referenced objects are treated by the JVM, lock based synchronization and much more. In short, developing an Android app was a great introduction to the Java programming language.\n\n### 2) Find a great intro level Android development book to supplement online tutorials.\n\nMost of the time when I started out I found that online tutorials and forum posts were often way too specific and narrowly focused to gain much useful knowledge from as a beginning Android dev. What I mean is that comments were often left out(necessary to understand the design choices) and or the solution posted was just a snippet of functionality and not something your could copy and paste into Eclipse and compile (unless you already knew what you were doing). Although there were a few good exceptions, I was only able to actually make sense of many online tutorials and such after I understood the basics of Android development. This also saves you the embarrassment of annoying people online when you ask questions which could be easily answered by a quick Google search or better yet printed in the first chapter of any of the numerous introductory level Android books.\n\nIf you want to know which ones I read, I found [Teach Yourself Android Application Development in 24 Hours][link_teach_yourself_android_in_24] to be very useful since each chapter(written to be read in 1 hour intervals) was very succinct and got straight to the point. In addition the Q&A sections at the end of the chapters gave me a chance to practice and try out new things and prevented me from just engaging in passive learning. I also used [APress Pro Android 2][link_apress_android_pro_2] which despite its less than stellar 3 out of 5 star rating(4 stars is my usual minimum) on Amazon.com it was a great source for fully functioning mini apps that you can run on your phone and the entire book covered almost all of the Android API.\n\n### 3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends. \n\nWhile developing my first Android app I struggled early on to properly deal with sudden program crashes and JVM out of memory exceptions being triggered. At first I was at lost, until I learned how to properly use the debugging tools which were bundled with the Android SDK installation. This isn’t necessarily a blog post on debugging techniques but here is one great tutorial I found which helped me through some difficult times, or how you should learn to properly \n\n### 4) Start using version control software if you haven’t been doing so.\n\nI’m going to be honest here but prior to becoming comfortable with version control, I would add new features to my existing app by doing the following.\n\n- Create a new project in Eclipse titled “New feature X”\n\n- Copy all necessary files from the existing project over to the new one\n\n- Implement the feature and debug\n\n- If the feature worked, copy and paste it back extra carefully into the original hoping that no squiggly red underlines would show up in the IDE\n\n- ???\n\n- Compile!!!!\n\nAfter a while I just grew tired of the fact that adding new features such as trying out multi-touch zooming and or testing out an alternative layout scheme became so immensely difficult and error prone(copy and pasting into the wrong Java class file and or creating variable naming conflicts). So I did a little research and found a neat tool called that was perfectly suited to my needs, a cool piece of software called [Git][link_git_scm]. Go check it out, it runs well on all the popular OSs and you will just plain grow to appreciate version control as much as I now do. Ok I know [Git][link_git_scm] isn’t the only version control software around, [wikipedia][link_wikipedia_scm] has a list of free ones but its incredibly easy to learn and crazy powerful once you get started(no pun intended) using its advanced capabilities such as [cloning][link_git_cloning].\n\n### 5) Whenever possible, debug on a real handset not the emulator.\n\nThere really isn’t much to say here but until you can actually run your application on a real handset you may never know if your layouts will display properly out in the wild. In addition if anyone you know has a different Android model ask them to try out your app and get some early feedback.\n\n### 6) Start a code journal or something; become influential.\n\nThis might sound a little cheezy or evoke just a “yeah whatever” type of reaction but it pays to set clear deadlines for yourself and to not slack off. Writing an Android application can quickly go from just a weekend hack to a month long ordeal depending on your app. Although you could go to the extreme case and install productivity software to [lock down your web browser during working hours][link_freedom_app], my alternative and the one I highly recommend is to start a code journal. A code journal to me at least is just a real journal(not this blog) where you jot down ideas about features you wish to implement or where you just plain brainstorm new web apps or something.\n\n[link_android_dev_home]: http://developer.android.com/index.html\n[link_android_dev_actionbar]: http://developer.android.com/guide/topics/ui/actionbar.html\n[link_eclipse_ide]: http://www.eclipse.org\n[link_apress_android_pro_2]: http://www.amazon.com/Pro-Android-Sayed-Y-Hashimi/dp/1430226595/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1307061714&amp;sr=1-1\n[link_teach_yourself_android_in_24]: http://www.amazon.com/Teach-Yourself-Android-Application-Development/dp/0321673352\n[link_git_scm]: http://git-scm.com/\n[link_wikipedia_scm]: http://en.wikipedia.org/wiki/List_of_revision_control_software#Free\n[link_git_cloning]: http://www.kernel.org/pub/software/scm/git/docs/git-clone.html\n[link_freedom_app]: https://freedom.to/\n","source":"_posts/androidwatermark.md","raw":"---\ntitle: My Experience Publishing My First Android App, Six Things I Learned\ndate: 2011-06-04\ntags: [java, android, mobile]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/androidwatermark.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/androidwatermark.JPG\ncomments: false\n---\nPublishing my first Android app to the Google App store was quite the interesting experience. In this article I'll explain six basic things I learned in the process. Some of the highlights include getting comfortable using version control and how to properly debug Android apps using the free tools provided by Google.\n\n<!-- more -->\nHere are some of the things I learned about developing for the [Android][link_android_dev_home] platform from publishing my first app which I hope will useful to others who want to but haven’t started developing for the Android platform.\n\nIts currently in the free beta mode(with ads) right now as I plan on adding more features later such as the ability to design/store your own logos as preferences and an actual user interface that uses the [action bar design pattern][link_android_dev_actionbar] which is so popular nowadays.\n\n### 1) Not knowing Java is not an excuse. \n\nIf you don’t know any Java but you’re proficient in a C-based or C-styled syntax programming language such as C#, C++, PHP  and or any others then you can easily absorb Java as you browse Android tutorials, read Android dev books and begin to poke around with the Android API. I myself only knew C++ but developing for the Android platform quickly allowed me to dive into Java and learn the fundamentals of such things as proper exception handling(ok I admit that I do use exceptions in C++ but I tend to use my own exception class rather than the standard library one); how garbage collected languages differ from non garbage collected ones, the [Eclipse IDE][link_eclipse_ide], the difference between classes and interfaces, how NULL referenced objects are treated by the JVM, lock based synchronization and much more. In short, developing an Android app was a great introduction to the Java programming language.\n\n### 2) Find a great intro level Android development book to supplement online tutorials.\n\nMost of the time when I started out I found that online tutorials and forum posts were often way too specific and narrowly focused to gain much useful knowledge from as a beginning Android dev. What I mean is that comments were often left out(necessary to understand the design choices) and or the solution posted was just a snippet of functionality and not something your could copy and paste into Eclipse and compile (unless you already knew what you were doing). Although there were a few good exceptions, I was only able to actually make sense of many online tutorials and such after I understood the basics of Android development. This also saves you the embarrassment of annoying people online when you ask questions which could be easily answered by a quick Google search or better yet printed in the first chapter of any of the numerous introductory level Android books.\n\nIf you want to know which ones I read, I found [Teach Yourself Android Application Development in 24 Hours][link_teach_yourself_android_in_24] to be very useful since each chapter(written to be read in 1 hour intervals) was very succinct and got straight to the point. In addition the Q&A sections at the end of the chapters gave me a chance to practice and try out new things and prevented me from just engaging in passive learning. I also used [APress Pro Android 2][link_apress_android_pro_2] which despite its less than stellar 3 out of 5 star rating(4 stars is my usual minimum) on Amazon.com it was a great source for fully functioning mini apps that you can run on your phone and the entire book covered almost all of the Android API.\n\n### 3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends. \n\nWhile developing my first Android app I struggled early on to properly deal with sudden program crashes and JVM out of memory exceptions being triggered. At first I was at lost, until I learned how to properly use the debugging tools which were bundled with the Android SDK installation. This isn’t necessarily a blog post on debugging techniques but here is one great tutorial I found which helped me through some difficult times, or how you should learn to properly \n\n### 4) Start using version control software if you haven’t been doing so.\n\nI’m going to be honest here but prior to becoming comfortable with version control, I would add new features to my existing app by doing the following.\n\n- Create a new project in Eclipse titled “New feature X”\n\n- Copy all necessary files from the existing project over to the new one\n\n- Implement the feature and debug\n\n- If the feature worked, copy and paste it back extra carefully into the original hoping that no squiggly red underlines would show up in the IDE\n\n- ???\n\n- Compile!!!!\n\nAfter a while I just grew tired of the fact that adding new features such as trying out multi-touch zooming and or testing out an alternative layout scheme became so immensely difficult and error prone(copy and pasting into the wrong Java class file and or creating variable naming conflicts). So I did a little research and found a neat tool called that was perfectly suited to my needs, a cool piece of software called [Git][link_git_scm]. Go check it out, it runs well on all the popular OSs and you will just plain grow to appreciate version control as much as I now do. Ok I know [Git][link_git_scm] isn’t the only version control software around, [wikipedia][link_wikipedia_scm] has a list of free ones but its incredibly easy to learn and crazy powerful once you get started(no pun intended) using its advanced capabilities such as [cloning][link_git_cloning].\n\n### 5) Whenever possible, debug on a real handset not the emulator.\n\nThere really isn’t much to say here but until you can actually run your application on a real handset you may never know if your layouts will display properly out in the wild. In addition if anyone you know has a different Android model ask them to try out your app and get some early feedback.\n\n### 6) Start a code journal or something; become influential.\n\nThis might sound a little cheezy or evoke just a “yeah whatever” type of reaction but it pays to set clear deadlines for yourself and to not slack off. Writing an Android application can quickly go from just a weekend hack to a month long ordeal depending on your app. Although you could go to the extreme case and install productivity software to [lock down your web browser during working hours][link_freedom_app], my alternative and the one I highly recommend is to start a code journal. A code journal to me at least is just a real journal(not this blog) where you jot down ideas about features you wish to implement or where you just plain brainstorm new web apps or something.\n\n[link_android_dev_home]: http://developer.android.com/index.html\n[link_android_dev_actionbar]: http://developer.android.com/guide/topics/ui/actionbar.html\n[link_eclipse_ide]: http://www.eclipse.org\n[link_apress_android_pro_2]: http://www.amazon.com/Pro-Android-Sayed-Y-Hashimi/dp/1430226595/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1307061714&amp;sr=1-1\n[link_teach_yourself_android_in_24]: http://www.amazon.com/Teach-Yourself-Android-Application-Development/dp/0321673352\n[link_git_scm]: http://git-scm.com/\n[link_wikipedia_scm]: http://en.wikipedia.org/wiki/List_of_revision_control_software#Free\n[link_git_cloning]: http://www.kernel.org/pub/software/scm/git/docs/git-clone.html\n[link_freedom_app]: https://freedom.to/\n","slug":"androidwatermark","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3gp0006yswvfp898eti","layout":"post","photos":[],"link":"","content":"<p>Publishing my first Android app to the Google App store was quite the interesting experience. In this article I’ll explain six basic things I learned in the process. Some of the highlights include getting comfortable using version control and how to properly debug Android apps using the free tools provided by Google.</p>\n<a id=\"more\"></a>\n<p>Here are some of the things I learned about developing for the <a href=\"http://developer.android.com/index.html\" target=\"_blank\" rel=\"external\">Android</a> platform from publishing my first app which I hope will useful to others who want to but haven’t started developing for the Android platform.</p>\n<p>Its currently in the free beta mode(with ads) right now as I plan on adding more features later such as the ability to design/store your own logos as preferences and an actual user interface that uses the <a href=\"http://developer.android.com/guide/topics/ui/actionbar.html\" target=\"_blank\" rel=\"external\">action bar design pattern</a> which is so popular nowadays.</p>\n<h3 id=\"1-Not-knowing-Java-is-not-an-excuse\"><a href=\"#1-Not-knowing-Java-is-not-an-excuse\" class=\"headerlink\" title=\"1) Not knowing Java is not an excuse.\"></a>1) Not knowing Java is not an excuse.</h3><p>If you don’t know any Java but you’re proficient in a C-based or C-styled syntax programming language such as C#, C++, PHP  and or any others then you can easily absorb Java as you browse Android tutorials, read Android dev books and begin to poke around with the Android API. I myself only knew C++ but developing for the Android platform quickly allowed me to dive into Java and learn the fundamentals of such things as proper exception handling(ok I admit that I do use exceptions in C++ but I tend to use my own exception class rather than the standard library one); how garbage collected languages differ from non garbage collected ones, the <a href=\"http://www.eclipse.org\" target=\"_blank\" rel=\"external\">Eclipse IDE</a>, the difference between classes and interfaces, how NULL referenced objects are treated by the JVM, lock based synchronization and much more. In short, developing an Android app was a great introduction to the Java programming language.</p>\n<h3 id=\"2-Find-a-great-intro-level-Android-development-book-to-supplement-online-tutorials\"><a href=\"#2-Find-a-great-intro-level-Android-development-book-to-supplement-online-tutorials\" class=\"headerlink\" title=\"2) Find a great intro level Android development book to supplement online tutorials.\"></a>2) Find a great intro level Android development book to supplement online tutorials.</h3><p>Most of the time when I started out I found that online tutorials and forum posts were often way too specific and narrowly focused to gain much useful knowledge from as a beginning Android dev. What I mean is that comments were often left out(necessary to understand the design choices) and or the solution posted was just a snippet of functionality and not something your could copy and paste into Eclipse and compile (unless you already knew what you were doing). Although there were a few good exceptions, I was only able to actually make sense of many online tutorials and such after I understood the basics of Android development. This also saves you the embarrassment of annoying people online when you ask questions which could be easily answered by a quick Google search or better yet printed in the first chapter of any of the numerous introductory level Android books.</p>\n<p>If you want to know which ones I read, I found <a href=\"http://www.amazon.com/Teach-Yourself-Android-Application-Development/dp/0321673352\" target=\"_blank\" rel=\"external\">Teach Yourself Android Application Development in 24 Hours</a> to be very useful since each chapter(written to be read in 1 hour intervals) was very succinct and got straight to the point. In addition the Q&amp;A sections at the end of the chapters gave me a chance to practice and try out new things and prevented me from just engaging in passive learning. I also used <a href=\"http://www.amazon.com/Pro-Android-Sayed-Y-Hashimi/dp/1430226595/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1307061714&amp;sr=1-1\" target=\"_blank\" rel=\"external\">APress Pro Android 2</a> which despite its less than stellar 3 out of 5 star rating(4 stars is my usual minimum) on Amazon.com it was a great source for fully functioning mini apps that you can run on your phone and the entire book covered almost all of the Android API.</p>\n<h3 id=\"3-Logcat-and-the-DDMS-Dalvik-Debug-Monitor-Server-are-your-best-friends\"><a href=\"#3-Logcat-and-the-DDMS-Dalvik-Debug-Monitor-Server-are-your-best-friends\" class=\"headerlink\" title=\"3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends.\"></a>3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends.</h3><p>While developing my first Android app I struggled early on to properly deal with sudden program crashes and JVM out of memory exceptions being triggered. At first I was at lost, until I learned how to properly use the debugging tools which were bundled with the Android SDK installation. This isn’t necessarily a blog post on debugging techniques but here is one great tutorial I found which helped me through some difficult times, or how you should learn to properly </p>\n<h3 id=\"4-Start-using-version-control-software-if-you-haven’t-been-doing-so\"><a href=\"#4-Start-using-version-control-software-if-you-haven’t-been-doing-so\" class=\"headerlink\" title=\"4) Start using version control software if you haven’t been doing so.\"></a>4) Start using version control software if you haven’t been doing so.</h3><p>I’m going to be honest here but prior to becoming comfortable with version control, I would add new features to my existing app by doing the following.</p>\n<ul>\n<li><p>Create a new project in Eclipse titled “New feature X”</p>\n</li>\n<li><p>Copy all necessary files from the existing project over to the new one</p>\n</li>\n<li><p>Implement the feature and debug</p>\n</li>\n<li><p>If the feature worked, copy and paste it back extra carefully into the original hoping that no squiggly red underlines would show up in the IDE</p>\n</li>\n<li><p>???</p>\n</li>\n<li><p>Compile!!!!</p>\n</li>\n</ul>\n<p>After a while I just grew tired of the fact that adding new features such as trying out multi-touch zooming and or testing out an alternative layout scheme became so immensely difficult and error prone(copy and pasting into the wrong Java class file and or creating variable naming conflicts). So I did a little research and found a neat tool called that was perfectly suited to my needs, a cool piece of software called <a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a>. Go check it out, it runs well on all the popular OSs and you will just plain grow to appreciate version control as much as I now do. Ok I know <a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a> isn’t the only version control software around, <a href=\"http://en.wikipedia.org/wiki/List_of_revision_control_software#Free\" target=\"_blank\" rel=\"external\">wikipedia</a> has a list of free ones but its incredibly easy to learn and crazy powerful once you get started(no pun intended) using its advanced capabilities such as <a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-clone.html\" target=\"_blank\" rel=\"external\">cloning</a>.</p>\n<h3 id=\"5-Whenever-possible-debug-on-a-real-handset-not-the-emulator\"><a href=\"#5-Whenever-possible-debug-on-a-real-handset-not-the-emulator\" class=\"headerlink\" title=\"5) Whenever possible, debug on a real handset not the emulator.\"></a>5) Whenever possible, debug on a real handset not the emulator.</h3><p>There really isn’t much to say here but until you can actually run your application on a real handset you may never know if your layouts will display properly out in the wild. In addition if anyone you know has a different Android model ask them to try out your app and get some early feedback.</p>\n<h3 id=\"6-Start-a-code-journal-or-something-become-influential\"><a href=\"#6-Start-a-code-journal-or-something-become-influential\" class=\"headerlink\" title=\"6) Start a code journal or something; become influential.\"></a>6) Start a code journal or something; become influential.</h3><p>This might sound a little cheezy or evoke just a “yeah whatever” type of reaction but it pays to set clear deadlines for yourself and to not slack off. Writing an Android application can quickly go from just a weekend hack to a month long ordeal depending on your app. Although you could go to the extreme case and install productivity software to <a href=\"https://freedom.to/\" target=\"_blank\" rel=\"external\">lock down your web browser during working hours</a>, my alternative and the one I highly recommend is to start a code journal. A code journal to me at least is just a real journal(not this blog) where you jot down ideas about features you wish to implement or where you just plain brainstorm new web apps or something.</p>\n","site":{"data":{}},"excerpt":"<p>Publishing my first Android app to the Google App store was quite the interesting experience. In this article I’ll explain six basic things I learned in the process. Some of the highlights include getting comfortable using version control and how to properly debug Android apps using the free tools provided by Google.</p>","more":"<p>Here are some of the things I learned about developing for the <a href=\"http://developer.android.com/index.html\">Android</a> platform from publishing my first app which I hope will useful to others who want to but haven’t started developing for the Android platform.</p>\n<p>Its currently in the free beta mode(with ads) right now as I plan on adding more features later such as the ability to design/store your own logos as preferences and an actual user interface that uses the <a href=\"http://developer.android.com/guide/topics/ui/actionbar.html\">action bar design pattern</a> which is so popular nowadays.</p>\n<h3 id=\"1-Not-knowing-Java-is-not-an-excuse\"><a href=\"#1-Not-knowing-Java-is-not-an-excuse\" class=\"headerlink\" title=\"1) Not knowing Java is not an excuse.\"></a>1) Not knowing Java is not an excuse.</h3><p>If you don’t know any Java but you’re proficient in a C-based or C-styled syntax programming language such as C#, C++, PHP  and or any others then you can easily absorb Java as you browse Android tutorials, read Android dev books and begin to poke around with the Android API. I myself only knew C++ but developing for the Android platform quickly allowed me to dive into Java and learn the fundamentals of such things as proper exception handling(ok I admit that I do use exceptions in C++ but I tend to use my own exception class rather than the standard library one); how garbage collected languages differ from non garbage collected ones, the <a href=\"http://www.eclipse.org\">Eclipse IDE</a>, the difference between classes and interfaces, how NULL referenced objects are treated by the JVM, lock based synchronization and much more. In short, developing an Android app was a great introduction to the Java programming language.</p>\n<h3 id=\"2-Find-a-great-intro-level-Android-development-book-to-supplement-online-tutorials\"><a href=\"#2-Find-a-great-intro-level-Android-development-book-to-supplement-online-tutorials\" class=\"headerlink\" title=\"2) Find a great intro level Android development book to supplement online tutorials.\"></a>2) Find a great intro level Android development book to supplement online tutorials.</h3><p>Most of the time when I started out I found that online tutorials and forum posts were often way too specific and narrowly focused to gain much useful knowledge from as a beginning Android dev. What I mean is that comments were often left out(necessary to understand the design choices) and or the solution posted was just a snippet of functionality and not something your could copy and paste into Eclipse and compile (unless you already knew what you were doing). Although there were a few good exceptions, I was only able to actually make sense of many online tutorials and such after I understood the basics of Android development. This also saves you the embarrassment of annoying people online when you ask questions which could be easily answered by a quick Google search or better yet printed in the first chapter of any of the numerous introductory level Android books.</p>\n<p>If you want to know which ones I read, I found <a href=\"http://www.amazon.com/Teach-Yourself-Android-Application-Development/dp/0321673352\">Teach Yourself Android Application Development in 24 Hours</a> to be very useful since each chapter(written to be read in 1 hour intervals) was very succinct and got straight to the point. In addition the Q&amp;A sections at the end of the chapters gave me a chance to practice and try out new things and prevented me from just engaging in passive learning. I also used <a href=\"http://www.amazon.com/Pro-Android-Sayed-Y-Hashimi/dp/1430226595/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1307061714&amp;sr=1-1\">APress Pro Android 2</a> which despite its less than stellar 3 out of 5 star rating(4 stars is my usual minimum) on Amazon.com it was a great source for fully functioning mini apps that you can run on your phone and the entire book covered almost all of the Android API.</p>\n<h3 id=\"3-Logcat-and-the-DDMS-Dalvik-Debug-Monitor-Server-are-your-best-friends\"><a href=\"#3-Logcat-and-the-DDMS-Dalvik-Debug-Monitor-Server-are-your-best-friends\" class=\"headerlink\" title=\"3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends.\"></a>3) Logcat and the DDMS(Dalvik Debug Monitor Server) are your best friends.</h3><p>While developing my first Android app I struggled early on to properly deal with sudden program crashes and JVM out of memory exceptions being triggered. At first I was at lost, until I learned how to properly use the debugging tools which were bundled with the Android SDK installation. This isn’t necessarily a blog post on debugging techniques but here is one great tutorial I found which helped me through some difficult times, or how you should learn to properly </p>\n<h3 id=\"4-Start-using-version-control-software-if-you-haven’t-been-doing-so\"><a href=\"#4-Start-using-version-control-software-if-you-haven’t-been-doing-so\" class=\"headerlink\" title=\"4) Start using version control software if you haven’t been doing so.\"></a>4) Start using version control software if you haven’t been doing so.</h3><p>I’m going to be honest here but prior to becoming comfortable with version control, I would add new features to my existing app by doing the following.</p>\n<ul>\n<li><p>Create a new project in Eclipse titled “New feature X”</p>\n</li>\n<li><p>Copy all necessary files from the existing project over to the new one</p>\n</li>\n<li><p>Implement the feature and debug</p>\n</li>\n<li><p>If the feature worked, copy and paste it back extra carefully into the original hoping that no squiggly red underlines would show up in the IDE</p>\n</li>\n<li><p>???</p>\n</li>\n<li><p>Compile!!!!</p>\n</li>\n</ul>\n<p>After a while I just grew tired of the fact that adding new features such as trying out multi-touch zooming and or testing out an alternative layout scheme became so immensely difficult and error prone(copy and pasting into the wrong Java class file and or creating variable naming conflicts). So I did a little research and found a neat tool called that was perfectly suited to my needs, a cool piece of software called <a href=\"http://git-scm.com/\">Git</a>. Go check it out, it runs well on all the popular OSs and you will just plain grow to appreciate version control as much as I now do. Ok I know <a href=\"http://git-scm.com/\">Git</a> isn’t the only version control software around, <a href=\"http://en.wikipedia.org/wiki/List_of_revision_control_software#Free\">wikipedia</a> has a list of free ones but its incredibly easy to learn and crazy powerful once you get started(no pun intended) using its advanced capabilities such as <a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-clone.html\">cloning</a>.</p>\n<h3 id=\"5-Whenever-possible-debug-on-a-real-handset-not-the-emulator\"><a href=\"#5-Whenever-possible-debug-on-a-real-handset-not-the-emulator\" class=\"headerlink\" title=\"5) Whenever possible, debug on a real handset not the emulator.\"></a>5) Whenever possible, debug on a real handset not the emulator.</h3><p>There really isn’t much to say here but until you can actually run your application on a real handset you may never know if your layouts will display properly out in the wild. In addition if anyone you know has a different Android model ask them to try out your app and get some early feedback.</p>\n<h3 id=\"6-Start-a-code-journal-or-something-become-influential\"><a href=\"#6-Start-a-code-journal-or-something-become-influential\" class=\"headerlink\" title=\"6) Start a code journal or something; become influential.\"></a>6) Start a code journal or something; become influential.</h3><p>This might sound a little cheezy or evoke just a “yeah whatever” type of reaction but it pays to set clear deadlines for yourself and to not slack off. Writing an Android application can quickly go from just a weekend hack to a month long ordeal depending on your app. Although you could go to the extreme case and install productivity software to <a href=\"https://freedom.to/\">lock down your web browser during working hours</a>, my alternative and the one I highly recommend is to start a code journal. A code journal to me at least is just a real journal(not this blog) where you jot down ideas about features you wish to implement or where you just plain brainstorm new web apps or something.</p>"},{"title":"C++ Chat Server Tutorial Part II","date":"2014-11-28T08:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boostchatserver.jpg","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boostchatserver.jpg","comments":0,"_content":"In part 2 of the C++ boost chat application tutorial we'll develop the server side code. It uses a bit more C++ coding but the same concepts apply from the first article in the series.\n\n<!-- more -->\n\n[Click here for Part I](/2014/11/15/boostchatclient)\n\n### Tutorial Assumes Boost Version >= 1.53\n\nWelcome to the second part of the chat application tutorial. In this part we'll be finishing up our chat appliation by writting the server side code which handles accepting new messages and routing them out to each of the connected clients. Much like the client application the server uses TCP/IP sockets, threads and relies on the producer-consumer pattern to store messages within a queue. However unlike the client app the server application will use mutually exclusive locks for its concurrency strategy and introduce a few more Boost smart pointers.\n\nThe same guidelines for what you need to have installed on your machine apply from the first part of this tutorial. So if you need to download the latest version of the Boost C++ Libraries on your machine refer to part I. Other than the necessary Boost C++ libs you should also again be using a modern C++ compiler that supports at minimum the C++11 standard; ok enough talk lets start coding.\n\n### Part II: The Chat Server Code\n\nOnce again we'll be using the C++ standard libs along with [Boost Asio](http://www.boost.org/doc/libs/1_57_0/doc/html/boost_asio.html). To begin create a new file within the same directory where you wrote the code for [Part I](/2014/11/15/boostchatclient.html), name the file __boostChatServer.cpp__. Next open the file you just created and we'll start off with the preprocessor definitions and declare use of namespaces.\n\n```cpp\n/* boostChatServer.cpp */\n#include<iostream>\n#include<list>\n#include<map>\n#include<queue>\n#include<cstdlib>\n\n#include<boost/asio.hpp>\n#include<boost/thread.hpp>\n#include<boost/asio/ip/tcp.hpp>\n\n  using namespace std;\n  using namespace boost::asio;\n  using namespace boost::asio::ip;\n```\nMoving right along the next segment of the ChatServer code are the typedefs; hopefully you'll agree with my choice of typedefs to hide all of the Boost smart pointer extra typing since this codebase does not use the standard C++11 smart pointers.\n\n```cpp\n  /* boostChatServer.cpp */\n  typedef boost::shared_ptr<tcp::socket> socket_ptr;\n  typedef boost::shared_ptr<string> string_ptr;\n  typedef map<socket_ptr, string_ptr> clientMap;\n  typedef boost::shared_ptr<clientMap> clientMap_ptr;\n  typedef boost::shared_ptr< list<socket_ptr> > clientList_ptr;\n  typedef boost::shared_ptr< queue<clientMap_ptr> > messageQueue_ptr;\n```\n\n### Overview Of The Chat Server\n\n- __ClientMap__ Maps client socket connections to client messages\n\n- __ClientList__ Stores pointers to each new client connected to the server.\n\n- __MessageQueue__ Collects messages sent to the server and routes them to connected clients.\n\nTogether with the three threads of execution we'll introduce shortly the ClientMap, List and MessageQueue can be used together with locks to build a functioning chat server. In short we'll have one thread be responsible for accepting new client connections and adding them to the list of connected clients as individual socket pointers. Next when a new message request hits the server, its content gets pumped into the MessageQueue during the request from within the request handling thred and later the response handling thread consumes the MessageQueue out to each of the clients in the list.\n\n### Function Prototypes And Initial Setup\n\n```cpp\n/* boostChatServer.cpp */\nio_service service;\ntcp::acceptor acceptor(service, tcp::endpoint(tcp::v4(), 8001));\nboost::mutex mtx;\nclientList_ptr clientList(new list<socket_ptr>);\nmessageQueue_ptr messageQueue(new queue<clientMap_ptr>) ;\n\nconst int bufSize = 1024;\nenum sleepLen // Time is in milliseconds {\n  sml = 100,\n  lon = 200\n};\n\n// Function Prototypes\nbool clientSentExit(string_ptr);\nvoid disconnectClient(socket_ptr);\nvoid acceptorLoop();\nvoid requestLoop();\nvoid responseLoop();\n// End of Function Prototypes\n```\n\nThe key variable definiton from above is the use of boost::mutex. As I mentioned earlier and as I will continue to mention, the code presented in this article was intented to be used with the Boost libraries so clever readers will note that C++ now has a standard std::mutex for builtin lock based synchronization. However, getting back to the subject of mutexes we will be using our mutex for controlling access to objects which are accessed from different threads; in particular the MessageQueue needs to be locked both before messages are enqueued and before message are dequeued from the front. In general since queues are first-in-first-out FIFO datastructures you can be pretty safe that producers(adding message onto the back) and consumers(reading messages from the front) wont ever have to compete but its better safe than sorry thus MessageQueue access must be synchronized in this case.\n\n### Main Function\n\nThe main function creates each of the three threads indicated by the suffix \"Loop\"\n- __acceptorLoop__ Handles new client TCP/IP connections\n\n- __requestLoop__ Handles client requests by adding them to MessageQueue(producer)\n\n- __responseLoop__ Handles server responses to the clients, reads from the MessageQueue(consumer)\n\n```cpp\n  /* boostChatServer.cpp */\nint main(int argc, char** argv)\n{\n  boost::thread_group threads;\n\n  threads.create_thread(boost::bind(acceptorLoop));\n  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));\n\n  threads.create_thread(boost::bind(requestLoop));\n  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));\n\n  threads.create_thread(boost::bind(responseLoop));\n  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));\n\n  threads.join_all();\n\n  puts(\"Press any key to continue...\");\n  getc(stdin);\n  return EXIT_SUCCESS;\n}\n```\n\n### AcceptorLoop\n\nThe code for the acceptorLoop is very crude but straightforward; the entire function waits for the __io_service__ object to obtain a new client connection once that occurs we create a new TCP/IP socket and add it to our clientList. We use a mutex within the acceptorLoop before accessing the clientList; this is necessary because in order to disconnect a client from our server the disconnect function also needs access to the same clientList.\n\n```cpp\n/* boostChatServer.cpp */\nvoid acceptorLoop()\n{\n  cout << \"Waiting for clients...\" << endl;\n\n  for(;;)\n  {\n    socket_ptr clientSock(new tcp::socket(service));\n\n    acceptor.accept(*clientSock);\n\n    cout << \"New client joined! \";\n\n    mtx.lock();\n    clientList->emplace_back(clientSock);\n    mtx.unlock();\n\n    cout << clientList->size() << \" total clients\" << endl;\n  }\n}\n```\n\n### RequestLoop\n\nIn short, the requestLoop functions as a clientList scanner. I realize after looking over this code it could have been implemented differently because as the number of clients grow the O(N) time it takes to check each client for a new message all the while holding onto a lock will create bad performance for large numbers of clients. A better approach would be to generate a new thread for each client or even better introduce coroutines and kick off a new coroutine for every new client connection, a technique I've seen demonstrated for servers written by GoLang devs. If you're interested in common HTTP server concurrency strategies used by Go developers there is a pretty decent ebook translated from Chinese to English on Github [build-web-application-with-golang](https://github.com/astaxie/build-web-application-with-golang). Although I disagree with many of the decisions made by the Go team and its \"C with safety goggles\" approach to building systems applications Go does perform extremely well for building RestFul HTTP backends to replace aging PHP/Python/Ruby stacks. Anyways back to the requestLoop code; for all of its flaws here is the big loop that holds onto a mutex.\n\n```cpp\n/* boostChatServer.cpp */\nvoid requestLoop()\n{\n  for(;;)\n  {\n    if(!clientList->empty())\n    {\n      // Poorly designed loop, client sockets \n      // should alert the server when they have new messages; \n      // the server shouldn't poll the clientList while holding a lock\n      mtx.lock();\n      for(auto& clientSock : *clientList)\n      {\n        if(clientSock->available())\n        {\n          char readBuf[bufSize] = {0};\n\n          int bytesRead = clientSock->read_some(buffer(readBuf, bufSize));\n\n          string_ptr msg(new string(readBuf, bytesRead));\n\n          if(clientSentExit(msg))\n          {\n            disconnectClient(clientSock);\n            break;\n          }\n\n          clientMap_ptr cm(new clientMap);\n          cm->insert(pair<socket_ptr, string_ptr>(clientSock, msg));\n\n          messageQueue->push(cm);\n\n          cout << \"ChatLog: \" << *msg << endl;\n        }\n      }\n      mtx.unlock();\n    }\n\n    boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::lon));\n  }\n}\n```\n\n### RequestLoop Utility Functions\n\nInside the requestLoop function there were two methods, __clientSentExit__ and __disconnectClient__. As their names imply we use these two utility functions to properly disconnect clients when they include the string \"exit\" inside of their message.\n\n```cpp\n/* boostChatServer.cpp */\nbool clientSentExit(string_ptr message)\n{\n  if(message->find(\"exit\") != string::npos)\n    return true;\n  else\n    return false;\n}\n\nvoid disconnectClient(socket_ptr clientSock)\n{\n  auto position = find(clientList->begin(), clientList->end(), clientSock);\n\n  clientSock->shutdown(tcp::socket::shutdown_both);\n  clientSock->close();\n\n  clientList->erase(position);\n\n  cout << \"Client Disconnected! \" << clientList->size() << \" total clients\" << endl;\n}\n```\n\n### ResponseLoop\n\nLastly we have the responseLoop, its job is to consume from the MessageQueue and send off the chat string to all recipients on the clientList.\nI wasn't too sure why I choose to have this thread function acquire and release the mutex twice but for demonstration purposes the code still functions.\n\n```cpp\nvoid responseLoop()\n{\n  for(;;)\n  {\n    if(!messageQueue->empty())\n    {\n      auto message = messageQueue->front();\n\n      mtx.lock();\n      for(auto& clientSock : *clientList)\n      {\n        clientSock->write_some(buffer(*(message->begin()->second), bufSize));\n      }\n      mtx.unlock();\n\n      mtx.lock();\n      messageQueue->pop();\n      mtx.unlock();\n    }\n\n    boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::lon));\n  }\n}\n```\n\nWell that about wraps up the tutorial on building a simple chat application with C++ and Boost; I'll be doing a bit more with C++ code future blog posts so stay tuned.\n\n### Full Source Code\n<script src=\"https://gist.github.com/taywils/d0e7e099b5c172dbcf34.js\"> </script>\n","source":"_posts/boostchatserver.md","raw":"---\ntitle: C++ Chat Server Tutorial Part II\ndate: 2014-11-28\ntags: [cpp]\ncategories: [tutorial, socket-programming, multi-threading]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boostchatserver.jpg\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boostchatserver.jpg\ncomments: false\n---\nIn part 2 of the C++ boost chat application tutorial we'll develop the server side code. It uses a bit more C++ coding but the same concepts apply from the first article in the series.\n\n<!-- more -->\n\n[Click here for Part I](/2014/11/15/boostchatclient)\n\n### Tutorial Assumes Boost Version >= 1.53\n\nWelcome to the second part of the chat application tutorial. In this part we'll be finishing up our chat appliation by writting the server side code which handles accepting new messages and routing them out to each of the connected clients. Much like the client application the server uses TCP/IP sockets, threads and relies on the producer-consumer pattern to store messages within a queue. However unlike the client app the server application will use mutually exclusive locks for its concurrency strategy and introduce a few more Boost smart pointers.\n\nThe same guidelines for what you need to have installed on your machine apply from the first part of this tutorial. So if you need to download the latest version of the Boost C++ Libraries on your machine refer to part I. Other than the necessary Boost C++ libs you should also again be using a modern C++ compiler that supports at minimum the C++11 standard; ok enough talk lets start coding.\n\n### Part II: The Chat Server Code\n\nOnce again we'll be using the C++ standard libs along with [Boost Asio](http://www.boost.org/doc/libs/1_57_0/doc/html/boost_asio.html). To begin create a new file within the same directory where you wrote the code for [Part I](/2014/11/15/boostchatclient.html), name the file __boostChatServer.cpp__. Next open the file you just created and we'll start off with the preprocessor definitions and declare use of namespaces.\n\n```cpp\n/* boostChatServer.cpp */\n#include<iostream>\n#include<list>\n#include<map>\n#include<queue>\n#include<cstdlib>\n\n#include<boost/asio.hpp>\n#include<boost/thread.hpp>\n#include<boost/asio/ip/tcp.hpp>\n\n  using namespace std;\n  using namespace boost::asio;\n  using namespace boost::asio::ip;\n```\nMoving right along the next segment of the ChatServer code are the typedefs; hopefully you'll agree with my choice of typedefs to hide all of the Boost smart pointer extra typing since this codebase does not use the standard C++11 smart pointers.\n\n```cpp\n  /* boostChatServer.cpp */\n  typedef boost::shared_ptr<tcp::socket> socket_ptr;\n  typedef boost::shared_ptr<string> string_ptr;\n  typedef map<socket_ptr, string_ptr> clientMap;\n  typedef boost::shared_ptr<clientMap> clientMap_ptr;\n  typedef boost::shared_ptr< list<socket_ptr> > clientList_ptr;\n  typedef boost::shared_ptr< queue<clientMap_ptr> > messageQueue_ptr;\n```\n\n### Overview Of The Chat Server\n\n- __ClientMap__ Maps client socket connections to client messages\n\n- __ClientList__ Stores pointers to each new client connected to the server.\n\n- __MessageQueue__ Collects messages sent to the server and routes them to connected clients.\n\nTogether with the three threads of execution we'll introduce shortly the ClientMap, List and MessageQueue can be used together with locks to build a functioning chat server. In short we'll have one thread be responsible for accepting new client connections and adding them to the list of connected clients as individual socket pointers. Next when a new message request hits the server, its content gets pumped into the MessageQueue during the request from within the request handling thred and later the response handling thread consumes the MessageQueue out to each of the clients in the list.\n\n### Function Prototypes And Initial Setup\n\n```cpp\n/* boostChatServer.cpp */\nio_service service;\ntcp::acceptor acceptor(service, tcp::endpoint(tcp::v4(), 8001));\nboost::mutex mtx;\nclientList_ptr clientList(new list<socket_ptr>);\nmessageQueue_ptr messageQueue(new queue<clientMap_ptr>) ;\n\nconst int bufSize = 1024;\nenum sleepLen // Time is in milliseconds {\n  sml = 100,\n  lon = 200\n};\n\n// Function Prototypes\nbool clientSentExit(string_ptr);\nvoid disconnectClient(socket_ptr);\nvoid acceptorLoop();\nvoid requestLoop();\nvoid responseLoop();\n// End of Function Prototypes\n```\n\nThe key variable definiton from above is the use of boost::mutex. As I mentioned earlier and as I will continue to mention, the code presented in this article was intented to be used with the Boost libraries so clever readers will note that C++ now has a standard std::mutex for builtin lock based synchronization. However, getting back to the subject of mutexes we will be using our mutex for controlling access to objects which are accessed from different threads; in particular the MessageQueue needs to be locked both before messages are enqueued and before message are dequeued from the front. In general since queues are first-in-first-out FIFO datastructures you can be pretty safe that producers(adding message onto the back) and consumers(reading messages from the front) wont ever have to compete but its better safe than sorry thus MessageQueue access must be synchronized in this case.\n\n### Main Function\n\nThe main function creates each of the three threads indicated by the suffix \"Loop\"\n- __acceptorLoop__ Handles new client TCP/IP connections\n\n- __requestLoop__ Handles client requests by adding them to MessageQueue(producer)\n\n- __responseLoop__ Handles server responses to the clients, reads from the MessageQueue(consumer)\n\n```cpp\n  /* boostChatServer.cpp */\nint main(int argc, char** argv)\n{\n  boost::thread_group threads;\n\n  threads.create_thread(boost::bind(acceptorLoop));\n  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));\n\n  threads.create_thread(boost::bind(requestLoop));\n  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));\n\n  threads.create_thread(boost::bind(responseLoop));\n  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));\n\n  threads.join_all();\n\n  puts(\"Press any key to continue...\");\n  getc(stdin);\n  return EXIT_SUCCESS;\n}\n```\n\n### AcceptorLoop\n\nThe code for the acceptorLoop is very crude but straightforward; the entire function waits for the __io_service__ object to obtain a new client connection once that occurs we create a new TCP/IP socket and add it to our clientList. We use a mutex within the acceptorLoop before accessing the clientList; this is necessary because in order to disconnect a client from our server the disconnect function also needs access to the same clientList.\n\n```cpp\n/* boostChatServer.cpp */\nvoid acceptorLoop()\n{\n  cout << \"Waiting for clients...\" << endl;\n\n  for(;;)\n  {\n    socket_ptr clientSock(new tcp::socket(service));\n\n    acceptor.accept(*clientSock);\n\n    cout << \"New client joined! \";\n\n    mtx.lock();\n    clientList->emplace_back(clientSock);\n    mtx.unlock();\n\n    cout << clientList->size() << \" total clients\" << endl;\n  }\n}\n```\n\n### RequestLoop\n\nIn short, the requestLoop functions as a clientList scanner. I realize after looking over this code it could have been implemented differently because as the number of clients grow the O(N) time it takes to check each client for a new message all the while holding onto a lock will create bad performance for large numbers of clients. A better approach would be to generate a new thread for each client or even better introduce coroutines and kick off a new coroutine for every new client connection, a technique I've seen demonstrated for servers written by GoLang devs. If you're interested in common HTTP server concurrency strategies used by Go developers there is a pretty decent ebook translated from Chinese to English on Github [build-web-application-with-golang](https://github.com/astaxie/build-web-application-with-golang). Although I disagree with many of the decisions made by the Go team and its \"C with safety goggles\" approach to building systems applications Go does perform extremely well for building RestFul HTTP backends to replace aging PHP/Python/Ruby stacks. Anyways back to the requestLoop code; for all of its flaws here is the big loop that holds onto a mutex.\n\n```cpp\n/* boostChatServer.cpp */\nvoid requestLoop()\n{\n  for(;;)\n  {\n    if(!clientList->empty())\n    {\n      // Poorly designed loop, client sockets \n      // should alert the server when they have new messages; \n      // the server shouldn't poll the clientList while holding a lock\n      mtx.lock();\n      for(auto& clientSock : *clientList)\n      {\n        if(clientSock->available())\n        {\n          char readBuf[bufSize] = {0};\n\n          int bytesRead = clientSock->read_some(buffer(readBuf, bufSize));\n\n          string_ptr msg(new string(readBuf, bytesRead));\n\n          if(clientSentExit(msg))\n          {\n            disconnectClient(clientSock);\n            break;\n          }\n\n          clientMap_ptr cm(new clientMap);\n          cm->insert(pair<socket_ptr, string_ptr>(clientSock, msg));\n\n          messageQueue->push(cm);\n\n          cout << \"ChatLog: \" << *msg << endl;\n        }\n      }\n      mtx.unlock();\n    }\n\n    boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::lon));\n  }\n}\n```\n\n### RequestLoop Utility Functions\n\nInside the requestLoop function there were two methods, __clientSentExit__ and __disconnectClient__. As their names imply we use these two utility functions to properly disconnect clients when they include the string \"exit\" inside of their message.\n\n```cpp\n/* boostChatServer.cpp */\nbool clientSentExit(string_ptr message)\n{\n  if(message->find(\"exit\") != string::npos)\n    return true;\n  else\n    return false;\n}\n\nvoid disconnectClient(socket_ptr clientSock)\n{\n  auto position = find(clientList->begin(), clientList->end(), clientSock);\n\n  clientSock->shutdown(tcp::socket::shutdown_both);\n  clientSock->close();\n\n  clientList->erase(position);\n\n  cout << \"Client Disconnected! \" << clientList->size() << \" total clients\" << endl;\n}\n```\n\n### ResponseLoop\n\nLastly we have the responseLoop, its job is to consume from the MessageQueue and send off the chat string to all recipients on the clientList.\nI wasn't too sure why I choose to have this thread function acquire and release the mutex twice but for demonstration purposes the code still functions.\n\n```cpp\nvoid responseLoop()\n{\n  for(;;)\n  {\n    if(!messageQueue->empty())\n    {\n      auto message = messageQueue->front();\n\n      mtx.lock();\n      for(auto& clientSock : *clientList)\n      {\n        clientSock->write_some(buffer(*(message->begin()->second), bufSize));\n      }\n      mtx.unlock();\n\n      mtx.lock();\n      messageQueue->pop();\n      mtx.unlock();\n    }\n\n    boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::lon));\n  }\n}\n```\n\nWell that about wraps up the tutorial on building a simple chat application with C++ and Boost; I'll be doing a bit more with C++ code future blog posts so stay tuned.\n\n### Full Source Code\n<script src=\"https://gist.github.com/taywils/d0e7e099b5c172dbcf34.js\"> </script>\n","slug":"boostchatserver","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3gs0007yswvbfpwqdvg","layout":"post","photos":[],"link":"","content":"<p>In part 2 of the C++ boost chat application tutorial we’ll develop the server side code. It uses a bit more C++ coding but the same concepts apply from the first article in the series.</p>\n<a id=\"more\"></a>\n<p><a href=\"/2014/11/15/boostchatclient\">Click here for Part I</a></p>\n<h3 id=\"Tutorial-Assumes-Boost-Version-gt-1-53\"><a href=\"#Tutorial-Assumes-Boost-Version-gt-1-53\" class=\"headerlink\" title=\"Tutorial Assumes Boost Version &gt;= 1.53\"></a>Tutorial Assumes Boost Version &gt;= 1.53</h3><p>Welcome to the second part of the chat application tutorial. In this part we’ll be finishing up our chat appliation by writting the server side code which handles accepting new messages and routing them out to each of the connected clients. Much like the client application the server uses TCP/IP sockets, threads and relies on the producer-consumer pattern to store messages within a queue. However unlike the client app the server application will use mutually exclusive locks for its concurrency strategy and introduce a few more Boost smart pointers.</p>\n<p>The same guidelines for what you need to have installed on your machine apply from the first part of this tutorial. So if you need to download the latest version of the Boost C++ Libraries on your machine refer to part I. Other than the necessary Boost C++ libs you should also again be using a modern C++ compiler that supports at minimum the C++11 standard; ok enough talk lets start coding.</p>\n<h3 id=\"Part-II-The-Chat-Server-Code\"><a href=\"#Part-II-The-Chat-Server-Code\" class=\"headerlink\" title=\"Part II: The Chat Server Code\"></a>Part II: The Chat Server Code</h3><p>Once again we’ll be using the C++ standard libs along with <a href=\"http://www.boost.org/doc/libs/1_57_0/doc/html/boost_asio.html\" target=\"_blank\" rel=\"external\">Boost Asio</a>. To begin create a new file within the same directory where you wrote the code for <a href=\"/2014/11/15/boostchatclient.html\">Part I</a>, name the file <strong>boostChatServer.cpp</strong>. Next open the file you just created and we’ll start off with the preprocessor definitions and declare use of namespaces.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatServer.cpp */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/asio.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/thread.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/asio/ip/tcp.hpp&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost::asio;</div><div class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost::asio::ip;</div></pre></td></tr></table></figure>\n<p>Moving right along the next segment of the ChatServer code are the typedefs; hopefully you’ll agree with my choice of typedefs to hide all of the Boost smart pointer extra typing since this codebase does not use the standard C++11 smart pointers.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatServer.cpp */</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt;tcp::socket&gt; socket_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; string_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">map</span>&lt;socket_ptr, string_ptr&gt; clientMap;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt;clientMap&gt; clientMap_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt; <span class=\"built_in\">list</span>&lt;socket_ptr&gt; &gt; clientList_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt; <span class=\"built_in\">queue</span>&lt;clientMap_ptr&gt; &gt; messageQueue_ptr;</div></pre></td></tr></table></figure>\n<h3 id=\"Overview-Of-The-Chat-Server\"><a href=\"#Overview-Of-The-Chat-Server\" class=\"headerlink\" title=\"Overview Of The Chat Server\"></a>Overview Of The Chat Server</h3><ul>\n<li><p><strong>ClientMap</strong> Maps client socket connections to client messages</p>\n</li>\n<li><p><strong>ClientList</strong> Stores pointers to each new client connected to the server.</p>\n</li>\n<li><p><strong>MessageQueue</strong> Collects messages sent to the server and routes them to connected clients.</p>\n</li>\n</ul>\n<p>Together with the three threads of execution we’ll introduce shortly the ClientMap, List and MessageQueue can be used together with locks to build a functioning chat server. In short we’ll have one thread be responsible for accepting new client connections and adding them to the list of connected clients as individual socket pointers. Next when a new message request hits the server, its content gets pumped into the MessageQueue during the request from within the request handling thred and later the response handling thread consumes the MessageQueue out to each of the clients in the list.</p>\n<h3 id=\"Function-Prototypes-And-Initial-Setup\"><a href=\"#Function-Prototypes-And-Initial-Setup\" class=\"headerlink\" title=\"Function Prototypes And Initial Setup\"></a>Function Prototypes And Initial Setup</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* boostChatServer.cpp */</div><div class=\"line\">io_service service;</div><div class=\"line\">tcp::acceptor acceptor(service, tcp::endpoint(tcp::v4(), 8001));</div><div class=\"line\">boost::mutex mtx;</div><div class=\"line\">clientList_ptr clientList(new list&lt;socket_ptr&gt;);</div><div class=\"line\">messageQueue_ptr messageQueue(new queue&lt;clientMap_ptr&gt;) ;</div><div class=\"line\"></div><div class=\"line\">const int bufSize = 1024;</div><div class=\"line\">enum sleepLen // Time is in milliseconds &#123;</div><div class=\"line\">  sml = 100,</div><div class=\"line\">  lon = 200</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Function Prototypes</div><div class=\"line\">bool clientSentExit(string_ptr);</div><div class=\"line\">void disconnectClient(socket_ptr);</div><div class=\"line\">void acceptorLoop();</div><div class=\"line\">void requestLoop();</div><div class=\"line\">void responseLoop();</div><div class=\"line\">// End of Function Prototypes</div></pre></td></tr></table></figure>\n<p>The key variable definiton from above is the use of boost::mutex. As I mentioned earlier and as I will continue to mention, the code presented in this article was intented to be used with the Boost libraries so clever readers will note that C++ now has a standard std::mutex for builtin lock based synchronization. However, getting back to the subject of mutexes we will be using our mutex for controlling access to objects which are accessed from different threads; in particular the MessageQueue needs to be locked both before messages are enqueued and before message are dequeued from the front. In general since queues are first-in-first-out FIFO datastructures you can be pretty safe that producers(adding message onto the back) and consumers(reading messages from the front) wont ever have to compete but its better safe than sorry thus MessageQueue access must be synchronized in this case.</p>\n<h3 id=\"Main-Function\"><a href=\"#Main-Function\" class=\"headerlink\" title=\"Main Function\"></a>Main Function</h3><p>The main function creates each of the three threads indicated by the suffix “Loop”</p>\n<ul>\n<li><p><strong>acceptorLoop</strong> Handles new client TCP/IP connections</p>\n</li>\n<li><p><strong>requestLoop</strong> Handles client requests by adding them to MessageQueue(producer)</p>\n</li>\n<li><p><strong>responseLoop</strong> Handles server responses to the clients, reads from the MessageQueue(consumer)</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">/* boostChatServer.cpp */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  boost::thread_group threads;</div><div class=\"line\"></div><div class=\"line\">  threads.create_thread(boost::bind(acceptorLoop));</div><div class=\"line\">  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));</div><div class=\"line\"></div><div class=\"line\">  threads.create_thread(boost::bind(requestLoop));</div><div class=\"line\">  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));</div><div class=\"line\"></div><div class=\"line\">  threads.create_thread(boost::bind(responseLoop));</div><div class=\"line\">  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));</div><div class=\"line\"></div><div class=\"line\">  threads.join_all();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Press any key to continue...\"</span>);</div><div class=\"line\">  getc(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"AcceptorLoop\"><a href=\"#AcceptorLoop\" class=\"headerlink\" title=\"AcceptorLoop\"></a>AcceptorLoop</h3><p>The code for the acceptorLoop is very crude but straightforward; the entire function waits for the <strong>io_service</strong> object to obtain a new client connection once that occurs we create a new TCP/IP socket and add it to our clientList. We use a mutex within the acceptorLoop before accessing the clientList; this is necessary because in order to disconnect a client from our server the disconnect function also needs access to the same clientList.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* boostChatServer.cpp */</div><div class=\"line\">void acceptorLoop()</div><div class=\"line\">&#123;</div><div class=\"line\">  cout &lt;&lt; \"Waiting for clients...\" &lt;&lt; endl;</div><div class=\"line\"></div><div class=\"line\">  for(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    socket_ptr clientSock(new tcp::socket(service));</div><div class=\"line\"></div><div class=\"line\">    acceptor.accept(*clientSock);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"New client joined! \";</div><div class=\"line\"></div><div class=\"line\">    mtx.lock();</div><div class=\"line\">    clientList-&gt;emplace_back(clientSock);</div><div class=\"line\">    mtx.unlock();</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; clientList-&gt;size() &lt;&lt; \" total clients\" &lt;&lt; endl;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"RequestLoop\"><a href=\"#RequestLoop\" class=\"headerlink\" title=\"RequestLoop\"></a>RequestLoop</h3><p>In short, the requestLoop functions as a clientList scanner. I realize after looking over this code it could have been implemented differently because as the number of clients grow the O(N) time it takes to check each client for a new message all the while holding onto a lock will create bad performance for large numbers of clients. A better approach would be to generate a new thread for each client or even better introduce coroutines and kick off a new coroutine for every new client connection, a technique I’ve seen demonstrated for servers written by GoLang devs. If you’re interested in common HTTP server concurrency strategies used by Go developers there is a pretty decent ebook translated from Chinese to English on Github <a href=\"https://github.com/astaxie/build-web-application-with-golang\" target=\"_blank\" rel=\"external\">build-web-application-with-golang</a>. Although I disagree with many of the decisions made by the Go team and its “C with safety goggles” approach to building systems applications Go does perform extremely well for building RestFul HTTP backends to replace aging PHP/Python/Ruby stacks. Anyways back to the requestLoop code; for all of its flaws here is the big loop that holds onto a mutex.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* boostChatServer.cpp */</div><div class=\"line\">void requestLoop()</div><div class=\"line\">&#123;</div><div class=\"line\">  for(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    if(!clientList-&gt;empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">      // Poorly designed loop, client sockets </div><div class=\"line\">      // should alert the server when they have new messages; </div><div class=\"line\">      // the server shouldn't poll the clientList while holding a lock</div><div class=\"line\">      mtx.lock();</div><div class=\"line\">      for(auto&amp; clientSock : *clientList)</div><div class=\"line\">      &#123;</div><div class=\"line\">        if(clientSock-&gt;available())</div><div class=\"line\">        &#123;</div><div class=\"line\">          char readBuf[bufSize] = &#123;0&#125;;</div><div class=\"line\"></div><div class=\"line\">          int bytesRead = clientSock-&gt;read_some(buffer(readBuf, bufSize));</div><div class=\"line\"></div><div class=\"line\">          string_ptr msg(new string(readBuf, bytesRead));</div><div class=\"line\"></div><div class=\"line\">          if(clientSentExit(msg))</div><div class=\"line\">          &#123;</div><div class=\"line\">            disconnectClient(clientSock);</div><div class=\"line\">            break;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          clientMap_ptr cm(new clientMap);</div><div class=\"line\">          cm-&gt;insert(pair&lt;socket_ptr, string_ptr&gt;(clientSock, msg));</div><div class=\"line\"></div><div class=\"line\">          messageQueue-&gt;push(cm);</div><div class=\"line\"></div><div class=\"line\">          cout &lt;&lt; \"ChatLog: \" &lt;&lt; *msg &lt;&lt; endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mtx.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::lon));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"RequestLoop-Utility-Functions\"><a href=\"#RequestLoop-Utility-Functions\" class=\"headerlink\" title=\"RequestLoop Utility Functions\"></a>RequestLoop Utility Functions</h3><p>Inside the requestLoop function there were two methods, <strong>clientSentExit</strong> and <strong>disconnectClient</strong>. As their names imply we use these two utility functions to properly disconnect clients when they include the string “exit” inside of their message.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatServer.cpp */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">clientSentExit</span><span class=\"params\">(string_ptr message)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(message-&gt;find(<span class=\"string\">\"exit\"</span>) != <span class=\"built_in\">string</span>::npos)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">disconnectClient</span><span class=\"params\">(socket_ptr clientSock)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">auto</span> position = find(clientList-&gt;begin(), clientList-&gt;end(), clientSock);</div><div class=\"line\"></div><div class=\"line\">  clientSock-&gt;shutdown(tcp::socket::shutdown_both);</div><div class=\"line\">  clientSock-&gt;close();</div><div class=\"line\"></div><div class=\"line\">  clientList-&gt;erase(position);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Client Disconnected! \"</span> &lt;&lt; clientList-&gt;size() &lt;&lt; <span class=\"string\">\" total clients\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"ResponseLoop\"><a href=\"#ResponseLoop\" class=\"headerlink\" title=\"ResponseLoop\"></a>ResponseLoop</h3><p>Lastly we have the responseLoop, its job is to consume from the MessageQueue and send off the chat string to all recipients on the clientList.<br>I wasn’t too sure why I choose to have this thread function acquire and release the mutex twice but for demonstration purposes the code still functions.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">responseLoop</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!messageQueue-&gt;empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">auto</span> message = messageQueue-&gt;front();</div><div class=\"line\"></div><div class=\"line\">      mtx.lock();</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; clientSock : *clientList)</div><div class=\"line\">      &#123;</div><div class=\"line\">        clientSock-&gt;write_some(buffer(*(message-&gt;begin()-&gt;second), bufSize));</div><div class=\"line\">      &#125;</div><div class=\"line\">      mtx.unlock();</div><div class=\"line\"></div><div class=\"line\">      mtx.lock();</div><div class=\"line\">      messageQueue-&gt;pop();</div><div class=\"line\">      mtx.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::lon));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Well that about wraps up the tutorial on building a simple chat application with C++ and Boost; I’ll be doing a bit more with C++ code future blog posts so stay tuned.</p>\n<h3 id=\"Full-Source-Code\"><a href=\"#Full-Source-Code\" class=\"headerlink\" title=\"Full Source Code\"></a>Full Source Code</h3><script src=\"https://gist.github.com/taywils/d0e7e099b5c172dbcf34.js\"> </script>\n","site":{"data":{}},"excerpt":"<p>In part 2 of the C++ boost chat application tutorial we’ll develop the server side code. It uses a bit more C++ coding but the same concepts apply from the first article in the series.</p>","more":"<p><a href=\"/2014/11/15/boostchatclient\">Click here for Part I</a></p>\n<h3 id=\"Tutorial-Assumes-Boost-Version-gt-1-53\"><a href=\"#Tutorial-Assumes-Boost-Version-gt-1-53\" class=\"headerlink\" title=\"Tutorial Assumes Boost Version &gt;= 1.53\"></a>Tutorial Assumes Boost Version &gt;= 1.53</h3><p>Welcome to the second part of the chat application tutorial. In this part we’ll be finishing up our chat appliation by writting the server side code which handles accepting new messages and routing them out to each of the connected clients. Much like the client application the server uses TCP/IP sockets, threads and relies on the producer-consumer pattern to store messages within a queue. However unlike the client app the server application will use mutually exclusive locks for its concurrency strategy and introduce a few more Boost smart pointers.</p>\n<p>The same guidelines for what you need to have installed on your machine apply from the first part of this tutorial. So if you need to download the latest version of the Boost C++ Libraries on your machine refer to part I. Other than the necessary Boost C++ libs you should also again be using a modern C++ compiler that supports at minimum the C++11 standard; ok enough talk lets start coding.</p>\n<h3 id=\"Part-II-The-Chat-Server-Code\"><a href=\"#Part-II-The-Chat-Server-Code\" class=\"headerlink\" title=\"Part II: The Chat Server Code\"></a>Part II: The Chat Server Code</h3><p>Once again we’ll be using the C++ standard libs along with <a href=\"http://www.boost.org/doc/libs/1_57_0/doc/html/boost_asio.html\">Boost Asio</a>. To begin create a new file within the same directory where you wrote the code for <a href=\"/2014/11/15/boostchatclient.html\">Part I</a>, name the file <strong>boostChatServer.cpp</strong>. Next open the file you just created and we’ll start off with the preprocessor definitions and declare use of namespaces.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatServer.cpp */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/asio.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/thread.hpp&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;boost/asio/ip/tcp.hpp&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost::asio;</div><div class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost::asio::ip;</div></pre></td></tr></table></figure>\n<p>Moving right along the next segment of the ChatServer code are the typedefs; hopefully you’ll agree with my choice of typedefs to hide all of the Boost smart pointer extra typing since this codebase does not use the standard C++11 smart pointers.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatServer.cpp */</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt;tcp::socket&gt; socket_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt;<span class=\"built_in\">string</span>&gt; string_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">map</span>&lt;socket_ptr, string_ptr&gt; clientMap;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt;clientMap&gt; clientMap_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt; <span class=\"built_in\">list</span>&lt;socket_ptr&gt; &gt; clientList_ptr;</div><div class=\"line\"><span class=\"keyword\">typedef</span> boost::<span class=\"built_in\">shared_ptr</span>&lt; <span class=\"built_in\">queue</span>&lt;clientMap_ptr&gt; &gt; messageQueue_ptr;</div></pre></td></tr></table></figure>\n<h3 id=\"Overview-Of-The-Chat-Server\"><a href=\"#Overview-Of-The-Chat-Server\" class=\"headerlink\" title=\"Overview Of The Chat Server\"></a>Overview Of The Chat Server</h3><ul>\n<li><p><strong>ClientMap</strong> Maps client socket connections to client messages</p>\n</li>\n<li><p><strong>ClientList</strong> Stores pointers to each new client connected to the server.</p>\n</li>\n<li><p><strong>MessageQueue</strong> Collects messages sent to the server and routes them to connected clients.</p>\n</li>\n</ul>\n<p>Together with the three threads of execution we’ll introduce shortly the ClientMap, List and MessageQueue can be used together with locks to build a functioning chat server. In short we’ll have one thread be responsible for accepting new client connections and adding them to the list of connected clients as individual socket pointers. Next when a new message request hits the server, its content gets pumped into the MessageQueue during the request from within the request handling thred and later the response handling thread consumes the MessageQueue out to each of the clients in the list.</p>\n<h3 id=\"Function-Prototypes-And-Initial-Setup\"><a href=\"#Function-Prototypes-And-Initial-Setup\" class=\"headerlink\" title=\"Function Prototypes And Initial Setup\"></a>Function Prototypes And Initial Setup</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* boostChatServer.cpp */</div><div class=\"line\">io_service service;</div><div class=\"line\">tcp::acceptor acceptor(service, tcp::endpoint(tcp::v4(), 8001));</div><div class=\"line\">boost::mutex mtx;</div><div class=\"line\">clientList_ptr clientList(new list&lt;socket_ptr&gt;);</div><div class=\"line\">messageQueue_ptr messageQueue(new queue&lt;clientMap_ptr&gt;) ;</div><div class=\"line\"></div><div class=\"line\">const int bufSize = 1024;</div><div class=\"line\">enum sleepLen // Time is in milliseconds &#123;</div><div class=\"line\">  sml = 100,</div><div class=\"line\">  lon = 200</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Function Prototypes</div><div class=\"line\">bool clientSentExit(string_ptr);</div><div class=\"line\">void disconnectClient(socket_ptr);</div><div class=\"line\">void acceptorLoop();</div><div class=\"line\">void requestLoop();</div><div class=\"line\">void responseLoop();</div><div class=\"line\">// End of Function Prototypes</div></pre></td></tr></table></figure>\n<p>The key variable definiton from above is the use of boost::mutex. As I mentioned earlier and as I will continue to mention, the code presented in this article was intented to be used with the Boost libraries so clever readers will note that C++ now has a standard std::mutex for builtin lock based synchronization. However, getting back to the subject of mutexes we will be using our mutex for controlling access to objects which are accessed from different threads; in particular the MessageQueue needs to be locked both before messages are enqueued and before message are dequeued from the front. In general since queues are first-in-first-out FIFO datastructures you can be pretty safe that producers(adding message onto the back) and consumers(reading messages from the front) wont ever have to compete but its better safe than sorry thus MessageQueue access must be synchronized in this case.</p>\n<h3 id=\"Main-Function\"><a href=\"#Main-Function\" class=\"headerlink\" title=\"Main Function\"></a>Main Function</h3><p>The main function creates each of the three threads indicated by the suffix “Loop”</p>\n<ul>\n<li><p><strong>acceptorLoop</strong> Handles new client TCP/IP connections</p>\n</li>\n<li><p><strong>requestLoop</strong> Handles client requests by adding them to MessageQueue(producer)</p>\n</li>\n<li><p><strong>responseLoop</strong> Handles server responses to the clients, reads from the MessageQueue(consumer)</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">/* boostChatServer.cpp */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  boost::thread_group threads;</div><div class=\"line\"></div><div class=\"line\">  threads.create_thread(boost::bind(acceptorLoop));</div><div class=\"line\">  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));</div><div class=\"line\"></div><div class=\"line\">  threads.create_thread(boost::bind(requestLoop));</div><div class=\"line\">  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));</div><div class=\"line\"></div><div class=\"line\">  threads.create_thread(boost::bind(responseLoop));</div><div class=\"line\">  boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::sml));</div><div class=\"line\"></div><div class=\"line\">  threads.join_all();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Press any key to continue...\"</span>);</div><div class=\"line\">  getc(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"AcceptorLoop\"><a href=\"#AcceptorLoop\" class=\"headerlink\" title=\"AcceptorLoop\"></a>AcceptorLoop</h3><p>The code for the acceptorLoop is very crude but straightforward; the entire function waits for the <strong>io_service</strong> object to obtain a new client connection once that occurs we create a new TCP/IP socket and add it to our clientList. We use a mutex within the acceptorLoop before accessing the clientList; this is necessary because in order to disconnect a client from our server the disconnect function also needs access to the same clientList.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* boostChatServer.cpp */</div><div class=\"line\">void acceptorLoop()</div><div class=\"line\">&#123;</div><div class=\"line\">  cout &lt;&lt; \"Waiting for clients...\" &lt;&lt; endl;</div><div class=\"line\"></div><div class=\"line\">  for(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    socket_ptr clientSock(new tcp::socket(service));</div><div class=\"line\"></div><div class=\"line\">    acceptor.accept(*clientSock);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"New client joined! \";</div><div class=\"line\"></div><div class=\"line\">    mtx.lock();</div><div class=\"line\">    clientList-&gt;emplace_back(clientSock);</div><div class=\"line\">    mtx.unlock();</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; clientList-&gt;size() &lt;&lt; \" total clients\" &lt;&lt; endl;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"RequestLoop\"><a href=\"#RequestLoop\" class=\"headerlink\" title=\"RequestLoop\"></a>RequestLoop</h3><p>In short, the requestLoop functions as a clientList scanner. I realize after looking over this code it could have been implemented differently because as the number of clients grow the O(N) time it takes to check each client for a new message all the while holding onto a lock will create bad performance for large numbers of clients. A better approach would be to generate a new thread for each client or even better introduce coroutines and kick off a new coroutine for every new client connection, a technique I’ve seen demonstrated for servers written by GoLang devs. If you’re interested in common HTTP server concurrency strategies used by Go developers there is a pretty decent ebook translated from Chinese to English on Github <a href=\"https://github.com/astaxie/build-web-application-with-golang\">build-web-application-with-golang</a>. Although I disagree with many of the decisions made by the Go team and its “C with safety goggles” approach to building systems applications Go does perform extremely well for building RestFul HTTP backends to replace aging PHP/Python/Ruby stacks. Anyways back to the requestLoop code; for all of its flaws here is the big loop that holds onto a mutex.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* boostChatServer.cpp */</div><div class=\"line\">void requestLoop()</div><div class=\"line\">&#123;</div><div class=\"line\">  for(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    if(!clientList-&gt;empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">      // Poorly designed loop, client sockets </div><div class=\"line\">      // should alert the server when they have new messages; </div><div class=\"line\">      // the server shouldn't poll the clientList while holding a lock</div><div class=\"line\">      mtx.lock();</div><div class=\"line\">      for(auto&amp; clientSock : *clientList)</div><div class=\"line\">      &#123;</div><div class=\"line\">        if(clientSock-&gt;available())</div><div class=\"line\">        &#123;</div><div class=\"line\">          char readBuf[bufSize] = &#123;0&#125;;</div><div class=\"line\"></div><div class=\"line\">          int bytesRead = clientSock-&gt;read_some(buffer(readBuf, bufSize));</div><div class=\"line\"></div><div class=\"line\">          string_ptr msg(new string(readBuf, bytesRead));</div><div class=\"line\"></div><div class=\"line\">          if(clientSentExit(msg))</div><div class=\"line\">          &#123;</div><div class=\"line\">            disconnectClient(clientSock);</div><div class=\"line\">            break;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          clientMap_ptr cm(new clientMap);</div><div class=\"line\">          cm-&gt;insert(pair&lt;socket_ptr, string_ptr&gt;(clientSock, msg));</div><div class=\"line\"></div><div class=\"line\">          messageQueue-&gt;push(cm);</div><div class=\"line\"></div><div class=\"line\">          cout &lt;&lt; \"ChatLog: \" &lt;&lt; *msg &lt;&lt; endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mtx.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::lon));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"RequestLoop-Utility-Functions\"><a href=\"#RequestLoop-Utility-Functions\" class=\"headerlink\" title=\"RequestLoop Utility Functions\"></a>RequestLoop Utility Functions</h3><p>Inside the requestLoop function there were two methods, <strong>clientSentExit</strong> and <strong>disconnectClient</strong>. As their names imply we use these two utility functions to properly disconnect clients when they include the string “exit” inside of their message.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* boostChatServer.cpp */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">clientSentExit</span><span class=\"params\">(string_ptr message)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(message-&gt;find(<span class=\"string\">\"exit\"</span>) != <span class=\"built_in\">string</span>::npos)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">disconnectClient</span><span class=\"params\">(socket_ptr clientSock)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">auto</span> position = find(clientList-&gt;begin(), clientList-&gt;end(), clientSock);</div><div class=\"line\"></div><div class=\"line\">  clientSock-&gt;shutdown(tcp::socket::shutdown_both);</div><div class=\"line\">  clientSock-&gt;close();</div><div class=\"line\"></div><div class=\"line\">  clientList-&gt;erase(position);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Client Disconnected! \"</span> &lt;&lt; clientList-&gt;size() &lt;&lt; <span class=\"string\">\" total clients\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"ResponseLoop\"><a href=\"#ResponseLoop\" class=\"headerlink\" title=\"ResponseLoop\"></a>ResponseLoop</h3><p>Lastly we have the responseLoop, its job is to consume from the MessageQueue and send off the chat string to all recipients on the clientList.<br>I wasn’t too sure why I choose to have this thread function acquire and release the mutex twice but for demonstration purposes the code still functions.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">responseLoop</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!messageQueue-&gt;empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">auto</span> message = messageQueue-&gt;front();</div><div class=\"line\"></div><div class=\"line\">      mtx.lock();</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; clientSock : *clientList)</div><div class=\"line\">      &#123;</div><div class=\"line\">        clientSock-&gt;write_some(buffer(*(message-&gt;begin()-&gt;second), bufSize));</div><div class=\"line\">      &#125;</div><div class=\"line\">      mtx.unlock();</div><div class=\"line\"></div><div class=\"line\">      mtx.lock();</div><div class=\"line\">      messageQueue-&gt;pop();</div><div class=\"line\">      mtx.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boost::this_thread::sleep( boost::posix_time::millisec(sleepLen::lon));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Well that about wraps up the tutorial on building a simple chat application with C++ and Boost; I’ll be doing a bit more with C++ code future blog posts so stay tuned.</p>\n<h3 id=\"Full-Source-Code\"><a href=\"#Full-Source-Code\" class=\"headerlink\" title=\"Full Source Code\"></a>Full Source Code</h3><script src=\"https://gist.github.com/taywils/d0e7e099b5c172dbcf34.js\"> </script>"},{"title":"An Introductory Meteor Tutorial, Improving On The Leaderboard Sample App","date":"2012-03-26T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boozenet.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boozenet.JPG","comments":0,"_content":"In this tutorial I'll discuss my experience developing and launching(and yes you'll see how easy it is to launch with Meteor) a realtime javascript application using the Meteor framework; with its built in MongoDB shell and strong client server architecture Meteor is a powerful framework that should become popular for developers wishing to build fast realtime web applications.\n\n<!-- more -->\n- <a href=\"https://github.com/taywils/Meteor_Tutorial_Code\">Grab the code on GitHub</a>\n\nTo begin this tutorial the first thing you'll want to do is to install the Meteor framework for NodeJs. \n\nDue to the nature of the framework under going constant updates, I won't write down specifically how to install Meteor because I'll then be forced to update this tutorial whenever the installation procedure changes. \n\nHowever I don't see anything wrong with providing a link to the official Meteor documentation where you'll find the download and installation instructions readily prepared for you. <a href=\"http://docs.meteor.com/#quickstart\">Meteor Installation Guide</a> Once you have Meteor installed on your system you're ready to go. If you're running a Linux variant or Mac OSX then then the installation guide should be sufficient however, Windows users might require extra steps. \n\nWorry not though because if all else fails for getting Meteor running on Windows I suggest you just download and install a free copy of <a href=\"http://www.ubuntu.com/\">Ubuntu Linux</a> and get it running first and then return to this tutorial.\n\nSo now that you have Meteor up and running we're going to start off by downloading the sample application \"Leaderboard\". To do so go to the Meteor official documentation for the leaderboard sample app and follow the instructions <a href=\"http://www.meteor.com/examples/leaderboard\">Meteor Leaderboard</a>. Once you have read through the instructions go ahead and give the sample application a test drive by changing into the directory of the application and entering \"meteor\" into you terminal window. \n\nNext the application should begin most likely on localhost:3000 which you can navigate to from your web browser of choice and view the application running live. \n\nOk so far we have installed the Meteor framework; downloaded the sample app, ran the sample app and verified that we can navigate to the application from our browser and see it in action. \nNow we'll begin modifying the leaderboard so we can better understand the framework and take a gander into its design structure. \n\nFrom your terminal window open the directory where you placed the sample app; you should see three files leaderboard.css, leaderboard.html and leaderboard.js. \n\nBased on the file names you can easily tell that the first file we're going to edit is the leaderboard.html since its the file which connects both the css and javascript. \nGo ahead and open up leaderboard.html with your editor of choice.\n\nThe re-branded sample application i.e fork of the leaderboard app we're going to create is called Boozenet. Boozenet was the name of this application chosen the team I worked with during a previous Hackathon. \n\nBoozenet was an application developed for the sole purpose of allowing friends who drink together on nights out to keep track of not only the beer they drank but the total amount of calories. \nThis application was developed during a mobile Health themed hackathon so the caloric intake was supposed to be the main feature of the app but the fact that it was realtime and ran on mobile as well as web based clients was the most impressive feature after all. \nEnough background, within leaderboard.html find the <head> and update its contents to appear as below.\n```html\n<head>\n  <title>BoozeNet</title>\n  <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script>\n</head>\n```\nIn addition Meteor also has a custom jquery plugin, from the documentation to use the jquery plugin navigate to the directory of this application and run the following command from the terminal \"meteor add jquery\".\n\nSo far we've updated the title of the application and included jquery... not much but its a good start. \nMoving onto the <body> tag you'll notice the unfamiliar (if you've never used an HTML templating framework before) set of double curly braces. \n\nWhat these represent are places where we'll substitute sections of HTML when the content is rendered on the browser once the templating javascript code scans over and updates the sections of the HTML marked with double curly braces when the application is ran. \nDespite the large number of HTML templating engines available (just Google for it and you'll see) the one pre-baked into the Meteor framework is a modern templating engine called Handlebars \n\n<a href=\"http://handlebarsjs.com/\">Click here for the Handlebarsjs Homepage</a>. \n\nIf you want you can read all about how Handlebarsjs does its magic by browsing the its homepage but for now we'll focus on applying it to extend the leaderboard sample application. \n```html\n<body>\n  <div id=\"outer\">\n  <table>\n  <tr>\n  <td><img src=\"beer_vector-200.png\" /></td>\n  <td>{{> game}}</td>\n  </tr>\n  </table>\n  {{> gallery }}\n  <div class=\"none\" />\n  {{> leaderboard}}\n  </div>\n</body>\n```\nFirst we're going to explain how the gallery template works; once that is established hopefully the double curly brace syntax won't appear so alien and you'll start reading it as just another HTML element. What the gallery does for our application is showcase the snapshots (in this contrived example they will be hyperlinks to images on the web) of various beers that users of our app have consumed. All this really means is that the gallery template is a placeholder for images to be dynamically inserted at when the page is rendered from image links stored within out database.\n\n```html\n<template name=\"gallery\">\n<div class=\"gallery\">\n{{#each photos}}\n{{> photo}}\n{{/each}}\n</div>\n</template>\n```\nAs you can probably already guess the <template> tag will substitute itself where the double braced enclosed word \"gallery\" appears earlier in the code. \nIf you thought it was going to be more complicated than that you were wrong, working with the handlebarsjs template engine is quite easy... although there are way more advanced features we won't need to get into to those at this level of a tutorial. \nThe next template we're going to create is the photo template which is to be  placed within the gallery template we just established.\n\n```html\n<template name=\"photo\">\n<img width=\"100\" height=\"100\" src=\"{{url}}\" />\n</template>\n```\n\nFor those of you with eagle eyes you might have caught that the the template argument url differs slightly from the all previous template arguments we have passed thus far.\nWhat the url lack is the leading > just after the second left-curly brace. \nHow the absence of the > affects the code will come into play later when you start writing the javascript code but for now just let it be. \nNext we'll need to template the leaderboard... its similar to the gallery but instead of photos wrapped within a each sub-template we'll have players displayed instead.\n\n```html\n<template name=\"leaderboard\">\n<div class=\"leaderboard\">\n{{#each players}}\n{{> player}}\n{{/each}}\n</div>\n\n{{#if selected_name}}\n<div class=\"details\">\n<div class=\"name\">Whats Up {{selected_name}}</div>\n<input type=\"button\" class=\"uploadImg\" value=\"Add Photo\" />\n<input id=&#039;imgUrlText&#039; type=&#039;text&#039; size=\"80\" name=&#039;imageUrl&#039; class=&#039;imageUrl&#039; />\n</div>\n{{/if}}\n\n{{#unless selected_name}}\n<div class=\"none\">Click a player to select</div>\n{{/unless}}\n</template>\n```\nSince we have just defined where the players template is going to fit onto the leaderboard we now have to create a template for them as well.\n```html\n<template name=\"player\">\n<div class=\"player {{selected}}\">\n<span class=\"name\">{{name}} | {{phone}}</span>\n<span class=\"score\">Calories {{score}}</span>\n</div>\n</template>\n```\nAnother thing you might have noticed is that in the above code the double curly brace appears within the value of the class tag. \nWhich means that you can even inject templates within css; pretty cool if I'd say so. \nMoving on notice how the template references whether or not the player has been selected. \nThat will become important once we get to the javascript part of this application where we'll actually define the events which take place when those conditionals are satisfied. \nLastly all we have to do now is define the game template, which is just where we have our input form for new players.\n```html\n<template name=\"game\">\n<div class=\"newGame\">\n  <input type=\"button\" class=\"newGame\" value=\"New Game\" />\n<br />\n<form class=\"standard_form\">\n  <label>Enter Phone#:</label><input id=&#039;phoneText&#039; type=&#039;text&#039; name=&#039;phoneNumber&#039; class=&#039;phoneNumber&#039; />\n  <label>Enter Name:</label><input id=&#039;nameText&#039; type=&#039;text&#039; name=&#039;newName&#039; class=&#039;newName&#039; />\n  <div class=\"submit_links\">\n  <input type=\"button\" class=\"addDrinker\" value=\"Join\" />\n  </div>\n</form>\n\n</div>\n</template>\n```\nNow we are done with leaderboard.html.\n\nBelow is the CSS for leaderboard.css there isn't much to the CSS so just read through it if you want. \nBesides that you might just want to flat out replace your leaderboard.css instead of making additions to the file like we did for the html page. \n```css\nbody {\n  font-family: 'Helvetica Neue', Helvetica, Arial, san-serif;\n  font-weight: 200;\nmargin: 50px 0;\npadding: 0;\n         -webkit-user-select: none;\n         -khtml-user-select: none;\n         -moz-user-select: none;\n         -o-user-select: none;\n         user-select: none;\n}\n\n#outer {\nwidth: 700px;\nmargin: 0 auto;    \n}\n\n.player {\npadding: 5px;\n}\n\n.player .name {\ndisplay: inline-block;\nwidth: 300px;\n       font-size: 1.75em;\n}\n\n.player .score {\ndisplay: inline-block;\nwidth: 100px;\n       text-align: right;\n       font-size: 2em;\n       font-weight: bold;\ncolor: #777;\n}\n\n.player.selected {\n  background-color: yellow;\ndisplay: inline-block;\n}\n\n.player.selected .score {\ncolor: black;\n}\n\n.details, .none {\n  font-weight: bold;\n  font-size: 2em;\n  border-style: dashed none none none;\n  border-color: #ccc;\n  border-width: 4px;\nmargin: 50px 10px;\npadding: 10px 0px;\n}\n\n.none {\ncolor: #777;\n}\n\ninput {\n  border-color: #006699;\n  border-style: solid;\n  border-width: 1px;\ncolor: #006699;\n}\n\n.standard_form {\nwidth: 400px;\nmargin: 0px;\npadding: 0px;\n}\n\n.standard_form label {\nfloat: left;\nwidth: 190px;\nclear: both;\nheight: 20px;\n}\n\n.standard_form input {\nfloat: right;\nwidth: 200px;\nheight: 20px;\n}\n\n.submit_links {\nclear: both;\n}\n\n.submit_links input {\nfloat: right;\nwidth: auto;\n}\n\n.leaderboard .player {\nwidth: 610px;\nclear: both;\n}\n\n.leaderboard .player .name {\nwidth: 300px;\nfloat: left;\n}\n\n.leaderboard .player .score {\nwidth: 300px;\nfloat: right;\n}\n```\nFor the final addition and where we get to see the true face of Meteor is within the javascript file.\nSo open leaderboard.js and we'll begin by taking apart the javascript section by section to make sure we understand what each part does and where we'll make additions to the sample code provided. \n\n```javascript\nPlayers = new Meteor.Collection(\"players\");\nPhotos = new Meteor.Collection(\"photos\");\n```\n\nThe first part is the addition of the Photos MongoDB Collection in addition to the regular Players Collection.\nThats simple enough but the interesting part we see next is how the each of the templates we coded in the HTML connects somehow to a Collection on the MongoDB.\nOne of the things I appreciate the most about the Meteor framework is how well they managed to make the connections between HTML templates and MongoDB collections crystal clear.\nIn particular pay attention to the conditional on the first line where we check whether the interaction is from the client.\nThis will become important later on where we describe what happens when the interation is on the server side.\nWhich is another cool thing about Meteor that you often don't see in a lot of other frameworks, clean separation between client and server object modeling. \nOften as I've seen before what happens is that the server side code is visibly connected to the database while its up to the developer to string together some sort of process for pushing the data to the client facing side.\n```javascript\nif (Meteor.is_client) {\n  Template.leaderboard.players = function () {\n    return Players.find({}, {sort: {score: -1, name: 1}});\n  };\n\n  Template.gallery.photos = function () {\n    return Photos.find({});\n  };\n\n  Template.leaderboard.selected_name = function () {\n    var player = Players.findOne(Session.get(\"selected_player\"));\n    return player && player.phone && player.name;\n  };\n\n  Template.player.selected = function () {\n    return Session.equals(\"selected_player\", this._id) ? \"selected\" : '';\n  };\n```\nNext fill in the various html events which are triggered based on client input on the page where the app is displayed. \nThe first event we'll code describes what happens when a user clicks the Image Upload button.\n```javascript\n    Template.leaderboard.events = {\n      'click input.uploadImg': function() {\n        var imgUrl = \"\";\n        imgUrl = $('#imgUrlText').val();\n        var imgSrc = imgUrl;\n\n        if( imgUrl != \"\" ) {\n          var player = Players.findOne(Session.get(\"selected_player\"));\n          Players.update(Session.get(\"selected_player\"), {$inc: {score: 343}});\n          Photos.insert({url: imgSrc, phone: player.phone });\n        }\n      }\n    };\n```\nThe code is pretty self explainatory but in short, we pull the image url, we take the selected player, increment her score and then insert the photo into our DB.\nThen we handle what happens when a playername is clicked... it just sets the selected player.\n```javascript\n    Template.player.events = {\n      'click': function () {\n        Session.set(\"selected_player\", this._id);\n      }\n    };\n```\nFinnally for the game template itself we need to handle two events, one in which a new player is added and the second when a new game is created.\n\nThe events for any template as you can tell by now is just a javascript Object so we can separate object member by a comma using a string as the key and function as the value.\n```javascript\n    Template.game.events = {\n      'click input.newGame': function () {\n        Players.remove({});\n        Photos.remove({});\n      },\n\n      'click input.addDrinker': function () {\n        var newScore = 0;\n        var newName = null;\n        var newPhoneNumber = null;\n\n        newPhoneNumber = $('#phoneText').val();\n        newName = $('#nameText').val();\n\n        if( $.trim(newName) != \"\" && $.trim(newPhoneNumber) != \"\" ) {\n          Players.insert({ name: newName, phone: newPhoneNumber, score: newScore });\n        }\n      }\n    };\n```\nFor the final part of the javascript we need to define how the Meteor server gets the data from the DB when the game is started which will then allow the client code to we coded above to behave properly.\n```javascript\n    if (Meteor.is_server) {\n      Meteor.startup(function () {\n          if (Players.find().count() === 0) {\n            var names = [\n            \"Click New Game\",\n            ];\n\n            for (var i = 0; i < names.length; i++) {\n              Players.insert({name: names[i], phone: \"\", score: 0});\n            }\n          }\n\n          if( Photos.find().count() === 0) {\n            var pics = [\n            \"http://upload.wikimedia.org/wikipedia/commons/e/e5/Pale_Ale.jpg\",\n            \"http://upload.wikimedia.org/wikipedia/commons/3/3e/Weizenbier.jpg\",\n            \"http://upload.wikimedia.org/wikipedia/commons/9/99/Glass_of_K%C3%B6stritzer_Schwarzbier.jpg\"\n            ];\n\n            for (var i = 0; i < pics.length; i++) {\n            Photos.insert({url: pics[i], phone: \"\"});\n            }\n          }\n      });\n    }\n```\nThe last thing you need to do in order to get the full code working together is to visit the github page for this code as this tutorial written here is more of in-depth documentation. So just git clone the project navigate to the main directory and run \"meteor\" from the terminal and browse to the site on your machine. \n\nIncluded within the GitHub code are the necessary image files you'll want as well.\n\n","source":"_posts/boozenet.md","raw":"---\ntitle: An Introductory Meteor Tutorial, Improving On The Leaderboard Sample App\ndate: 2012-03-26\ncategories: [tutorial]\ntags: [javascript, nodejs]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boozenet.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/boozenet.JPG\ncomments: false\n---\nIn this tutorial I'll discuss my experience developing and launching(and yes you'll see how easy it is to launch with Meteor) a realtime javascript application using the Meteor framework; with its built in MongoDB shell and strong client server architecture Meteor is a powerful framework that should become popular for developers wishing to build fast realtime web applications.\n\n<!-- more -->\n- <a href=\"https://github.com/taywils/Meteor_Tutorial_Code\">Grab the code on GitHub</a>\n\nTo begin this tutorial the first thing you'll want to do is to install the Meteor framework for NodeJs. \n\nDue to the nature of the framework under going constant updates, I won't write down specifically how to install Meteor because I'll then be forced to update this tutorial whenever the installation procedure changes. \n\nHowever I don't see anything wrong with providing a link to the official Meteor documentation where you'll find the download and installation instructions readily prepared for you. <a href=\"http://docs.meteor.com/#quickstart\">Meteor Installation Guide</a> Once you have Meteor installed on your system you're ready to go. If you're running a Linux variant or Mac OSX then then the installation guide should be sufficient however, Windows users might require extra steps. \n\nWorry not though because if all else fails for getting Meteor running on Windows I suggest you just download and install a free copy of <a href=\"http://www.ubuntu.com/\">Ubuntu Linux</a> and get it running first and then return to this tutorial.\n\nSo now that you have Meteor up and running we're going to start off by downloading the sample application \"Leaderboard\". To do so go to the Meteor official documentation for the leaderboard sample app and follow the instructions <a href=\"http://www.meteor.com/examples/leaderboard\">Meteor Leaderboard</a>. Once you have read through the instructions go ahead and give the sample application a test drive by changing into the directory of the application and entering \"meteor\" into you terminal window. \n\nNext the application should begin most likely on localhost:3000 which you can navigate to from your web browser of choice and view the application running live. \n\nOk so far we have installed the Meteor framework; downloaded the sample app, ran the sample app and verified that we can navigate to the application from our browser and see it in action. \nNow we'll begin modifying the leaderboard so we can better understand the framework and take a gander into its design structure. \n\nFrom your terminal window open the directory where you placed the sample app; you should see three files leaderboard.css, leaderboard.html and leaderboard.js. \n\nBased on the file names you can easily tell that the first file we're going to edit is the leaderboard.html since its the file which connects both the css and javascript. \nGo ahead and open up leaderboard.html with your editor of choice.\n\nThe re-branded sample application i.e fork of the leaderboard app we're going to create is called Boozenet. Boozenet was the name of this application chosen the team I worked with during a previous Hackathon. \n\nBoozenet was an application developed for the sole purpose of allowing friends who drink together on nights out to keep track of not only the beer they drank but the total amount of calories. \nThis application was developed during a mobile Health themed hackathon so the caloric intake was supposed to be the main feature of the app but the fact that it was realtime and ran on mobile as well as web based clients was the most impressive feature after all. \nEnough background, within leaderboard.html find the <head> and update its contents to appear as below.\n```html\n<head>\n  <title>BoozeNet</title>\n  <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script>\n</head>\n```\nIn addition Meteor also has a custom jquery plugin, from the documentation to use the jquery plugin navigate to the directory of this application and run the following command from the terminal \"meteor add jquery\".\n\nSo far we've updated the title of the application and included jquery... not much but its a good start. \nMoving onto the <body> tag you'll notice the unfamiliar (if you've never used an HTML templating framework before) set of double curly braces. \n\nWhat these represent are places where we'll substitute sections of HTML when the content is rendered on the browser once the templating javascript code scans over and updates the sections of the HTML marked with double curly braces when the application is ran. \nDespite the large number of HTML templating engines available (just Google for it and you'll see) the one pre-baked into the Meteor framework is a modern templating engine called Handlebars \n\n<a href=\"http://handlebarsjs.com/\">Click here for the Handlebarsjs Homepage</a>. \n\nIf you want you can read all about how Handlebarsjs does its magic by browsing the its homepage but for now we'll focus on applying it to extend the leaderboard sample application. \n```html\n<body>\n  <div id=\"outer\">\n  <table>\n  <tr>\n  <td><img src=\"beer_vector-200.png\" /></td>\n  <td>{{> game}}</td>\n  </tr>\n  </table>\n  {{> gallery }}\n  <div class=\"none\" />\n  {{> leaderboard}}\n  </div>\n</body>\n```\nFirst we're going to explain how the gallery template works; once that is established hopefully the double curly brace syntax won't appear so alien and you'll start reading it as just another HTML element. What the gallery does for our application is showcase the snapshots (in this contrived example they will be hyperlinks to images on the web) of various beers that users of our app have consumed. All this really means is that the gallery template is a placeholder for images to be dynamically inserted at when the page is rendered from image links stored within out database.\n\n```html\n<template name=\"gallery\">\n<div class=\"gallery\">\n{{#each photos}}\n{{> photo}}\n{{/each}}\n</div>\n</template>\n```\nAs you can probably already guess the <template> tag will substitute itself where the double braced enclosed word \"gallery\" appears earlier in the code. \nIf you thought it was going to be more complicated than that you were wrong, working with the handlebarsjs template engine is quite easy... although there are way more advanced features we won't need to get into to those at this level of a tutorial. \nThe next template we're going to create is the photo template which is to be  placed within the gallery template we just established.\n\n```html\n<template name=\"photo\">\n<img width=\"100\" height=\"100\" src=\"{{url}}\" />\n</template>\n```\n\nFor those of you with eagle eyes you might have caught that the the template argument url differs slightly from the all previous template arguments we have passed thus far.\nWhat the url lack is the leading > just after the second left-curly brace. \nHow the absence of the > affects the code will come into play later when you start writing the javascript code but for now just let it be. \nNext we'll need to template the leaderboard... its similar to the gallery but instead of photos wrapped within a each sub-template we'll have players displayed instead.\n\n```html\n<template name=\"leaderboard\">\n<div class=\"leaderboard\">\n{{#each players}}\n{{> player}}\n{{/each}}\n</div>\n\n{{#if selected_name}}\n<div class=\"details\">\n<div class=\"name\">Whats Up {{selected_name}}</div>\n<input type=\"button\" class=\"uploadImg\" value=\"Add Photo\" />\n<input id=&#039;imgUrlText&#039; type=&#039;text&#039; size=\"80\" name=&#039;imageUrl&#039; class=&#039;imageUrl&#039; />\n</div>\n{{/if}}\n\n{{#unless selected_name}}\n<div class=\"none\">Click a player to select</div>\n{{/unless}}\n</template>\n```\nSince we have just defined where the players template is going to fit onto the leaderboard we now have to create a template for them as well.\n```html\n<template name=\"player\">\n<div class=\"player {{selected}}\">\n<span class=\"name\">{{name}} | {{phone}}</span>\n<span class=\"score\">Calories {{score}}</span>\n</div>\n</template>\n```\nAnother thing you might have noticed is that in the above code the double curly brace appears within the value of the class tag. \nWhich means that you can even inject templates within css; pretty cool if I'd say so. \nMoving on notice how the template references whether or not the player has been selected. \nThat will become important once we get to the javascript part of this application where we'll actually define the events which take place when those conditionals are satisfied. \nLastly all we have to do now is define the game template, which is just where we have our input form for new players.\n```html\n<template name=\"game\">\n<div class=\"newGame\">\n  <input type=\"button\" class=\"newGame\" value=\"New Game\" />\n<br />\n<form class=\"standard_form\">\n  <label>Enter Phone#:</label><input id=&#039;phoneText&#039; type=&#039;text&#039; name=&#039;phoneNumber&#039; class=&#039;phoneNumber&#039; />\n  <label>Enter Name:</label><input id=&#039;nameText&#039; type=&#039;text&#039; name=&#039;newName&#039; class=&#039;newName&#039; />\n  <div class=\"submit_links\">\n  <input type=\"button\" class=\"addDrinker\" value=\"Join\" />\n  </div>\n</form>\n\n</div>\n</template>\n```\nNow we are done with leaderboard.html.\n\nBelow is the CSS for leaderboard.css there isn't much to the CSS so just read through it if you want. \nBesides that you might just want to flat out replace your leaderboard.css instead of making additions to the file like we did for the html page. \n```css\nbody {\n  font-family: 'Helvetica Neue', Helvetica, Arial, san-serif;\n  font-weight: 200;\nmargin: 50px 0;\npadding: 0;\n         -webkit-user-select: none;\n         -khtml-user-select: none;\n         -moz-user-select: none;\n         -o-user-select: none;\n         user-select: none;\n}\n\n#outer {\nwidth: 700px;\nmargin: 0 auto;    \n}\n\n.player {\npadding: 5px;\n}\n\n.player .name {\ndisplay: inline-block;\nwidth: 300px;\n       font-size: 1.75em;\n}\n\n.player .score {\ndisplay: inline-block;\nwidth: 100px;\n       text-align: right;\n       font-size: 2em;\n       font-weight: bold;\ncolor: #777;\n}\n\n.player.selected {\n  background-color: yellow;\ndisplay: inline-block;\n}\n\n.player.selected .score {\ncolor: black;\n}\n\n.details, .none {\n  font-weight: bold;\n  font-size: 2em;\n  border-style: dashed none none none;\n  border-color: #ccc;\n  border-width: 4px;\nmargin: 50px 10px;\npadding: 10px 0px;\n}\n\n.none {\ncolor: #777;\n}\n\ninput {\n  border-color: #006699;\n  border-style: solid;\n  border-width: 1px;\ncolor: #006699;\n}\n\n.standard_form {\nwidth: 400px;\nmargin: 0px;\npadding: 0px;\n}\n\n.standard_form label {\nfloat: left;\nwidth: 190px;\nclear: both;\nheight: 20px;\n}\n\n.standard_form input {\nfloat: right;\nwidth: 200px;\nheight: 20px;\n}\n\n.submit_links {\nclear: both;\n}\n\n.submit_links input {\nfloat: right;\nwidth: auto;\n}\n\n.leaderboard .player {\nwidth: 610px;\nclear: both;\n}\n\n.leaderboard .player .name {\nwidth: 300px;\nfloat: left;\n}\n\n.leaderboard .player .score {\nwidth: 300px;\nfloat: right;\n}\n```\nFor the final addition and where we get to see the true face of Meteor is within the javascript file.\nSo open leaderboard.js and we'll begin by taking apart the javascript section by section to make sure we understand what each part does and where we'll make additions to the sample code provided. \n\n```javascript\nPlayers = new Meteor.Collection(\"players\");\nPhotos = new Meteor.Collection(\"photos\");\n```\n\nThe first part is the addition of the Photos MongoDB Collection in addition to the regular Players Collection.\nThats simple enough but the interesting part we see next is how the each of the templates we coded in the HTML connects somehow to a Collection on the MongoDB.\nOne of the things I appreciate the most about the Meteor framework is how well they managed to make the connections between HTML templates and MongoDB collections crystal clear.\nIn particular pay attention to the conditional on the first line where we check whether the interaction is from the client.\nThis will become important later on where we describe what happens when the interation is on the server side.\nWhich is another cool thing about Meteor that you often don't see in a lot of other frameworks, clean separation between client and server object modeling. \nOften as I've seen before what happens is that the server side code is visibly connected to the database while its up to the developer to string together some sort of process for pushing the data to the client facing side.\n```javascript\nif (Meteor.is_client) {\n  Template.leaderboard.players = function () {\n    return Players.find({}, {sort: {score: -1, name: 1}});\n  };\n\n  Template.gallery.photos = function () {\n    return Photos.find({});\n  };\n\n  Template.leaderboard.selected_name = function () {\n    var player = Players.findOne(Session.get(\"selected_player\"));\n    return player && player.phone && player.name;\n  };\n\n  Template.player.selected = function () {\n    return Session.equals(\"selected_player\", this._id) ? \"selected\" : '';\n  };\n```\nNext fill in the various html events which are triggered based on client input on the page where the app is displayed. \nThe first event we'll code describes what happens when a user clicks the Image Upload button.\n```javascript\n    Template.leaderboard.events = {\n      'click input.uploadImg': function() {\n        var imgUrl = \"\";\n        imgUrl = $('#imgUrlText').val();\n        var imgSrc = imgUrl;\n\n        if( imgUrl != \"\" ) {\n          var player = Players.findOne(Session.get(\"selected_player\"));\n          Players.update(Session.get(\"selected_player\"), {$inc: {score: 343}});\n          Photos.insert({url: imgSrc, phone: player.phone });\n        }\n      }\n    };\n```\nThe code is pretty self explainatory but in short, we pull the image url, we take the selected player, increment her score and then insert the photo into our DB.\nThen we handle what happens when a playername is clicked... it just sets the selected player.\n```javascript\n    Template.player.events = {\n      'click': function () {\n        Session.set(\"selected_player\", this._id);\n      }\n    };\n```\nFinnally for the game template itself we need to handle two events, one in which a new player is added and the second when a new game is created.\n\nThe events for any template as you can tell by now is just a javascript Object so we can separate object member by a comma using a string as the key and function as the value.\n```javascript\n    Template.game.events = {\n      'click input.newGame': function () {\n        Players.remove({});\n        Photos.remove({});\n      },\n\n      'click input.addDrinker': function () {\n        var newScore = 0;\n        var newName = null;\n        var newPhoneNumber = null;\n\n        newPhoneNumber = $('#phoneText').val();\n        newName = $('#nameText').val();\n\n        if( $.trim(newName) != \"\" && $.trim(newPhoneNumber) != \"\" ) {\n          Players.insert({ name: newName, phone: newPhoneNumber, score: newScore });\n        }\n      }\n    };\n```\nFor the final part of the javascript we need to define how the Meteor server gets the data from the DB when the game is started which will then allow the client code to we coded above to behave properly.\n```javascript\n    if (Meteor.is_server) {\n      Meteor.startup(function () {\n          if (Players.find().count() === 0) {\n            var names = [\n            \"Click New Game\",\n            ];\n\n            for (var i = 0; i < names.length; i++) {\n              Players.insert({name: names[i], phone: \"\", score: 0});\n            }\n          }\n\n          if( Photos.find().count() === 0) {\n            var pics = [\n            \"http://upload.wikimedia.org/wikipedia/commons/e/e5/Pale_Ale.jpg\",\n            \"http://upload.wikimedia.org/wikipedia/commons/3/3e/Weizenbier.jpg\",\n            \"http://upload.wikimedia.org/wikipedia/commons/9/99/Glass_of_K%C3%B6stritzer_Schwarzbier.jpg\"\n            ];\n\n            for (var i = 0; i < pics.length; i++) {\n            Photos.insert({url: pics[i], phone: \"\"});\n            }\n          }\n      });\n    }\n```\nThe last thing you need to do in order to get the full code working together is to visit the github page for this code as this tutorial written here is more of in-depth documentation. So just git clone the project navigate to the main directory and run \"meteor\" from the terminal and browse to the site on your machine. \n\nIncluded within the GitHub code are the necessary image files you'll want as well.\n\n","slug":"boozenet","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3gw0008yswvnz2id1fq","layout":"post","photos":[],"link":"","content":"<p>In this tutorial I’ll discuss my experience developing and launching(and yes you’ll see how easy it is to launch with Meteor) a realtime javascript application using the Meteor framework; with its built in MongoDB shell and strong client server architecture Meteor is a powerful framework that should become popular for developers wishing to build fast realtime web applications.</p>\n<a id=\"more\"></a>\n<ul>\n<li><a href=\"https://github.com/taywils/Meteor_Tutorial_Code\" target=\"_blank\" rel=\"external\">Grab the code on GitHub</a></li>\n</ul>\n<p>To begin this tutorial the first thing you’ll want to do is to install the Meteor framework for NodeJs. </p>\n<p>Due to the nature of the framework under going constant updates, I won’t write down specifically how to install Meteor because I’ll then be forced to update this tutorial whenever the installation procedure changes. </p>\n<p>However I don’t see anything wrong with providing a link to the official Meteor documentation where you’ll find the download and installation instructions readily prepared for you. <a href=\"http://docs.meteor.com/#quickstart\" target=\"_blank\" rel=\"external\">Meteor Installation Guide</a> Once you have Meteor installed on your system you’re ready to go. If you’re running a Linux variant or Mac OSX then then the installation guide should be sufficient however, Windows users might require extra steps. </p>\n<p>Worry not though because if all else fails for getting Meteor running on Windows I suggest you just download and install a free copy of <a href=\"http://www.ubuntu.com/\" target=\"_blank\" rel=\"external\">Ubuntu Linux</a> and get it running first and then return to this tutorial.</p>\n<p>So now that you have Meteor up and running we’re going to start off by downloading the sample application “Leaderboard”. To do so go to the Meteor official documentation for the leaderboard sample app and follow the instructions <a href=\"http://www.meteor.com/examples/leaderboard\" target=\"_blank\" rel=\"external\">Meteor Leaderboard</a>. Once you have read through the instructions go ahead and give the sample application a test drive by changing into the directory of the application and entering “meteor” into you terminal window. </p>\n<p>Next the application should begin most likely on localhost:3000 which you can navigate to from your web browser of choice and view the application running live. </p>\n<p>Ok so far we have installed the Meteor framework; downloaded the sample app, ran the sample app and verified that we can navigate to the application from our browser and see it in action.<br>Now we’ll begin modifying the leaderboard so we can better understand the framework and take a gander into its design structure. </p>\n<p>From your terminal window open the directory where you placed the sample app; you should see three files leaderboard.css, leaderboard.html and leaderboard.js. </p>\n<p>Based on the file names you can easily tell that the first file we’re going to edit is the leaderboard.html since its the file which connects both the css and javascript.<br>Go ahead and open up leaderboard.html with your editor of choice.</p>\n<p>The re-branded sample application i.e fork of the leaderboard app we’re going to create is called Boozenet. Boozenet was the name of this application chosen the team I worked with during a previous Hackathon. </p>\n<p>Boozenet was an application developed for the sole purpose of allowing friends who drink together on nights out to keep track of not only the beer they drank but the total amount of calories.<br>This application was developed during a mobile Health themed hackathon so the caloric intake was supposed to be the main feature of the app but the fact that it was realtime and ran on mobile as well as web based clients was the most impressive feature after all.<br>Enough background, within leaderboard.html find the <head> and update its contents to appear as below.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>BoozeNet<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div></pre></td></tr></table></figure></head></p>\n<p>In addition Meteor also has a custom jquery plugin, from the documentation to use the jquery plugin navigate to the directory of this application and run the following command from the terminal “meteor add jquery”.</p>\n<p>So far we’ve updated the title of the application and included jquery… not much but its a good start.<br>Moving onto the <body> tag you’ll notice the unfamiliar (if you’ve never used an HTML templating framework before) set of double curly braces. </body></p>\n<p>What these represent are places where we’ll substitute sections of HTML when the content is rendered on the browser once the templating javascript code scans over and updates the sections of the HTML marked with double curly braces when the application is ran.<br>Despite the large number of HTML templating engines available (just Google for it and you’ll see) the one pre-baked into the Meteor framework is a modern templating engine called Handlebars </p>\n<p><a href=\"http://handlebarsjs.com/\" target=\"_blank\" rel=\"external\">Click here for the Handlebarsjs Homepage</a>. </p>\n<p>If you want you can read all about how Handlebarsjs does its magic by browsing the its homepage but for now we’ll focus on applying it to extend the leaderboard sample application.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"outer\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"beer_vector-200.png\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;&gt; game&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  &#123;&#123;&gt; gallery &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"none\"</span> /&gt;</span></div><div class=\"line\">  &#123;&#123;&gt; leaderboard&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>First we’re going to explain how the gallery template works; once that is established hopefully the double curly brace syntax won’t appear so alien and you’ll start reading it as just another HTML element. What the gallery does for our application is showcase the snapshots (in this contrived example they will be hyperlinks to images on the web) of various beers that users of our app have consumed. All this really means is that the gallery template is a placeholder for images to be dynamically inserted at when the page is rendered from image links stored within out database.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gallery\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"gallery\"</span>&gt;</span></div><div class=\"line\">&#123;&#123;#each photos&#125;&#125;</div><div class=\"line\">&#123;&#123;&gt; photo&#125;&#125;</div><div class=\"line\">&#123;&#123;/each&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>As you can probably already guess the <template> tag will substitute itself where the double braced enclosed word “gallery” appears earlier in the code.<br>If you thought it was going to be more complicated than that you were wrong, working with the handlebarsjs template engine is quite easy… although there are way more advanced features we won’t need to get into to those at this level of a tutorial.<br>The next template we’re going to create is the photo template which is to be  placed within the gallery template we just established.</template></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"photo\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;url&#125;&#125;\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>For those of you with eagle eyes you might have caught that the the template argument url differs slightly from the all previous template arguments we have passed thus far.<br>What the url lack is the leading &gt; just after the second left-curly brace.<br>How the absence of the &gt; affects the code will come into play later when you start writing the javascript code but for now just let it be.<br>Next we’ll need to template the leaderboard… its similar to the gallery but instead of photos wrapped within a each sub-template we’ll have players displayed instead.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"leaderboard\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"leaderboard\"</span>&gt;</span></div><div class=\"line\">&#123;&#123;#each players&#125;&#125;</div><div class=\"line\">&#123;&#123;&gt; player&#125;&#125;</div><div class=\"line\">&#123;&#123;/each&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">&#123;&#123;#if selected_name&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"details\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"name\"</span>&gt;</span>Whats Up &#123;&#123;selected_name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"uploadImg\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Add Photo\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&amp;#039;imgUrlText&amp;#039;</span> <span class=\"attr\">type</span>=<span class=\"string\">&amp;#039;text&amp;#039;</span> <span class=\"attr\">size</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">name</span>=<span class=\"string\">&amp;#039;imageUrl&amp;#039;</span> <span class=\"attr\">class</span>=<span class=\"string\">&amp;#039;imageUrl&amp;#039;</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">&#123;&#123;/if&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123;#unless selected_name&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"none\"</span>&gt;</span>Click a player to select<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">&#123;&#123;/unless&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Since we have just defined where the players template is going to fit onto the leaderboard we now have to create a template for them as well.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"player\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"player &#123;&#123;selected&#125;&#125;\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"name\"</span>&gt;</span>&#123;&#123;name&#125;&#125; | &#123;&#123;phone&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"score\"</span>&gt;</span>Calories &#123;&#123;score&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Another thing you might have noticed is that in the above code the double curly brace appears within the value of the class tag.<br>Which means that you can even inject templates within css; pretty cool if I’d say so.<br>Moving on notice how the template references whether or not the player has been selected.<br>That will become important once we get to the javascript part of this application where we’ll actually define the events which take place when those conditionals are satisfied.<br>Lastly all we have to do now is define the game template, which is just where we have our input form for new players.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"game\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"newGame\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"newGame\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"New Game\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"standard_form\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Enter Phone#:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&amp;#039;phoneText&amp;#039;</span> <span class=\"attr\">type</span>=<span class=\"string\">&amp;#039;text&amp;#039;</span> <span class=\"attr\">name</span>=<span class=\"string\">&amp;#039;phoneNumber&amp;#039;</span> <span class=\"attr\">class</span>=<span class=\"string\">&amp;#039;phoneNumber&amp;#039;</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Enter Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&amp;#039;nameText&amp;#039;</span> <span class=\"attr\">type</span>=<span class=\"string\">&amp;#039;text&amp;#039;</span> <span class=\"attr\">name</span>=<span class=\"string\">&amp;#039;newName&amp;#039;</span> <span class=\"attr\">class</span>=<span class=\"string\">&amp;#039;newName&amp;#039;</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit_links\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"addDrinker\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Join\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Now we are done with leaderboard.html.</p>\n<p>Below is the CSS for leaderboard.css there isn’t much to the CSS so just read through it if you want.<br>Besides that you might just want to flat out replace your leaderboard.css instead of making additions to the file like we did for the html page.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Helvetica Neue'</span>, Helvetica, Arial, san-serif;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">200</span>;</div><div class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">         <span class=\"attribute\">-webkit-user-select</span>: none;</div><div class=\"line\">         <span class=\"attribute\">-khtml-user-select</span>: none;</div><div class=\"line\">         <span class=\"attribute\">-moz-user-select</span>: none;</div><div class=\"line\">         <span class=\"attribute\">-o-user-select</span>: none;</div><div class=\"line\">         <span class=\"attribute\">user-select</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#outer</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">700px</span>;</div><div class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.player</span> &#123;</div><div class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.player</span> <span class=\"selector-class\">.name</span> &#123;</div><div class=\"line\"><span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">       <span class=\"attribute\">font-size</span>: <span class=\"number\">1.75em</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.player</span> <span class=\"selector-class\">.score</span> &#123;</div><div class=\"line\"><span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">       <span class=\"attribute\">text-align</span>: right;</div><div class=\"line\">       <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</div><div class=\"line\">       <span class=\"attribute\">font-weight</span>: bold;</div><div class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.player</span><span class=\"selector-class\">.selected</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: yellow;</div><div class=\"line\"><span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.player</span><span class=\"selector-class\">.selected</span> <span class=\"selector-class\">.score</span> &#123;</div><div class=\"line\"><span class=\"attribute\">color</span>: black;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.details</span>, <span class=\"selector-class\">.none</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-style</span>: dashed none none none;</div><div class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">4px</span>;</div><div class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> <span class=\"number\">10px</span>;</div><div class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.none</span> &#123;</div><div class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#006699</span>;</div><div class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</div><div class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</div><div class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#006699</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.standard_form</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</div><div class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">0px</span>;</div><div class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.standard_form</span> <span class=\"selector-tag\">label</span> &#123;</div><div class=\"line\"><span class=\"attribute\">float</span>: left;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">190px</span>;</div><div class=\"line\"><span class=\"attribute\">clear</span>: both;</div><div class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.standard_form</span> <span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\"><span class=\"attribute\">float</span>: right;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.submit_links</span> &#123;</div><div class=\"line\"><span class=\"attribute\">clear</span>: both;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.submit_links</span> <span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\"><span class=\"attribute\">float</span>: right;</div><div class=\"line\"><span class=\"attribute\">width</span>: auto;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.leaderboard</span> <span class=\"selector-class\">.player</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">610px</span>;</div><div class=\"line\"><span class=\"attribute\">clear</span>: both;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.leaderboard</span> <span class=\"selector-class\">.player</span> <span class=\"selector-class\">.name</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\"><span class=\"attribute\">float</span>: left;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.leaderboard</span> <span class=\"selector-class\">.player</span> <span class=\"selector-class\">.score</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\"><span class=\"attribute\">float</span>: right;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>For the final addition and where we get to see the true face of Meteor is within the javascript file.<br>So open leaderboard.js and we’ll begin by taking apart the javascript section by section to make sure we understand what each part does and where we’ll make additions to the sample code provided. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Players = <span class=\"keyword\">new</span> Meteor.Collection(<span class=\"string\">\"players\"</span>);</div><div class=\"line\">Photos = <span class=\"keyword\">new</span> Meteor.Collection(<span class=\"string\">\"photos\"</span>);</div></pre></td></tr></table></figure>\n<p>The first part is the addition of the Photos MongoDB Collection in addition to the regular Players Collection.<br>Thats simple enough but the interesting part we see next is how the each of the templates we coded in the HTML connects somehow to a Collection on the MongoDB.<br>One of the things I appreciate the most about the Meteor framework is how well they managed to make the connections between HTML templates and MongoDB collections crystal clear.<br>In particular pay attention to the conditional on the first line where we check whether the interaction is from the client.<br>This will become important later on where we describe what happens when the interation is on the server side.<br>Which is another cool thing about Meteor that you often don’t see in a lot of other frameworks, clean separation between client and server object modeling.<br>Often as I’ve seen before what happens is that the server side code is visibly connected to the database while its up to the developer to string together some sort of process for pushing the data to the client facing side.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Meteor.is_client) &#123;</div><div class=\"line\">  Template.leaderboard.players = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Players.find(&#123;&#125;, &#123;<span class=\"attr\">sort</span>: &#123;<span class=\"attr\">score</span>: <span class=\"number\">-1</span>, <span class=\"attr\">name</span>: <span class=\"number\">1</span>&#125;&#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  Template.gallery.photos = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Photos.find(&#123;&#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  Template.leaderboard.selected_name = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> player = Players.findOne(Session.get(<span class=\"string\">\"selected_player\"</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> player &amp;&amp; player.phone &amp;&amp; player.name;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  Template.player.selected = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Session.equals(<span class=\"string\">\"selected_player\"</span>, <span class=\"keyword\">this</span>._id) ? <span class=\"string\">\"selected\"</span> : <span class=\"string\">''</span>;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure></p>\n<p>Next fill in the various html events which are triggered based on client input on the page where the app is displayed.<br>The first event we’ll code describes what happens when a user clicks the Image Upload button.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Template.leaderboard.events = &#123;</div><div class=\"line\">  <span class=\"string\">'click input.uploadImg'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> imgUrl = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    imgUrl = $(<span class=\"string\">'#imgUrlText'</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> imgSrc = imgUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( imgUrl != <span class=\"string\">\"\"</span> ) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> player = Players.findOne(Session.get(<span class=\"string\">\"selected_player\"</span>));</div><div class=\"line\">      Players.update(Session.get(<span class=\"string\">\"selected_player\"</span>), &#123;<span class=\"attr\">$inc</span>: &#123;<span class=\"attr\">score</span>: <span class=\"number\">343</span>&#125;&#125;);</div><div class=\"line\">      Photos.insert(&#123;<span class=\"attr\">url</span>: imgSrc, <span class=\"attr\">phone</span>: player.phone &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>The code is pretty self explainatory but in short, we pull the image url, we take the selected player, increment her score and then insert the photo into our DB.<br>Then we handle what happens when a playername is clicked… it just sets the selected player.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Template.player.events = &#123;</div><div class=\"line\">  <span class=\"string\">'click'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Session.set(<span class=\"string\">\"selected_player\"</span>, <span class=\"keyword\">this</span>._id);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Finnally for the game template itself we need to handle two events, one in which a new player is added and the second when a new game is created.</p>\n<p>The events for any template as you can tell by now is just a javascript Object so we can separate object member by a comma using a string as the key and function as the value.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Template.game.events = &#123;</div><div class=\"line\">  <span class=\"string\">'click input.newGame'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Players.remove(&#123;&#125;);</div><div class=\"line\">    Photos.remove(&#123;&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"string\">'click input.addDrinker'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> newScore = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> newName = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> newPhoneNumber = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    newPhoneNumber = $(<span class=\"string\">'#phoneText'</span>).val();</div><div class=\"line\">    newName = $(<span class=\"string\">'#nameText'</span>).val();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( $.trim(newName) != <span class=\"string\">\"\"</span> &amp;&amp; $.trim(newPhoneNumber) != <span class=\"string\">\"\"</span> ) &#123;</div><div class=\"line\">      Players.insert(&#123; <span class=\"attr\">name</span>: newName, <span class=\"attr\">phone</span>: newPhoneNumber, <span class=\"attr\">score</span>: newScore &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>For the final part of the javascript we need to define how the Meteor server gets the data from the DB when the game is started which will then allow the client code to we coded above to behave properly.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Meteor.is_server) &#123;</div><div class=\"line\">  Meteor.startup(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (Players.find().count() === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> names = [</div><div class=\"line\">        <span class=\"string\">\"Click New Game\"</span>,</div><div class=\"line\">        ];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; names.length; i++) &#123;</div><div class=\"line\">          Players.insert(&#123;<span class=\"attr\">name</span>: names[i], <span class=\"attr\">phone</span>: <span class=\"string\">\"\"</span>, <span class=\"attr\">score</span>: <span class=\"number\">0</span>&#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( Photos.find().count() === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> pics = [</div><div class=\"line\">        <span class=\"string\">\"http://upload.wikimedia.org/wikipedia/commons/e/e5/Pale_Ale.jpg\"</span>,</div><div class=\"line\">        <span class=\"string\">\"http://upload.wikimedia.org/wikipedia/commons/3/3e/Weizenbier.jpg\"</span>,</div><div class=\"line\">        <span class=\"string\">\"http://upload.wikimedia.org/wikipedia/commons/9/99/Glass_of_K%C3%B6stritzer_Schwarzbier.jpg\"</span></div><div class=\"line\">        ];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; pics.length; i++) &#123;</div><div class=\"line\">        Photos.insert(&#123;<span class=\"attr\">url</span>: pics[i], <span class=\"attr\">phone</span>: <span class=\"string\">\"\"</span>&#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The last thing you need to do in order to get the full code working together is to visit the github page for this code as this tutorial written here is more of in-depth documentation. So just git clone the project navigate to the main directory and run “meteor” from the terminal and browse to the site on your machine. </p>\n<p>Included within the GitHub code are the necessary image files you’ll want as well.</p>\n","site":{"data":{}},"excerpt":"<p>In this tutorial I’ll discuss my experience developing and launching(and yes you’ll see how easy it is to launch with Meteor) a realtime javascript application using the Meteor framework; with its built in MongoDB shell and strong client server architecture Meteor is a powerful framework that should become popular for developers wishing to build fast realtime web applications.</p>","more":"<ul>\n<li><a href=\"https://github.com/taywils/Meteor_Tutorial_Code\">Grab the code on GitHub</a></li>\n</ul>\n<p>To begin this tutorial the first thing you’ll want to do is to install the Meteor framework for NodeJs. </p>\n<p>Due to the nature of the framework under going constant updates, I won’t write down specifically how to install Meteor because I’ll then be forced to update this tutorial whenever the installation procedure changes. </p>\n<p>However I don’t see anything wrong with providing a link to the official Meteor documentation where you’ll find the download and installation instructions readily prepared for you. <a href=\"http://docs.meteor.com/#quickstart\">Meteor Installation Guide</a> Once you have Meteor installed on your system you’re ready to go. If you’re running a Linux variant or Mac OSX then then the installation guide should be sufficient however, Windows users might require extra steps. </p>\n<p>Worry not though because if all else fails for getting Meteor running on Windows I suggest you just download and install a free copy of <a href=\"http://www.ubuntu.com/\">Ubuntu Linux</a> and get it running first and then return to this tutorial.</p>\n<p>So now that you have Meteor up and running we’re going to start off by downloading the sample application “Leaderboard”. To do so go to the Meteor official documentation for the leaderboard sample app and follow the instructions <a href=\"http://www.meteor.com/examples/leaderboard\">Meteor Leaderboard</a>. Once you have read through the instructions go ahead and give the sample application a test drive by changing into the directory of the application and entering “meteor” into you terminal window. </p>\n<p>Next the application should begin most likely on localhost:3000 which you can navigate to from your web browser of choice and view the application running live. </p>\n<p>Ok so far we have installed the Meteor framework; downloaded the sample app, ran the sample app and verified that we can navigate to the application from our browser and see it in action.<br>Now we’ll begin modifying the leaderboard so we can better understand the framework and take a gander into its design structure. </p>\n<p>From your terminal window open the directory where you placed the sample app; you should see three files leaderboard.css, leaderboard.html and leaderboard.js. </p>\n<p>Based on the file names you can easily tell that the first file we’re going to edit is the leaderboard.html since its the file which connects both the css and javascript.<br>Go ahead and open up leaderboard.html with your editor of choice.</p>\n<p>The re-branded sample application i.e fork of the leaderboard app we’re going to create is called Boozenet. Boozenet was the name of this application chosen the team I worked with during a previous Hackathon. </p>\n<p>Boozenet was an application developed for the sole purpose of allowing friends who drink together on nights out to keep track of not only the beer they drank but the total amount of calories.<br>This application was developed during a mobile Health themed hackathon so the caloric intake was supposed to be the main feature of the app but the fact that it was realtime and ran on mobile as well as web based clients was the most impressive feature after all.<br>Enough background, within leaderboard.html find the <head> and update its contents to appear as below.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>BoozeNet<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>In addition Meteor also has a custom jquery plugin, from the documentation to use the jquery plugin navigate to the directory of this application and run the following command from the terminal “meteor add jquery”.</p>\n<p>So far we’ve updated the title of the application and included jquery… not much but its a good start.<br>Moving onto the <body> tag you’ll notice the unfamiliar (if you’ve never used an HTML templating framework before) set of double curly braces. </p>\n<p>What these represent are places where we’ll substitute sections of HTML when the content is rendered on the browser once the templating javascript code scans over and updates the sections of the HTML marked with double curly braces when the application is ran.<br>Despite the large number of HTML templating engines available (just Google for it and you’ll see) the one pre-baked into the Meteor framework is a modern templating engine called Handlebars </p>\n<p><a href=\"http://handlebarsjs.com/\">Click here for the Handlebarsjs Homepage</a>. </p>\n<p>If you want you can read all about how Handlebarsjs does its magic by browsing the its homepage but for now we’ll focus on applying it to extend the leaderboard sample application.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"outer\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"beer_vector-200.png\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;&gt; game&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  &#123;&#123;&gt; gallery &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"none\"</span> /&gt;</span></div><div class=\"line\">  &#123;&#123;&gt; leaderboard&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>First we’re going to explain how the gallery template works; once that is established hopefully the double curly brace syntax won’t appear so alien and you’ll start reading it as just another HTML element. What the gallery does for our application is showcase the snapshots (in this contrived example they will be hyperlinks to images on the web) of various beers that users of our app have consumed. All this really means is that the gallery template is a placeholder for images to be dynamically inserted at when the page is rendered from image links stored within out database.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gallery\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"gallery\"</span>&gt;</span></div><div class=\"line\">&#123;&#123;#each photos&#125;&#125;</div><div class=\"line\">&#123;&#123;&gt; photo&#125;&#125;</div><div class=\"line\">&#123;&#123;/each&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>As you can probably already guess the <template> tag will substitute itself where the double braced enclosed word “gallery” appears earlier in the code.<br>If you thought it was going to be more complicated than that you were wrong, working with the handlebarsjs template engine is quite easy… although there are way more advanced features we won’t need to get into to those at this level of a tutorial.<br>The next template we’re going to create is the photo template which is to be  placed within the gallery template we just established.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"photo\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;url&#125;&#125;\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>For those of you with eagle eyes you might have caught that the the template argument url differs slightly from the all previous template arguments we have passed thus far.<br>What the url lack is the leading &gt; just after the second left-curly brace.<br>How the absence of the &gt; affects the code will come into play later when you start writing the javascript code but for now just let it be.<br>Next we’ll need to template the leaderboard… its similar to the gallery but instead of photos wrapped within a each sub-template we’ll have players displayed instead.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"leaderboard\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"leaderboard\"</span>&gt;</span></div><div class=\"line\">&#123;&#123;#each players&#125;&#125;</div><div class=\"line\">&#123;&#123;&gt; player&#125;&#125;</div><div class=\"line\">&#123;&#123;/each&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">&#123;&#123;#if selected_name&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"details\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"name\"</span>&gt;</span>Whats Up &#123;&#123;selected_name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"uploadImg\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Add Photo\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&amp;#039;imgUrlText&amp;#039;</span> <span class=\"attr\">type</span>=<span class=\"string\">&amp;#039;text&amp;#039;</span> <span class=\"attr\">size</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">name</span>=<span class=\"string\">&amp;#039;imageUrl&amp;#039;</span> <span class=\"attr\">class</span>=<span class=\"string\">&amp;#039;imageUrl&amp;#039;</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">&#123;&#123;/if&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123;#unless selected_name&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"none\"</span>&gt;</span>Click a player to select<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">&#123;&#123;/unless&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Since we have just defined where the players template is going to fit onto the leaderboard we now have to create a template for them as well.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"player\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"player &#123;&#123;selected&#125;&#125;\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"name\"</span>&gt;</span>&#123;&#123;name&#125;&#125; | &#123;&#123;phone&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"score\"</span>&gt;</span>Calories &#123;&#123;score&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Another thing you might have noticed is that in the above code the double curly brace appears within the value of the class tag.<br>Which means that you can even inject templates within css; pretty cool if I’d say so.<br>Moving on notice how the template references whether or not the player has been selected.<br>That will become important once we get to the javascript part of this application where we’ll actually define the events which take place when those conditionals are satisfied.<br>Lastly all we have to do now is define the game template, which is just where we have our input form for new players.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">name</span>=<span class=\"string\">\"game\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"newGame\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"newGame\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"New Game\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"standard_form\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Enter Phone#:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&amp;#039;phoneText&amp;#039;</span> <span class=\"attr\">type</span>=<span class=\"string\">&amp;#039;text&amp;#039;</span> <span class=\"attr\">name</span>=<span class=\"string\">&amp;#039;phoneNumber&amp;#039;</span> <span class=\"attr\">class</span>=<span class=\"string\">&amp;#039;phoneNumber&amp;#039;</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Enter Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&amp;#039;nameText&amp;#039;</span> <span class=\"attr\">type</span>=<span class=\"string\">&amp;#039;text&amp;#039;</span> <span class=\"attr\">name</span>=<span class=\"string\">&amp;#039;newName&amp;#039;</span> <span class=\"attr\">class</span>=<span class=\"string\">&amp;#039;newName&amp;#039;</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit_links\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"addDrinker\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Join\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Now we are done with leaderboard.html.</p>\n<p>Below is the CSS for leaderboard.css there isn’t much to the CSS so just read through it if you want.<br>Besides that you might just want to flat out replace your leaderboard.css instead of making additions to the file like we did for the html page.<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Helvetica Neue'</span>, Helvetica, Arial, san-serif;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">200</span>;</div><div class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">         <span class=\"attribute\">-webkit-user-select</span>: none;</div><div class=\"line\">         <span class=\"attribute\">-khtml-user-select</span>: none;</div><div class=\"line\">         <span class=\"attribute\">-moz-user-select</span>: none;</div><div class=\"line\">         <span class=\"attribute\">-o-user-select</span>: none;</div><div class=\"line\">         <span class=\"attribute\">user-select</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#outer</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">700px</span>;</div><div class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.player</span> &#123;</div><div class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.player</span> <span class=\"selector-class\">.name</span> &#123;</div><div class=\"line\"><span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">       <span class=\"attribute\">font-size</span>: <span class=\"number\">1.75em</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.player</span> <span class=\"selector-class\">.score</span> &#123;</div><div class=\"line\"><span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">       <span class=\"attribute\">text-align</span>: right;</div><div class=\"line\">       <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</div><div class=\"line\">       <span class=\"attribute\">font-weight</span>: bold;</div><div class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.player</span><span class=\"selector-class\">.selected</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: yellow;</div><div class=\"line\"><span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.player</span><span class=\"selector-class\">.selected</span> <span class=\"selector-class\">.score</span> &#123;</div><div class=\"line\"><span class=\"attribute\">color</span>: black;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.details</span>, <span class=\"selector-class\">.none</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-style</span>: dashed none none none;</div><div class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">4px</span>;</div><div class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> <span class=\"number\">10px</span>;</div><div class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.none</span> &#123;</div><div class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#777</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#006699</span>;</div><div class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</div><div class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</div><div class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#006699</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.standard_form</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</div><div class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">0px</span>;</div><div class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.standard_form</span> <span class=\"selector-tag\">label</span> &#123;</div><div class=\"line\"><span class=\"attribute\">float</span>: left;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">190px</span>;</div><div class=\"line\"><span class=\"attribute\">clear</span>: both;</div><div class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.standard_form</span> <span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\"><span class=\"attribute\">float</span>: right;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.submit_links</span> &#123;</div><div class=\"line\"><span class=\"attribute\">clear</span>: both;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.submit_links</span> <span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\"><span class=\"attribute\">float</span>: right;</div><div class=\"line\"><span class=\"attribute\">width</span>: auto;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.leaderboard</span> <span class=\"selector-class\">.player</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">610px</span>;</div><div class=\"line\"><span class=\"attribute\">clear</span>: both;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.leaderboard</span> <span class=\"selector-class\">.player</span> <span class=\"selector-class\">.name</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\"><span class=\"attribute\">float</span>: left;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.leaderboard</span> <span class=\"selector-class\">.player</span> <span class=\"selector-class\">.score</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\"><span class=\"attribute\">float</span>: right;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>For the final addition and where we get to see the true face of Meteor is within the javascript file.<br>So open leaderboard.js and we’ll begin by taking apart the javascript section by section to make sure we understand what each part does and where we’ll make additions to the sample code provided. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Players = <span class=\"keyword\">new</span> Meteor.Collection(<span class=\"string\">\"players\"</span>);</div><div class=\"line\">Photos = <span class=\"keyword\">new</span> Meteor.Collection(<span class=\"string\">\"photos\"</span>);</div></pre></td></tr></table></figure>\n<p>The first part is the addition of the Photos MongoDB Collection in addition to the regular Players Collection.<br>Thats simple enough but the interesting part we see next is how the each of the templates we coded in the HTML connects somehow to a Collection on the MongoDB.<br>One of the things I appreciate the most about the Meteor framework is how well they managed to make the connections between HTML templates and MongoDB collections crystal clear.<br>In particular pay attention to the conditional on the first line where we check whether the interaction is from the client.<br>This will become important later on where we describe what happens when the interation is on the server side.<br>Which is another cool thing about Meteor that you often don’t see in a lot of other frameworks, clean separation between client and server object modeling.<br>Often as I’ve seen before what happens is that the server side code is visibly connected to the database while its up to the developer to string together some sort of process for pushing the data to the client facing side.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Meteor.is_client) &#123;</div><div class=\"line\">  Template.leaderboard.players = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Players.find(&#123;&#125;, &#123;<span class=\"attr\">sort</span>: &#123;<span class=\"attr\">score</span>: <span class=\"number\">-1</span>, <span class=\"attr\">name</span>: <span class=\"number\">1</span>&#125;&#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  Template.gallery.photos = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Photos.find(&#123;&#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  Template.leaderboard.selected_name = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> player = Players.findOne(Session.get(<span class=\"string\">\"selected_player\"</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> player &amp;&amp; player.phone &amp;&amp; player.name;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  Template.player.selected = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Session.equals(<span class=\"string\">\"selected_player\"</span>, <span class=\"keyword\">this</span>._id) ? <span class=\"string\">\"selected\"</span> : <span class=\"string\">''</span>;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure></p>\n<p>Next fill in the various html events which are triggered based on client input on the page where the app is displayed.<br>The first event we’ll code describes what happens when a user clicks the Image Upload button.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Template.leaderboard.events = &#123;</div><div class=\"line\">  <span class=\"string\">'click input.uploadImg'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> imgUrl = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    imgUrl = $(<span class=\"string\">'#imgUrlText'</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> imgSrc = imgUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( imgUrl != <span class=\"string\">\"\"</span> ) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> player = Players.findOne(Session.get(<span class=\"string\">\"selected_player\"</span>));</div><div class=\"line\">      Players.update(Session.get(<span class=\"string\">\"selected_player\"</span>), &#123;<span class=\"attr\">$inc</span>: &#123;<span class=\"attr\">score</span>: <span class=\"number\">343</span>&#125;&#125;);</div><div class=\"line\">      Photos.insert(&#123;<span class=\"attr\">url</span>: imgSrc, <span class=\"attr\">phone</span>: player.phone &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>The code is pretty self explainatory but in short, we pull the image url, we take the selected player, increment her score and then insert the photo into our DB.<br>Then we handle what happens when a playername is clicked… it just sets the selected player.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Template.player.events = &#123;</div><div class=\"line\">  <span class=\"string\">'click'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Session.set(<span class=\"string\">\"selected_player\"</span>, <span class=\"keyword\">this</span>._id);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Finnally for the game template itself we need to handle two events, one in which a new player is added and the second when a new game is created.</p>\n<p>The events for any template as you can tell by now is just a javascript Object so we can separate object member by a comma using a string as the key and function as the value.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Template.game.events = &#123;</div><div class=\"line\">  <span class=\"string\">'click input.newGame'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Players.remove(&#123;&#125;);</div><div class=\"line\">    Photos.remove(&#123;&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"string\">'click input.addDrinker'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> newScore = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> newName = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> newPhoneNumber = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    newPhoneNumber = $(<span class=\"string\">'#phoneText'</span>).val();</div><div class=\"line\">    newName = $(<span class=\"string\">'#nameText'</span>).val();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( $.trim(newName) != <span class=\"string\">\"\"</span> &amp;&amp; $.trim(newPhoneNumber) != <span class=\"string\">\"\"</span> ) &#123;</div><div class=\"line\">      Players.insert(&#123; <span class=\"attr\">name</span>: newName, <span class=\"attr\">phone</span>: newPhoneNumber, <span class=\"attr\">score</span>: newScore &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>For the final part of the javascript we need to define how the Meteor server gets the data from the DB when the game is started which will then allow the client code to we coded above to behave properly.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Meteor.is_server) &#123;</div><div class=\"line\">  Meteor.startup(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (Players.find().count() === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> names = [</div><div class=\"line\">        <span class=\"string\">\"Click New Game\"</span>,</div><div class=\"line\">        ];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; names.length; i++) &#123;</div><div class=\"line\">          Players.insert(&#123;<span class=\"attr\">name</span>: names[i], <span class=\"attr\">phone</span>: <span class=\"string\">\"\"</span>, <span class=\"attr\">score</span>: <span class=\"number\">0</span>&#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( Photos.find().count() === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> pics = [</div><div class=\"line\">        <span class=\"string\">\"http://upload.wikimedia.org/wikipedia/commons/e/e5/Pale_Ale.jpg\"</span>,</div><div class=\"line\">        <span class=\"string\">\"http://upload.wikimedia.org/wikipedia/commons/3/3e/Weizenbier.jpg\"</span>,</div><div class=\"line\">        <span class=\"string\">\"http://upload.wikimedia.org/wikipedia/commons/9/99/Glass_of_K%C3%B6stritzer_Schwarzbier.jpg\"</span></div><div class=\"line\">        ];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; pics.length; i++) &#123;</div><div class=\"line\">        Photos.insert(&#123;<span class=\"attr\">url</span>: pics[i], <span class=\"attr\">phone</span>: <span class=\"string\">\"\"</span>&#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The last thing you need to do in order to get the full code working together is to visit the github page for this code as this tutorial written here is more of in-depth documentation. So just git clone the project navigate to the main directory and run “meteor” from the terminal and browse to the site on your machine. </p>\n<p>Included within the GitHub code are the necessary image files you’ll want as well.</p>"},{"title":"Imagescraper Is A Sinatra.rb App That Dumps Images From a Webpage","date":"2011-09-04T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/imagescrapeversion1.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/imagescrapeversion1.JPG","comments":0,"_content":"Learn about imagescraper, its a small test project I wrote to familiarize myself with the Sinatra microframework. In short you pass it a url and it returns all images from the page.\n\n<!-- more -->\nImagescraper is a small project I built using Ruby together with the Sinatra microframework. If you aren't familiar with Sinatra you can browse the project's main website at <a href=\"http://www.sinatrarb.com/\">http://www.sinatrarb.com/</a>. In a nutshell Sinatra is light weight framework for Ruby that lets you rapidly build web applications using as few lines of code as possible.\n\nTo install Sinatra as a Ruby gem, just type\n\n```\n$ gem install sinatra\n```\n\ninto your terminal window assuming that you have Ruby installed on your machine and you can begin bashing out HTTP GET and POST request on your local machine using Ruby and then just run the app using the Sinatra gem. For a quick overview of Sinatra see the documentation <a href=\"http://www.sinatrarb.com/documentation\">http://www.sinatrarb.com/documentation</a>.\n\nAnyways, Imagescraper is a small Sinatra app that fetches and displays all images from a given url. I had planned to to do much more with the scraper such as let a user upload a text file with a list of urls and have it download the files to your machine but the project began to lose focus and the unnecessary feature creep was beginning to bog me down. However, the source code is available on my GitHub account and you can play with Imagescraper at the link below(the app is being hosted on Heroku)\n\nBrowse the source code:\n\n<a href=\"https://github.com/taywils/_Imagescraper_\">https://github.com/taywils/_Imagescraper_</a>\n\nRun the app on Heroku:\n\n<a href=\"http://imagescraper.heroku.com/\">http://imagescraper.heroku.com/</a>\n","source":"_posts/imagescrapeversion1.md","raw":"---\ntitle: Imagescraper Is A Sinatra.rb App That Dumps Images From a Webpage\ndate: 2011-09-04\ncategories: []\ntags: [javascript, ruby]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/imagescrapeversion1.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/imagescrapeversion1.JPG\ncomments: false\n---\nLearn about imagescraper, its a small test project I wrote to familiarize myself with the Sinatra microframework. In short you pass it a url and it returns all images from the page.\n\n<!-- more -->\nImagescraper is a small project I built using Ruby together with the Sinatra microframework. If you aren't familiar with Sinatra you can browse the project's main website at <a href=\"http://www.sinatrarb.com/\">http://www.sinatrarb.com/</a>. In a nutshell Sinatra is light weight framework for Ruby that lets you rapidly build web applications using as few lines of code as possible.\n\nTo install Sinatra as a Ruby gem, just type\n\n```\n$ gem install sinatra\n```\n\ninto your terminal window assuming that you have Ruby installed on your machine and you can begin bashing out HTTP GET and POST request on your local machine using Ruby and then just run the app using the Sinatra gem. For a quick overview of Sinatra see the documentation <a href=\"http://www.sinatrarb.com/documentation\">http://www.sinatrarb.com/documentation</a>.\n\nAnyways, Imagescraper is a small Sinatra app that fetches and displays all images from a given url. I had planned to to do much more with the scraper such as let a user upload a text file with a list of urls and have it download the files to your machine but the project began to lose focus and the unnecessary feature creep was beginning to bog me down. However, the source code is available on my GitHub account and you can play with Imagescraper at the link below(the app is being hosted on Heroku)\n\nBrowse the source code:\n\n<a href=\"https://github.com/taywils/_Imagescraper_\">https://github.com/taywils/_Imagescraper_</a>\n\nRun the app on Heroku:\n\n<a href=\"http://imagescraper.heroku.com/\">http://imagescraper.heroku.com/</a>\n","slug":"imagescrapeversion1","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3h3000byswvkq01yyrg","layout":"post","photos":[],"link":"","content":"<p>Learn about imagescraper, its a small test project I wrote to familiarize myself with the Sinatra microframework. In short you pass it a url and it returns all images from the page.</p>\n<a id=\"more\"></a>\n<p>Imagescraper is a small project I built using Ruby together with the Sinatra microframework. If you aren’t familiar with Sinatra you can browse the project’s main website at <a href=\"http://www.sinatrarb.com/\" target=\"_blank\" rel=\"external\">http://www.sinatrarb.com/</a>. In a nutshell Sinatra is light weight framework for Ruby that lets you rapidly build web applications using as few lines of code as possible.</p>\n<p>To install Sinatra as a Ruby gem, just type</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gem install sinatra</div></pre></td></tr></table></figure>\n<p>into your terminal window assuming that you have Ruby installed on your machine and you can begin bashing out HTTP GET and POST request on your local machine using Ruby and then just run the app using the Sinatra gem. For a quick overview of Sinatra see the documentation <a href=\"http://www.sinatrarb.com/documentation\" target=\"_blank\" rel=\"external\">http://www.sinatrarb.com/documentation</a>.</p>\n<p>Anyways, Imagescraper is a small Sinatra app that fetches and displays all images from a given url. I had planned to to do much more with the scraper such as let a user upload a text file with a list of urls and have it download the files to your machine but the project began to lose focus and the unnecessary feature creep was beginning to bog me down. However, the source code is available on my GitHub account and you can play with Imagescraper at the link below(the app is being hosted on Heroku)</p>\n<p>Browse the source code:</p>\n<p><a href=\"https://github.com/taywils/_Imagescraper_\" target=\"_blank\" rel=\"external\">https://github.com/taywils/<em>Imagescraper</em></a></p>\n<p>Run the app on Heroku:</p>\n<p><a href=\"http://imagescraper.heroku.com/\" target=\"_blank\" rel=\"external\">http://imagescraper.heroku.com/</a></p>\n","site":{"data":{}},"excerpt":"<p>Learn about imagescraper, its a small test project I wrote to familiarize myself with the Sinatra microframework. In short you pass it a url and it returns all images from the page.</p>","more":"<p>Imagescraper is a small project I built using Ruby together with the Sinatra microframework. If you aren’t familiar with Sinatra you can browse the project’s main website at <a href=\"http://www.sinatrarb.com/\">http://www.sinatrarb.com/</a>. In a nutshell Sinatra is light weight framework for Ruby that lets you rapidly build web applications using as few lines of code as possible.</p>\n<p>To install Sinatra as a Ruby gem, just type</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gem install sinatra</div></pre></td></tr></table></figure>\n<p>into your terminal window assuming that you have Ruby installed on your machine and you can begin bashing out HTTP GET and POST request on your local machine using Ruby and then just run the app using the Sinatra gem. For a quick overview of Sinatra see the documentation <a href=\"http://www.sinatrarb.com/documentation\">http://www.sinatrarb.com/documentation</a>.</p>\n<p>Anyways, Imagescraper is a small Sinatra app that fetches and displays all images from a given url. I had planned to to do much more with the scraper such as let a user upload a text file with a list of urls and have it download the files to your machine but the project began to lose focus and the unnecessary feature creep was beginning to bog me down. However, the source code is available on my GitHub account and you can play with Imagescraper at the link below(the app is being hosted on Heroku)</p>\n<p>Browse the source code:</p>\n<p><a href=\"https://github.com/taywils/_Imagescraper_\">https://github.com/taywils/<em>Imagescraper</em></a></p>\n<p>Run the app on Heroku:</p>\n<p><a href=\"http://imagescraper.heroku.com/\">http://imagescraper.heroku.com/</a></p>"},{"title":"Build An Application Launcher For Android","date":"2011-07-05T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/buildanapplicationlauncherwithandroid.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/buildanapplicationlauncherwithandroid.JPG","comments":0,"_content":"In this tutorial we'll create an interesting android application which has the ability to launch any other app you have installed on your phone. If you've ever wanted to know how Android applications perform cross app communication you should read on (this tutorial assumes familiarity with the Android API).\n\n<!-- more -->\nTo start off create a new Android application project within Eclipse. Whenever I develop Android apps I usually start with the layout of the application and add functionality via Java classes later. Since our app will display the users installed apps within a ListView widget we have to first declare a layout to hold the ListView itself.\n\nCreate a new xml layout for the ListView by right clicking the res/layout folder and adding a new android xml file. Title it \"applauncher.xml\" and then add the code below to it.\n\n```xml\n<LinearLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:id=\"@+id/applauncher_linearlayout\"\n  android:layout_width=\"fill_parent\"\n  android:layout_height=\"fill_parent\"\n  android:orientation=\"vertical\">\n\n  <ListView\n    android:id=\"@android:id/list\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"/>\n\n  <TextView\n    android:id=\"@android:id/empty\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    android:text=\"List PlaceHolder\"/>\n\n</LinearLayout>\n```\nWhen using ListViews we can setup the overall look of each row by creating an xml layout with a skeleton of the widgets that we want to display in each row of our ListView. Think of the row layout as a \"row template\". If you look at the screenshots of the app you can tell that we only need two widgets within our row layout, an ImageView to hold the apps icon and a TextView to display the apps package name.\n\nCreate a new xml layout for the ListView rows by right clicking the res/layout folder and adding a new android xml file. Title it \"applauncherrow.xml\" and add the code below.\n```xml\n<LinearLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:id=\"@+id/applauncherrow_imagelinearlayout\"\n  android:layout_width=\"fill_parent\"\n  android:layout_height=\"?android:attr/listPreferredItemHeight\"\n  android:padding=\"6dip\">\n\n<ImageView\n  android:id=\"@+id/applauncherrow_icon\"\n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"fill_parent\"\n  android:layout_marginRight=\"6dip\"/>\n\n  <LinearLayout\n    android:id=\"@+id/applauncherrow_namelinearlayout\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"0dip\"\n    android:layout_weight=\"1\"\n    android:layout_height=\"fill_parent\">\n\n  <TextView\n    android:id=\"@+id/applauncherrow_appname\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"0dip\"\n    android:layout_weight=\"1\"\n    android:gravity=\"center_vertical\"/>\n\n  </LinearLayout>\n\n</LinearLayout>\n```\nNext we're going to setup the main activity for the launcher app and register the activity in the manifest.\n\nCreate a new Java Class and name it \"AppLauncher.java\".\n\nNext open up the manifest file for your application and make sure it looks like the code below.\n\n```xml\n<!-- Your package=\"\" name might differ -->\n<manifest \nxmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"org.example.hello\" \nandroid:versionCode=\"1\"\nandroid:versionName=\"1.0\">\n\n<!-- Your default android:icon=\"\" name might differ -->\n<application \nandroid:icon=\"@drawable/icon\" \nandroid:label=\"AppLauncher\" \nandroid:debuggable=\"true\"\nandroid:description=\"An Application Launcher\">\n\n<activity\nandroid:name=\"AppLauncher\"\nandroid:label=\"AppLauncher\">\n\n<!-- This tag indicates the initial activity -->\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n\n</activity>\n\n</application>\n\n<uses-sdk android:minSdkVersion=\"8\" />\n\n</manifest> \n```\nOk so now that the layouts are coded up and the activity is registered within the manifest open up AppLauncher.java and lets begin.\n\nLets start off with importing all the necessary libraries needed for our app.\n\n```java\n//Your package name might differ\npackage org.example.hello;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport android.app.ListActivity;\nimport android.app.ProgressDialog;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.ActivityInfo;\nimport android.content.pm.PackageInfo;\nimport android.content.pm.PackageManager;\nimport android.content.pm.ResolveInfo;\nimport android.graphics.drawable.Drawable;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ArrayAdapter;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.TextView;\n```\n\nOur app will extend the ListActivity class in order to reduce the boiler plate needed to build a ListView.\n\n```java\npublic class AppLauncher extends ListActivity{\n```\n\nHowever, due to the structure of the app we'll build the classes needed and stitch them together so just follow along with a text editor for now. To begin we'll need a class to hold all the useful data we can obtain from a given app. We'll call it AppInfo, its very basic so go ahead and type it into your editor.\n\n```java\n    public class AppInfo{\n      private String appName = \"\";\n      private String packageName = \"\";\n      private String className = \"\";\n      private String versionName = \"\";\n      private Integer versionCode = 0;\n      private Drawable icon = null;\n\n      public String getAppName(){\n        return appName;\n      }\n\n      public String getPackageName(){\n        return packageName;\n      }\n\n      public String getClassName(){\n        return className;\n      }\n\n      public String getVersionName(){\n        return versionName;\n      }\n\n      public Integer getVersionCode(){\n        return versionCode;\n      }\n\n      public Drawable getIcon(){\n        return icon;\n      }\n    }\n```\n\nThe next class we need is a class that will be used to obtain the application info for the AppInfo class. This class is the bread and butter of our AppLauncher and it together with the AppInfo class can be ported to any application which needs to access other apps via intents.\n\n```java\n    public class Applications{\n      private ArrayList<AppInfo> packageList = null;\n      private List<ResolveInfo> activityList = null;\n      private Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);\n      private PackageManager packMan = null;\n```\n\nFor the Applications constructor we will pass in the all important PackageManager from the main context.\n\n```java\n        public Applications(PackageManager packManager){\n          packMan = packManager;\n          packageList = this.createPackageList(false);\n          activityList = this.createActivityList();\n          this.addClassNamesToPackageList();\n        }\n```\n\nBelow are some getter methods for the package and activities list. The difference between the two is that the package list contains the info about the apps data and the activity list contains info about the intents the app responds to.\n\n```java\n        public ArrayList<AppInfo> getPackageList(){\n          return packageList;\n        }\n\n      public List<ResolveInfo> getActivityList(){\n        return activityList;\n      }\n```\n\nThe next method is the createPackageList method. All it does is simply extract a list of all the installed apps via the PackageManager that we passed into the constructor. Next we iterate over the list and copy the info we need into a AppInfo object and then shove that object into the ArrayList<AppInfo> that will be returned.\n\n```java\n        private ArrayList<AppInfo> createPackageList(boolean getSysPackages){\n          ArrayList<AppInfo> pList = new ArrayList<AppInfo>();        \n\n          List<PackageInfo> packs = getPackageManager(\n              ).getInstalledPackages(0);\n\n          for(int i = 0; i < packs.size(); i++){\n            PackageInfo packInfo = packs.get(i);\n\n            if((!getSysPackages) && (packInfo.versionName == null)){\n              continue ;\n            }\n\n            AppInfo newInfo = new AppInfo();\n\n            newInfo.appName = packInfo.applicationInfo.loadLabel(\n                getPackageManager()).toString();\n            newInfo.packageName = packInfo.packageName;   \n            newInfo.versionName = packInfo.versionName;\n            newInfo.versionCode = packInfo.versionCode;\n            newInfo.icon = packInfo.applicationInfo.loadIcon(\n                getPackageManager());\n\n            pList.add(newInfo);\n          }\n          return pList; \n        }\n```\n\nSimilar to the createPakageList method, createActivityList will return a list with all of the apps installed intent data but unlike createPackageList its only 8 lines of code.\n\n```java\n        private List<ResolveInfo> createActivityList(){\n          List<ResolveInfo> aList = packMan.queryIntentActivities(mainIntent, 0);\n\n          Collections.sort(aList, \n              new ResolveInfo.DisplayNameComparator(packMan)); \n\n          return aList;\n        }\n```\n\nThe next two methods are purely for dubugging purposes and can actually be left out but we'll include them for completeness or in case you use this class in another application.\n\n```java\n        private void packageDebug(){\n          if(null == packageList){\n            return;\n          }\n\n          for(int i = 0; i < packageList.size(); ++i){\n            Log.v(\"PACKINFO: \", \"\\t\" + \n                packageList.get(i).appName + \"\\t\" + \n                packageList.get(i).packageName + \"\\t\" + \n                packageList.get(i).className + \"\\t\" +\n                packageList.get(i).versionName + \"\\t\" + \n                packageList.get(i).versionCode);\n          }\n        }\n\n      private void activityDebug(){\n        if(null == activityList){\n          return;\n        }\n\n        for(int i = 0; i < activityList.size(); i++){ \n          ActivityInfo currentActivity = activityList.get(\n              i).activityInfo;\n          Log.v(\"ACTINFO\", \n              \"pName=\" \n              + currentActivity.applicationInfo.packageName +\n              \" cName=\" + currentActivity.name);\n        }\n      }\n```\n\nThe next method is needed only because in order to launch an app you need both its package name and its intent name that connects to the main class of the app. However, if you only use the packageList you'll lack the intent data, so the last method of the Application class adds the class name(intent data) to the packageList making it such that client of the class can have everything bundled up nicely in the packageList instead of having to rely on using both the activity and packageList in unison.\n\nFor the method addClassNameToPackageList we'll iterate over the packageList and for each packageName we'll find its match within the activityList by packageName and then extract the className from the activityList.\n\n```java\n        private void addClassNamesToPackageList(){\n          if(null == activityList || null == packageList){\n            return;\n          }\n\n          String tempName = \"\";\n\n          for(int i = 0; i < packageList.size(); ++i){\n            tempName = packageList.get(i).packageName;\n\n            for(int j = 0; j < activityList.size(); ++j){\n              if(tempName.equals(activityList.get(\n                      j).activityInfo.applicationInfo.packageName)){\n                packageList.get(i).className = activityList.get(\n                    j).activityInfo.name;\n              }\n            }\n          }\n        }\n    }\n```\n\nBelow is the complete Application class\n\n```java\n    public class Applications{\n      private ArrayList<AppInfo> packageList = null;\n      private List<ResolveInfo> activityList = null;\n      private Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);\n      private PackageManager packMan = null;\n\n      public Applications(PackageManager packManager){\n        packMan = packManager;\n        packageList = this.createPackageList(false);\n        activityList = this.createActivityList();\n        this.addClassNamesToPackageList();\n      }\n\n      public ArrayList<AppInfo> getPackageList(){\n        return packageList;\n      }\n\n      public List<ResolveInfo> getActivityList(){\n        return activityList;\n      }\n\n      private ArrayList<AppInfo> createPackageList(boolean getSysPackages){\n        ArrayList<AppInfo> pList = new ArrayList<AppInfo>();        \n\n        List<PackageInfo> packs = getPackageManager(\n            ).getInstalledPackages(0);\n\n        for(int i = 0; i < packs.size(); i++){\n          PackageInfo packInfo = packs.get(i);\n\n          if((!getSysPackages) && (packInfo.versionName == null)){\n            continue ;\n          }\n\n          AppInfo newInfo = new AppInfo();\n\n          newInfo.appName = packInfo.applicationInfo.loadLabel(\n              getPackageManager()).toString();\n          newInfo.packageName = packInfo.packageName;   \n          newInfo.versionName = packInfo.versionName;\n          newInfo.versionCode = packInfo.versionCode;\n          newInfo.icon = packInfo.applicationInfo.loadIcon(\n              getPackageManager());\n\n          pList.add(newInfo);\n        }\n        return pList; \n      }\n\n      private List<ResolveInfo> createActivityList(){\n        List<ResolveInfo> aList = packMan.queryIntentActivities(mainIntent, 0);\n\n        Collections.sort(aList, \n            new ResolveInfo.DisplayNameComparator(packMan)); \n\n        return aList;\n      }\n\n      private void packageDebug(){\n        if(null == packageList){\n          return;\n        }\n\n        for(int i = 0; i < packageList.size(); ++i){\n          Log.v(\"PACKINFO: \", \"\\t\" + \n              packageList.get(i).appName + \"\\t\" + \n              packageList.get(i).packageName + \"\\t\" + \n              packageList.get(i).className + \"\\t\" +\n              packageList.get(i).versionName + \"\\t\" + \n              packageList.get(i).versionCode);\n        }\n      }\n\n      private void activityDebug(){\n        if(null == activityList){\n          return;\n        }\n\n        for(int i = 0; i < activityList.size(); i++){ \n          ActivityInfo currentActivity = activityList.get(\n              i).activityInfo;\n          Log.v(\"ACTINFO\", \n              \"pName=\" \n              + currentActivity.applicationInfo.packageName +\n              \" cName=\" + currentActivity.name);\n        }\n      }\n\n      private void addClassNamesToPackageList(){\n        if(null == activityList || null == packageList){\n          return;\n        }\n\n        String tempName = \"\";\n\n        for(int i = 0; i < packageList.size(); ++i){\n          tempName = packageList.get(i).packageName;\n\n          for(int j = 0; j < activityList.size(); ++j){\n            if(tempName.equals(activityList.get(\n                    j).activityInfo.applicationInfo.packageName)){\n              packageList.get(i).className = activityList.get(\n                  j).activityInfo.name;\n            }\n          }\n        }\n      }\n    }\n  ```\n\nRemember the AppInfo class that we made and the applauncherrow.xml layout. Well, now we'll utilize both within the custom ArrayAdapter extension we'll use to populate the data of our List. ArrayAdapters are used to fill in the data fields of a ListView widget by storing a layout(android uses the term inflate) holding data into a single row of the list.\n\n```java\n    public class ApplicationAdapter extends ArrayAdapter<AppInfo>{\n      private ArrayList<AppInfo> items;\n```\n\nThe constructor for our ArrayAdapter extension...\n\n```java\n        public ApplicationAdapter(Context context, int textViewResourceId, ArrayList<AppInfo> items){\n          super(context, textViewResourceId, items);\n          this.items = items;\n        }\n```\n\nBeing an ArrayAdapter extension means that we have to override the getView method, this is where the applauncherrow layout is populated with data and is used to represent each row of the ListView. To start we'll reference the applauncherrow layout and inflate it to become a view.\n\n```java\n        @Override\n        public View getView(int position, View convertView, \n            ViewGroup parent){\n          View view = convertView;\n\n          if(view == null){\n            LayoutInflater layout = (LayoutInflater)getSystemService(\n                Context.LAYOUT_INFLATER_SERVICE);\n            view = layout.inflate(R.layout.applauncherrow, null);\n          }\n```\n\nNow that the view is inflated with the applauncherrow.xml layout we can now match the ImageView and TextView with the contents of a AppInfo object in preparation for moving it into the ListView.\n\n```java\n            AppInfo appInfo = items.get(position);\n          if(appInfo != null){\n            TextView appName = (TextView) view.findViewById(\n                R.id.applauncherrow_appname);\n            ImageView appIcon = (ImageView) view.findViewById(\n                R.id.applauncherrow_icon);\n\n            if(appName != null){\n              appName.setText(appInfo.getAppName());\n            }\n            if(appIcon != null){\n              appIcon.setImageDrawable(appInfo.getIcon());\n            }\n          }\n\n          return view;\n        }\n    }\n```\n\nHere is the complete ApplicationAdapter class, you should add it to your text file.\n\n```java\n    public class ApplicationAdapter extends ArrayAdapter<AppInfo>{\n      private ArrayList<AppInfo> items;\n\n      public ApplicationAdapter(Context context, int textViewResourceId, \n          ArrayList<AppInfo> items){\n        super(context, textViewResourceId, items);\n        this.items = items;\n      }\n\n      @Override\n        public View getView(int position, View convertView, \n            ViewGroup parent){\n          View view = convertView;\n\n          if(view == null){\n            LayoutInflater layout = (LayoutInflater)getSystemService(\n                Context.LAYOUT_INFLATER_SERVICE);\n            view = layout.inflate(R.layout.applauncherrow, null);\n          }\n\n          AppInfo appInfo = items.get(position);\n          if(appInfo != null){\n            TextView appName = (TextView) view.findViewById(\n                R.id.applauncherrow_appname);\n            ImageView appIcon = (ImageView) view.findViewById(\n                R.id.applauncherrow_icon);\n\n            if(appName != null){\n              appName.setText(appInfo.getAppName());\n            }\n            if(appIcon != null){\n              appIcon.setImageDrawable(appInfo.getIcon());\n            }\n          }\n\n          return view;\n        }\n    }\n```\n\nWe are done with the utility classes so the next step is to add some methods to the AppLauncher class itself. The first one we're going to add is a method called getApps() which stores the pacakageList from an Applications object and passes it off to Java Runnable to be ran on a thread.\n\n```java\n    private void getApps(){\n      try{\n        myApps = new Applications(getPackageManager());\n        packageList = myApps.getPackageList();\n      }\n      catch(Exception exception){\n        Log.e(\"BACKGROUND PROC:\", exception.getMessage());\n      }\n      this.runOnUiThread(returnRes);\n    }\n```\n\nIf you look at the getApps() method the last line before the class ends is a method called this.runOnUiThread(returnRes), now what this means is that the main thread will be locked while we pump AppInfo objects into our ListView via the ArrayAdapter. If you are experienced with concurrent programming you might be wondering why lock the mainUIThread, the answer is because our app can't do anything until all objects have been added to the list. If we by chance were dynamically loading things from the Internet via HTTP requests then we would opt instead for a lazy loader which spawns a thread for each view object pumped into the ListVIew and the list would slowly populate as each item was fetched live from the web. So anyways here is our Runnable method that checks first that the packageList exists and then uses an object from our ApplicationAdapter to fill up our ListView widget.\n\n```java\n    private Runnable returnRes = new Runnable(){\n      public void run(){\n        if(packageList != null && packageList.size() > 0){\n          appAdapter.notifyDataSetChanged();\n\n          for(int i = 0; i < packageList.size(); ++i){\n            appAdapter.add(packageList.get(i));\n          }\n        }\n        progressDialog.dismiss();\n        appAdapter.notifyDataSetChanged();\n      }\n    };\n```\n\nWe're almost done so now open up your Eclipse IDE to the AppLauncher project and click on the AppLauncher.java class. If you remember from earlier where we left off go ahead and add the data members below to the AppLauncher class; notice the line numbers for reference.\n\n```java\n  ApplicationAdapter appAdapter = null;\n  ProgressDialog progressDialog = null; \n  Runnable viewApps = null;\n  ArrayList<AppInfo> packageList = null;\n  Applications myApps = null;\n```\n\nFor the onCreate() method there are some things you sould notice. First since AppLauncher is a ListActivity extension it inherits the setListAdapter() method. Second we'll  initialize the viewApps Runnable to call our getApps() within its run(). This means that any thread created with the viewApps as it's runnable will load up our packages into the ListView. In addition since getApps() locks the mainUIThread users of this app won't be able to do anything until the thread finishes.\n\n```java\n    public void onCreate(Bundle savedInstanceState){\n      super.onCreate(savedInstanceState);\n\n      this.setContentView(R.layout.applauncher);\n\n      packageList = new ArrayList<AppInfo>();\n      appAdapter = new ApplicationAdapter(this, R.layout.applauncherrow,\n          packageList);\n\n      this.setListAdapter(appAdapter);\n\n      viewApps = new Runnable(){\n        public void run(){\n          getApps();\n        }\n      };\n\n      Thread appLoaderThread = new Thread(null, viewApps, \n          \"AppLoaderThread\");\n      appLoaderThread.start();\n```\n\nNow that the thread has started and the app has been officially locked, how do we notify the user? The answer is with the android.app.ProgressDialog widget. Remember those loading screen from popular video games, that's all ProgressDialogs do.\n\n```java\n        progressDialog = ProgressDialog.show(AppLauncher.this, \"Hold on...\", \"Loading your apps...\", true);\n    }\n```\n\nRight now our app can successfully load up a list of Icons and application names but how then do we launch the apps the user touches from our list? The answer is via starting a new intent by overriding the onListItemClick method. So go open up your text file that contains the utility classes and methods and add the onListItemClick() method to it.\n\n```java\n    @Override\n    protected void onListItemClick(ListView list, View view, int position, \n        long id){\n      super.onListItemClick(list, view, position, id);\n\n      AppInfo rowClicked = (AppInfo)this.getListAdapter().getItem(\n          position);\n\n      Intent startApp = new Intent();\n      ComponentName component = new ComponentName(\n          rowClicked.getPackageName(), \n          rowClicked.getClassName());\n      startApp.setComponent(component);\n      startApp.setAction(Intent.ACTION_MAIN);\n\n      startActivity(startApp);\n    }\n```\n\nBefore you run the AppLauncher, be sure to copy and paste the classes and methods into the AppLauncher class so it resembles the complete file below.\n\n```java\n  package org.example.hello;\n\n  import java.util.ArrayList;\n  import java.util.Collections;\n  import java.util.List;\n\n  import android.app.ListActivity;\n  import android.app.ProgressDialog;\n  import android.content.ComponentName;\n  import android.content.Context;\n  import android.content.Intent;\n  import android.content.pm.ActivityInfo;\n  import android.content.pm.PackageInfo;\n  import android.content.pm.PackageManager;\n  import android.content.pm.ResolveInfo;\n  import android.graphics.drawable.Drawable;\n  import android.os.Bundle;\n  import android.util.Log;\n  import android.view.LayoutInflater;\n  import android.view.View;\n  import android.view.ViewGroup;\n  import android.widget.ArrayAdapter;\n  import android.widget.ImageView;\n  import android.widget.ListView;\n  import android.widget.TextView;\n\n  public class AppLauncher extends ListActivity{\n    ApplicationAdapter appAdapter = null;\n    ProgressDialog progressDialog = null; \n    Runnable viewApps = null;\n    ArrayList<AppInfo> packageList = null;\n    Applications myApps = null;\n\n    public void onCreate(Bundle savedInstanceState){\n      super.onCreate(savedInstanceState);\n\n      this.setContentView(R.layout.applauncher);\n\n      packageList = new ArrayList<AppInfo>();\n      appAdapter = new ApplicationAdapter(this, R.layout.applauncherrow,\n          packageList);\n\n      this.setListAdapter(appAdapter);\n\n      viewApps = new Runnable(){\n        public void run(){\n          getApps();\n        }\n      };\n\n      Thread appLoaderThread = new Thread(null, viewApps, \n          \"AppLoaderThread\");\n      appLoaderThread.start();\n\n      progressDialog = ProgressDialog.show(AppLauncher.this, \n          \"Hold on...\", \"Loading your apps...\", true);\n    }\n\n    public class Applications{\n      private ArrayList<AppInfo> packageList = null;\n      private List<ResolveInfo> activityList = null;\n      private Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);\n      private PackageManager packMan = null;\n\n      public Applications(PackageManager packManager){\n        packMan = packManager;\n        packageList = this.createPackageList(false);\n        activityList = this.createActivityList();\n        this.addClassNamesToPackageList();\n      }\n\n      public ArrayList<AppInfo> getPackageList(){\n        return packageList;\n      }\n\n      public List<ResolveInfo> getActivityList(){\n        return activityList;\n      }\n\n      private ArrayList<AppInfo> createPackageList(boolean getSysPackages){\n        ArrayList<AppInfo> pList = new ArrayList<AppInfo>();        \n\n        List<PackageInfo> packs = getPackageManager(\n            ).getInstalledPackages(0);\n\n        for(int i = 0; i < packs.size(); i++){\n          PackageInfo packInfo = packs.get(i);\n\n          if((!getSysPackages) && (packInfo.versionName == null)){\n            continue ;\n          }\n\n          AppInfo newInfo = new AppInfo();\n\n          newInfo.appName = packInfo.applicationInfo.loadLabel(\n              getPackageManager()).toString();\n          newInfo.packageName = packInfo.packageName;   \n          newInfo.versionName = packInfo.versionName;\n          newInfo.versionCode = packInfo.versionCode;\n          newInfo.icon = packInfo.applicationInfo.loadIcon(\n              getPackageManager());\n\n          pList.add(newInfo);\n        }\n        return pList; \n      }\n\n      private List<ResolveInfo> createActivityList(){\n        List<ResolveInfo> aList = packMan.queryIntentActivities(mainIntent, 0);\n\n        Collections.sort(aList, \n            new ResolveInfo.DisplayNameComparator(packMan)); \n\n        return aList;\n      }\n\n      private void packageDebug(){\n        if(null == packageList){\n          return;\n        }\n\n        for(int i = 0; i < packageList.size(); ++i){\n          Log.v(\"PACKINFO: \", \"\\t\" + \n              packageList.get(i).appName + \"\\t\" + \n              packageList.get(i).packageName + \"\\t\" + \n              packageList.get(i).className + \"\\t\" +\n              packageList.get(i).versionName + \"\\t\" + \n              packageList.get(i).versionCode);\n        }\n      }\n\n      private void activityDebug(){\n        if(null == activityList){\n          return;\n        }\n\n        for(int i = 0; i < activityList.size(); i++){ \n          ActivityInfo currentActivity = activityList.get(\n              i).activityInfo;\n          Log.v(\"ACTINFO\", \n              \"pName=\" \n              + currentActivity.applicationInfo.packageName +\n              \" cName=\" + currentActivity.name);\n        }\n      }\n\n      private void addClassNamesToPackageList(){\n        if(null == activityList || null == packageList){\n          return;\n        }\n\n        String tempName = \"\";\n\n        for(int i = 0; i < packageList.size(); ++i){\n          tempName = packageList.get(i).packageName;\n\n          for(int j = 0; j < activityList.size(); ++j){\n            if(tempName.equals(activityList.get(\n                    j).activityInfo.applicationInfo.packageName)){\n              packageList.get(i).className = activityList.get(\n                  j).activityInfo.name;\n            }\n          }\n        }\n      }\n    }\n\n    public class AppInfo{\n      private String appName = \"\";\n      private String packageName = \"\";\n      private String className = \"\";\n      private String versionName = \"\";\n      private Integer versionCode = 0;\n      private Drawable icon = null;\n\n      public String getAppName(){\n        return appName;\n      }\n\n      public String getPackageName(){\n        return packageName;\n      }\n\n      public String getClassName(){\n        return className;\n      }\n\n      public String getVersionName(){\n        return versionName;\n      }\n\n      public Integer getVersionCode(){\n        return versionCode;\n      }\n\n      public Drawable getIcon(){\n        return icon;\n      }\n    }\n\n    public class ApplicationAdapter extends ArrayAdapter<AppInfo>{\n      private ArrayList<AppInfo> items;\n\n      public ApplicationAdapter(Context context, int textViewResourceId, \n          ArrayList<AppInfo> items){\n        super(context, textViewResourceId, items);\n        this.items = items;\n      }\n\n      @Override\n        public View getView(int position, View convertView, \n            ViewGroup parent){\n          View view = convertView;\n\n          if(view == null){\n            LayoutInflater layout = (LayoutInflater)getSystemService(\n                Context.LAYOUT_INFLATER_SERVICE);\n            view = layout.inflate(R.layout.applauncherrow, null);\n          }\n\n          AppInfo appInfo = items.get(position);\n          if(appInfo != null){\n            TextView appName = (TextView) view.findViewById(\n                R.id.applauncherrow_appname);\n            ImageView appIcon = (ImageView) view.findViewById(\n                R.id.applauncherrow_icon);\n\n            if(appName != null){\n              appName.setText(appInfo.getAppName());\n            }\n            if(appIcon != null){\n              appIcon.setImageDrawable(appInfo.getIcon());\n            }\n          }\n\n          return view;\n        }\n    }\n\n    private void getApps(){\n      try{\n        myApps = new Applications(getPackageManager());\n        packageList = myApps.getPackageList();\n      }\n      catch(Exception exception){\n        Log.e(\"BACKGROUND PROC:\", exception.getMessage());\n      }\n      this.runOnUiThread(returnRes);\n    }\n\n    private Runnable returnRes = new Runnable(){\n      public void run(){\n        if(packageList != null && packageList.size() > 0){\n          appAdapter.notifyDataSetChanged();\n\n          for(int i = 0; i < packageList.size(); ++i){\n            appAdapter.add(packageList.get(i));\n          }\n        }\n        progressDialog.dismiss();\n        appAdapter.notifyDataSetChanged();\n      }\n    };\n\n    @Override\n      protected void onListItemClick(ListView list, View view, int position, \n          long id){\n        super.onListItemClick(list, view, position, id);\n\n        AppInfo rowClicked = (AppInfo)this.getListAdapter().getItem(\n            position);\n\n        Intent startApp = new Intent();\n        ComponentName component = new ComponentName(\n            rowClicked.getPackageName(), \n            rowClicked.getClassName());\n        startApp.setComponent(component);\n        startApp.setAction(Intent.ACTION_MAIN);\n\n        startActivity(startApp);\n      }\n  }\n\n```\n\nEnjoy your AppLauncher.\n","source":"_posts/buildanapplicationlauncherwithandroid.md","raw":"---\ntitle: Build An Application Launcher For Android\ndate: 2011-07-05\ncategories: [tutorial]\ntags: [java, android, mobile]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/buildanapplicationlauncherwithandroid.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/buildanapplicationlauncherwithandroid.JPG\ncomments: false\n---\nIn this tutorial we'll create an interesting android application which has the ability to launch any other app you have installed on your phone. If you've ever wanted to know how Android applications perform cross app communication you should read on (this tutorial assumes familiarity with the Android API).\n\n<!-- more -->\nTo start off create a new Android application project within Eclipse. Whenever I develop Android apps I usually start with the layout of the application and add functionality via Java classes later. Since our app will display the users installed apps within a ListView widget we have to first declare a layout to hold the ListView itself.\n\nCreate a new xml layout for the ListView by right clicking the res/layout folder and adding a new android xml file. Title it \"applauncher.xml\" and then add the code below to it.\n\n```xml\n<LinearLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:id=\"@+id/applauncher_linearlayout\"\n  android:layout_width=\"fill_parent\"\n  android:layout_height=\"fill_parent\"\n  android:orientation=\"vertical\">\n\n  <ListView\n    android:id=\"@android:id/list\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"/>\n\n  <TextView\n    android:id=\"@android:id/empty\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    android:text=\"List PlaceHolder\"/>\n\n</LinearLayout>\n```\nWhen using ListViews we can setup the overall look of each row by creating an xml layout with a skeleton of the widgets that we want to display in each row of our ListView. Think of the row layout as a \"row template\". If you look at the screenshots of the app you can tell that we only need two widgets within our row layout, an ImageView to hold the apps icon and a TextView to display the apps package name.\n\nCreate a new xml layout for the ListView rows by right clicking the res/layout folder and adding a new android xml file. Title it \"applauncherrow.xml\" and add the code below.\n```xml\n<LinearLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:id=\"@+id/applauncherrow_imagelinearlayout\"\n  android:layout_width=\"fill_parent\"\n  android:layout_height=\"?android:attr/listPreferredItemHeight\"\n  android:padding=\"6dip\">\n\n<ImageView\n  android:id=\"@+id/applauncherrow_icon\"\n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"fill_parent\"\n  android:layout_marginRight=\"6dip\"/>\n\n  <LinearLayout\n    android:id=\"@+id/applauncherrow_namelinearlayout\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"0dip\"\n    android:layout_weight=\"1\"\n    android:layout_height=\"fill_parent\">\n\n  <TextView\n    android:id=\"@+id/applauncherrow_appname\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"0dip\"\n    android:layout_weight=\"1\"\n    android:gravity=\"center_vertical\"/>\n\n  </LinearLayout>\n\n</LinearLayout>\n```\nNext we're going to setup the main activity for the launcher app and register the activity in the manifest.\n\nCreate a new Java Class and name it \"AppLauncher.java\".\n\nNext open up the manifest file for your application and make sure it looks like the code below.\n\n```xml\n<!-- Your package=\"\" name might differ -->\n<manifest \nxmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"org.example.hello\" \nandroid:versionCode=\"1\"\nandroid:versionName=\"1.0\">\n\n<!-- Your default android:icon=\"\" name might differ -->\n<application \nandroid:icon=\"@drawable/icon\" \nandroid:label=\"AppLauncher\" \nandroid:debuggable=\"true\"\nandroid:description=\"An Application Launcher\">\n\n<activity\nandroid:name=\"AppLauncher\"\nandroid:label=\"AppLauncher\">\n\n<!-- This tag indicates the initial activity -->\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n\n</activity>\n\n</application>\n\n<uses-sdk android:minSdkVersion=\"8\" />\n\n</manifest> \n```\nOk so now that the layouts are coded up and the activity is registered within the manifest open up AppLauncher.java and lets begin.\n\nLets start off with importing all the necessary libraries needed for our app.\n\n```java\n//Your package name might differ\npackage org.example.hello;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport android.app.ListActivity;\nimport android.app.ProgressDialog;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.ActivityInfo;\nimport android.content.pm.PackageInfo;\nimport android.content.pm.PackageManager;\nimport android.content.pm.ResolveInfo;\nimport android.graphics.drawable.Drawable;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ArrayAdapter;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.TextView;\n```\n\nOur app will extend the ListActivity class in order to reduce the boiler plate needed to build a ListView.\n\n```java\npublic class AppLauncher extends ListActivity{\n```\n\nHowever, due to the structure of the app we'll build the classes needed and stitch them together so just follow along with a text editor for now. To begin we'll need a class to hold all the useful data we can obtain from a given app. We'll call it AppInfo, its very basic so go ahead and type it into your editor.\n\n```java\n    public class AppInfo{\n      private String appName = \"\";\n      private String packageName = \"\";\n      private String className = \"\";\n      private String versionName = \"\";\n      private Integer versionCode = 0;\n      private Drawable icon = null;\n\n      public String getAppName(){\n        return appName;\n      }\n\n      public String getPackageName(){\n        return packageName;\n      }\n\n      public String getClassName(){\n        return className;\n      }\n\n      public String getVersionName(){\n        return versionName;\n      }\n\n      public Integer getVersionCode(){\n        return versionCode;\n      }\n\n      public Drawable getIcon(){\n        return icon;\n      }\n    }\n```\n\nThe next class we need is a class that will be used to obtain the application info for the AppInfo class. This class is the bread and butter of our AppLauncher and it together with the AppInfo class can be ported to any application which needs to access other apps via intents.\n\n```java\n    public class Applications{\n      private ArrayList<AppInfo> packageList = null;\n      private List<ResolveInfo> activityList = null;\n      private Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);\n      private PackageManager packMan = null;\n```\n\nFor the Applications constructor we will pass in the all important PackageManager from the main context.\n\n```java\n        public Applications(PackageManager packManager){\n          packMan = packManager;\n          packageList = this.createPackageList(false);\n          activityList = this.createActivityList();\n          this.addClassNamesToPackageList();\n        }\n```\n\nBelow are some getter methods for the package and activities list. The difference between the two is that the package list contains the info about the apps data and the activity list contains info about the intents the app responds to.\n\n```java\n        public ArrayList<AppInfo> getPackageList(){\n          return packageList;\n        }\n\n      public List<ResolveInfo> getActivityList(){\n        return activityList;\n      }\n```\n\nThe next method is the createPackageList method. All it does is simply extract a list of all the installed apps via the PackageManager that we passed into the constructor. Next we iterate over the list and copy the info we need into a AppInfo object and then shove that object into the ArrayList<AppInfo> that will be returned.\n\n```java\n        private ArrayList<AppInfo> createPackageList(boolean getSysPackages){\n          ArrayList<AppInfo> pList = new ArrayList<AppInfo>();        \n\n          List<PackageInfo> packs = getPackageManager(\n              ).getInstalledPackages(0);\n\n          for(int i = 0; i < packs.size(); i++){\n            PackageInfo packInfo = packs.get(i);\n\n            if((!getSysPackages) && (packInfo.versionName == null)){\n              continue ;\n            }\n\n            AppInfo newInfo = new AppInfo();\n\n            newInfo.appName = packInfo.applicationInfo.loadLabel(\n                getPackageManager()).toString();\n            newInfo.packageName = packInfo.packageName;   \n            newInfo.versionName = packInfo.versionName;\n            newInfo.versionCode = packInfo.versionCode;\n            newInfo.icon = packInfo.applicationInfo.loadIcon(\n                getPackageManager());\n\n            pList.add(newInfo);\n          }\n          return pList; \n        }\n```\n\nSimilar to the createPakageList method, createActivityList will return a list with all of the apps installed intent data but unlike createPackageList its only 8 lines of code.\n\n```java\n        private List<ResolveInfo> createActivityList(){\n          List<ResolveInfo> aList = packMan.queryIntentActivities(mainIntent, 0);\n\n          Collections.sort(aList, \n              new ResolveInfo.DisplayNameComparator(packMan)); \n\n          return aList;\n        }\n```\n\nThe next two methods are purely for dubugging purposes and can actually be left out but we'll include them for completeness or in case you use this class in another application.\n\n```java\n        private void packageDebug(){\n          if(null == packageList){\n            return;\n          }\n\n          for(int i = 0; i < packageList.size(); ++i){\n            Log.v(\"PACKINFO: \", \"\\t\" + \n                packageList.get(i).appName + \"\\t\" + \n                packageList.get(i).packageName + \"\\t\" + \n                packageList.get(i).className + \"\\t\" +\n                packageList.get(i).versionName + \"\\t\" + \n                packageList.get(i).versionCode);\n          }\n        }\n\n      private void activityDebug(){\n        if(null == activityList){\n          return;\n        }\n\n        for(int i = 0; i < activityList.size(); i++){ \n          ActivityInfo currentActivity = activityList.get(\n              i).activityInfo;\n          Log.v(\"ACTINFO\", \n              \"pName=\" \n              + currentActivity.applicationInfo.packageName +\n              \" cName=\" + currentActivity.name);\n        }\n      }\n```\n\nThe next method is needed only because in order to launch an app you need both its package name and its intent name that connects to the main class of the app. However, if you only use the packageList you'll lack the intent data, so the last method of the Application class adds the class name(intent data) to the packageList making it such that client of the class can have everything bundled up nicely in the packageList instead of having to rely on using both the activity and packageList in unison.\n\nFor the method addClassNameToPackageList we'll iterate over the packageList and for each packageName we'll find its match within the activityList by packageName and then extract the className from the activityList.\n\n```java\n        private void addClassNamesToPackageList(){\n          if(null == activityList || null == packageList){\n            return;\n          }\n\n          String tempName = \"\";\n\n          for(int i = 0; i < packageList.size(); ++i){\n            tempName = packageList.get(i).packageName;\n\n            for(int j = 0; j < activityList.size(); ++j){\n              if(tempName.equals(activityList.get(\n                      j).activityInfo.applicationInfo.packageName)){\n                packageList.get(i).className = activityList.get(\n                    j).activityInfo.name;\n              }\n            }\n          }\n        }\n    }\n```\n\nBelow is the complete Application class\n\n```java\n    public class Applications{\n      private ArrayList<AppInfo> packageList = null;\n      private List<ResolveInfo> activityList = null;\n      private Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);\n      private PackageManager packMan = null;\n\n      public Applications(PackageManager packManager){\n        packMan = packManager;\n        packageList = this.createPackageList(false);\n        activityList = this.createActivityList();\n        this.addClassNamesToPackageList();\n      }\n\n      public ArrayList<AppInfo> getPackageList(){\n        return packageList;\n      }\n\n      public List<ResolveInfo> getActivityList(){\n        return activityList;\n      }\n\n      private ArrayList<AppInfo> createPackageList(boolean getSysPackages){\n        ArrayList<AppInfo> pList = new ArrayList<AppInfo>();        \n\n        List<PackageInfo> packs = getPackageManager(\n            ).getInstalledPackages(0);\n\n        for(int i = 0; i < packs.size(); i++){\n          PackageInfo packInfo = packs.get(i);\n\n          if((!getSysPackages) && (packInfo.versionName == null)){\n            continue ;\n          }\n\n          AppInfo newInfo = new AppInfo();\n\n          newInfo.appName = packInfo.applicationInfo.loadLabel(\n              getPackageManager()).toString();\n          newInfo.packageName = packInfo.packageName;   \n          newInfo.versionName = packInfo.versionName;\n          newInfo.versionCode = packInfo.versionCode;\n          newInfo.icon = packInfo.applicationInfo.loadIcon(\n              getPackageManager());\n\n          pList.add(newInfo);\n        }\n        return pList; \n      }\n\n      private List<ResolveInfo> createActivityList(){\n        List<ResolveInfo> aList = packMan.queryIntentActivities(mainIntent, 0);\n\n        Collections.sort(aList, \n            new ResolveInfo.DisplayNameComparator(packMan)); \n\n        return aList;\n      }\n\n      private void packageDebug(){\n        if(null == packageList){\n          return;\n        }\n\n        for(int i = 0; i < packageList.size(); ++i){\n          Log.v(\"PACKINFO: \", \"\\t\" + \n              packageList.get(i).appName + \"\\t\" + \n              packageList.get(i).packageName + \"\\t\" + \n              packageList.get(i).className + \"\\t\" +\n              packageList.get(i).versionName + \"\\t\" + \n              packageList.get(i).versionCode);\n        }\n      }\n\n      private void activityDebug(){\n        if(null == activityList){\n          return;\n        }\n\n        for(int i = 0; i < activityList.size(); i++){ \n          ActivityInfo currentActivity = activityList.get(\n              i).activityInfo;\n          Log.v(\"ACTINFO\", \n              \"pName=\" \n              + currentActivity.applicationInfo.packageName +\n              \" cName=\" + currentActivity.name);\n        }\n      }\n\n      private void addClassNamesToPackageList(){\n        if(null == activityList || null == packageList){\n          return;\n        }\n\n        String tempName = \"\";\n\n        for(int i = 0; i < packageList.size(); ++i){\n          tempName = packageList.get(i).packageName;\n\n          for(int j = 0; j < activityList.size(); ++j){\n            if(tempName.equals(activityList.get(\n                    j).activityInfo.applicationInfo.packageName)){\n              packageList.get(i).className = activityList.get(\n                  j).activityInfo.name;\n            }\n          }\n        }\n      }\n    }\n  ```\n\nRemember the AppInfo class that we made and the applauncherrow.xml layout. Well, now we'll utilize both within the custom ArrayAdapter extension we'll use to populate the data of our List. ArrayAdapters are used to fill in the data fields of a ListView widget by storing a layout(android uses the term inflate) holding data into a single row of the list.\n\n```java\n    public class ApplicationAdapter extends ArrayAdapter<AppInfo>{\n      private ArrayList<AppInfo> items;\n```\n\nThe constructor for our ArrayAdapter extension...\n\n```java\n        public ApplicationAdapter(Context context, int textViewResourceId, ArrayList<AppInfo> items){\n          super(context, textViewResourceId, items);\n          this.items = items;\n        }\n```\n\nBeing an ArrayAdapter extension means that we have to override the getView method, this is where the applauncherrow layout is populated with data and is used to represent each row of the ListView. To start we'll reference the applauncherrow layout and inflate it to become a view.\n\n```java\n        @Override\n        public View getView(int position, View convertView, \n            ViewGroup parent){\n          View view = convertView;\n\n          if(view == null){\n            LayoutInflater layout = (LayoutInflater)getSystemService(\n                Context.LAYOUT_INFLATER_SERVICE);\n            view = layout.inflate(R.layout.applauncherrow, null);\n          }\n```\n\nNow that the view is inflated with the applauncherrow.xml layout we can now match the ImageView and TextView with the contents of a AppInfo object in preparation for moving it into the ListView.\n\n```java\n            AppInfo appInfo = items.get(position);\n          if(appInfo != null){\n            TextView appName = (TextView) view.findViewById(\n                R.id.applauncherrow_appname);\n            ImageView appIcon = (ImageView) view.findViewById(\n                R.id.applauncherrow_icon);\n\n            if(appName != null){\n              appName.setText(appInfo.getAppName());\n            }\n            if(appIcon != null){\n              appIcon.setImageDrawable(appInfo.getIcon());\n            }\n          }\n\n          return view;\n        }\n    }\n```\n\nHere is the complete ApplicationAdapter class, you should add it to your text file.\n\n```java\n    public class ApplicationAdapter extends ArrayAdapter<AppInfo>{\n      private ArrayList<AppInfo> items;\n\n      public ApplicationAdapter(Context context, int textViewResourceId, \n          ArrayList<AppInfo> items){\n        super(context, textViewResourceId, items);\n        this.items = items;\n      }\n\n      @Override\n        public View getView(int position, View convertView, \n            ViewGroup parent){\n          View view = convertView;\n\n          if(view == null){\n            LayoutInflater layout = (LayoutInflater)getSystemService(\n                Context.LAYOUT_INFLATER_SERVICE);\n            view = layout.inflate(R.layout.applauncherrow, null);\n          }\n\n          AppInfo appInfo = items.get(position);\n          if(appInfo != null){\n            TextView appName = (TextView) view.findViewById(\n                R.id.applauncherrow_appname);\n            ImageView appIcon = (ImageView) view.findViewById(\n                R.id.applauncherrow_icon);\n\n            if(appName != null){\n              appName.setText(appInfo.getAppName());\n            }\n            if(appIcon != null){\n              appIcon.setImageDrawable(appInfo.getIcon());\n            }\n          }\n\n          return view;\n        }\n    }\n```\n\nWe are done with the utility classes so the next step is to add some methods to the AppLauncher class itself. The first one we're going to add is a method called getApps() which stores the pacakageList from an Applications object and passes it off to Java Runnable to be ran on a thread.\n\n```java\n    private void getApps(){\n      try{\n        myApps = new Applications(getPackageManager());\n        packageList = myApps.getPackageList();\n      }\n      catch(Exception exception){\n        Log.e(\"BACKGROUND PROC:\", exception.getMessage());\n      }\n      this.runOnUiThread(returnRes);\n    }\n```\n\nIf you look at the getApps() method the last line before the class ends is a method called this.runOnUiThread(returnRes), now what this means is that the main thread will be locked while we pump AppInfo objects into our ListView via the ArrayAdapter. If you are experienced with concurrent programming you might be wondering why lock the mainUIThread, the answer is because our app can't do anything until all objects have been added to the list. If we by chance were dynamically loading things from the Internet via HTTP requests then we would opt instead for a lazy loader which spawns a thread for each view object pumped into the ListVIew and the list would slowly populate as each item was fetched live from the web. So anyways here is our Runnable method that checks first that the packageList exists and then uses an object from our ApplicationAdapter to fill up our ListView widget.\n\n```java\n    private Runnable returnRes = new Runnable(){\n      public void run(){\n        if(packageList != null && packageList.size() > 0){\n          appAdapter.notifyDataSetChanged();\n\n          for(int i = 0; i < packageList.size(); ++i){\n            appAdapter.add(packageList.get(i));\n          }\n        }\n        progressDialog.dismiss();\n        appAdapter.notifyDataSetChanged();\n      }\n    };\n```\n\nWe're almost done so now open up your Eclipse IDE to the AppLauncher project and click on the AppLauncher.java class. If you remember from earlier where we left off go ahead and add the data members below to the AppLauncher class; notice the line numbers for reference.\n\n```java\n  ApplicationAdapter appAdapter = null;\n  ProgressDialog progressDialog = null; \n  Runnable viewApps = null;\n  ArrayList<AppInfo> packageList = null;\n  Applications myApps = null;\n```\n\nFor the onCreate() method there are some things you sould notice. First since AppLauncher is a ListActivity extension it inherits the setListAdapter() method. Second we'll  initialize the viewApps Runnable to call our getApps() within its run(). This means that any thread created with the viewApps as it's runnable will load up our packages into the ListView. In addition since getApps() locks the mainUIThread users of this app won't be able to do anything until the thread finishes.\n\n```java\n    public void onCreate(Bundle savedInstanceState){\n      super.onCreate(savedInstanceState);\n\n      this.setContentView(R.layout.applauncher);\n\n      packageList = new ArrayList<AppInfo>();\n      appAdapter = new ApplicationAdapter(this, R.layout.applauncherrow,\n          packageList);\n\n      this.setListAdapter(appAdapter);\n\n      viewApps = new Runnable(){\n        public void run(){\n          getApps();\n        }\n      };\n\n      Thread appLoaderThread = new Thread(null, viewApps, \n          \"AppLoaderThread\");\n      appLoaderThread.start();\n```\n\nNow that the thread has started and the app has been officially locked, how do we notify the user? The answer is with the android.app.ProgressDialog widget. Remember those loading screen from popular video games, that's all ProgressDialogs do.\n\n```java\n        progressDialog = ProgressDialog.show(AppLauncher.this, \"Hold on...\", \"Loading your apps...\", true);\n    }\n```\n\nRight now our app can successfully load up a list of Icons and application names but how then do we launch the apps the user touches from our list? The answer is via starting a new intent by overriding the onListItemClick method. So go open up your text file that contains the utility classes and methods and add the onListItemClick() method to it.\n\n```java\n    @Override\n    protected void onListItemClick(ListView list, View view, int position, \n        long id){\n      super.onListItemClick(list, view, position, id);\n\n      AppInfo rowClicked = (AppInfo)this.getListAdapter().getItem(\n          position);\n\n      Intent startApp = new Intent();\n      ComponentName component = new ComponentName(\n          rowClicked.getPackageName(), \n          rowClicked.getClassName());\n      startApp.setComponent(component);\n      startApp.setAction(Intent.ACTION_MAIN);\n\n      startActivity(startApp);\n    }\n```\n\nBefore you run the AppLauncher, be sure to copy and paste the classes and methods into the AppLauncher class so it resembles the complete file below.\n\n```java\n  package org.example.hello;\n\n  import java.util.ArrayList;\n  import java.util.Collections;\n  import java.util.List;\n\n  import android.app.ListActivity;\n  import android.app.ProgressDialog;\n  import android.content.ComponentName;\n  import android.content.Context;\n  import android.content.Intent;\n  import android.content.pm.ActivityInfo;\n  import android.content.pm.PackageInfo;\n  import android.content.pm.PackageManager;\n  import android.content.pm.ResolveInfo;\n  import android.graphics.drawable.Drawable;\n  import android.os.Bundle;\n  import android.util.Log;\n  import android.view.LayoutInflater;\n  import android.view.View;\n  import android.view.ViewGroup;\n  import android.widget.ArrayAdapter;\n  import android.widget.ImageView;\n  import android.widget.ListView;\n  import android.widget.TextView;\n\n  public class AppLauncher extends ListActivity{\n    ApplicationAdapter appAdapter = null;\n    ProgressDialog progressDialog = null; \n    Runnable viewApps = null;\n    ArrayList<AppInfo> packageList = null;\n    Applications myApps = null;\n\n    public void onCreate(Bundle savedInstanceState){\n      super.onCreate(savedInstanceState);\n\n      this.setContentView(R.layout.applauncher);\n\n      packageList = new ArrayList<AppInfo>();\n      appAdapter = new ApplicationAdapter(this, R.layout.applauncherrow,\n          packageList);\n\n      this.setListAdapter(appAdapter);\n\n      viewApps = new Runnable(){\n        public void run(){\n          getApps();\n        }\n      };\n\n      Thread appLoaderThread = new Thread(null, viewApps, \n          \"AppLoaderThread\");\n      appLoaderThread.start();\n\n      progressDialog = ProgressDialog.show(AppLauncher.this, \n          \"Hold on...\", \"Loading your apps...\", true);\n    }\n\n    public class Applications{\n      private ArrayList<AppInfo> packageList = null;\n      private List<ResolveInfo> activityList = null;\n      private Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);\n      private PackageManager packMan = null;\n\n      public Applications(PackageManager packManager){\n        packMan = packManager;\n        packageList = this.createPackageList(false);\n        activityList = this.createActivityList();\n        this.addClassNamesToPackageList();\n      }\n\n      public ArrayList<AppInfo> getPackageList(){\n        return packageList;\n      }\n\n      public List<ResolveInfo> getActivityList(){\n        return activityList;\n      }\n\n      private ArrayList<AppInfo> createPackageList(boolean getSysPackages){\n        ArrayList<AppInfo> pList = new ArrayList<AppInfo>();        \n\n        List<PackageInfo> packs = getPackageManager(\n            ).getInstalledPackages(0);\n\n        for(int i = 0; i < packs.size(); i++){\n          PackageInfo packInfo = packs.get(i);\n\n          if((!getSysPackages) && (packInfo.versionName == null)){\n            continue ;\n          }\n\n          AppInfo newInfo = new AppInfo();\n\n          newInfo.appName = packInfo.applicationInfo.loadLabel(\n              getPackageManager()).toString();\n          newInfo.packageName = packInfo.packageName;   \n          newInfo.versionName = packInfo.versionName;\n          newInfo.versionCode = packInfo.versionCode;\n          newInfo.icon = packInfo.applicationInfo.loadIcon(\n              getPackageManager());\n\n          pList.add(newInfo);\n        }\n        return pList; \n      }\n\n      private List<ResolveInfo> createActivityList(){\n        List<ResolveInfo> aList = packMan.queryIntentActivities(mainIntent, 0);\n\n        Collections.sort(aList, \n            new ResolveInfo.DisplayNameComparator(packMan)); \n\n        return aList;\n      }\n\n      private void packageDebug(){\n        if(null == packageList){\n          return;\n        }\n\n        for(int i = 0; i < packageList.size(); ++i){\n          Log.v(\"PACKINFO: \", \"\\t\" + \n              packageList.get(i).appName + \"\\t\" + \n              packageList.get(i).packageName + \"\\t\" + \n              packageList.get(i).className + \"\\t\" +\n              packageList.get(i).versionName + \"\\t\" + \n              packageList.get(i).versionCode);\n        }\n      }\n\n      private void activityDebug(){\n        if(null == activityList){\n          return;\n        }\n\n        for(int i = 0; i < activityList.size(); i++){ \n          ActivityInfo currentActivity = activityList.get(\n              i).activityInfo;\n          Log.v(\"ACTINFO\", \n              \"pName=\" \n              + currentActivity.applicationInfo.packageName +\n              \" cName=\" + currentActivity.name);\n        }\n      }\n\n      private void addClassNamesToPackageList(){\n        if(null == activityList || null == packageList){\n          return;\n        }\n\n        String tempName = \"\";\n\n        for(int i = 0; i < packageList.size(); ++i){\n          tempName = packageList.get(i).packageName;\n\n          for(int j = 0; j < activityList.size(); ++j){\n            if(tempName.equals(activityList.get(\n                    j).activityInfo.applicationInfo.packageName)){\n              packageList.get(i).className = activityList.get(\n                  j).activityInfo.name;\n            }\n          }\n        }\n      }\n    }\n\n    public class AppInfo{\n      private String appName = \"\";\n      private String packageName = \"\";\n      private String className = \"\";\n      private String versionName = \"\";\n      private Integer versionCode = 0;\n      private Drawable icon = null;\n\n      public String getAppName(){\n        return appName;\n      }\n\n      public String getPackageName(){\n        return packageName;\n      }\n\n      public String getClassName(){\n        return className;\n      }\n\n      public String getVersionName(){\n        return versionName;\n      }\n\n      public Integer getVersionCode(){\n        return versionCode;\n      }\n\n      public Drawable getIcon(){\n        return icon;\n      }\n    }\n\n    public class ApplicationAdapter extends ArrayAdapter<AppInfo>{\n      private ArrayList<AppInfo> items;\n\n      public ApplicationAdapter(Context context, int textViewResourceId, \n          ArrayList<AppInfo> items){\n        super(context, textViewResourceId, items);\n        this.items = items;\n      }\n\n      @Override\n        public View getView(int position, View convertView, \n            ViewGroup parent){\n          View view = convertView;\n\n          if(view == null){\n            LayoutInflater layout = (LayoutInflater)getSystemService(\n                Context.LAYOUT_INFLATER_SERVICE);\n            view = layout.inflate(R.layout.applauncherrow, null);\n          }\n\n          AppInfo appInfo = items.get(position);\n          if(appInfo != null){\n            TextView appName = (TextView) view.findViewById(\n                R.id.applauncherrow_appname);\n            ImageView appIcon = (ImageView) view.findViewById(\n                R.id.applauncherrow_icon);\n\n            if(appName != null){\n              appName.setText(appInfo.getAppName());\n            }\n            if(appIcon != null){\n              appIcon.setImageDrawable(appInfo.getIcon());\n            }\n          }\n\n          return view;\n        }\n    }\n\n    private void getApps(){\n      try{\n        myApps = new Applications(getPackageManager());\n        packageList = myApps.getPackageList();\n      }\n      catch(Exception exception){\n        Log.e(\"BACKGROUND PROC:\", exception.getMessage());\n      }\n      this.runOnUiThread(returnRes);\n    }\n\n    private Runnable returnRes = new Runnable(){\n      public void run(){\n        if(packageList != null && packageList.size() > 0){\n          appAdapter.notifyDataSetChanged();\n\n          for(int i = 0; i < packageList.size(); ++i){\n            appAdapter.add(packageList.get(i));\n          }\n        }\n        progressDialog.dismiss();\n        appAdapter.notifyDataSetChanged();\n      }\n    };\n\n    @Override\n      protected void onListItemClick(ListView list, View view, int position, \n          long id){\n        super.onListItemClick(list, view, position, id);\n\n        AppInfo rowClicked = (AppInfo)this.getListAdapter().getItem(\n            position);\n\n        Intent startApp = new Intent();\n        ComponentName component = new ComponentName(\n            rowClicked.getPackageName(), \n            rowClicked.getClassName());\n        startApp.setComponent(component);\n        startApp.setAction(Intent.ACTION_MAIN);\n\n        startActivity(startApp);\n      }\n  }\n\n```\n\nEnjoy your AppLauncher.\n","slug":"buildanapplicationlauncherwithandroid","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3h4000cyswvw5qecn61","layout":"post","photos":[],"link":"","content":"<p>In this tutorial we’ll create an interesting android application which has the ability to launch any other app you have installed on your phone. If you’ve ever wanted to know how Android applications perform cross app communication you should read on (this tutorial assumes familiarity with the Android API).</p>\n<a id=\"more\"></a>\n<p>To start off create a new Android application project within Eclipse. Whenever I develop Android apps I usually start with the layout of the application and add functionality via Java classes later. Since our app will display the users installed apps within a ListView widget we have to first declare a layout to hold the ListView itself.</p>\n<p>Create a new xml layout for the ListView by right clicking the res/layout folder and adding a new android xml file. Title it “applauncher.xml” and then add the code below to it.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">  <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/applauncher_linearlayout\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ListView</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/list\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/empty\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"List PlaceHolder\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When using ListViews we can setup the overall look of each row by creating an xml layout with a skeleton of the widgets that we want to display in each row of our ListView. Think of the row layout as a “row template”. If you look at the screenshots of the app you can tell that we only need two widgets within our row layout, an ImageView to hold the apps icon and a TextView to display the apps package name.</p>\n<p>Create a new xml layout for the ListView rows by right clicking the res/layout folder and adding a new android xml file. Title it “applauncherrow.xml” and add the code below.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">  <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/applauncherrow_imagelinearlayout\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?android:attr/listPreferredItemHeight\"</span></div><div class=\"line\">  <span class=\"attr\">android:padding</span>=<span class=\"string\">\"6dip\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">  <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/applauncherrow_icon\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">\"6dip\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/applauncherrow_namelinearlayout\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dip\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/applauncherrow_appname\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dip\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center_vertical\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Next we’re going to setup the main activity for the launcher app and register the activity in the manifest.</p>\n<p>Create a new Java Class and name it “AppLauncher.java”.</p>\n<p>Next open up the manifest file for your application and make sure it looks like the code below.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Your package=\"\" name might differ --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> </span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">package</span>=<span class=\"string\">\"org.example.hello\"</span> </div><div class=\"line\"><span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\"><span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Your default android:icon=\"\" name might differ --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span> </span></div><div class=\"line\"><span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/icon\"</span> </div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"AppLauncher\"</span> </div><div class=\"line\"><span class=\"attr\">android:debuggable</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:description</span>=<span class=\"string\">\"An Application Launcher\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\"AppLauncher\"</span></div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"AppLauncher\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- This tag indicates the initial activity --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span> <span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"8\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Ok so now that the layouts are coded up and the activity is registered within the manifest open up AppLauncher.java and lets begin.</p>\n<p>Lets start off with importing all the necessary libraries needed for our app.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Your package name might differ</span></div><div class=\"line\"><span class=\"keyword\">package</span> org.example.hello;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.ListActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.app.ProgressDialog;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.ComponentName;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.ActivityInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.PackageInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.PackageManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.ResolveInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ArrayAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div></pre></td></tr></table></figure>\n<p>Our app will extend the ListActivity class in order to reduce the boiler plate needed to build a ListView.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppLauncher</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListActivity</span></span>&#123;</div></pre></td></tr></table></figure>\n<p>However, due to the structure of the app we’ll build the classes needed and stitch them together so just follow along with a text editor for now. To begin we’ll need a class to hold all the useful data we can obtain from a given app. We’ll call it AppInfo, its very basic so go ahead and type it into your editor.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppInfo</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> String appName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String packageName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String className = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String versionName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> Integer versionCode = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> Drawable icon = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAppName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> appName;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPackageName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> packageName;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getClassName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> className;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getVersionName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> versionName;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getVersionCode</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> versionCode;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Drawable <span class=\"title\">getIcon</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> icon;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next class we need is a class that will be used to obtain the application info for the AppInfo class. This class is the bread and butter of our AppLauncher and it together with the AppInfo class can be ported to any application which needs to access other apps via intents.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Applications</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; packageList = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; activityList = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> Intent mainIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MAIN, <span class=\"keyword\">null</span>);</div><div class=\"line\">  <span class=\"keyword\">private</span> PackageManager packMan = <span class=\"keyword\">null</span>;</div></pre></td></tr></table></figure>\n<p>For the Applications constructor we will pass in the all important PackageManager from the main context.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Applications</span><span class=\"params\">(PackageManager packManager)</span></span>&#123;</div><div class=\"line\">  packMan = packManager;</div><div class=\"line\">  packageList = <span class=\"keyword\">this</span>.createPackageList(<span class=\"keyword\">false</span>);</div><div class=\"line\">  activityList = <span class=\"keyword\">this</span>.createActivityList();</div><div class=\"line\">  <span class=\"keyword\">this</span>.addClassNamesToPackageList();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Below are some getter methods for the package and activities list. The difference between the two is that the package list contains the info about the apps data and the activity list contains info about the intents the app responds to.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">getPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> packageList;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;ResolveInfo&gt; <span class=\"title\">getActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> activityList;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next method is the createPackageList method. All it does is simply extract a list of all the installed apps via the PackageManager that we passed into the constructor. Next we iterate over the list and copy the info we need into a AppInfo object and then shove that object into the ArrayList<appinfo> that will be returned.</appinfo></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">createPackageList</span><span class=\"params\">(<span class=\"keyword\">boolean</span> getSysPackages)</span></span>&#123;</div><div class=\"line\">  ArrayList&lt;AppInfo&gt; pList = <span class=\"keyword\">new</span> ArrayList&lt;AppInfo&gt;();        </div><div class=\"line\"></div><div class=\"line\">  List&lt;PackageInfo&gt; packs = getPackageManager(</div><div class=\"line\">      ).getInstalledPackages(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packs.size(); i++)&#123;</div><div class=\"line\">    PackageInfo packInfo = packs.get(i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>((!getSysPackages) &amp;&amp; (packInfo.versionName == <span class=\"keyword\">null</span>))&#123;</div><div class=\"line\">      <span class=\"keyword\">continue</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    AppInfo newInfo = <span class=\"keyword\">new</span> AppInfo();</div><div class=\"line\"></div><div class=\"line\">    newInfo.appName = packInfo.applicationInfo.loadLabel(</div><div class=\"line\">        getPackageManager()).toString();</div><div class=\"line\">    newInfo.packageName = packInfo.packageName;   </div><div class=\"line\">    newInfo.versionName = packInfo.versionName;</div><div class=\"line\">    newInfo.versionCode = packInfo.versionCode;</div><div class=\"line\">    newInfo.icon = packInfo.applicationInfo.loadIcon(</div><div class=\"line\">        getPackageManager());</div><div class=\"line\"></div><div class=\"line\">    pList.add(newInfo);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> pList; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Similar to the createPakageList method, createActivityList will return a list with all of the apps installed intent data but unlike createPackageList its only 8 lines of code.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; <span class=\"title\">createActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  List&lt;ResolveInfo&gt; aList = packMan.queryIntentActivities(mainIntent, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">  Collections.sort(aList, </div><div class=\"line\">      <span class=\"keyword\">new</span> ResolveInfo.DisplayNameComparator(packMan)); </div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> aList;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next two methods are purely for dubugging purposes and can actually be left out but we’ll include them for completeness or in case you use this class in another application.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">packageDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">      Log.v(<span class=\"string\">\"PACKINFO: \"</span>, <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).appName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).packageName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).className + <span class=\"string\">\"\\t\"</span> +</div><div class=\"line\">          packageList.get(i).versionName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).versionCode);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">activityDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; activityList.size(); i++)&#123; </div><div class=\"line\">    ActivityInfo currentActivity = activityList.get(</div><div class=\"line\">        i).activityInfo;</div><div class=\"line\">    Log.v(<span class=\"string\">\"ACTINFO\"</span>, </div><div class=\"line\">        <span class=\"string\">\"pName=\"</span> </div><div class=\"line\">        + currentActivity.applicationInfo.packageName +</div><div class=\"line\">        <span class=\"string\">\" cName=\"</span> + currentActivity.name);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next method is needed only because in order to launch an app you need both its package name and its intent name that connects to the main class of the app. However, if you only use the packageList you’ll lack the intent data, so the last method of the Application class adds the class name(intent data) to the packageList making it such that client of the class can have everything bundled up nicely in the packageList instead of having to rely on using both the activity and packageList in unison.</p>\n<p>For the method addClassNameToPackageList we’ll iterate over the packageList and for each packageName we’ll find its match within the activityList by packageName and then extract the className from the activityList.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addClassNamesToPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList || <span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      String tempName = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">        tempName = packageList.get(i).packageName;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; activityList.size(); ++j)&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(tempName.equals(activityList.get(</div><div class=\"line\">                  j).activityInfo.applicationInfo.packageName))&#123;</div><div class=\"line\">            packageList.get(i).className = activityList.get(</div><div class=\"line\">                j).activityInfo.name;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Below is the complete Application class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Applications</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; packageList = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; activityList = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> Intent mainIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MAIN, <span class=\"keyword\">null</span>);</div><div class=\"line\">  <span class=\"keyword\">private</span> PackageManager packMan = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Applications</span><span class=\"params\">(PackageManager packManager)</span></span>&#123;</div><div class=\"line\">    packMan = packManager;</div><div class=\"line\">    packageList = <span class=\"keyword\">this</span>.createPackageList(<span class=\"keyword\">false</span>);</div><div class=\"line\">    activityList = <span class=\"keyword\">this</span>.createActivityList();</div><div class=\"line\">    <span class=\"keyword\">this</span>.addClassNamesToPackageList();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">getPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> packageList;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> List&lt;ResolveInfo&gt; <span class=\"title\">getActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> activityList;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">createPackageList</span><span class=\"params\">(<span class=\"keyword\">boolean</span> getSysPackages)</span></span>&#123;</div><div class=\"line\">    ArrayList&lt;AppInfo&gt; pList = <span class=\"keyword\">new</span> ArrayList&lt;AppInfo&gt;();        </div><div class=\"line\"></div><div class=\"line\">    List&lt;PackageInfo&gt; packs = getPackageManager(</div><div class=\"line\">        ).getInstalledPackages(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packs.size(); i++)&#123;</div><div class=\"line\">      PackageInfo packInfo = packs.get(i);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>((!getSysPackages) &amp;&amp; (packInfo.versionName == <span class=\"keyword\">null</span>))&#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      AppInfo newInfo = <span class=\"keyword\">new</span> AppInfo();</div><div class=\"line\"></div><div class=\"line\">      newInfo.appName = packInfo.applicationInfo.loadLabel(</div><div class=\"line\">          getPackageManager()).toString();</div><div class=\"line\">      newInfo.packageName = packInfo.packageName;   </div><div class=\"line\">      newInfo.versionName = packInfo.versionName;</div><div class=\"line\">      newInfo.versionCode = packInfo.versionCode;</div><div class=\"line\">      newInfo.icon = packInfo.applicationInfo.loadIcon(</div><div class=\"line\">          getPackageManager());</div><div class=\"line\"></div><div class=\"line\">      pList.add(newInfo);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> pList; </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; <span class=\"title\">createActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    List&lt;ResolveInfo&gt; aList = packMan.queryIntentActivities(mainIntent, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    Collections.sort(aList, </div><div class=\"line\">        <span class=\"keyword\">new</span> ResolveInfo.DisplayNameComparator(packMan)); </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> aList;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">packageDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">      Log.v(<span class=\"string\">\"PACKINFO: \"</span>, <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).appName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).packageName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).className + <span class=\"string\">\"\\t\"</span> +</div><div class=\"line\">          packageList.get(i).versionName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).versionCode);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">activityDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; activityList.size(); i++)&#123; </div><div class=\"line\">      ActivityInfo currentActivity = activityList.get(</div><div class=\"line\">          i).activityInfo;</div><div class=\"line\">      Log.v(<span class=\"string\">\"ACTINFO\"</span>, </div><div class=\"line\">          <span class=\"string\">\"pName=\"</span> </div><div class=\"line\">          + currentActivity.applicationInfo.packageName +</div><div class=\"line\">          <span class=\"string\">\" cName=\"</span> + currentActivity.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addClassNamesToPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList || <span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    String tempName = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">      tempName = packageList.get(i).packageName;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; activityList.size(); ++j)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(tempName.equals(activityList.get(</div><div class=\"line\">                j).activityInfo.applicationInfo.packageName))&#123;</div><div class=\"line\">          packageList.get(i).className = activityList.get(</div><div class=\"line\">              j).activityInfo.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Remember the AppInfo class that we made and the applauncherrow.xml layout. Well, now we’ll utilize both within the custom ArrayAdapter extension we’ll use to populate the data of our List. ArrayAdapters are used to fill in the data fields of a ListView widget by storing a layout(android uses the term inflate) holding data into a single row of the list.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter</span>&lt;<span class=\"title\">AppInfo</span>&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; items;</div></pre></td></tr></table></figure>\n<p>The constructor for our ArrayAdapter extension…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationAdapter</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> textViewResourceId, ArrayList&lt;AppInfo&gt; items)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>(context, textViewResourceId, items);</div><div class=\"line\">  <span class=\"keyword\">this</span>.items = items;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Being an ArrayAdapter extension means that we have to override the getView method, this is where the applauncherrow layout is populated with data and is used to represent each row of the ListView. To start we’ll reference the applauncherrow layout and inflate it to become a view.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, </span></span></div><div class=\"line\">    ViewGroup parent)&#123;</div><div class=\"line\">  View view = convertView;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>(view == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">    LayoutInflater layout = (LayoutInflater)getSystemService(</div><div class=\"line\">        Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">    view = layout.inflate(R.layout.applauncherrow, <span class=\"keyword\">null</span>);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>Now that the view is inflated with the applauncherrow.xml layout we can now match the ImageView and TextView with the contents of a AppInfo object in preparation for moving it into the ListView.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">        AppInfo appInfo = items.get(position);</div><div class=\"line\">      <span class=\"keyword\">if</span>(appInfo != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        TextView appName = (TextView) view.findViewById(</div><div class=\"line\">            R.id.applauncherrow_appname);</div><div class=\"line\">        ImageView appIcon = (ImageView) view.findViewById(</div><div class=\"line\">            R.id.applauncherrow_icon);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(appName != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          appName.setText(appInfo.getAppName());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(appIcon != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          appIcon.setImageDrawable(appInfo.getIcon());</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> view;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here is the complete ApplicationAdapter class, you should add it to your text file.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter</span>&lt;<span class=\"title\">AppInfo</span>&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; items;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationAdapter</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> textViewResourceId, </span></span></div><div class=\"line\">      ArrayList&lt;AppInfo&gt; items)&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, textViewResourceId, items);</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = items;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, </span></span></div><div class=\"line\">        ViewGroup parent)&#123;</div><div class=\"line\">      View view = convertView;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>(view == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        LayoutInflater layout = (LayoutInflater)getSystemService(</div><div class=\"line\">            Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">        view = layout.inflate(R.layout.applauncherrow, <span class=\"keyword\">null</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      AppInfo appInfo = items.get(position);</div><div class=\"line\">      <span class=\"keyword\">if</span>(appInfo != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        TextView appName = (TextView) view.findViewById(</div><div class=\"line\">            R.id.applauncherrow_appname);</div><div class=\"line\">        ImageView appIcon = (ImageView) view.findViewById(</div><div class=\"line\">            R.id.applauncherrow_icon);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(appName != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          appName.setText(appInfo.getAppName());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(appIcon != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          appIcon.setImageDrawable(appInfo.getIcon());</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> view;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>We are done with the utility classes so the next step is to add some methods to the AppLauncher class itself. The first one we’re going to add is a method called getApps() which stores the pacakageList from an Applications object and passes it off to Java Runnable to be ran on a thread.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getApps</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    myApps = <span class=\"keyword\">new</span> Applications(getPackageManager());</div><div class=\"line\">    packageList = myApps.getPackageList();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>(Exception exception)&#123;</div><div class=\"line\">    Log.e(<span class=\"string\">\"BACKGROUND PROC:\"</span>, exception.getMessage());</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">this</span>.runOnUiThread(returnRes);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you look at the getApps() method the last line before the class ends is a method called this.runOnUiThread(returnRes), now what this means is that the main thread will be locked while we pump AppInfo objects into our ListView via the ArrayAdapter. If you are experienced with concurrent programming you might be wondering why lock the mainUIThread, the answer is because our app can’t do anything until all objects have been added to the list. If we by chance were dynamically loading things from the Internet via HTTP requests then we would opt instead for a lazy loader which spawns a thread for each view object pumped into the ListVIew and the list would slowly populate as each item was fetched live from the web. So anyways here is our Runnable method that checks first that the packageList exists and then uses an object from our ApplicationAdapter to fill up our ListView widget.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> Runnable returnRes = <span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(packageList != <span class=\"keyword\">null</span> &amp;&amp; packageList.size() &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      appAdapter.notifyDataSetChanged();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">        appAdapter.add(packageList.get(i));</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    progressDialog.dismiss();</div><div class=\"line\">    appAdapter.notifyDataSetChanged();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>We’re almost done so now open up your Eclipse IDE to the AppLauncher project and click on the AppLauncher.java class. If you remember from earlier where we left off go ahead and add the data members below to the AppLauncher class; notice the line numbers for reference.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ApplicationAdapter appAdapter = <span class=\"keyword\">null</span>;</div><div class=\"line\">ProgressDialog progressDialog = <span class=\"keyword\">null</span>; </div><div class=\"line\">Runnable viewApps = <span class=\"keyword\">null</span>;</div><div class=\"line\">ArrayList&lt;AppInfo&gt; packageList = <span class=\"keyword\">null</span>;</div><div class=\"line\">Applications myApps = <span class=\"keyword\">null</span>;</div></pre></td></tr></table></figure>\n<p>For the onCreate() method there are some things you sould notice. First since AppLauncher is a ListActivity extension it inherits the setListAdapter() method. Second we’ll  initialize the viewApps Runnable to call our getApps() within its run(). This means that any thread created with the viewApps as it’s runnable will load up our packages into the ListView. In addition since getApps() locks the mainUIThread users of this app won’t be able to do anything until the thread finishes.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.setContentView(R.layout.applauncher);</div><div class=\"line\"></div><div class=\"line\">  packageList = <span class=\"keyword\">new</span> ArrayList&lt;AppInfo&gt;();</div><div class=\"line\">  appAdapter = <span class=\"keyword\">new</span> ApplicationAdapter(<span class=\"keyword\">this</span>, R.layout.applauncherrow,</div><div class=\"line\">      packageList);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.setListAdapter(appAdapter);</div><div class=\"line\"></div><div class=\"line\">  viewApps = <span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      getApps();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  Thread appLoaderThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">null</span>, viewApps, </div><div class=\"line\">      <span class=\"string\">\"AppLoaderThread\"</span>);</div><div class=\"line\">  appLoaderThread.start();</div></pre></td></tr></table></figure>\n<p>Now that the thread has started and the app has been officially locked, how do we notify the user? The answer is with the android.app.ProgressDialog widget. Remember those loading screen from popular video games, that’s all ProgressDialogs do.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">    progressDialog = ProgressDialog.show(AppLauncher.<span class=\"keyword\">this</span>, <span class=\"string\">\"Hold on...\"</span>, <span class=\"string\">\"Loading your apps...\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Right now our app can successfully load up a list of Icons and application names but how then do we launch the apps the user touches from our list? The answer is via starting a new intent by overriding the onListItemClick method. So go open up your text file that contains the utility classes and methods and add the onListItemClick() method to it.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onListItemClick</span><span class=\"params\">(ListView list, View view, <span class=\"keyword\">int</span> position, </span></span></div><div class=\"line\">    <span class=\"keyword\">long</span> id)&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onListItemClick(list, view, position, id);</div><div class=\"line\"></div><div class=\"line\">  AppInfo rowClicked = (AppInfo)<span class=\"keyword\">this</span>.getListAdapter().getItem(</div><div class=\"line\">      position);</div><div class=\"line\"></div><div class=\"line\">  Intent startApp = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">  ComponentName component = <span class=\"keyword\">new</span> ComponentName(</div><div class=\"line\">      rowClicked.getPackageName(), </div><div class=\"line\">      rowClicked.getClassName());</div><div class=\"line\">  startApp.setComponent(component);</div><div class=\"line\">  startApp.setAction(Intent.ACTION_MAIN);</div><div class=\"line\"></div><div class=\"line\">  startActivity(startApp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Before you run the AppLauncher, be sure to copy and paste the classes and methods into the AppLauncher class so it resembles the complete file below.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> org.example.hello;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.ListActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.app.ProgressDialog;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.ComponentName;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.ActivityInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.PackageInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.PackageManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.ResolveInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ArrayAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppLauncher</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListActivity</span></span>&#123;</div><div class=\"line\">  ApplicationAdapter appAdapter = <span class=\"keyword\">null</span>;</div><div class=\"line\">  ProgressDialog progressDialog = <span class=\"keyword\">null</span>; </div><div class=\"line\">  Runnable viewApps = <span class=\"keyword\">null</span>;</div><div class=\"line\">  ArrayList&lt;AppInfo&gt; packageList = <span class=\"keyword\">null</span>;</div><div class=\"line\">  Applications myApps = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.setContentView(R.layout.applauncher);</div><div class=\"line\"></div><div class=\"line\">    packageList = <span class=\"keyword\">new</span> ArrayList&lt;AppInfo&gt;();</div><div class=\"line\">    appAdapter = <span class=\"keyword\">new</span> ApplicationAdapter(<span class=\"keyword\">this</span>, R.layout.applauncherrow,</div><div class=\"line\">        packageList);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.setListAdapter(appAdapter);</div><div class=\"line\"></div><div class=\"line\">    viewApps = <span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        getApps();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    Thread appLoaderThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">null</span>, viewApps, </div><div class=\"line\">        <span class=\"string\">\"AppLoaderThread\"</span>);</div><div class=\"line\">    appLoaderThread.start();</div><div class=\"line\"></div><div class=\"line\">    progressDialog = ProgressDialog.show(AppLauncher.<span class=\"keyword\">this</span>, </div><div class=\"line\">        <span class=\"string\">\"Hold on...\"</span>, <span class=\"string\">\"Loading your apps...\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Applications</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; packageList = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; activityList = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Intent mainIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MAIN, <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">private</span> PackageManager packMan = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Applications</span><span class=\"params\">(PackageManager packManager)</span></span>&#123;</div><div class=\"line\">      packMan = packManager;</div><div class=\"line\">      packageList = <span class=\"keyword\">this</span>.createPackageList(<span class=\"keyword\">false</span>);</div><div class=\"line\">      activityList = <span class=\"keyword\">this</span>.createActivityList();</div><div class=\"line\">      <span class=\"keyword\">this</span>.addClassNamesToPackageList();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">getPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> packageList;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;ResolveInfo&gt; <span class=\"title\">getActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> activityList;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">createPackageList</span><span class=\"params\">(<span class=\"keyword\">boolean</span> getSysPackages)</span></span>&#123;</div><div class=\"line\">      ArrayList&lt;AppInfo&gt; pList = <span class=\"keyword\">new</span> ArrayList&lt;AppInfo&gt;();        </div><div class=\"line\"></div><div class=\"line\">      List&lt;PackageInfo&gt; packs = getPackageManager(</div><div class=\"line\">          ).getInstalledPackages(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packs.size(); i++)&#123;</div><div class=\"line\">        PackageInfo packInfo = packs.get(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>((!getSysPackages) &amp;&amp; (packInfo.versionName == <span class=\"keyword\">null</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">continue</span> ;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        AppInfo newInfo = <span class=\"keyword\">new</span> AppInfo();</div><div class=\"line\"></div><div class=\"line\">        newInfo.appName = packInfo.applicationInfo.loadLabel(</div><div class=\"line\">            getPackageManager()).toString();</div><div class=\"line\">        newInfo.packageName = packInfo.packageName;   </div><div class=\"line\">        newInfo.versionName = packInfo.versionName;</div><div class=\"line\">        newInfo.versionCode = packInfo.versionCode;</div><div class=\"line\">        newInfo.icon = packInfo.applicationInfo.loadIcon(</div><div class=\"line\">            getPackageManager());</div><div class=\"line\"></div><div class=\"line\">        pList.add(newInfo);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> pList; </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; <span class=\"title\">createActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      List&lt;ResolveInfo&gt; aList = packMan.queryIntentActivities(mainIntent, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">      Collections.sort(aList, </div><div class=\"line\">          <span class=\"keyword\">new</span> ResolveInfo.DisplayNameComparator(packMan)); </div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> aList;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">packageDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">        Log.v(<span class=\"string\">\"PACKINFO: \"</span>, <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">            packageList.get(i).appName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">            packageList.get(i).packageName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">            packageList.get(i).className + <span class=\"string\">\"\\t\"</span> +</div><div class=\"line\">            packageList.get(i).versionName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">            packageList.get(i).versionCode);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">activityDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; activityList.size(); i++)&#123; </div><div class=\"line\">        ActivityInfo currentActivity = activityList.get(</div><div class=\"line\">            i).activityInfo;</div><div class=\"line\">        Log.v(<span class=\"string\">\"ACTINFO\"</span>, </div><div class=\"line\">            <span class=\"string\">\"pName=\"</span> </div><div class=\"line\">            + currentActivity.applicationInfo.packageName +</div><div class=\"line\">            <span class=\"string\">\" cName=\"</span> + currentActivity.name);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addClassNamesToPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList || <span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      String tempName = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">        tempName = packageList.get(i).packageName;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; activityList.size(); ++j)&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(tempName.equals(activityList.get(</div><div class=\"line\">                  j).activityInfo.applicationInfo.packageName))&#123;</div><div class=\"line\">            packageList.get(i).className = activityList.get(</div><div class=\"line\">                j).activityInfo.name;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppInfo</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String appName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String packageName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String className = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String versionName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer versionCode = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Drawable icon = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAppName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> appName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPackageName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> packageName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getClassName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> className;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getVersionName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> versionName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getVersionCode</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> versionCode;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Drawable <span class=\"title\">getIcon</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> icon;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter</span>&lt;<span class=\"title\">AppInfo</span>&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; items;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationAdapter</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> textViewResourceId, </span></span></div><div class=\"line\">        ArrayList&lt;AppInfo&gt; items)&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(context, textViewResourceId, items);</div><div class=\"line\">      <span class=\"keyword\">this</span>.items = items;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, </span></span></div><div class=\"line\">          ViewGroup parent)&#123;</div><div class=\"line\">        View view = convertView;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(view == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          LayoutInflater layout = (LayoutInflater)getSystemService(</div><div class=\"line\">              Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">          view = layout.inflate(R.layout.applauncherrow, <span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        AppInfo appInfo = items.get(position);</div><div class=\"line\">        <span class=\"keyword\">if</span>(appInfo != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          TextView appName = (TextView) view.findViewById(</div><div class=\"line\">              R.id.applauncherrow_appname);</div><div class=\"line\">          ImageView appIcon = (ImageView) view.findViewById(</div><div class=\"line\">              R.id.applauncherrow_icon);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span>(appName != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            appName.setText(appInfo.getAppName());</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">if</span>(appIcon != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            appIcon.setImageDrawable(appInfo.getIcon());</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> view;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getApps</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">      myApps = <span class=\"keyword\">new</span> Applications(getPackageManager());</div><div class=\"line\">      packageList = myApps.getPackageList();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span>(Exception exception)&#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"BACKGROUND PROC:\"</span>, exception.getMessage());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.runOnUiThread(returnRes);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> Runnable returnRes = <span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(packageList != <span class=\"keyword\">null</span> &amp;&amp; packageList.size() &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        appAdapter.notifyDataSetChanged();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">          appAdapter.add(packageList.get(i));</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      progressDialog.dismiss();</div><div class=\"line\">      appAdapter.notifyDataSetChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onListItemClick</span><span class=\"params\">(ListView list, View view, <span class=\"keyword\">int</span> position, </span></span></div><div class=\"line\">        <span class=\"keyword\">long</span> id)&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onListItemClick(list, view, position, id);</div><div class=\"line\"></div><div class=\"line\">      AppInfo rowClicked = (AppInfo)<span class=\"keyword\">this</span>.getListAdapter().getItem(</div><div class=\"line\">          position);</div><div class=\"line\"></div><div class=\"line\">      Intent startApp = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">      ComponentName component = <span class=\"keyword\">new</span> ComponentName(</div><div class=\"line\">          rowClicked.getPackageName(), </div><div class=\"line\">          rowClicked.getClassName());</div><div class=\"line\">      startApp.setComponent(component);</div><div class=\"line\">      startApp.setAction(Intent.ACTION_MAIN);</div><div class=\"line\"></div><div class=\"line\">      startActivity(startApp);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Enjoy your AppLauncher.</p>\n","site":{"data":{}},"excerpt":"<p>In this tutorial we’ll create an interesting android application which has the ability to launch any other app you have installed on your phone. If you’ve ever wanted to know how Android applications perform cross app communication you should read on (this tutorial assumes familiarity with the Android API).</p>","more":"<p>To start off create a new Android application project within Eclipse. Whenever I develop Android apps I usually start with the layout of the application and add functionality via Java classes later. Since our app will display the users installed apps within a ListView widget we have to first declare a layout to hold the ListView itself.</p>\n<p>Create a new xml layout for the ListView by right clicking the res/layout folder and adding a new android xml file. Title it “applauncher.xml” and then add the code below to it.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">  <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/applauncher_linearlayout\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ListView</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/list\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/empty\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"List PlaceHolder\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When using ListViews we can setup the overall look of each row by creating an xml layout with a skeleton of the widgets that we want to display in each row of our ListView. Think of the row layout as a “row template”. If you look at the screenshots of the app you can tell that we only need two widgets within our row layout, an ImageView to hold the apps icon and a TextView to display the apps package name.</p>\n<p>Create a new xml layout for the ListView rows by right clicking the res/layout folder and adding a new android xml file. Title it “applauncherrow.xml” and add the code below.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">  <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/applauncherrow_imagelinearlayout\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?android:attr/listPreferredItemHeight\"</span></div><div class=\"line\">  <span class=\"attr\">android:padding</span>=<span class=\"string\">\"6dip\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></div><div class=\"line\">  <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/applauncherrow_icon\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">\"6dip\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/applauncherrow_namelinearlayout\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dip\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/applauncherrow_appname\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dip\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center_vertical\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Next we’re going to setup the main activity for the launcher app and register the activity in the manifest.</p>\n<p>Create a new Java Class and name it “AppLauncher.java”.</p>\n<p>Next open up the manifest file for your application and make sure it looks like the code below.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Your package=\"\" name might differ --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> </div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">package</span>=<span class=\"string\">\"org.example.hello\"</span> </div><div class=\"line\"><span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\"><span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Your default android:icon=\"\" name might differ --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span> </div><div class=\"line\"><span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/icon\"</span> </div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"AppLauncher\"</span> </div><div class=\"line\"><span class=\"attr\">android:debuggable</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:description</span>=<span class=\"string\">\"An Application Launcher\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\"AppLauncher\"</span></div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"AppLauncher\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- This tag indicates the initial activity --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span> <span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"8\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Ok so now that the layouts are coded up and the activity is registered within the manifest open up AppLauncher.java and lets begin.</p>\n<p>Lets start off with importing all the necessary libraries needed for our app.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Your package name might differ</span></div><div class=\"line\"><span class=\"keyword\">package</span> org.example.hello;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.ListActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.app.ProgressDialog;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.ComponentName;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.ActivityInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.PackageInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.PackageManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.ResolveInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ArrayAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div></pre></td></tr></table></figure>\n<p>Our app will extend the ListActivity class in order to reduce the boiler plate needed to build a ListView.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppLauncher</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListActivity</span></span>&#123;</div></pre></td></tr></table></figure>\n<p>However, due to the structure of the app we’ll build the classes needed and stitch them together so just follow along with a text editor for now. To begin we’ll need a class to hold all the useful data we can obtain from a given app. We’ll call it AppInfo, its very basic so go ahead and type it into your editor.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppInfo</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> String appName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String packageName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String className = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String versionName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> Integer versionCode = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> Drawable icon = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAppName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> appName;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPackageName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> packageName;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getClassName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> className;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getVersionName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> versionName;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getVersionCode</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> versionCode;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Drawable <span class=\"title\">getIcon</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> icon;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next class we need is a class that will be used to obtain the application info for the AppInfo class. This class is the bread and butter of our AppLauncher and it together with the AppInfo class can be ported to any application which needs to access other apps via intents.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Applications</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; packageList = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; activityList = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> Intent mainIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MAIN, <span class=\"keyword\">null</span>);</div><div class=\"line\">  <span class=\"keyword\">private</span> PackageManager packMan = <span class=\"keyword\">null</span>;</div></pre></td></tr></table></figure>\n<p>For the Applications constructor we will pass in the all important PackageManager from the main context.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Applications</span><span class=\"params\">(PackageManager packManager)</span></span>&#123;</div><div class=\"line\">  packMan = packManager;</div><div class=\"line\">  packageList = <span class=\"keyword\">this</span>.createPackageList(<span class=\"keyword\">false</span>);</div><div class=\"line\">  activityList = <span class=\"keyword\">this</span>.createActivityList();</div><div class=\"line\">  <span class=\"keyword\">this</span>.addClassNamesToPackageList();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Below are some getter methods for the package and activities list. The difference between the two is that the package list contains the info about the apps data and the activity list contains info about the intents the app responds to.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">getPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> packageList;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;ResolveInfo&gt; <span class=\"title\">getActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> activityList;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next method is the createPackageList method. All it does is simply extract a list of all the installed apps via the PackageManager that we passed into the constructor. Next we iterate over the list and copy the info we need into a AppInfo object and then shove that object into the ArrayList<AppInfo> that will be returned.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">createPackageList</span><span class=\"params\">(<span class=\"keyword\">boolean</span> getSysPackages)</span></span>&#123;</div><div class=\"line\">  ArrayList&lt;AppInfo&gt; pList = <span class=\"keyword\">new</span> ArrayList&lt;AppInfo&gt;();        </div><div class=\"line\"></div><div class=\"line\">  List&lt;PackageInfo&gt; packs = getPackageManager(</div><div class=\"line\">      ).getInstalledPackages(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packs.size(); i++)&#123;</div><div class=\"line\">    PackageInfo packInfo = packs.get(i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>((!getSysPackages) &amp;&amp; (packInfo.versionName == <span class=\"keyword\">null</span>))&#123;</div><div class=\"line\">      <span class=\"keyword\">continue</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    AppInfo newInfo = <span class=\"keyword\">new</span> AppInfo();</div><div class=\"line\"></div><div class=\"line\">    newInfo.appName = packInfo.applicationInfo.loadLabel(</div><div class=\"line\">        getPackageManager()).toString();</div><div class=\"line\">    newInfo.packageName = packInfo.packageName;   </div><div class=\"line\">    newInfo.versionName = packInfo.versionName;</div><div class=\"line\">    newInfo.versionCode = packInfo.versionCode;</div><div class=\"line\">    newInfo.icon = packInfo.applicationInfo.loadIcon(</div><div class=\"line\">        getPackageManager());</div><div class=\"line\"></div><div class=\"line\">    pList.add(newInfo);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> pList; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Similar to the createPakageList method, createActivityList will return a list with all of the apps installed intent data but unlike createPackageList its only 8 lines of code.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; <span class=\"title\">createActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  List&lt;ResolveInfo&gt; aList = packMan.queryIntentActivities(mainIntent, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">  Collections.sort(aList, </div><div class=\"line\">      <span class=\"keyword\">new</span> ResolveInfo.DisplayNameComparator(packMan)); </div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> aList;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next two methods are purely for dubugging purposes and can actually be left out but we’ll include them for completeness or in case you use this class in another application.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">packageDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">      Log.v(<span class=\"string\">\"PACKINFO: \"</span>, <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).appName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).packageName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).className + <span class=\"string\">\"\\t\"</span> +</div><div class=\"line\">          packageList.get(i).versionName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).versionCode);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">activityDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; activityList.size(); i++)&#123; </div><div class=\"line\">    ActivityInfo currentActivity = activityList.get(</div><div class=\"line\">        i).activityInfo;</div><div class=\"line\">    Log.v(<span class=\"string\">\"ACTINFO\"</span>, </div><div class=\"line\">        <span class=\"string\">\"pName=\"</span> </div><div class=\"line\">        + currentActivity.applicationInfo.packageName +</div><div class=\"line\">        <span class=\"string\">\" cName=\"</span> + currentActivity.name);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next method is needed only because in order to launch an app you need both its package name and its intent name that connects to the main class of the app. However, if you only use the packageList you’ll lack the intent data, so the last method of the Application class adds the class name(intent data) to the packageList making it such that client of the class can have everything bundled up nicely in the packageList instead of having to rely on using both the activity and packageList in unison.</p>\n<p>For the method addClassNameToPackageList we’ll iterate over the packageList and for each packageName we’ll find its match within the activityList by packageName and then extract the className from the activityList.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addClassNamesToPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList || <span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      String tempName = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">        tempName = packageList.get(i).packageName;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; activityList.size(); ++j)&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(tempName.equals(activityList.get(</div><div class=\"line\">                  j).activityInfo.applicationInfo.packageName))&#123;</div><div class=\"line\">            packageList.get(i).className = activityList.get(</div><div class=\"line\">                j).activityInfo.name;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Below is the complete Application class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Applications</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; packageList = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; activityList = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> Intent mainIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MAIN, <span class=\"keyword\">null</span>);</div><div class=\"line\">  <span class=\"keyword\">private</span> PackageManager packMan = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Applications</span><span class=\"params\">(PackageManager packManager)</span></span>&#123;</div><div class=\"line\">    packMan = packManager;</div><div class=\"line\">    packageList = <span class=\"keyword\">this</span>.createPackageList(<span class=\"keyword\">false</span>);</div><div class=\"line\">    activityList = <span class=\"keyword\">this</span>.createActivityList();</div><div class=\"line\">    <span class=\"keyword\">this</span>.addClassNamesToPackageList();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">getPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> packageList;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> List&lt;ResolveInfo&gt; <span class=\"title\">getActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> activityList;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">createPackageList</span><span class=\"params\">(<span class=\"keyword\">boolean</span> getSysPackages)</span></span>&#123;</div><div class=\"line\">    ArrayList&lt;AppInfo&gt; pList = <span class=\"keyword\">new</span> ArrayList&lt;AppInfo&gt;();        </div><div class=\"line\"></div><div class=\"line\">    List&lt;PackageInfo&gt; packs = getPackageManager(</div><div class=\"line\">        ).getInstalledPackages(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packs.size(); i++)&#123;</div><div class=\"line\">      PackageInfo packInfo = packs.get(i);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>((!getSysPackages) &amp;&amp; (packInfo.versionName == <span class=\"keyword\">null</span>))&#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      AppInfo newInfo = <span class=\"keyword\">new</span> AppInfo();</div><div class=\"line\"></div><div class=\"line\">      newInfo.appName = packInfo.applicationInfo.loadLabel(</div><div class=\"line\">          getPackageManager()).toString();</div><div class=\"line\">      newInfo.packageName = packInfo.packageName;   </div><div class=\"line\">      newInfo.versionName = packInfo.versionName;</div><div class=\"line\">      newInfo.versionCode = packInfo.versionCode;</div><div class=\"line\">      newInfo.icon = packInfo.applicationInfo.loadIcon(</div><div class=\"line\">          getPackageManager());</div><div class=\"line\"></div><div class=\"line\">      pList.add(newInfo);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> pList; </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; <span class=\"title\">createActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    List&lt;ResolveInfo&gt; aList = packMan.queryIntentActivities(mainIntent, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    Collections.sort(aList, </div><div class=\"line\">        <span class=\"keyword\">new</span> ResolveInfo.DisplayNameComparator(packMan)); </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> aList;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">packageDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">      Log.v(<span class=\"string\">\"PACKINFO: \"</span>, <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).appName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).packageName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).className + <span class=\"string\">\"\\t\"</span> +</div><div class=\"line\">          packageList.get(i).versionName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">          packageList.get(i).versionCode);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">activityDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; activityList.size(); i++)&#123; </div><div class=\"line\">      ActivityInfo currentActivity = activityList.get(</div><div class=\"line\">          i).activityInfo;</div><div class=\"line\">      Log.v(<span class=\"string\">\"ACTINFO\"</span>, </div><div class=\"line\">          <span class=\"string\">\"pName=\"</span> </div><div class=\"line\">          + currentActivity.applicationInfo.packageName +</div><div class=\"line\">          <span class=\"string\">\" cName=\"</span> + currentActivity.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addClassNamesToPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList || <span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    String tempName = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">      tempName = packageList.get(i).packageName;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; activityList.size(); ++j)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(tempName.equals(activityList.get(</div><div class=\"line\">                j).activityInfo.applicationInfo.packageName))&#123;</div><div class=\"line\">          packageList.get(i).className = activityList.get(</div><div class=\"line\">              j).activityInfo.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Remember the AppInfo class that we made and the applauncherrow.xml layout. Well, now we’ll utilize both within the custom ArrayAdapter extension we’ll use to populate the data of our List. ArrayAdapters are used to fill in the data fields of a ListView widget by storing a layout(android uses the term inflate) holding data into a single row of the list.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter</span>&lt;<span class=\"title\">AppInfo</span>&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; items;</div></pre></td></tr></table></figure>\n<p>The constructor for our ArrayAdapter extension…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationAdapter</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> textViewResourceId, ArrayList&lt;AppInfo&gt; items)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>(context, textViewResourceId, items);</div><div class=\"line\">  <span class=\"keyword\">this</span>.items = items;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Being an ArrayAdapter extension means that we have to override the getView method, this is where the applauncherrow layout is populated with data and is used to represent each row of the ListView. To start we’ll reference the applauncherrow layout and inflate it to become a view.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, </div><div class=\"line\">    ViewGroup parent)</span></span>&#123;</div><div class=\"line\">  View view = convertView;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>(view == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">    LayoutInflater layout = (LayoutInflater)getSystemService(</div><div class=\"line\">        Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">    view = layout.inflate(R.layout.applauncherrow, <span class=\"keyword\">null</span>);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>Now that the view is inflated with the applauncherrow.xml layout we can now match the ImageView and TextView with the contents of a AppInfo object in preparation for moving it into the ListView.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">        AppInfo appInfo = items.get(position);</div><div class=\"line\">      <span class=\"keyword\">if</span>(appInfo != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        TextView appName = (TextView) view.findViewById(</div><div class=\"line\">            R.id.applauncherrow_appname);</div><div class=\"line\">        ImageView appIcon = (ImageView) view.findViewById(</div><div class=\"line\">            R.id.applauncherrow_icon);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(appName != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          appName.setText(appInfo.getAppName());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(appIcon != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          appIcon.setImageDrawable(appInfo.getIcon());</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> view;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here is the complete ApplicationAdapter class, you should add it to your text file.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter</span>&lt;<span class=\"title\">AppInfo</span>&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; items;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationAdapter</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> textViewResourceId, </div><div class=\"line\">      ArrayList&lt;AppInfo&gt; items)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, textViewResourceId, items);</div><div class=\"line\">    <span class=\"keyword\">this</span>.items = items;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, </div><div class=\"line\">        ViewGroup parent)</span></span>&#123;</div><div class=\"line\">      View view = convertView;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>(view == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        LayoutInflater layout = (LayoutInflater)getSystemService(</div><div class=\"line\">            Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">        view = layout.inflate(R.layout.applauncherrow, <span class=\"keyword\">null</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      AppInfo appInfo = items.get(position);</div><div class=\"line\">      <span class=\"keyword\">if</span>(appInfo != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        TextView appName = (TextView) view.findViewById(</div><div class=\"line\">            R.id.applauncherrow_appname);</div><div class=\"line\">        ImageView appIcon = (ImageView) view.findViewById(</div><div class=\"line\">            R.id.applauncherrow_icon);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(appName != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          appName.setText(appInfo.getAppName());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(appIcon != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          appIcon.setImageDrawable(appInfo.getIcon());</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> view;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>We are done with the utility classes so the next step is to add some methods to the AppLauncher class itself. The first one we’re going to add is a method called getApps() which stores the pacakageList from an Applications object and passes it off to Java Runnable to be ran on a thread.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getApps</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    myApps = <span class=\"keyword\">new</span> Applications(getPackageManager());</div><div class=\"line\">    packageList = myApps.getPackageList();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>(Exception exception)&#123;</div><div class=\"line\">    Log.e(<span class=\"string\">\"BACKGROUND PROC:\"</span>, exception.getMessage());</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">this</span>.runOnUiThread(returnRes);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you look at the getApps() method the last line before the class ends is a method called this.runOnUiThread(returnRes), now what this means is that the main thread will be locked while we pump AppInfo objects into our ListView via the ArrayAdapter. If you are experienced with concurrent programming you might be wondering why lock the mainUIThread, the answer is because our app can’t do anything until all objects have been added to the list. If we by chance were dynamically loading things from the Internet via HTTP requests then we would opt instead for a lazy loader which spawns a thread for each view object pumped into the ListVIew and the list would slowly populate as each item was fetched live from the web. So anyways here is our Runnable method that checks first that the packageList exists and then uses an object from our ApplicationAdapter to fill up our ListView widget.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> Runnable returnRes = <span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(packageList != <span class=\"keyword\">null</span> &amp;&amp; packageList.size() &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      appAdapter.notifyDataSetChanged();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">        appAdapter.add(packageList.get(i));</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    progressDialog.dismiss();</div><div class=\"line\">    appAdapter.notifyDataSetChanged();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>We’re almost done so now open up your Eclipse IDE to the AppLauncher project and click on the AppLauncher.java class. If you remember from earlier where we left off go ahead and add the data members below to the AppLauncher class; notice the line numbers for reference.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ApplicationAdapter appAdapter = <span class=\"keyword\">null</span>;</div><div class=\"line\">ProgressDialog progressDialog = <span class=\"keyword\">null</span>; </div><div class=\"line\">Runnable viewApps = <span class=\"keyword\">null</span>;</div><div class=\"line\">ArrayList&lt;AppInfo&gt; packageList = <span class=\"keyword\">null</span>;</div><div class=\"line\">Applications myApps = <span class=\"keyword\">null</span>;</div></pre></td></tr></table></figure>\n<p>For the onCreate() method there are some things you sould notice. First since AppLauncher is a ListActivity extension it inherits the setListAdapter() method. Second we’ll  initialize the viewApps Runnable to call our getApps() within its run(). This means that any thread created with the viewApps as it’s runnable will load up our packages into the ListView. In addition since getApps() locks the mainUIThread users of this app won’t be able to do anything until the thread finishes.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.setContentView(R.layout.applauncher);</div><div class=\"line\"></div><div class=\"line\">  packageList = <span class=\"keyword\">new</span> ArrayList&lt;AppInfo&gt;();</div><div class=\"line\">  appAdapter = <span class=\"keyword\">new</span> ApplicationAdapter(<span class=\"keyword\">this</span>, R.layout.applauncherrow,</div><div class=\"line\">      packageList);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.setListAdapter(appAdapter);</div><div class=\"line\"></div><div class=\"line\">  viewApps = <span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      getApps();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  Thread appLoaderThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">null</span>, viewApps, </div><div class=\"line\">      <span class=\"string\">\"AppLoaderThread\"</span>);</div><div class=\"line\">  appLoaderThread.start();</div></pre></td></tr></table></figure>\n<p>Now that the thread has started and the app has been officially locked, how do we notify the user? The answer is with the android.app.ProgressDialog widget. Remember those loading screen from popular video games, that’s all ProgressDialogs do.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">    progressDialog = ProgressDialog.show(AppLauncher.<span class=\"keyword\">this</span>, <span class=\"string\">\"Hold on...\"</span>, <span class=\"string\">\"Loading your apps...\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Right now our app can successfully load up a list of Icons and application names but how then do we launch the apps the user touches from our list? The answer is via starting a new intent by overriding the onListItemClick method. So go open up your text file that contains the utility classes and methods and add the onListItemClick() method to it.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onListItemClick</span><span class=\"params\">(ListView list, View view, <span class=\"keyword\">int</span> position, </div><div class=\"line\">    <span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onListItemClick(list, view, position, id);</div><div class=\"line\"></div><div class=\"line\">  AppInfo rowClicked = (AppInfo)<span class=\"keyword\">this</span>.getListAdapter().getItem(</div><div class=\"line\">      position);</div><div class=\"line\"></div><div class=\"line\">  Intent startApp = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">  ComponentName component = <span class=\"keyword\">new</span> ComponentName(</div><div class=\"line\">      rowClicked.getPackageName(), </div><div class=\"line\">      rowClicked.getClassName());</div><div class=\"line\">  startApp.setComponent(component);</div><div class=\"line\">  startApp.setAction(Intent.ACTION_MAIN);</div><div class=\"line\"></div><div class=\"line\">  startActivity(startApp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Before you run the AppLauncher, be sure to copy and paste the classes and methods into the AppLauncher class so it resembles the complete file below.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> org.example.hello;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.ListActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.app.ProgressDialog;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.ComponentName;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.ActivityInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.PackageInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.PackageManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.pm.ResolveInfo;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ArrayAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppLauncher</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListActivity</span></span>&#123;</div><div class=\"line\">  ApplicationAdapter appAdapter = <span class=\"keyword\">null</span>;</div><div class=\"line\">  ProgressDialog progressDialog = <span class=\"keyword\">null</span>; </div><div class=\"line\">  Runnable viewApps = <span class=\"keyword\">null</span>;</div><div class=\"line\">  ArrayList&lt;AppInfo&gt; packageList = <span class=\"keyword\">null</span>;</div><div class=\"line\">  Applications myApps = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.setContentView(R.layout.applauncher);</div><div class=\"line\"></div><div class=\"line\">    packageList = <span class=\"keyword\">new</span> ArrayList&lt;AppInfo&gt;();</div><div class=\"line\">    appAdapter = <span class=\"keyword\">new</span> ApplicationAdapter(<span class=\"keyword\">this</span>, R.layout.applauncherrow,</div><div class=\"line\">        packageList);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.setListAdapter(appAdapter);</div><div class=\"line\"></div><div class=\"line\">    viewApps = <span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        getApps();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    Thread appLoaderThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">null</span>, viewApps, </div><div class=\"line\">        <span class=\"string\">\"AppLoaderThread\"</span>);</div><div class=\"line\">    appLoaderThread.start();</div><div class=\"line\"></div><div class=\"line\">    progressDialog = ProgressDialog.show(AppLauncher.<span class=\"keyword\">this</span>, </div><div class=\"line\">        <span class=\"string\">\"Hold on...\"</span>, <span class=\"string\">\"Loading your apps...\"</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Applications</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; packageList = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; activityList = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Intent mainIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MAIN, <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">private</span> PackageManager packMan = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Applications</span><span class=\"params\">(PackageManager packManager)</span></span>&#123;</div><div class=\"line\">      packMan = packManager;</div><div class=\"line\">      packageList = <span class=\"keyword\">this</span>.createPackageList(<span class=\"keyword\">false</span>);</div><div class=\"line\">      activityList = <span class=\"keyword\">this</span>.createActivityList();</div><div class=\"line\">      <span class=\"keyword\">this</span>.addClassNamesToPackageList();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">getPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> packageList;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;ResolveInfo&gt; <span class=\"title\">getActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> activityList;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; <span class=\"title\">createPackageList</span><span class=\"params\">(<span class=\"keyword\">boolean</span> getSysPackages)</span></span>&#123;</div><div class=\"line\">      ArrayList&lt;AppInfo&gt; pList = <span class=\"keyword\">new</span> ArrayList&lt;AppInfo&gt;();        </div><div class=\"line\"></div><div class=\"line\">      List&lt;PackageInfo&gt; packs = getPackageManager(</div><div class=\"line\">          ).getInstalledPackages(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packs.size(); i++)&#123;</div><div class=\"line\">        PackageInfo packInfo = packs.get(i);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>((!getSysPackages) &amp;&amp; (packInfo.versionName == <span class=\"keyword\">null</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">continue</span> ;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        AppInfo newInfo = <span class=\"keyword\">new</span> AppInfo();</div><div class=\"line\"></div><div class=\"line\">        newInfo.appName = packInfo.applicationInfo.loadLabel(</div><div class=\"line\">            getPackageManager()).toString();</div><div class=\"line\">        newInfo.packageName = packInfo.packageName;   </div><div class=\"line\">        newInfo.versionName = packInfo.versionName;</div><div class=\"line\">        newInfo.versionCode = packInfo.versionCode;</div><div class=\"line\">        newInfo.icon = packInfo.applicationInfo.loadIcon(</div><div class=\"line\">            getPackageManager());</div><div class=\"line\"></div><div class=\"line\">        pList.add(newInfo);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> pList; </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;ResolveInfo&gt; <span class=\"title\">createActivityList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      List&lt;ResolveInfo&gt; aList = packMan.queryIntentActivities(mainIntent, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">      Collections.sort(aList, </div><div class=\"line\">          <span class=\"keyword\">new</span> ResolveInfo.DisplayNameComparator(packMan)); </div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> aList;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">packageDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">        Log.v(<span class=\"string\">\"PACKINFO: \"</span>, <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">            packageList.get(i).appName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">            packageList.get(i).packageName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">            packageList.get(i).className + <span class=\"string\">\"\\t\"</span> +</div><div class=\"line\">            packageList.get(i).versionName + <span class=\"string\">\"\\t\"</span> + </div><div class=\"line\">            packageList.get(i).versionCode);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">activityDebug</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; activityList.size(); i++)&#123; </div><div class=\"line\">        ActivityInfo currentActivity = activityList.get(</div><div class=\"line\">            i).activityInfo;</div><div class=\"line\">        Log.v(<span class=\"string\">\"ACTINFO\"</span>, </div><div class=\"line\">            <span class=\"string\">\"pName=\"</span> </div><div class=\"line\">            + currentActivity.applicationInfo.packageName +</div><div class=\"line\">            <span class=\"string\">\" cName=\"</span> + currentActivity.name);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addClassNamesToPackageList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == activityList || <span class=\"keyword\">null</span> == packageList)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      String tempName = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">        tempName = packageList.get(i).packageName;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; activityList.size(); ++j)&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(tempName.equals(activityList.get(</div><div class=\"line\">                  j).activityInfo.applicationInfo.packageName))&#123;</div><div class=\"line\">            packageList.get(i).className = activityList.get(</div><div class=\"line\">                j).activityInfo.name;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppInfo</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String appName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String packageName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String className = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String versionName = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer versionCode = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Drawable icon = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAppName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> appName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPackageName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> packageName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getClassName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> className;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getVersionName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> versionName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getVersionCode</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> versionCode;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Drawable <span class=\"title\">getIcon</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> icon;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter</span>&lt;<span class=\"title\">AppInfo</span>&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;AppInfo&gt; items;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationAdapter</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> textViewResourceId, </div><div class=\"line\">        ArrayList&lt;AppInfo&gt; items)</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(context, textViewResourceId, items);</div><div class=\"line\">      <span class=\"keyword\">this</span>.items = items;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, </div><div class=\"line\">          ViewGroup parent)</span></span>&#123;</div><div class=\"line\">        View view = convertView;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(view == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          LayoutInflater layout = (LayoutInflater)getSystemService(</div><div class=\"line\">              Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">          view = layout.inflate(R.layout.applauncherrow, <span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        AppInfo appInfo = items.get(position);</div><div class=\"line\">        <span class=\"keyword\">if</span>(appInfo != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">          TextView appName = (TextView) view.findViewById(</div><div class=\"line\">              R.id.applauncherrow_appname);</div><div class=\"line\">          ImageView appIcon = (ImageView) view.findViewById(</div><div class=\"line\">              R.id.applauncherrow_icon);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span>(appName != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            appName.setText(appInfo.getAppName());</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">if</span>(appIcon != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            appIcon.setImageDrawable(appInfo.getIcon());</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> view;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getApps</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">      myApps = <span class=\"keyword\">new</span> Applications(getPackageManager());</div><div class=\"line\">      packageList = myApps.getPackageList();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span>(Exception exception)&#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"BACKGROUND PROC:\"</span>, exception.getMessage());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.runOnUiThread(returnRes);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> Runnable returnRes = <span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(packageList != <span class=\"keyword\">null</span> &amp;&amp; packageList.size() &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        appAdapter.notifyDataSetChanged();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; packageList.size(); ++i)&#123;</div><div class=\"line\">          appAdapter.add(packageList.get(i));</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      progressDialog.dismiss();</div><div class=\"line\">      appAdapter.notifyDataSetChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onListItemClick</span><span class=\"params\">(ListView list, View view, <span class=\"keyword\">int</span> position, </div><div class=\"line\">        <span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onListItemClick(list, view, position, id);</div><div class=\"line\"></div><div class=\"line\">      AppInfo rowClicked = (AppInfo)<span class=\"keyword\">this</span>.getListAdapter().getItem(</div><div class=\"line\">          position);</div><div class=\"line\"></div><div class=\"line\">      Intent startApp = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">      ComponentName component = <span class=\"keyword\">new</span> ComponentName(</div><div class=\"line\">          rowClicked.getPackageName(), </div><div class=\"line\">          rowClicked.getClassName());</div><div class=\"line\">      startApp.setComponent(component);</div><div class=\"line\">      startApp.setAction(Intent.ACTION_MAIN);</div><div class=\"line\"></div><div class=\"line\">      startActivity(startApp);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Enjoy your AppLauncher.</p>"},{"title":"Imagescrape Version 2","date":"2013-02-09T08:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/imagescrapeversion2.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/imagescrapeversion2.JPG","comments":0,"_content":"After over a year I've finally made some changes to my old imagescraper Ruby project. I re-wrote the entire code from the ground up and replaced the old session based form with a new AJAX powered one. It was interesting to see just how bad of a developer I once was and how much my skills have improved since I first began the project.\n\n<!-- more -->\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/imagescrape2.png\" alt=\"Imagescrape2 New UI\" width=\"300px\" />\n</div>\n\n[https://github.com/taywils/_Imagescraper_](https://github.com/taywils/_Imagescraper_)\n\nIts been a while but I did get around to updating the code for the latest version of imagescrape.\n\nAs you'll notice when you use it the images load without storing huge amounts of data within the session due to the new AJAX in place and the images usually will display rather nicely due to the use of the masonry javascript library. However, there are some changes that need to be added such as the ability to download all of the images scraped and further improvements to the UI.\n\nI eventually want to turn this small app into something much larger but as of now I can't think of how it will ever be useful for anything more than just a toy app.\n","source":"_posts/imagescrapeversion2.md","raw":"---\ntitle: Imagescrape Version 2\ndate: 2013-02-09\ntags: [ruby, javascript]\ncategories: []\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/imagescrapeversion2.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/imagescrapeversion2.JPG\ncomments: false\n---\nAfter over a year I've finally made some changes to my old imagescraper Ruby project. I re-wrote the entire code from the ground up and replaced the old session based form with a new AJAX powered one. It was interesting to see just how bad of a developer I once was and how much my skills have improved since I first began the project.\n\n<!-- more -->\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/imagescrape2.png\" alt=\"Imagescrape2 New UI\" width=\"300px\" />\n</div>\n\n[https://github.com/taywils/_Imagescraper_](https://github.com/taywils/_Imagescraper_)\n\nIts been a while but I did get around to updating the code for the latest version of imagescrape.\n\nAs you'll notice when you use it the images load without storing huge amounts of data within the session due to the new AJAX in place and the images usually will display rather nicely due to the use of the masonry javascript library. However, there are some changes that need to be added such as the ability to download all of the images scraped and further improvements to the UI.\n\nI eventually want to turn this small app into something much larger but as of now I can't think of how it will ever be useful for anything more than just a toy app.\n","slug":"imagescrapeversion2","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3h9000fyswvi22wzn9m","layout":"post","photos":[],"link":"","content":"<p>After over a year I’ve finally made some changes to my old imagescraper Ruby project. I re-wrote the entire code from the ground up and replaced the old session based form with a new AJAX powered one. It was interesting to see just how bad of a developer I once was and how much my skills have improved since I first began the project.</p>\n<a id=\"more\"></a>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/imagescrape2.png\" alt=\"Imagescrape2 New UI\" width=\"300px\"><br></div>\n\n<p><a href=\"https://github.com/taywils/_Imagescraper_\" target=\"_blank\" rel=\"external\">https://github.com/taywils/<em>Imagescraper</em></a></p>\n<p>Its been a while but I did get around to updating the code for the latest version of imagescrape.</p>\n<p>As you’ll notice when you use it the images load without storing huge amounts of data within the session due to the new AJAX in place and the images usually will display rather nicely due to the use of the masonry javascript library. However, there are some changes that need to be added such as the ability to download all of the images scraped and further improvements to the UI.</p>\n<p>I eventually want to turn this small app into something much larger but as of now I can’t think of how it will ever be useful for anything more than just a toy app.</p>\n","site":{"data":{}},"excerpt":"<p>After over a year I’ve finally made some changes to my old imagescraper Ruby project. I re-wrote the entire code from the ground up and replaced the old session based form with a new AJAX powered one. It was interesting to see just how bad of a developer I once was and how much my skills have improved since I first began the project.</p>","more":"<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/imagescrape2.png\" alt=\"Imagescrape2 New UI\" width=\"300px\" /><br></div>\n\n<p><a href=\"https://github.com/taywils/_Imagescraper_\">https://github.com/taywils/<em>Imagescraper</em></a></p>\n<p>Its been a while but I did get around to updating the code for the latest version of imagescrape.</p>\n<p>As you’ll notice when you use it the images load without storing huge amounts of data within the session due to the new AJAX in place and the images usually will display rather nicely due to the use of the masonry javascript library. However, there are some changes that need to be added such as the ability to download all of the images scraped and further improvements to the UI.</p>\n<p>I eventually want to turn this small app into something much larger but as of now I can’t think of how it will ever be useful for anything more than just a toy app.</p>"},{"title":"Why I switched over to Jekyll from WordPress","date":"2012-07-25T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/jekyllblog.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/jekyllblog.JPG","comments":0,"_content":"Although it wasn't easy I finally migrated my blog over to Jekyll. Personally I have nothing against the fantastic work of software that is WordPress it really helped a lot of people all across the world get into blogging and sharing their thoughts but WordPress is at its heart a CMS. Although commonly used to host blogs WordPress is greatly under-utilized as a blogging platform and many of its features become rather obtrusive from a single users perspective.\n\n<!-- more -->\n- <a href=\"https://github.com/taywils/taywils.me\">Grab the code on GitHub</a>\n\nQuite some time ago(early 2010) when I just began programming I had learned that it was a fairly common practice amongst programmers to keep an update code blog.\nNot knowing anything at all about web development or even what PHP stood for I did what most people assumed when they heard the word blog and jumped on WordPress.\nAlthough there is nothing wrong with using WordPress for a blogging platform, as a developer I quickly realized that I was not the targeted audience.\n\nHowever I would later learn that many developers do in fact build various plugins and themes for WordPress such as code syntax highlighters and site search engines.On the flipside of it though just being a passive end user of premade tools and widgets didn't allow me to actually gain any insight into the working internals of how to develop a site to host my coding progress.Yes there were times when I had to edit snippets of PHP and or change some Javascript every now and then but I was mostly just blindly following instructions out of ebooks and help forums.\n\nMy old programming blog morphed into a nasty mashup of copy pasted code and I used all sorts of weird blog publishing software and quirky online editors just to update a single post on my site.\nI could remember it taking me several hours just to go from writing new content to finnally displaying on my code blog just because I knew nothing about how content was actually served on the web.\nI can't exactly remember when it was that I was browsing online one day for WordPress tutorials when I spotted a comment on a blog post that said something along the lines of \"Do you really need a database connection just to fetch blog post which probably won't ever be updated after you've written it?\". \n\nSomething about that kinda pissed me off... I was thinking to myself \"You know... why the heck do I need user auth and an entire content management system which I probably only use about 2% of its entire features anyways just to render some damn static html on a screen?\"\nHowever given my skillset at the time(all I knew was C++ and a tiny sliver of HTML) I couldn't imagine writting every single line of HTML by hand and having to go through and update every single link on the site; not only would it be absurd but the sheer amount of wasted time could have been invested into just paying someone to build a site for me.\n\nIn the meantime I had just discovered the wonders of version control and Git in particular when I came across an article about how GitHub.com handles its myraid number of web pages.\nIt was something called Jekyll, a blog aware static site generator.\n\nThe basics of Jekyll are easy enough to figure out, you design a layout and run some ruby code to render all of your post which fit neatly into the `_post` directory of your app.\nFrom there you run the command \"Jekyll\" at the terminal at the root directory of your application and the `_site` folder is generated.\n\nNext you copy the `_site` directory to a web server and you're done.\nThe overall no nonsense just write some markup or markdown, add css throw in some javascript and let Jekyll do the rest really made writing a blog a chore.\nAs you can see from the github source for this blog the main layout is where all parts of the Jekyll app come together.\n\n```html\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en-us\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n<title>Taywils.me | {{ page.title }}</title>\n\n<!-- CSS libraries -->\n<link rel=\"stylesheet\" href=\"/css/gcp/prettify.css\" type=\"text/css\"/> \n<link rel=\"stylesheet\" href=\"/css/gcp/sons-of-obsidian.css\" type=\"text/css\"/> \n<link rel=\"stylesheet\" href=\"/css/slides.css\" type=\"text/css\"/>\n\n<!-- My CSS -->\n<link rel=\"stylesheet/less\" href=\"/css/style.less\" type=\"text/css\"/>\n\n<!-- Javscript Libraries -->\n<script type=\"text/javascript\" src=\"/javascript/less-1.3.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/javascript/jquery-1.8.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/javascript/coffee-script-1.3.3.min.js\"></script>\n<script type=\"text/javascript\" src=\"/javascript/gcp/prettify.js\"></script>\n<script type=\"text/javascript\" src=\"/javascript/slides.min.jquery.js\"></script>\n\n<!-- My Javascript -->\n<script type=\"text/coffeescript\" src=\"/javascript/page.coffee\"></script>\n<script type=\"text/coffeescript\" src=\"/javascript/about.coffee\"></script>\n<script type=\"text/javascript\" src=\"/javascript/projects.js\"></script>\n</head>\n<body onload=\"prettyPrint();\">\n<div id=\"header\" align=\"center\">\n<table>\n<tr>\n<td class=\"header-space\">\n<h1>\n<a class=\"page-fade\" href=\"/index.html\">Blog</a>\n</h1>\n</td>\n<td class=\"header-space\">\n<h2>\n<a class=\"page-fade\" href=\"/projects.html\">Projects</a>\n</h2>\n</td>\n<td class=\"header-space\">\n<h2>\n<a class=\"page-fade\" href=\"/about.html\">About</a>\n</h2>\n</td>\n</tr>\n</table>\n</div>\n\n<div id=\"left-sidebar\">\n</div>\n\n<div id=\"right-sidebar\">\n</div>\n\n<div id=\"content\">\n{{ content }}\n</div>\n\n<div id=\"footer\">\n<p>\n<div class=\"copyright\" align=\"center\">\nCopyright &amp;copy; 2012 Demetrious Taylor Wilson.  All rights reserved.\n</div>\n</p>\n</div>\n</body>\n</html>\n```\nWhen you yield for the content you then tell your individual pages which layout to use.\nOnce selected within the page yaml as you can see below you use Jekyll's builtin post macro for accessing the yaml you describe inside of each post.\nIn addition you can add your own custom post yaml such as the post.mydate which formats the post's date a bit differently from the default post.date.\n```html\n---\nlayout: default\ntitle: Homepage\npermalink: /index.html\n---\n{% for post in site.posts %}\n<table class=\"article-table\" align=\"center\">\n<tbody>\n<tr>\n<td class=\"article-title\">\n<a href=\"{{ post.url }}\">{{ post.mydate }} | {{ post.title }}</a>\n</td>\n</tr>\n<tr>\n<td class=\"article-description\">\n<a href=\"{{ post.url }}\">{{ post.description }}</a>\n</td>\n</tr>\n<tr>\n<td class=\"article-tags\">\n{% for tag in post.tags %}\n<img src=\"/images/{{ tag }}.png\" title=\"{{ tag }}\"/>\n{% endfor %}\n<div class=\"article-catagories\">\n{% for catagory in post.catagories %}\n[{{ catagory }}]\n{% endfor %}\n</div>\n</td>\n<div style=\"clear: both;\"></div>\n</tr>\n</tbody>\n</table>\n{% endfor %}\n```\nFrom my perspective at least, getting up and running with Jekyll was simple and easy compared to having to learn about an entire database query language(MySQL) before you can access your posts.\nDespite all of my cheerleading and praise I admit Jekyll was a bit confusing at times due to the usage of the liquid templating engine.\nI had to sit down for a few hours and did through some documentation and browse source code of existing Jekyll blogs in order to understand the finer points of how pages are rendered from templates.\nEven more confusing was that since HTML is readily generated when the <div>_site</div> directory is created you don't need to place inline javascript within the post itself(although there is nothing stopping you from doing so) all of your javascript can go in the layout and access DOM from posts as they are shown.\n\nAnyhow I've talked way too much in this post already... enjoy your static site produced with Jekyll.\n\n(NOTE: I realize that you can't compare an entire CMS to a static site generator but I'm only comparing them from a blogger's point of view)\n","source":"_posts/jekyllblog.md","raw":"---\ntitle: Why I switched over to Jekyll from WordPress\ndate: 2012-07-25\ntags: [ruby, javascript]\ncategories: []\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/jekyllblog.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/jekyllblog.JPG\ncomments: false\n---\nAlthough it wasn't easy I finally migrated my blog over to Jekyll. Personally I have nothing against the fantastic work of software that is WordPress it really helped a lot of people all across the world get into blogging and sharing their thoughts but WordPress is at its heart a CMS. Although commonly used to host blogs WordPress is greatly under-utilized as a blogging platform and many of its features become rather obtrusive from a single users perspective.\n\n<!-- more -->\n- <a href=\"https://github.com/taywils/taywils.me\">Grab the code on GitHub</a>\n\nQuite some time ago(early 2010) when I just began programming I had learned that it was a fairly common practice amongst programmers to keep an update code blog.\nNot knowing anything at all about web development or even what PHP stood for I did what most people assumed when they heard the word blog and jumped on WordPress.\nAlthough there is nothing wrong with using WordPress for a blogging platform, as a developer I quickly realized that I was not the targeted audience.\n\nHowever I would later learn that many developers do in fact build various plugins and themes for WordPress such as code syntax highlighters and site search engines.On the flipside of it though just being a passive end user of premade tools and widgets didn't allow me to actually gain any insight into the working internals of how to develop a site to host my coding progress.Yes there were times when I had to edit snippets of PHP and or change some Javascript every now and then but I was mostly just blindly following instructions out of ebooks and help forums.\n\nMy old programming blog morphed into a nasty mashup of copy pasted code and I used all sorts of weird blog publishing software and quirky online editors just to update a single post on my site.\nI could remember it taking me several hours just to go from writing new content to finnally displaying on my code blog just because I knew nothing about how content was actually served on the web.\nI can't exactly remember when it was that I was browsing online one day for WordPress tutorials when I spotted a comment on a blog post that said something along the lines of \"Do you really need a database connection just to fetch blog post which probably won't ever be updated after you've written it?\". \n\nSomething about that kinda pissed me off... I was thinking to myself \"You know... why the heck do I need user auth and an entire content management system which I probably only use about 2% of its entire features anyways just to render some damn static html on a screen?\"\nHowever given my skillset at the time(all I knew was C++ and a tiny sliver of HTML) I couldn't imagine writting every single line of HTML by hand and having to go through and update every single link on the site; not only would it be absurd but the sheer amount of wasted time could have been invested into just paying someone to build a site for me.\n\nIn the meantime I had just discovered the wonders of version control and Git in particular when I came across an article about how GitHub.com handles its myraid number of web pages.\nIt was something called Jekyll, a blog aware static site generator.\n\nThe basics of Jekyll are easy enough to figure out, you design a layout and run some ruby code to render all of your post which fit neatly into the `_post` directory of your app.\nFrom there you run the command \"Jekyll\" at the terminal at the root directory of your application and the `_site` folder is generated.\n\nNext you copy the `_site` directory to a web server and you're done.\nThe overall no nonsense just write some markup or markdown, add css throw in some javascript and let Jekyll do the rest really made writing a blog a chore.\nAs you can see from the github source for this blog the main layout is where all parts of the Jekyll app come together.\n\n```html\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en-us\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n<title>Taywils.me | {{ page.title }}</title>\n\n<!-- CSS libraries -->\n<link rel=\"stylesheet\" href=\"/css/gcp/prettify.css\" type=\"text/css\"/> \n<link rel=\"stylesheet\" href=\"/css/gcp/sons-of-obsidian.css\" type=\"text/css\"/> \n<link rel=\"stylesheet\" href=\"/css/slides.css\" type=\"text/css\"/>\n\n<!-- My CSS -->\n<link rel=\"stylesheet/less\" href=\"/css/style.less\" type=\"text/css\"/>\n\n<!-- Javscript Libraries -->\n<script type=\"text/javascript\" src=\"/javascript/less-1.3.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/javascript/jquery-1.8.0.min.js\"></script>\n<script type=\"text/javascript\" src=\"/javascript/coffee-script-1.3.3.min.js\"></script>\n<script type=\"text/javascript\" src=\"/javascript/gcp/prettify.js\"></script>\n<script type=\"text/javascript\" src=\"/javascript/slides.min.jquery.js\"></script>\n\n<!-- My Javascript -->\n<script type=\"text/coffeescript\" src=\"/javascript/page.coffee\"></script>\n<script type=\"text/coffeescript\" src=\"/javascript/about.coffee\"></script>\n<script type=\"text/javascript\" src=\"/javascript/projects.js\"></script>\n</head>\n<body onload=\"prettyPrint();\">\n<div id=\"header\" align=\"center\">\n<table>\n<tr>\n<td class=\"header-space\">\n<h1>\n<a class=\"page-fade\" href=\"/index.html\">Blog</a>\n</h1>\n</td>\n<td class=\"header-space\">\n<h2>\n<a class=\"page-fade\" href=\"/projects.html\">Projects</a>\n</h2>\n</td>\n<td class=\"header-space\">\n<h2>\n<a class=\"page-fade\" href=\"/about.html\">About</a>\n</h2>\n</td>\n</tr>\n</table>\n</div>\n\n<div id=\"left-sidebar\">\n</div>\n\n<div id=\"right-sidebar\">\n</div>\n\n<div id=\"content\">\n{{ content }}\n</div>\n\n<div id=\"footer\">\n<p>\n<div class=\"copyright\" align=\"center\">\nCopyright &amp;copy; 2012 Demetrious Taylor Wilson.  All rights reserved.\n</div>\n</p>\n</div>\n</body>\n</html>\n```\nWhen you yield for the content you then tell your individual pages which layout to use.\nOnce selected within the page yaml as you can see below you use Jekyll's builtin post macro for accessing the yaml you describe inside of each post.\nIn addition you can add your own custom post yaml such as the post.mydate which formats the post's date a bit differently from the default post.date.\n```html\n---\nlayout: default\ntitle: Homepage\npermalink: /index.html\n---\n{% for post in site.posts %}\n<table class=\"article-table\" align=\"center\">\n<tbody>\n<tr>\n<td class=\"article-title\">\n<a href=\"{{ post.url }}\">{{ post.mydate }} | {{ post.title }}</a>\n</td>\n</tr>\n<tr>\n<td class=\"article-description\">\n<a href=\"{{ post.url }}\">{{ post.description }}</a>\n</td>\n</tr>\n<tr>\n<td class=\"article-tags\">\n{% for tag in post.tags %}\n<img src=\"/images/{{ tag }}.png\" title=\"{{ tag }}\"/>\n{% endfor %}\n<div class=\"article-catagories\">\n{% for catagory in post.catagories %}\n[{{ catagory }}]\n{% endfor %}\n</div>\n</td>\n<div style=\"clear: both;\"></div>\n</tr>\n</tbody>\n</table>\n{% endfor %}\n```\nFrom my perspective at least, getting up and running with Jekyll was simple and easy compared to having to learn about an entire database query language(MySQL) before you can access your posts.\nDespite all of my cheerleading and praise I admit Jekyll was a bit confusing at times due to the usage of the liquid templating engine.\nI had to sit down for a few hours and did through some documentation and browse source code of existing Jekyll blogs in order to understand the finer points of how pages are rendered from templates.\nEven more confusing was that since HTML is readily generated when the <div>_site</div> directory is created you don't need to place inline javascript within the post itself(although there is nothing stopping you from doing so) all of your javascript can go in the layout and access DOM from posts as they are shown.\n\nAnyhow I've talked way too much in this post already... enjoy your static site produced with Jekyll.\n\n(NOTE: I realize that you can't compare an entire CMS to a static site generator but I'm only comparing them from a blogger's point of view)\n","slug":"jekyllblog","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3hb000hyswv2l5uy4eh","layout":"post","photos":[],"link":"","content":"<p>Although it wasn’t easy I finally migrated my blog over to Jekyll. Personally I have nothing against the fantastic work of software that is WordPress it really helped a lot of people all across the world get into blogging and sharing their thoughts but WordPress is at its heart a CMS. Although commonly used to host blogs WordPress is greatly under-utilized as a blogging platform and many of its features become rather obtrusive from a single users perspective.</p>\n<a id=\"more\"></a>\n<ul>\n<li><a href=\"https://github.com/taywils/taywils.me\" target=\"_blank\" rel=\"external\">Grab the code on GitHub</a></li>\n</ul>\n<p>Quite some time ago(early 2010) when I just began programming I had learned that it was a fairly common practice amongst programmers to keep an update code blog.<br>Not knowing anything at all about web development or even what PHP stood for I did what most people assumed when they heard the word blog and jumped on WordPress.<br>Although there is nothing wrong with using WordPress for a blogging platform, as a developer I quickly realized that I was not the targeted audience.</p>\n<p>However I would later learn that many developers do in fact build various plugins and themes for WordPress such as code syntax highlighters and site search engines.On the flipside of it though just being a passive end user of premade tools and widgets didn’t allow me to actually gain any insight into the working internals of how to develop a site to host my coding progress.Yes there were times when I had to edit snippets of PHP and or change some Javascript every now and then but I was mostly just blindly following instructions out of ebooks and help forums.</p>\n<p>My old programming blog morphed into a nasty mashup of copy pasted code and I used all sorts of weird blog publishing software and quirky online editors just to update a single post on my site.<br>I could remember it taking me several hours just to go from writing new content to finnally displaying on my code blog just because I knew nothing about how content was actually served on the web.<br>I can’t exactly remember when it was that I was browsing online one day for WordPress tutorials when I spotted a comment on a blog post that said something along the lines of “Do you really need a database connection just to fetch blog post which probably won’t ever be updated after you’ve written it?”. </p>\n<p>Something about that kinda pissed me off… I was thinking to myself “You know… why the heck do I need user auth and an entire content management system which I probably only use about 2% of its entire features anyways just to render some damn static html on a screen?”<br>However given my skillset at the time(all I knew was C++ and a tiny sliver of HTML) I couldn’t imagine writting every single line of HTML by hand and having to go through and update every single link on the site; not only would it be absurd but the sheer amount of wasted time could have been invested into just paying someone to build a site for me.</p>\n<p>In the meantime I had just discovered the wonders of version control and Git in particular when I came across an article about how GitHub.com handles its myraid number of web pages.<br>It was something called Jekyll, a blog aware static site generator.</p>\n<p>The basics of Jekyll are easy enough to figure out, you design a layout and run some ruby code to render all of your post which fit neatly into the <code>_post</code> directory of your app.<br>From there you run the command “Jekyll” at the terminal at the root directory of your application and the <code>_site</code> folder is generated.</p>\n<p>Next you copy the <code>_site</code> directory to a web server and you’re done.<br>The overall no nonsense just write some markup or markdown, add css throw in some javascript and let Jekyll do the rest really made writing a blog a chore.<br>As you can see from the github source for this blog the main layout is where all parts of the Jekyll app come together.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span> <span class=\"attr\">xml:lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en-us\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Taywils.me | &#123;&#123; page.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- CSS libraries --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/gcp/prettify.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/gcp/sons-of-obsidian.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/slides.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- My CSS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet/less\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/style.less\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Javscript Libraries --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/less-1.3.0.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/jquery-1.8.0.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/coffee-script-1.3.3.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/gcp/prettify.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/slides.min.jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- My Javascript --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/coffeescript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/page.coffee\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/coffeescript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/about.coffee\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/projects.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"prettyPrint();\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header-space\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-fade\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.html\"</span>&gt;</span>Blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header-space\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-fade\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/projects.html\"</span>&gt;</span>Projects<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header-space\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-fade\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/about.html\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"left-sidebar\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"right-sidebar\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span></div><div class=\"line\">&#123;&#123; content &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"copyright\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">Copyright &amp;amp;copy; 2012 Demetrious Taylor Wilson.  All rights reserved.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When you yield for the content you then tell your individual pages which layout to use.<br>Once selected within the page yaml as you can see below you use Jekyll’s builtin post macro for accessing the yaml you describe inside of each post.<br>In addition you can add your own custom post yaml such as the post.mydate which formats the post’s date a bit differently from the default post.date.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">layout: default</div><div class=\"line\">title: Homepage</div><div class=\"line\">permalink: /index.html</div><div class=\"line\">---</div><div class=\"line\">&#123;% for post in site.posts %&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-table\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-title\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; post.url &#125;&#125;\"</span>&gt;</span>&#123;&#123; post.mydate &#125;&#125; | &#123;&#123; post.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-description\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; post.url &#125;&#125;\"</span>&gt;</span>&#123;&#123; post.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-tags\"</span>&gt;</span></div><div class=\"line\">&#123;% for tag in post.tags %&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/&#123;&#123; tag &#125;&#125;.png\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&#123;&#123; tag &#125;&#125;\"</span>/&gt;</span></div><div class=\"line\">&#123;% endfor %&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-catagories\"</span>&gt;</span></div><div class=\"line\">&#123;% for catagory in post.catagories %&#125;</div><div class=\"line\">[&#123;&#123; catagory &#125;&#125;]</div><div class=\"line\">&#123;% endfor %&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"clear: both;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">&#123;% endfor %&#125;</div></pre></td></tr></table></figure></p>\n<p>From my perspective at least, getting up and running with Jekyll was simple and easy compared to having to learn about an entire database query language(MySQL) before you can access your posts.<br>Despite all of my cheerleading and praise I admit Jekyll was a bit confusing at times due to the usage of the liquid templating engine.<br>I had to sit down for a few hours and did through some documentation and browse source code of existing Jekyll blogs in order to understand the finer points of how pages are rendered from templates.<br>Even more confusing was that since HTML is readily generated when the <div>_site</div> directory is created you don’t need to place inline javascript within the post itself(although there is nothing stopping you from doing so) all of your javascript can go in the layout and access DOM from posts as they are shown.</p>\n<p>Anyhow I’ve talked way too much in this post already… enjoy your static site produced with Jekyll.</p>\n<p>(NOTE: I realize that you can’t compare an entire CMS to a static site generator but I’m only comparing them from a blogger’s point of view)</p>\n","site":{"data":{}},"excerpt":"<p>Although it wasn’t easy I finally migrated my blog over to Jekyll. Personally I have nothing against the fantastic work of software that is WordPress it really helped a lot of people all across the world get into blogging and sharing their thoughts but WordPress is at its heart a CMS. Although commonly used to host blogs WordPress is greatly under-utilized as a blogging platform and many of its features become rather obtrusive from a single users perspective.</p>","more":"<ul>\n<li><a href=\"https://github.com/taywils/taywils.me\">Grab the code on GitHub</a></li>\n</ul>\n<p>Quite some time ago(early 2010) when I just began programming I had learned that it was a fairly common practice amongst programmers to keep an update code blog.<br>Not knowing anything at all about web development or even what PHP stood for I did what most people assumed when they heard the word blog and jumped on WordPress.<br>Although there is nothing wrong with using WordPress for a blogging platform, as a developer I quickly realized that I was not the targeted audience.</p>\n<p>However I would later learn that many developers do in fact build various plugins and themes for WordPress such as code syntax highlighters and site search engines.On the flipside of it though just being a passive end user of premade tools and widgets didn’t allow me to actually gain any insight into the working internals of how to develop a site to host my coding progress.Yes there were times when I had to edit snippets of PHP and or change some Javascript every now and then but I was mostly just blindly following instructions out of ebooks and help forums.</p>\n<p>My old programming blog morphed into a nasty mashup of copy pasted code and I used all sorts of weird blog publishing software and quirky online editors just to update a single post on my site.<br>I could remember it taking me several hours just to go from writing new content to finnally displaying on my code blog just because I knew nothing about how content was actually served on the web.<br>I can’t exactly remember when it was that I was browsing online one day for WordPress tutorials when I spotted a comment on a blog post that said something along the lines of “Do you really need a database connection just to fetch blog post which probably won’t ever be updated after you’ve written it?”. </p>\n<p>Something about that kinda pissed me off… I was thinking to myself “You know… why the heck do I need user auth and an entire content management system which I probably only use about 2% of its entire features anyways just to render some damn static html on a screen?”<br>However given my skillset at the time(all I knew was C++ and a tiny sliver of HTML) I couldn’t imagine writting every single line of HTML by hand and having to go through and update every single link on the site; not only would it be absurd but the sheer amount of wasted time could have been invested into just paying someone to build a site for me.</p>\n<p>In the meantime I had just discovered the wonders of version control and Git in particular when I came across an article about how GitHub.com handles its myraid number of web pages.<br>It was something called Jekyll, a blog aware static site generator.</p>\n<p>The basics of Jekyll are easy enough to figure out, you design a layout and run some ruby code to render all of your post which fit neatly into the <code>_post</code> directory of your app.<br>From there you run the command “Jekyll” at the terminal at the root directory of your application and the <code>_site</code> folder is generated.</p>\n<p>Next you copy the <code>_site</code> directory to a web server and you’re done.<br>The overall no nonsense just write some markup or markdown, add css throw in some javascript and let Jekyll do the rest really made writing a blog a chore.<br>As you can see from the github source for this blog the main layout is where all parts of the Jekyll app come together.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span> <span class=\"attr\">xml:lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en-us\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Taywils.me | &#123;&#123; page.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- CSS libraries --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/gcp/prettify.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/gcp/sons-of-obsidian.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/slides.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- My CSS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet/less\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/style.less\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Javscript Libraries --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/less-1.3.0.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/jquery-1.8.0.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/coffee-script-1.3.3.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/gcp/prettify.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/slides.min.jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- My Javascript --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/coffeescript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/page.coffee\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/coffeescript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/about.coffee\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascript/projects.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"prettyPrint();\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header-space\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-fade\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/index.html\"</span>&gt;</span>Blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header-space\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-fade\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/projects.html\"</span>&gt;</span>Projects<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header-space\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-fade\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/about.html\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"left-sidebar\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"right-sidebar\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span></div><div class=\"line\">&#123;&#123; content &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"copyright\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">Copyright &amp;amp;copy; 2012 Demetrious Taylor Wilson.  All rights reserved.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When you yield for the content you then tell your individual pages which layout to use.<br>Once selected within the page yaml as you can see below you use Jekyll’s builtin post macro for accessing the yaml you describe inside of each post.<br>In addition you can add your own custom post yaml such as the post.mydate which formats the post’s date a bit differently from the default post.date.<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">layout: default</div><div class=\"line\">title: Homepage</div><div class=\"line\">permalink: /index.html</div><div class=\"line\">---</div><div class=\"line\">&#123;% for post in site.posts %&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-table\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-title\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; post.url &#125;&#125;\"</span>&gt;</span>&#123;&#123; post.mydate &#125;&#125; | &#123;&#123; post.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-description\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; post.url &#125;&#125;\"</span>&gt;</span>&#123;&#123; post.description &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-tags\"</span>&gt;</span></div><div class=\"line\">&#123;% for tag in post.tags %&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/&#123;&#123; tag &#125;&#125;.png\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&#123;&#123; tag &#125;&#125;\"</span>/&gt;</span></div><div class=\"line\">&#123;% endfor %&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"article-catagories\"</span>&gt;</span></div><div class=\"line\">&#123;% for catagory in post.catagories %&#125;</div><div class=\"line\">[&#123;&#123; catagory &#125;&#125;]</div><div class=\"line\">&#123;% endfor %&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"clear: both;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">&#123;% endfor %&#125;</div></pre></td></tr></table></figure></p>\n<p>From my perspective at least, getting up and running with Jekyll was simple and easy compared to having to learn about an entire database query language(MySQL) before you can access your posts.<br>Despite all of my cheerleading and praise I admit Jekyll was a bit confusing at times due to the usage of the liquid templating engine.<br>I had to sit down for a few hours and did through some documentation and browse source code of existing Jekyll blogs in order to understand the finer points of how pages are rendered from templates.<br>Even more confusing was that since HTML is readily generated when the <div>_site</div> directory is created you don’t need to place inline javascript within the post itself(although there is nothing stopping you from doing so) all of your javascript can go in the layout and access DOM from posts as they are shown.</p>\n<p>Anyhow I’ve talked way too much in this post already… enjoy your static site produced with Jekyll.</p>\n<p>(NOTE: I realize that you can’t compare an entire CMS to a static site generator but I’m only comparing them from a blogger’s point of view)</p>"},{"title":"A Lightweight SqlLite Android tutorial","date":"2011-06-24T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/guestdialer.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/guestdialer.JPG","comments":0,"_content":"In this tutorial we'll step through the process of using the Android's builtin support for SqlLite to store a password and retrive it in a rather interesting attempt at creating a guest dialer application. When I first imagined a guest dialer I had in mind an application that would allow you to let someone use your phone without giving them total access to your incomming messages and other sensitive data. However, a lock-in application basically classifies as a malware when you think about it so whatever... at least I learned about the SqlLite API.\n\n<!-- more -->\nBefore begining this tutorial make sure you have the following... \n\n- Java runtime and SDK installed\n- Android SDK\n- Some IDE which supports Android development such as Eclipse or IntelliJ IDEA(the free community edition can be used for Android Dev)\n- Some familiarity at least(not much don't worry) with Android Development\n\nWithin your IDE of choice create a new Android project and call it Secure Dialer(actually you can name it whatever but I'll just refer to it as Secure Dialer throughout this tutorial).\n\nNow locate the pre configured file called \"AndroidManifest.xml\".\nThe AndroidManifest file is the standard configuration file for Android applications.\nIts where you determine which permissions you demand from the phone OS as well as where you setup the various activity screens and many other things.\nJust think of the AndroidManifest as the app's system profile if that helps.\nTo start us off lets declare the permissions we need the end user to accept in order for our application to function correctly.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \nxmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"org.secure.dialer\"\nandroid:versionCode=\"1\"\nandroid:versionName=\"1.0\">\n\n<uses-sdk android:minSdkVersion=\"8\" />\n\n<uses-permission \nandroid:name=\"android.permission.CALL_PHONE\">\n</uses-permission>\n\n<uses-permission \nandroid:name=\"android.permission.READ_PHONE_STATE\">\n</uses-permission>\n```\n\nNext we'll fill out the <application> element; this is the element where we can declare \nthe activities and setup any intent-filters which we might need as well.\n\n```xml\n<application \nandroid:icon=\"@drawable/icon\" \nandroid:label=\"@string/app_name\" \nandroid:debuggable=\"true\">\n\n<activity\nandroid:name=\".HomeScreen\"\nandroid:label=\"@string/homescreen_label\">\n\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n\n</activity>\n\n<activity\nandroid:name=\".Dialer\"\nandroid:label=\"@string/dialer_label\">\n</activity>\n\n<activity\nandroid:name=\".NewPassword\"\nandroid:label=\"@string/newpassword_label\">\n</activity>\n\n<activity\nandroid:name=\".ResetPassword\"\nandroid:label=\"@string/resetpassword_label\">\n</activity>\n\n</application>\n\n</manifest>\n```\nNow go ahead and save the new AndroidManifest.xml with our changes in place.\nNext up is the resource file strings.xml.\n\nstrings.xml if you need a refresher is a special resource file that is standard across Androidapps because its the file where you define all of the text strings which will appear throughout your app.\n\nAlthough is practical to define strings within the .java files its considered good Android development practice to keep as many of the applications strings within the strings.xml.\n\nYou might think its crazy but for large applications it makes updating text notfications a piece of cake.\nSo navigate within your IDE to res/values/strings.xml or create the file if it doesn't exist.\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"app_name\">SecureDialer</string>\n\n<string name=\"homescreen_label\">Homescreen Activity</string>\n<string name=\"homescreen_dialer\">Dialer</string>\n<string name=\"homescreen_password\">Password</string>\n<string name=\"homescreen_exit\">Exit</string>\n\n<string name=\"newpassword_label\">Newpassword Activity</string>\n<string name=\"newpassword_new_text\">Enter new password:</string>\n<string name=\"newpassword_confirm_text\">Repeat the password:</string>\n<string name=\"newpassword_new_hint\">Type new password here</string>\n<string name=\"newpassword_confirm_hint\">Repeat password here</string>\n<string name=\"newpassword_back\">Back</string>\n<string name=\"newpassword_save\">Save</string>\n\n<string name=\"resetpassword_label\">Resetpassword Activity</string>\n<string name=\"resetpassword_old_text\">Enter old password:</string>\n<string name=\"resetpassword_old_hint\">Type old password here</string>\n<string name=\"resetpassword_new_text\">Enter new password:</string>\n<string name=\"resetpassword_new_hint\">Type new password here</string>\n<string name=\"resetpassword_confirm_text\">Confirm password:</string>\n<string name=\"resetpassword_confirm_hint\">Repeat password here</string>\n\n<string name=\"dialer_label\">Dialer Activity</string>\n<string name=\"dialer_dial\">Dial</string>\n<string name=\"dialer_clear\">Clear</string>\n<string name=\"dialer_done\">Done</string>\n\n<string name=\"dialerpassword_enter\">Enter</string>\n<string name=\"dialerpassword_nevermind\">Nevermind</string>\n</resources>\n```\nRemember all of those @string/some_name values within the AndroidManifest.xml?\nWell that is how we reference the values stored within res/strings.xml.\n\nMoving along next create the Java class file HomeScreen within your applications src folder if you want to follow along with the code I have it under <div>src/org/secure/dialer/HomeScreen.java.</div>\nDon't worry about all of those string values you just typed or pasted we'll use them shortly as we introduce each activity screen.\n\nAs is normal with Android development we will first create the visual layouts and then once all our buttons and views are setup we then add Java to support the various actions we want to allow our users to make.\n\nBe warned though that this style of visuals first and then application logic might sound strange if you're comming from a web development MVC or MVVM background in which you first design your Models before hooking up controller logic before finnally designing a UI; but don't let it get to you too much because you'll see how its much easier for you to structure your Java code since you basically build application logic on top of objects created from your visual layout.\n\nBut enough chit chat, create a new file \"homescreen.xml\" within <div>/res/layout/</div>\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- \nA great tutorial on how to design button themes\nhttp://blog.androgames.net/40/custom-button-style-and-theme/\n-->\n<RelativeLayout \nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/homescreen_relative_layout\"\nandroid:orientation=\"vertical\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_parent\">\n\n<Button\nandroid:id=\"@+id/homescreen_dialer_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"fill_parent\"\nandroid:text=\"@string/homescreen_dialer\"\nandroid:onClick=\"homescreen_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/homescreen_password_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_below=\"@id/homescreen_dialer_button\"\nandroid:text=\"@string/homescreen_password\"\nandroid:onClick=\"homescreen_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/homescreen_exit_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_below=\"@id/homescreen_password_button\"\nandroid:text=\"@string/homescreen_exit\"\nandroid:onClick=\"homescreen_button_click_handler\"/>\n\n</RelativeLayout>\n```\nThe homescreen is fairly basic it will just appear as three buttons vertically tiled.\nWhen we get to the code for the homescreen you'll see how easily you hookup code to support the android:onClick= tags from your xml file.\n\nNow create the Java class file \"HomeScreen.java\" within your project's src/ folder.\nHere you'll also notice a class called \"PasswordDB\" created, that is the object representation of our SQLite database which is the focus of the article and we'll cover it in depth later on.\n\n```java\npackage com.example;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Toast;\n\npublic class HomeScreen extends Activity {\n\n  protected PasswordDB password_db;\n\n  /**\n   * (non-Javadoc)\n   * @see android.app.Activity#onCreate(android.os.Bundle)\n   */\n  public void onCreate(Bundle saved_instance_state){\n    super.onCreate(saved_instance_state);\n    this.setContentView(R.layout.homescreen);\n    password_db = new PasswordDB(this);\n  }\n\n  /**\n   * Manages the button click events for the HomeScreen Activity.<br />\n   * Clicking exit terminates the app.<br />\n   * Clicking password launches either the newpassword or resetpassword\n   * activity depending on whether a password is currently stored.<br />\n   * Clicking dialer launches the dialer activity.\n   * @param button_clicked\n   */\n  public void homescreen_button_click_handler(View button_clicked){\n    switch(button_clicked.getId()){\n      Boolean password_found = password_db.is_password();\n\n      case R.id.homescreen_exit_button:\n      HomeScreen.this.finish();\n      break;\n\n      case R.id.homescreen_password_button:\n\n      if(!password_found){\n        Intent new_password_intent = new Intent(this.getApplicationContext(), NewPassword.class);\n\n        this.startActivity(new_password_intent);\n        HomeScreen.this.finish();\n      }\n      else{\n        Intent reset_password_intent = new Intent(this.getApplicationContext(), ResetPassword.class);\n\n        this.startActivity(reset_password_intent);\n        HomeScreen.this.finish();\n      }\n      break;\n\n      case R.id.homescreen_dialer_button:\n      if(password_found) {\n        Intent dialer_intent = new Intent(this.getApplicationContext(), Dialer.class);\n        this.startActivity(dialer_intent);\n        HomeScreen.this.finish();\n      } else {\n        display_toast(\"No password has been set yet.\");\n      }\n      break;\n    }\n  }\n\n  /**\n   * Displays the string passed as a new toast\n   * @param message\n   */\n  protected void display_toast(String message)\n  {\n    Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();\n  }\n}\n```\nPay attention to the homescreen_button_click_handler. \nRemember inside our Homescreen.xml file where we defined the onClick attribute for each of the three buttons?\nNow you see how easy it is within the Java code to look up the button's unique id name and write handler code, it just becomes a switch case on the getId() method of the View which generated the click event.\nTo think if you tried it the other way around you would have foolishly built up three different button handler events where we have just a single button_handler for the entire Homescreen.\n\nThis style of design also makes our code very modular; if you wanted to add another button its as easy as popping in another case statement.\nLooking at the button_click_handler code when the user presses the homescreen_dialer_button we launch the Dialer activity screen... lets do that.\n</p>\n\n<p>\nAs before we'll create the dialer layout first, so create the file \"dialer.xml\" within the layout directory res/layout.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/dialer_relative_layout\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\">\n\n<EditText\nandroid:id=\"@+id/dialer_number_edit\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:focusable=\"false\"/>\n\n<Button\nandroid:id=\"@+id/dialer_one\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"1\"\nandroid:layout_below=\"@id/dialer_number_edit\"\nandroid:layout_alignLeft=\"@id/dialer_number_edit\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_two\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"2\"\nandroid:layout_below=\"@id/dialer_number_edit\"\nandroid:layout_toRightOf=\"@id/dialer_one\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_three\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"3\"\nandroid:layout_below=\"@id/dialer_number_edit\"\nandroid:layout_toRightOf=\"@id/dialer_two\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_four\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"4\"\nandroid:layout_below=\"@id/dialer_one\"\nandroid:layout_alignLeft=\"@id/dialer_one\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_five\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"5\"\nandroid:layout_below=\"@id/dialer_two\"\nandroid:layout_toRightOf=\"@id/dialer_four\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_six\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"6\"\nandroid:layout_below=\"@id/dialer_three\"\nandroid:layout_toRightOf=\"@id/dialer_five\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_seven\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"7\"\nandroid:layout_below=\"@id/dialer_four\"\nandroid:layout_alignLeft=\"@id/dialer_four\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_eight\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"8\"\nandroid:layout_below=\"@id/dialer_five\"\nandroid:layout_toRightOf=\"@id/dialer_seven\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_nine\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"9\"\nandroid:layout_below=\"@id/dialer_six\"\nandroid:layout_toRightOf=\"@id/dialer_eight\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_pound\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"#\"\nandroid:layout_below=\"@id/dialer_seven\"\nandroid:layout_alignLeft=\"@id/dialer_seven\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_zero\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"0\"\nandroid:layout_below=\"@id/dialer_eight\"\nandroid:layout_toRightOf=\"@id/dialer_pound\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_star\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"*\"\nandroid:layout_below=\"@id/dialer_nine\"\nandroid:layout_toRightOf=\"@id/dialer_zero\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_dial_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/dialer_dial\"\nandroid:layout_below=\"@id/dialer_pound\"\nandroid:layout_alignParentLeft=\"true\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_clear_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/dialer_clear\"\nandroid:layout_below=\"@id/dialer_star\"\nandroid:layout_alignParentRight=\"true\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_done_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/dialer_done\"\nandroid:layout_below=\"@id/dialer_dial_button\"\nandroid:layout_centerHorizontal=\"true\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n</RelativeLayout>\n```\nAs you can guess all of the numerical button are what you should expect from a phone dialer.\nOf intrest is the non-focusable editbox where the phonenumber will be displayed as the user types and the three buttons near the bottom; dial, clear and done.\nThe layout as you can see is rather plain but the interesting bits will come next when we add the Java code.\nHowever before that we need to creat the layout for the password prompt which will display once the guest has finished making a call and might potentially have the chance to muck around with your phone.\n\nAdd the file \"dialerpassword.xml\" to the res/layout folder.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/dialerpassword_relative_layout\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\">\n\n<EditText\nandroid:id=\"@+id/dialerpassword_password_edit\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:hint=\"@string/newpassword_confirm_hint\"\nandroid:singleLine=\"true\"/>\n\n<Button\nandroid:id=\"@+id/dialerpassword_enter_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/dialerpassword_enter\"\nandroid:layout_below=\"@id/dialerpassword_password_edit\"\nandroid:layout_alignLeft=\"@id/dialerpassword_password_edit\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialerpassword_nevermind_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/dialerpassword_nevermind\"\nandroid:layout_below=\"@id/dialerpassword_password_edit\"\nandroid:layout_alignRight=\"@id/dialerpassword_password_edit\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n</RelativeLayout>\n```\nFinally create the Java class file \"Dialer.java\" and place it within your src/ folder.\n```java\npackage com.example;\n\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.telephony.TelephonyManager;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.telephony.PhoneStateListener;\n\npublic class Dialer extends HomeScreen {\n\n  private String current_password = null;\n  private EditText dialer_phone_number_field = null;\n  private Dialog password_dialog = null;\n  private EditText dialog_password_field = null;\n  private PhoneStateListener phone_state_listener = null;\n  private TelephonyManager telephony_manager = null;\n\n  /*\n   * (non-Javadoc)\n   * @see android.app.Activity#onCreate(android.os.Bundle)\n   */\n  public void onCreate(Bundle saved_instance_state){\n    // Hides both the title and status bar\n    // Must be called calling super.onCreate()\n    this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\n        WindowManager.LayoutParams.FLAG_FULLSCREEN);\n\n    super.onCreate(saved_instance_state);\n    this.setContentView(R.layout.dialer);\n\n    current_password = password_db.get_password();\n    dialer_phone_number_field = (EditText)findViewById(R.id.dialer_number_edit);\n    phone_state_listener = new CallEndedListener();\n    telephony_manager = (TelephonyManager) this.getSystemService(TELEPHONY_SERVICE);\n  }\n\n  /**\n   * Manages the button click events for the HomeScreen Activity.<br />\n   * Clicking the numpad adds the number to the dial box<br />\n   * Clicking dial calls the number within the dial box<br />\n   * Clicking clear erases the dial box<br />\n   * Clicking done prompts for the password<br />\n   * @param button_clicked\n   */\n  public void dialer_button_click_handler(View button_clicked){\n    StringBuilder phone_number = new StringBuilder();\n\n    switch(button_clicked.getId()){\n      case R.id.dialer_one:\n        phone_number.append('1');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_two:\n        phone_number.append('2');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_three:\n        phone_number.append('3');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_four:\n        phone_number.append('4');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_five:\n        phone_number.append('5');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_six:\n        phone_number.append('6');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_seven:\n        phone_number.append('7');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_eight:\n        phone_number.append('8');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_nine:\n        phone_number.append('9');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_zero:\n        phone_number.append('0');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_star:\n        phone_number.append('*');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_pound:\n        phone_number.append('#');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n        // Copies the phone_number_field to a StringBuilder,\n        // deletes the last digit and dumps the StringBuilder\n        // back to the phone_number_field\n      case R.id.dialer_clear_button:\n        if(!dialer_phone_number_field.getText().toString().equals(\"\")){\n          for(int i = 0; i < dialer_phone_number_field.getText().toString().length(); ++i){\n            phone_number.append(dialer_phone_number_field.getText().toString().charAt(i));\n          }\n\n          phone_number.deleteCharAt(phone_number.length() - 1);\n          dialer_phone_number_field.setText(phone_number.toString());\n          phone_number.setLength(0);\n        }\n        break;\n\n        // Launches the dialog box prompting for the new password\n      case R.id.dialer_done_button:\n        password_dialog = make_password_dialog(this);\n        password_dialog.show();\n        break;\n\n      case R.id.dialer_dial_button:\n        if(dialer_phone_number_field.getText().toString().equals(\"\")){\n          display_toast(\"Enter a phone number to dial\");\n        }\n        else{\n          perform_dial();\n        }\n        break;\n    }\n  }\n\n  /**\n   * Creates a dialog for the password confirmation\n   * @param context\n   * @return\n   */\n  public Dialog make_password_dialog(Context context){\n    Dialog dialog = new Dialog(context);\n\n    dialog.setContentView(R.layout.dialerpassword);\n    dialog.setTitle(\"Password?\");\n    dialog.setCancelable(true);\n\n    dialog_password_field = (EditText)dialog.findViewById(R.id.dialerpassword_password_edit);\n    Button dialog_enter = (Button)dialog.findViewById(R.id.dialerpassword_enter_button);\n    dialog_enter.setOnClickListener(dialog_click_listener);\n    Button dialog_nevermind = (Button)dialog.findViewById(R.id.dialerpassword_nevermind_button);\n    dialog_nevermind.setOnClickListener(dialog_click_listener);\n\n    return dialog;\n  }\n\n  /**\n   * Custom View.OnClickListener interface for the password\n   * dialog buttons.\n   */\n  public OnClickListener dialog_click_listener = new View.OnClickListener(){\n\n    /**\n     * Clicking nevermind closes the dialog menu<br />\n     * Clicking done validates the password entered.\n     * (non-Javadoc)\n     * @see android.view.View.OnClickListener#onClick(android.view.View)\n     */\n    @Override\n      public void onClick(View button_clicked) {\n        switch(button_clicked.getId()){\n          case R.id.dialerpassword_nevermind_button:\n            password_dialog.dismiss();\n            break;\n\n          case R.id.dialerpassword_enter_button:\n            if(validate_password(dialog_password_field.getText().toString().trim())){\n              password_dialog.dismiss();\n              Intent homescreen_intent = new Intent(getApplicationContext(), HomeScreen.class);\n              startActivity(homescreen_intent);\n              Dialer.this.finish();\n            }\n            break;\n        }\n      }\n  };\n\n  /**\n   * Validates the password typed by the user to check if it\n   * matches the current password stored in the database.\n   * @param password_value\n   * @return true if the password was valid\n   */\n  private Boolean validate_password(String password_value){\n    if(!password_value.equals(current_password)){\n      display_toast(\"Incorrect password!\");\n      this.dialog_password_field.setText(\"\");\n      return false;\n    }\n    else{\n      return true;\n    }\n  }\n\n  /**\n   * A small hack to disable the back button\n   * (non-Javadoc)\n   * @see android.app.Activity#onBackPressed()\n   */\n  @Override\n    public void onBackPressed() {\n      display_toast(\"The back button is disabled\");\n      return;\n    }\n\n  /**\n   * Lets the user call using the dial button\n   * (non-Javadoc)\n   * @see android.app.Activity#onKeyDown(int, android.view.KeyEvent)\n   */\n  public boolean onKeyDown(int keyCode, KeyEvent event){\n    if(keyCode == KeyEvent.KEYCODE_CALL){\n      perform_dial();\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Dials the desired phone number and creates a listener to\n   * to capture the state when the phone call has ended.\n   */\n  public void perform_dial(){\n    if(dialer_phone_number_field != null){\n      try{\n        telephony_manager.listen(phone_state_listener, PhoneStateListener.LISTEN_CALL_STATE);\n        Intent phone_call = new Intent(Intent.ACTION_CALL,\n            Uri.parse(\"tel:\" + dialer_phone_number_field.getText()));\n        startActivity(phone_call);\n      }\n      catch(Exception error){\n        error.printStackTrace();\n      }\n    }\n  }\n\n  /**\n   *\n   * @author Alex Bredariol Grilo\n   * {@link www.umamao.com}\n   */\n  private class CallEndedListener extends PhoneStateListener {\n    boolean called = false;\n\n    /* Waits until the phone call is done and restarts the activity.\n     *\n     * (non-Javadoc)\n     * @see android.telephony.PhoneStateListener#onCallStateChanged(int, java.lang.String)\n     */\n    @Override\n      public void onCallStateChanged(int state, String incoming_number) {\n        if(called && state == TelephonyManager.CALL_STATE_IDLE){\n          called = false;\n\n          telephony_manager.listen(this,\n              PhoneStateListener.LISTEN_NONE);\n\n          try{\n            Dialer.this.finish();\n            Intent dialer_restart = new Intent(Dialer.this, Dialer.class);\n            dialer_restart.setAction(Intent.ACTION_MAIN);\n            startActivity(dialer_restart);\n          }\n          catch(Exception e){\n            e.printStackTrace();\n          }\n        }\n        else{\n          // When the phone is not in idle mode it is currently\n          // in use\n          if(state == TelephonyManager.CALL_STATE_OFFHOOK){\n            called = true;\n          }\n        }\n      }\n  }\n}\n```\nStepping through the code for the Dialer class you'll notice that its relatively simple.\nSince the activity is once again button based the meat of the code involves deciding what we should do once each button handler event is triggered.\n\nA quick thing to notice is that the Dialer class we defined extends the HomeScreen where we intialized the password database object; so all of the password interaction is due to our great use of inheritance.\n\nAnyhow the basic idea for the Dialer activity is the following...\n\n1. Pressing the numeric keys lets the user enter a phonenumber\n2. The clear button should delete a numeric character one at a time\n3. Dial... makes a phonecall\n4. Done should prompt the user for a password, if correct unlocks the app\n\nWhat you'll notice here is that the prompting for a password is how we make the dialer somewhat secure. If the wrong one is entered the user should theorectically have no other access to your phone meaning they can't touch your apps, peek at your emails or do anything else.\nLooking at the code you'll see the function make_password_dialog() which creates the kinda mini embedded activity when the user triggers the dialer_done_button click event.\n\nThe remaining code within the Dialer class involves the TelephonyManager which is the Android API's way of letting developers controller the actions of the phone listener and receiver.\nIts rather easy to understand after you force yourself to think of the Phone as advancing across as series of states such as IDLE, OFFHOOK, LISTEN_CALL and create a mental map of those states as you normally talk on the phone. Now we'll return back to the Homescreen and add in the code to support the new and reset password buttons. \n\nEach of the buttons will have a layout and Java class file associated. Lets begin with the NewPassword class, create the file \"newpassword.xml\" within the res/layout folder of your Android project. The xml rather easy to understand as its just a regular enter password and repeat it once type of layout you've seen all over the place.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/newpassword_relative_layout\" \nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\">\n\n<TextView \nandroid:id=\"@+id/newpassword_new_password_text\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:text=\"@string/newpassword_new_text\"/>\n\n<EditText \nandroid:id=\"@+id/newpassword_new_password_edit\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:hint=\"@string/newpassword_new_hint\"\nandroid:layout_below=\"@id/newpassword_new_password_text\"\nandroid:singleLine=\"true\"/>\n\n<TextView \nandroid:id=\"@+id/newpassword_confirm_password_text\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:text=\"@string/newpassword_confirm_text\"\nandroid:layout_below=\"@id/newpassword_new_password_edit\"/>\n\n<EditText \nandroid:id=\"@+id/newpassword_confirm_password_edit\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:hint=\"@string/newpassword_confirm_hint\"\nandroid:layout_below=\"@id/newpassword_confirm_password_text\"\nandroid:singleLine=\"true\"/>\n\n<Button\nandroid:id=\"@+id/newpassword_back_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/newpassword_back\"\nandroid:layout_below=\"@id/newpassword_confirm_password_edit\"\nandroid:layout_alignLeft=\"@id/newpassword_confirm_password_edit\"\nandroid:onClick=\"newpassword_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/newpassword_save_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/newpassword_save\"\nandroid:layout_below=\"@id/newpassword_confirm_password_edit\"\nandroid:layout_alignRight=\"@id/newpassword_confirm_password_edit\"\nandroid:onClick=\"newpassword_button_click_handler\"/>\n\n</RelativeLayout>\n```\nThe Java code should be titled \"NewPassword.java\" and stored within the src/ folder of your project.\nThe code consist of letting the user enter a password into the editText box, and validate that the repeated value matches the original.\nOnce the validation has been accepted we make a DB transaction and store the password.\n```java\npackage com.example;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\n\npublic class NewPassword extends HomeScreen {\n\n  private EditText new_password_field = null;\n  private EditText confirm_password_field = null;\n\n  /*\n   * (non-Javadoc)\n   * @see android.app.Activity#onCreate(android.os.Bundle)\n   */\n  public void onCreate(Bundle saved_instance_state){\n    super.onCreate(saved_instance_state);\n    this.setContentView(R.layout.newpassword);\n\n    new_password_field = (EditText)findViewById(\n        R.id.newpassword_new_password_edit);\n    confirm_password_field = (EditText)findViewById(\n        R.id.newpassword_confirm_password_edit);\n  }\n\n  /**\n   * Manages the button click events for the NewPassword Activity.<br />\n   * Clicking back returns to the HomeScreen.<br />\n   * Clicking save will save the password if it passes the validation\n   * check.\n   * @param button_clicked\n   */\n  public void newpassword_button_click_handler(View button_clicked){\n    Intent homescreen_intent = new Intent(this.getApplicationContext(),\n        HomeScreen.class);\n\n    switch(button_clicked.getId()){\n      case R.id.newpassword_back_button:\n        this.startActivity(homescreen_intent);\n        NewPassword.this.finish();\n        break;\n\n      case R.id.newpassword_save_button:\n        if(validate_password(\n              new_password_field.getText().toString().trim(),\n              confirm_password_field.getText().toString().trim()\n              )){\n          this.startActivity(homescreen_intent);\n          NewPassword.this.finish();\n        }\n        break;\n    }\n  }\n\n  /**\n   * When both the new password and the confirmation password\n   * match the new password is saved. Else when the passwords\n   * don't match or are empty an error message is displayed.\n   * @return true if both password fields match else false\n   */\n  private Boolean validate_password(String new_password_value,\n      String confirm_password_value){\n\n    if(!new_password_value.equals(confirm_password_value)){\n      display_toast(\"Your Passwords do not match\");\n      return false;\n    }\n    else if(new_password_value.equals(\"\") &&\n        new_password_value.equals(\"\")){\n      display_toast(\"Your Passwords cannot be empty\");\n      return false;\n    }\n    else{\n      password_db.set_password(new_password_value);\n      display_toast(\"Your new password was saved!\");\n      return true;\n    }\n  }\n}\n```\nIf you pay enough attention to the newpassword xml and Java code behind you'll have no trouble at all with the resetpassword code as its very similar.\nWe'll begin with the layout for the resetpassword code, so create the file \"resetpassword.xml\" within the res/layout/ folder of your project.\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/resetpassword_relative_layout\" \nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\">\n\n<TextView \nandroid:id=\"@+id/resetpassword_old_password_text\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:text=\"@string/resetpassword_old_text\"/>\n\n<EditText \nandroid:id=\"@+id/resetpassword_old_password_edit\" \nandroid:hint=\"@string/resetpassword_old_hint\"\nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:layout_below=\"@id/resetpassword_old_password_text\"\nandroid:singleLine=\"true\"\nandroid:maxLength=\"10\"/>\n\n<TextView \nandroid:id=\"@+id/resetpassword_new_password_text\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:text=\"@string/resetpassword_new_text\"\nandroid:layout_below=\"@id/resetpassword_old_password_edit\"/>\n\n<EditText \nandroid:id=\"@+id/resetpassword_new_password_edit\" \nandroid:hint=\"@string/resetpassword_new_hint\"\nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:layout_below=\"@id/resetpassword_new_password_text\"\nandroid:singleLine=\"true\"\nandroid:maxLength=\"10\"/>\n\n<TextView \nandroid:id=\"@+id/resetpassword_confirm_password_text\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:text=\"@string/resetpassword_confirm_text\"\nandroid:layout_below=\"@id/resetpassword_new_password_edit\"/>\n\n<EditText \nandroid:id=\"@+id/resetpassword_confirm_password_edit\" \nandroid:hint=\"@string/resetpassword_confirm_hint\"\nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:layout_below=\"@id/resetpassword_confirm_password_text\"\nandroid:singleLine=\"true\"\nandroid:maxLength=\"10\"/>\n\n<Button\nandroid:id=\"@+id/resetpassword_back_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/newpassword_back\"\nandroid:layout_below=\"@id/resetpassword_confirm_password_edit\"\nandroid:layout_alignLeft=\"@id/resetpassword_confirm_password_edit\"\nandroid:onClick=\"reset_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/resetpassword_save_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/newpassword_save\"\nandroid:layout_below=\"@id/resetpassword_confirm_password_edit\"\nandroid:layout_alignRight=\"@id/resetpassword_confirm_password_edit\"\nandroid:onClick=\"reset_button_click_handler\"/>\n\n</RelativeLayout>\n```\nThe addition here for the reset password xml layout is the entry for the current or old password. We going to assert that the value entered there must be found within the database before we can create a new transaction to store the value of a new password. Now create the file within the src/ folder of your project called \"ResetPassword.java\". I was extra careful to write useful comments within this file so be sure to read them before moving on to the last part.\n```java\npackage com.example;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\n\n/**\n * Resets the applications' password used to escape from the dialer activity\n */\npublic class ResetPassword extends HomeScreen {\n\n  private String current_password = null;\n  private EditText new_password_field = null;\n  private EditText confirm_password_field = null;\n  private EditText old_password_field = null;\n\n  /*\n   * (non-Javadoc)\n   * @see android.app.Activity#onCreate(android.os.Bundle)\n   */\n  public void onCreate(Bundle saved_instance_state){\n    super.onCreate(saved_instance_state);\n    this.setContentView(R.layout.resetpassword);\n\n    current_password = password_db.get_password();\n    new_password_field = (EditText)findViewById(\n        R.id.resetpassword_new_password_edit);\n    confirm_password_field = (EditText)findViewById(\n        R.id.resetpassword_confirm_password_edit);\n    old_password_field = (EditText)findViewById(\n        R.id.resetpassword_old_password_edit);\n  }\n\n  /**\n   * Manages the button click events for the NewPassword Activity.<br />\n   * Clicking back returns to the HomeScreen.<br />\n   * Clicking save will save the password if it passes the validation\n   * check.\n   * @param button_clicked\n   */\n  public void reset_button_click_handler(View button_clicked){\n    Intent homescreen_intent = new Intent(this.getApplicationContext(),\n        HomeScreen.class);\n\n    switch(button_clicked.getId()){\n      case R.id.resetpassword_back_button:\n        this.startActivity(homescreen_intent);\n        ResetPassword.this.finish();\n        break;\n\n      case R.id.resetpassword_save_button:\n        if(validate_password(\n              old_password_field.getText().toString().trim(),\n              new_password_field.getText().toString().trim(),\n              confirm_password_field.getText().toString().trim()\n              )){\n          this.startActivity(homescreen_intent);\n          ResetPassword.this.finish();\n        }\n        break;\n    }\n  }\n\n  /**\n   * When the new password equals the confirmation password\n   * and the old password equals the current password \n   * then the new password is reset. Else when the passwords\n   * don't match or are empty or the old password doesn't match the\n   * current password then an error message is displayed.\n   * @return true if both password fields match else false\n   */\n  private Boolean validate_password(String old_password_value,\n      String new_password_value, String confirm_password_value){\n    if(!old_password_value.equals(current_password)){\n      display_toast(\"Your old password is incorrect\");\n      return false;\n    }\n    else if(!new_password_value.equals(confirm_password_value)){\n      display_toast(\"Your Passwords do not match\");\n      return false;\n    }\n    else if(new_password_value.equals(\"\") &&\n        confirm_password_value.equals(\"\")){\n      display_toast(\"Your Passwords cannot be empty\");\n      return false;\n    }\n    else{\n      password_db.reset_password(new_password_value);\n      display_toast(\"Your new password was saved!\");\n      return true;\n    }\n  }\n}\n```\nWe are now ready to explore the basics of the Android SQLite API.\nWithin the src folder of your project add the file \"PasswordDB.java\".\n```java\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\n/**\n * Represents the Password Database\n * @author Demetrious\n *\n */\npublic class PasswordDB extends SQLiteOpenHelper {\n\n  private static final String db_name = \"PasswordDB\";\n  private static final String password_table = \"Passwords\";\n  private static final String password_col_password_number = \"PassNo\";\n  private static final String password_col_password_value = \"PassVal\";\n```\nThe static strings we declared above represent the name of our database, table and two columns.\nThe password number or PassNo will be the primary key and the string value\nof the password(this is not a mission critical app so we're not going to encrpyt it) will be its stored value.\n\nNext we'll write the constructor for the database which will create the databasewith the name we gave it within the string db_name.\n```java\n    /**\n     * \n     * @param context\n     */\n    public PasswordDB(Context context) {\n      super(context, db_name, null, 1);\n    }\n```\nWith our database in place the next step is to create the Table.\nThe code below will accomplish just that, look at the JavaDoc I wrote to see the corresponding SQL.\n```java\n    /**\n     * Invokes the SQL statements below.\n     *  <p>\n     *belowCREATE TABLE IF NOT EXISTS Password( <br />\n     *brPassNoINTEGER PRIMARY KEY, <br />\n     *brPassValVARCHAR(10) NOT NULL <br />\n     *br);\n     * </p>\n     * (non-Javadoc)\n     * @see android.database.sqlite.SQLiteOpenHelper#onCreate(android.database.sqlite.SQLiteDatabase)\n     */\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n      db.execSQL(\"CREATE TABLE IF NOT EXISTS \" + password_table + \"(\" + \n          password_col_password_number + \" INTEGER PRIMARY KEY,\" +\n          password_col_password_value + \" VARCHAR(10) NOT NULL\" +\n          \");\");\n    }\n```\nThe next method onUpgrade() is a required function but we're not going to actually implement it since we don't need it for this example.\n```java\n    /**\n     * (non-Javadoc)\n     * @see android.database.sqlite.SQLiteOpenHelper#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)\n     */\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, \n        int newVersion) {\n    }\n```\nWe'll of course need a way to insert a new password into our database.\nThe method set_password does just that. All its doing is calling a basic SQL insert into query but using the Android API helper method insert();\n```java\n    /**\n     * Inserts a new password into the Password DB via the following SQL.\n     * <p>\n     * INSERT INTO Password (PassVal)<br />\n     * VALUES('new_password');\n     * </p>\n     * @param new_password\n     */\n    public void set_password(String new_password){\n      SQLiteDatabase db = this.getWritableDatabase();\n\n      ContentValues content_values = new ContentValues();\n\n      content_values.put(password_col_password_value, new_password);\n\n      db.insert(password_table, password_col_password_value, \n          content_values);\n      db.close();\n    }\n```\nMuch like a Java property we need a getter to accompany the setter.\nHowever here we'll first write a raw query which will place a cursor at the first result row that was found from our SELECT statement.\nDatabase cursors can be though of as table iterators.\nThe cursor will begin at the result table itself, you must first move it to the  result row to begin reading data.\nOnce at a result row you have to move the cursor column by column and read the rrow value from each.\nSince we are only going to be storing a single password the first row result will always contain the password we want to fetch. \n```java\n    /**\n     * Returns the existing password assuming that one exists via the \n     * following SQL.\n     * <p>\n     * SELECT * <br />\n     * FROM Passwords <br />\n     * WHERE PassNo='1';\n     * </p>\n     * @return A String with the current password\n     */\n    public String get_password(){\n      SQLiteDatabase db = this.getWritableDatabase();\n\n      Cursor cursor = db.rawQuery(\n          \"SELECT \" + password_col_password_value +\n          \" FROM \" + password_table +\n          \" WHERE \" + password_col_password_number + \"=\\'1\\';\", null);\n\n      cursor.moveToFirst();\n      Integer column_index = cursor.getColumnIndex(\n          password_col_password_value);\n      String string_value = cursor.getString(column_index);\n\n      cursor.close();\n      db.close();\n\n      return string_value;\n    }\n```\nNow the question becomes how do we update an existing password?\nTo do so we have to use the update() method which is another Android SQLite API wrapper around the traditional SQL UPDATE WHERE statement.\nLooking at the JavaDoc I wrote you can see how we would write this if it were a regular SQL statement.\n\nDespite the Android SQL API being a little verbose(this might change in the future) the parameterized input means that we would be safe from any type of injection attacks since we're not passing a rawQuery from the user input.\nIn short using the parameterized wrapper methods is more code but it saves you from the potential danger of calling rawQueries which substitute in user values.\n```java\n    /**\n     * Updates the existing password based on the following SQL.\n     * <p>\n     *  UPDATE Password <br />\n     *brSET PassVal='new_password' <br />\n     *brWHERE PassVal='old_password';\n     * </p>\n     * @param new_password\n     */\n    public void reset_password(String new_password){\n      String old_password = get_password();\n      SQLiteDatabase db = this.getWritableDatabase();\n      ContentValues content_values = new ContentValues();\n\n      content_values.put(password_col_password_value, new_password);\n\n      String where_clause = password_col_password_value + \"=?\";\n      String[] where_args = {old_password};\n      db.update(password_table, content_values, where_clause, \n          where_args);\n\n      db.close();\n    }\n```\nLastly we need a way to verify if a password has been set or not. \nThis will allow us to determine when we need to prompt the user for a reset.\nIts short and sweet, just run a select query and count the results.\n```java\n    /**\n     * Uses the following SQL.\n     * <p>\n     * SELECT * <br />\n     * FROM Passwords <br />\n     * WHERE PassNo='1';\n     * </p>\n     * @return true if a password exists else false\n     */\n    public Boolean is_password(){\n      SQLiteDatabase db = this.getWritableDatabase();\n\n      Cursor cursor = db.rawQuery(\n          \"SELECT \" + password_col_password_value +\n          \" FROM \" + password_table +\n          \" WHERE \" + password_col_password_number + \"=\\'1\\';\", null);\n\n      if(cursor != null && cursor.getCount() > 0 ){\n        db.close();\n        cursor.close();\n        return true;\n      }\n      else{\n        db.close();\n        cursor.close();\n        return false;\n      }\n    }\n}\n```\nPerhaps you got lost(its better if you followed along closely) but here is the PasswordDB class in full.\n```java\n//Add your package name here!\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\npublic class PasswordDB extends SQLiteOpenHelper {\n\n  private static final String db_name = \"PasswordDB\";\n  private static final String password_table = \"Passwords\";\n  private static final String password_col_password_number = \"PassNo\";\n  private static final String password_col_password_value = \"PassVal\";\n\n  /**\n   * \n   * @param context\n   */\n  public PasswordDB(Context context) {\n    super(context, db_name, null, 1);\n  }\n\n  /**\n   * Invokes the SQL statements below.\n   *  <p>\n   *belowCREATE TABLE IF NOT EXISTS Password( <br />\n   *brPassNoINTEGER PRIMARY KEY, <br />\n   *brPassValVARCHAR(10) NOT NULL <br />\n   *br);\n   * </p>\n   * (non-Javadoc)\n   * @see android.database.sqlite.SQLiteOpenHelper#onCreate(android.database.sqlite.SQLiteDatabase)\n   */\n  @Override\n    public void onCreate(SQLiteDatabase db) {\n      db.execSQL(\"CREATE TABLE IF NOT EXISTS \" + password_table + \"(\" + \n          password_col_password_number + \" INTEGER PRIMARY KEY,\" +\n          password_col_password_value + \" VARCHAR(10) NOT NULL\" +\n          \");\");\n    }\n\n  /**\n   * (non-Javadoc)\n   * @see android.database.sqlite.SQLiteOpenHelper#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)\n   */\n  @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, \n        int newVersion) {\n    }\n\n  /**\n   * Inserts a new password into the Password DB via the following SQL.\n   * <p>\n   * INSERT INTO Password (PassVal)<br />\n   * VALUES('new_password');\n   * </p>\n   * @param new_password\n   */\n  public void set_password(String new_password){\n    SQLiteDatabase db = this.getWritableDatabase();\n\n    ContentValues content_values = new ContentValues();\n\n    content_values.put(password_col_password_value, new_password);\n\n    db.insert(password_table, password_col_password_value, \n        content_values);\n    db.close();\n  }\n\n  /**\n   * Returns the existing password assuming that one exists via the \n   * following SQL.\n   * <p>\n   * SELECT * <br />\n   * FROM Passwords <br />\n   * WHERE PassNo='1';\n   * </p>\n   * @return A String with the current password\n   */\n  public String get_password(){\n    SQLiteDatabase db = this.getWritableDatabase();\n\n    Cursor cursor = db.rawQuery(\n        \"SELECT \" + password_col_password_value +\n        \" FROM \" + password_table +\n        \" WHERE \" + password_col_password_number + \"=\\'1\\';\", null);\n\n    cursor.moveToFirst();\n    Integer column_index = cursor.getColumnIndex(\n        password_col_password_value);\n    String string_value = cursor.getString(column_index);\n\n    cursor.close();\n    db.close();\n\n    return string_value;\n  }\n\n  /**\n   * Updates the existing password based on the following SQL.\n   * <p>\n   *  UPDATE Password <br />\n   *brSET PassVal='new_password' <br />\n   *brWHERE PassVal='old_password';\n   * </p>\n   * @param new_password\n   */\n  public void reset_password(String new_password){\n    String old_password = get_password();\n    SQLiteDatabase db = this.getWritableDatabase();\n    ContentValues content_values = new ContentValues();\n\n    content_values.put(password_col_password_value, new_password);\n\n    String where_clause = password_col_password_value + \"=?\";\n    String[] where_args = {old_password};\n    db.update(password_table, content_values, where_clause, \n        where_args);\n\n    db.close();\n  }\n\n  /**\n   * Uses the following SQL.\n   * <p>\n   * SELECT * <br />\n   * FROM Passwords <br />\n   * WHERE PassNo='1';\n   * </p>\n   * @return true if a password exists else false\n   */\n  public Boolean is_password(){\n    SQLiteDatabase db = this.getWritableDatabase();\n\n    Cursor cursor = db.rawQuery(\n        \"SELECT \" + password_col_password_value +\n        \" FROM \" + password_table +\n        \" WHERE \" + password_col_password_number + \"=\\'1\\';\", null);\n\n    if(cursor != null && cursor.getCount() > 0 ){\n      db.close();\n      cursor.close();\n      return true;\n    }\n    else{\n      db.close();\n      cursor.close();\n      return false;\n    }\n  }\n}\n```\nSo there you go, an Android application that makes use of the SQLite API. Perhaps you can extend this application or something.\n\nAnyways... enjoy your guestDialer app. \n","source":"_posts/guestdialer.md","raw":"---\ntitle: A Lightweight SqlLite Android tutorial\ndate: 2011-06-24\ncategories: [tutorial]\ntags: [java, android]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/guestdialer.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/guestdialer.JPG\ncomments: false\n---\nIn this tutorial we'll step through the process of using the Android's builtin support for SqlLite to store a password and retrive it in a rather interesting attempt at creating a guest dialer application. When I first imagined a guest dialer I had in mind an application that would allow you to let someone use your phone without giving them total access to your incomming messages and other sensitive data. However, a lock-in application basically classifies as a malware when you think about it so whatever... at least I learned about the SqlLite API.\n\n<!-- more -->\nBefore begining this tutorial make sure you have the following... \n\n- Java runtime and SDK installed\n- Android SDK\n- Some IDE which supports Android development such as Eclipse or IntelliJ IDEA(the free community edition can be used for Android Dev)\n- Some familiarity at least(not much don't worry) with Android Development\n\nWithin your IDE of choice create a new Android project and call it Secure Dialer(actually you can name it whatever but I'll just refer to it as Secure Dialer throughout this tutorial).\n\nNow locate the pre configured file called \"AndroidManifest.xml\".\nThe AndroidManifest file is the standard configuration file for Android applications.\nIts where you determine which permissions you demand from the phone OS as well as where you setup the various activity screens and many other things.\nJust think of the AndroidManifest as the app's system profile if that helps.\nTo start us off lets declare the permissions we need the end user to accept in order for our application to function correctly.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \nxmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"org.secure.dialer\"\nandroid:versionCode=\"1\"\nandroid:versionName=\"1.0\">\n\n<uses-sdk android:minSdkVersion=\"8\" />\n\n<uses-permission \nandroid:name=\"android.permission.CALL_PHONE\">\n</uses-permission>\n\n<uses-permission \nandroid:name=\"android.permission.READ_PHONE_STATE\">\n</uses-permission>\n```\n\nNext we'll fill out the <application> element; this is the element where we can declare \nthe activities and setup any intent-filters which we might need as well.\n\n```xml\n<application \nandroid:icon=\"@drawable/icon\" \nandroid:label=\"@string/app_name\" \nandroid:debuggable=\"true\">\n\n<activity\nandroid:name=\".HomeScreen\"\nandroid:label=\"@string/homescreen_label\">\n\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n\n</activity>\n\n<activity\nandroid:name=\".Dialer\"\nandroid:label=\"@string/dialer_label\">\n</activity>\n\n<activity\nandroid:name=\".NewPassword\"\nandroid:label=\"@string/newpassword_label\">\n</activity>\n\n<activity\nandroid:name=\".ResetPassword\"\nandroid:label=\"@string/resetpassword_label\">\n</activity>\n\n</application>\n\n</manifest>\n```\nNow go ahead and save the new AndroidManifest.xml with our changes in place.\nNext up is the resource file strings.xml.\n\nstrings.xml if you need a refresher is a special resource file that is standard across Androidapps because its the file where you define all of the text strings which will appear throughout your app.\n\nAlthough is practical to define strings within the .java files its considered good Android development practice to keep as many of the applications strings within the strings.xml.\n\nYou might think its crazy but for large applications it makes updating text notfications a piece of cake.\nSo navigate within your IDE to res/values/strings.xml or create the file if it doesn't exist.\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"app_name\">SecureDialer</string>\n\n<string name=\"homescreen_label\">Homescreen Activity</string>\n<string name=\"homescreen_dialer\">Dialer</string>\n<string name=\"homescreen_password\">Password</string>\n<string name=\"homescreen_exit\">Exit</string>\n\n<string name=\"newpassword_label\">Newpassword Activity</string>\n<string name=\"newpassword_new_text\">Enter new password:</string>\n<string name=\"newpassword_confirm_text\">Repeat the password:</string>\n<string name=\"newpassword_new_hint\">Type new password here</string>\n<string name=\"newpassword_confirm_hint\">Repeat password here</string>\n<string name=\"newpassword_back\">Back</string>\n<string name=\"newpassword_save\">Save</string>\n\n<string name=\"resetpassword_label\">Resetpassword Activity</string>\n<string name=\"resetpassword_old_text\">Enter old password:</string>\n<string name=\"resetpassword_old_hint\">Type old password here</string>\n<string name=\"resetpassword_new_text\">Enter new password:</string>\n<string name=\"resetpassword_new_hint\">Type new password here</string>\n<string name=\"resetpassword_confirm_text\">Confirm password:</string>\n<string name=\"resetpassword_confirm_hint\">Repeat password here</string>\n\n<string name=\"dialer_label\">Dialer Activity</string>\n<string name=\"dialer_dial\">Dial</string>\n<string name=\"dialer_clear\">Clear</string>\n<string name=\"dialer_done\">Done</string>\n\n<string name=\"dialerpassword_enter\">Enter</string>\n<string name=\"dialerpassword_nevermind\">Nevermind</string>\n</resources>\n```\nRemember all of those @string/some_name values within the AndroidManifest.xml?\nWell that is how we reference the values stored within res/strings.xml.\n\nMoving along next create the Java class file HomeScreen within your applications src folder if you want to follow along with the code I have it under <div>src/org/secure/dialer/HomeScreen.java.</div>\nDon't worry about all of those string values you just typed or pasted we'll use them shortly as we introduce each activity screen.\n\nAs is normal with Android development we will first create the visual layouts and then once all our buttons and views are setup we then add Java to support the various actions we want to allow our users to make.\n\nBe warned though that this style of visuals first and then application logic might sound strange if you're comming from a web development MVC or MVVM background in which you first design your Models before hooking up controller logic before finnally designing a UI; but don't let it get to you too much because you'll see how its much easier for you to structure your Java code since you basically build application logic on top of objects created from your visual layout.\n\nBut enough chit chat, create a new file \"homescreen.xml\" within <div>/res/layout/</div>\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- \nA great tutorial on how to design button themes\nhttp://blog.androgames.net/40/custom-button-style-and-theme/\n-->\n<RelativeLayout \nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/homescreen_relative_layout\"\nandroid:orientation=\"vertical\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_parent\">\n\n<Button\nandroid:id=\"@+id/homescreen_dialer_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"fill_parent\"\nandroid:text=\"@string/homescreen_dialer\"\nandroid:onClick=\"homescreen_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/homescreen_password_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_below=\"@id/homescreen_dialer_button\"\nandroid:text=\"@string/homescreen_password\"\nandroid:onClick=\"homescreen_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/homescreen_exit_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_below=\"@id/homescreen_password_button\"\nandroid:text=\"@string/homescreen_exit\"\nandroid:onClick=\"homescreen_button_click_handler\"/>\n\n</RelativeLayout>\n```\nThe homescreen is fairly basic it will just appear as three buttons vertically tiled.\nWhen we get to the code for the homescreen you'll see how easily you hookup code to support the android:onClick= tags from your xml file.\n\nNow create the Java class file \"HomeScreen.java\" within your project's src/ folder.\nHere you'll also notice a class called \"PasswordDB\" created, that is the object representation of our SQLite database which is the focus of the article and we'll cover it in depth later on.\n\n```java\npackage com.example;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Toast;\n\npublic class HomeScreen extends Activity {\n\n  protected PasswordDB password_db;\n\n  /**\n   * (non-Javadoc)\n   * @see android.app.Activity#onCreate(android.os.Bundle)\n   */\n  public void onCreate(Bundle saved_instance_state){\n    super.onCreate(saved_instance_state);\n    this.setContentView(R.layout.homescreen);\n    password_db = new PasswordDB(this);\n  }\n\n  /**\n   * Manages the button click events for the HomeScreen Activity.<br />\n   * Clicking exit terminates the app.<br />\n   * Clicking password launches either the newpassword or resetpassword\n   * activity depending on whether a password is currently stored.<br />\n   * Clicking dialer launches the dialer activity.\n   * @param button_clicked\n   */\n  public void homescreen_button_click_handler(View button_clicked){\n    switch(button_clicked.getId()){\n      Boolean password_found = password_db.is_password();\n\n      case R.id.homescreen_exit_button:\n      HomeScreen.this.finish();\n      break;\n\n      case R.id.homescreen_password_button:\n\n      if(!password_found){\n        Intent new_password_intent = new Intent(this.getApplicationContext(), NewPassword.class);\n\n        this.startActivity(new_password_intent);\n        HomeScreen.this.finish();\n      }\n      else{\n        Intent reset_password_intent = new Intent(this.getApplicationContext(), ResetPassword.class);\n\n        this.startActivity(reset_password_intent);\n        HomeScreen.this.finish();\n      }\n      break;\n\n      case R.id.homescreen_dialer_button:\n      if(password_found) {\n        Intent dialer_intent = new Intent(this.getApplicationContext(), Dialer.class);\n        this.startActivity(dialer_intent);\n        HomeScreen.this.finish();\n      } else {\n        display_toast(\"No password has been set yet.\");\n      }\n      break;\n    }\n  }\n\n  /**\n   * Displays the string passed as a new toast\n   * @param message\n   */\n  protected void display_toast(String message)\n  {\n    Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();\n  }\n}\n```\nPay attention to the homescreen_button_click_handler. \nRemember inside our Homescreen.xml file where we defined the onClick attribute for each of the three buttons?\nNow you see how easy it is within the Java code to look up the button's unique id name and write handler code, it just becomes a switch case on the getId() method of the View which generated the click event.\nTo think if you tried it the other way around you would have foolishly built up three different button handler events where we have just a single button_handler for the entire Homescreen.\n\nThis style of design also makes our code very modular; if you wanted to add another button its as easy as popping in another case statement.\nLooking at the button_click_handler code when the user presses the homescreen_dialer_button we launch the Dialer activity screen... lets do that.\n</p>\n\n<p>\nAs before we'll create the dialer layout first, so create the file \"dialer.xml\" within the layout directory res/layout.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/dialer_relative_layout\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\">\n\n<EditText\nandroid:id=\"@+id/dialer_number_edit\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:focusable=\"false\"/>\n\n<Button\nandroid:id=\"@+id/dialer_one\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"1\"\nandroid:layout_below=\"@id/dialer_number_edit\"\nandroid:layout_alignLeft=\"@id/dialer_number_edit\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_two\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"2\"\nandroid:layout_below=\"@id/dialer_number_edit\"\nandroid:layout_toRightOf=\"@id/dialer_one\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_three\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"3\"\nandroid:layout_below=\"@id/dialer_number_edit\"\nandroid:layout_toRightOf=\"@id/dialer_two\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_four\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"4\"\nandroid:layout_below=\"@id/dialer_one\"\nandroid:layout_alignLeft=\"@id/dialer_one\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_five\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"5\"\nandroid:layout_below=\"@id/dialer_two\"\nandroid:layout_toRightOf=\"@id/dialer_four\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_six\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"6\"\nandroid:layout_below=\"@id/dialer_three\"\nandroid:layout_toRightOf=\"@id/dialer_five\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_seven\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"7\"\nandroid:layout_below=\"@id/dialer_four\"\nandroid:layout_alignLeft=\"@id/dialer_four\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_eight\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"8\"\nandroid:layout_below=\"@id/dialer_five\"\nandroid:layout_toRightOf=\"@id/dialer_seven\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_nine\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"9\"\nandroid:layout_below=\"@id/dialer_six\"\nandroid:layout_toRightOf=\"@id/dialer_eight\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_pound\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"#\"\nandroid:layout_below=\"@id/dialer_seven\"\nandroid:layout_alignLeft=\"@id/dialer_seven\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_zero\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"0\"\nandroid:layout_below=\"@id/dialer_eight\"\nandroid:layout_toRightOf=\"@id/dialer_pound\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_star\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"*\"\nandroid:layout_below=\"@id/dialer_nine\"\nandroid:layout_toRightOf=\"@id/dialer_zero\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_dial_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/dialer_dial\"\nandroid:layout_below=\"@id/dialer_pound\"\nandroid:layout_alignParentLeft=\"true\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_clear_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/dialer_clear\"\nandroid:layout_below=\"@id/dialer_star\"\nandroid:layout_alignParentRight=\"true\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialer_done_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/dialer_done\"\nandroid:layout_below=\"@id/dialer_dial_button\"\nandroid:layout_centerHorizontal=\"true\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n</RelativeLayout>\n```\nAs you can guess all of the numerical button are what you should expect from a phone dialer.\nOf intrest is the non-focusable editbox where the phonenumber will be displayed as the user types and the three buttons near the bottom; dial, clear and done.\nThe layout as you can see is rather plain but the interesting bits will come next when we add the Java code.\nHowever before that we need to creat the layout for the password prompt which will display once the guest has finished making a call and might potentially have the chance to muck around with your phone.\n\nAdd the file \"dialerpassword.xml\" to the res/layout folder.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/dialerpassword_relative_layout\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\">\n\n<EditText\nandroid:id=\"@+id/dialerpassword_password_edit\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:hint=\"@string/newpassword_confirm_hint\"\nandroid:singleLine=\"true\"/>\n\n<Button\nandroid:id=\"@+id/dialerpassword_enter_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/dialerpassword_enter\"\nandroid:layout_below=\"@id/dialerpassword_password_edit\"\nandroid:layout_alignLeft=\"@id/dialerpassword_password_edit\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/dialerpassword_nevermind_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/dialerpassword_nevermind\"\nandroid:layout_below=\"@id/dialerpassword_password_edit\"\nandroid:layout_alignRight=\"@id/dialerpassword_password_edit\"\nandroid:onClick=\"dialer_button_click_handler\"/>\n\n</RelativeLayout>\n```\nFinally create the Java class file \"Dialer.java\" and place it within your src/ folder.\n```java\npackage com.example;\n\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.telephony.TelephonyManager;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.telephony.PhoneStateListener;\n\npublic class Dialer extends HomeScreen {\n\n  private String current_password = null;\n  private EditText dialer_phone_number_field = null;\n  private Dialog password_dialog = null;\n  private EditText dialog_password_field = null;\n  private PhoneStateListener phone_state_listener = null;\n  private TelephonyManager telephony_manager = null;\n\n  /*\n   * (non-Javadoc)\n   * @see android.app.Activity#onCreate(android.os.Bundle)\n   */\n  public void onCreate(Bundle saved_instance_state){\n    // Hides both the title and status bar\n    // Must be called calling super.onCreate()\n    this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\n        WindowManager.LayoutParams.FLAG_FULLSCREEN);\n\n    super.onCreate(saved_instance_state);\n    this.setContentView(R.layout.dialer);\n\n    current_password = password_db.get_password();\n    dialer_phone_number_field = (EditText)findViewById(R.id.dialer_number_edit);\n    phone_state_listener = new CallEndedListener();\n    telephony_manager = (TelephonyManager) this.getSystemService(TELEPHONY_SERVICE);\n  }\n\n  /**\n   * Manages the button click events for the HomeScreen Activity.<br />\n   * Clicking the numpad adds the number to the dial box<br />\n   * Clicking dial calls the number within the dial box<br />\n   * Clicking clear erases the dial box<br />\n   * Clicking done prompts for the password<br />\n   * @param button_clicked\n   */\n  public void dialer_button_click_handler(View button_clicked){\n    StringBuilder phone_number = new StringBuilder();\n\n    switch(button_clicked.getId()){\n      case R.id.dialer_one:\n        phone_number.append('1');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_two:\n        phone_number.append('2');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_three:\n        phone_number.append('3');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_four:\n        phone_number.append('4');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_five:\n        phone_number.append('5');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_six:\n        phone_number.append('6');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_seven:\n        phone_number.append('7');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_eight:\n        phone_number.append('8');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_nine:\n        phone_number.append('9');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_zero:\n        phone_number.append('0');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_star:\n        phone_number.append('*');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n      case R.id.dialer_pound:\n        phone_number.append('#');\n        dialer_phone_number_field.append(phone_number);\n        phone_number.deleteCharAt(0);\n        break;\n\n        // Copies the phone_number_field to a StringBuilder,\n        // deletes the last digit and dumps the StringBuilder\n        // back to the phone_number_field\n      case R.id.dialer_clear_button:\n        if(!dialer_phone_number_field.getText().toString().equals(\"\")){\n          for(int i = 0; i < dialer_phone_number_field.getText().toString().length(); ++i){\n            phone_number.append(dialer_phone_number_field.getText().toString().charAt(i));\n          }\n\n          phone_number.deleteCharAt(phone_number.length() - 1);\n          dialer_phone_number_field.setText(phone_number.toString());\n          phone_number.setLength(0);\n        }\n        break;\n\n        // Launches the dialog box prompting for the new password\n      case R.id.dialer_done_button:\n        password_dialog = make_password_dialog(this);\n        password_dialog.show();\n        break;\n\n      case R.id.dialer_dial_button:\n        if(dialer_phone_number_field.getText().toString().equals(\"\")){\n          display_toast(\"Enter a phone number to dial\");\n        }\n        else{\n          perform_dial();\n        }\n        break;\n    }\n  }\n\n  /**\n   * Creates a dialog for the password confirmation\n   * @param context\n   * @return\n   */\n  public Dialog make_password_dialog(Context context){\n    Dialog dialog = new Dialog(context);\n\n    dialog.setContentView(R.layout.dialerpassword);\n    dialog.setTitle(\"Password?\");\n    dialog.setCancelable(true);\n\n    dialog_password_field = (EditText)dialog.findViewById(R.id.dialerpassword_password_edit);\n    Button dialog_enter = (Button)dialog.findViewById(R.id.dialerpassword_enter_button);\n    dialog_enter.setOnClickListener(dialog_click_listener);\n    Button dialog_nevermind = (Button)dialog.findViewById(R.id.dialerpassword_nevermind_button);\n    dialog_nevermind.setOnClickListener(dialog_click_listener);\n\n    return dialog;\n  }\n\n  /**\n   * Custom View.OnClickListener interface for the password\n   * dialog buttons.\n   */\n  public OnClickListener dialog_click_listener = new View.OnClickListener(){\n\n    /**\n     * Clicking nevermind closes the dialog menu<br />\n     * Clicking done validates the password entered.\n     * (non-Javadoc)\n     * @see android.view.View.OnClickListener#onClick(android.view.View)\n     */\n    @Override\n      public void onClick(View button_clicked) {\n        switch(button_clicked.getId()){\n          case R.id.dialerpassword_nevermind_button:\n            password_dialog.dismiss();\n            break;\n\n          case R.id.dialerpassword_enter_button:\n            if(validate_password(dialog_password_field.getText().toString().trim())){\n              password_dialog.dismiss();\n              Intent homescreen_intent = new Intent(getApplicationContext(), HomeScreen.class);\n              startActivity(homescreen_intent);\n              Dialer.this.finish();\n            }\n            break;\n        }\n      }\n  };\n\n  /**\n   * Validates the password typed by the user to check if it\n   * matches the current password stored in the database.\n   * @param password_value\n   * @return true if the password was valid\n   */\n  private Boolean validate_password(String password_value){\n    if(!password_value.equals(current_password)){\n      display_toast(\"Incorrect password!\");\n      this.dialog_password_field.setText(\"\");\n      return false;\n    }\n    else{\n      return true;\n    }\n  }\n\n  /**\n   * A small hack to disable the back button\n   * (non-Javadoc)\n   * @see android.app.Activity#onBackPressed()\n   */\n  @Override\n    public void onBackPressed() {\n      display_toast(\"The back button is disabled\");\n      return;\n    }\n\n  /**\n   * Lets the user call using the dial button\n   * (non-Javadoc)\n   * @see android.app.Activity#onKeyDown(int, android.view.KeyEvent)\n   */\n  public boolean onKeyDown(int keyCode, KeyEvent event){\n    if(keyCode == KeyEvent.KEYCODE_CALL){\n      perform_dial();\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Dials the desired phone number and creates a listener to\n   * to capture the state when the phone call has ended.\n   */\n  public void perform_dial(){\n    if(dialer_phone_number_field != null){\n      try{\n        telephony_manager.listen(phone_state_listener, PhoneStateListener.LISTEN_CALL_STATE);\n        Intent phone_call = new Intent(Intent.ACTION_CALL,\n            Uri.parse(\"tel:\" + dialer_phone_number_field.getText()));\n        startActivity(phone_call);\n      }\n      catch(Exception error){\n        error.printStackTrace();\n      }\n    }\n  }\n\n  /**\n   *\n   * @author Alex Bredariol Grilo\n   * {@link www.umamao.com}\n   */\n  private class CallEndedListener extends PhoneStateListener {\n    boolean called = false;\n\n    /* Waits until the phone call is done and restarts the activity.\n     *\n     * (non-Javadoc)\n     * @see android.telephony.PhoneStateListener#onCallStateChanged(int, java.lang.String)\n     */\n    @Override\n      public void onCallStateChanged(int state, String incoming_number) {\n        if(called && state == TelephonyManager.CALL_STATE_IDLE){\n          called = false;\n\n          telephony_manager.listen(this,\n              PhoneStateListener.LISTEN_NONE);\n\n          try{\n            Dialer.this.finish();\n            Intent dialer_restart = new Intent(Dialer.this, Dialer.class);\n            dialer_restart.setAction(Intent.ACTION_MAIN);\n            startActivity(dialer_restart);\n          }\n          catch(Exception e){\n            e.printStackTrace();\n          }\n        }\n        else{\n          // When the phone is not in idle mode it is currently\n          // in use\n          if(state == TelephonyManager.CALL_STATE_OFFHOOK){\n            called = true;\n          }\n        }\n      }\n  }\n}\n```\nStepping through the code for the Dialer class you'll notice that its relatively simple.\nSince the activity is once again button based the meat of the code involves deciding what we should do once each button handler event is triggered.\n\nA quick thing to notice is that the Dialer class we defined extends the HomeScreen where we intialized the password database object; so all of the password interaction is due to our great use of inheritance.\n\nAnyhow the basic idea for the Dialer activity is the following...\n\n1. Pressing the numeric keys lets the user enter a phonenumber\n2. The clear button should delete a numeric character one at a time\n3. Dial... makes a phonecall\n4. Done should prompt the user for a password, if correct unlocks the app\n\nWhat you'll notice here is that the prompting for a password is how we make the dialer somewhat secure. If the wrong one is entered the user should theorectically have no other access to your phone meaning they can't touch your apps, peek at your emails or do anything else.\nLooking at the code you'll see the function make_password_dialog() which creates the kinda mini embedded activity when the user triggers the dialer_done_button click event.\n\nThe remaining code within the Dialer class involves the TelephonyManager which is the Android API's way of letting developers controller the actions of the phone listener and receiver.\nIts rather easy to understand after you force yourself to think of the Phone as advancing across as series of states such as IDLE, OFFHOOK, LISTEN_CALL and create a mental map of those states as you normally talk on the phone. Now we'll return back to the Homescreen and add in the code to support the new and reset password buttons. \n\nEach of the buttons will have a layout and Java class file associated. Lets begin with the NewPassword class, create the file \"newpassword.xml\" within the res/layout folder of your Android project. The xml rather easy to understand as its just a regular enter password and repeat it once type of layout you've seen all over the place.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/newpassword_relative_layout\" \nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\">\n\n<TextView \nandroid:id=\"@+id/newpassword_new_password_text\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:text=\"@string/newpassword_new_text\"/>\n\n<EditText \nandroid:id=\"@+id/newpassword_new_password_edit\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:hint=\"@string/newpassword_new_hint\"\nandroid:layout_below=\"@id/newpassword_new_password_text\"\nandroid:singleLine=\"true\"/>\n\n<TextView \nandroid:id=\"@+id/newpassword_confirm_password_text\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:text=\"@string/newpassword_confirm_text\"\nandroid:layout_below=\"@id/newpassword_new_password_edit\"/>\n\n<EditText \nandroid:id=\"@+id/newpassword_confirm_password_edit\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:hint=\"@string/newpassword_confirm_hint\"\nandroid:layout_below=\"@id/newpassword_confirm_password_text\"\nandroid:singleLine=\"true\"/>\n\n<Button\nandroid:id=\"@+id/newpassword_back_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/newpassword_back\"\nandroid:layout_below=\"@id/newpassword_confirm_password_edit\"\nandroid:layout_alignLeft=\"@id/newpassword_confirm_password_edit\"\nandroid:onClick=\"newpassword_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/newpassword_save_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/newpassword_save\"\nandroid:layout_below=\"@id/newpassword_confirm_password_edit\"\nandroid:layout_alignRight=\"@id/newpassword_confirm_password_edit\"\nandroid:onClick=\"newpassword_button_click_handler\"/>\n\n</RelativeLayout>\n```\nThe Java code should be titled \"NewPassword.java\" and stored within the src/ folder of your project.\nThe code consist of letting the user enter a password into the editText box, and validate that the repeated value matches the original.\nOnce the validation has been accepted we make a DB transaction and store the password.\n```java\npackage com.example;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\n\npublic class NewPassword extends HomeScreen {\n\n  private EditText new_password_field = null;\n  private EditText confirm_password_field = null;\n\n  /*\n   * (non-Javadoc)\n   * @see android.app.Activity#onCreate(android.os.Bundle)\n   */\n  public void onCreate(Bundle saved_instance_state){\n    super.onCreate(saved_instance_state);\n    this.setContentView(R.layout.newpassword);\n\n    new_password_field = (EditText)findViewById(\n        R.id.newpassword_new_password_edit);\n    confirm_password_field = (EditText)findViewById(\n        R.id.newpassword_confirm_password_edit);\n  }\n\n  /**\n   * Manages the button click events for the NewPassword Activity.<br />\n   * Clicking back returns to the HomeScreen.<br />\n   * Clicking save will save the password if it passes the validation\n   * check.\n   * @param button_clicked\n   */\n  public void newpassword_button_click_handler(View button_clicked){\n    Intent homescreen_intent = new Intent(this.getApplicationContext(),\n        HomeScreen.class);\n\n    switch(button_clicked.getId()){\n      case R.id.newpassword_back_button:\n        this.startActivity(homescreen_intent);\n        NewPassword.this.finish();\n        break;\n\n      case R.id.newpassword_save_button:\n        if(validate_password(\n              new_password_field.getText().toString().trim(),\n              confirm_password_field.getText().toString().trim()\n              )){\n          this.startActivity(homescreen_intent);\n          NewPassword.this.finish();\n        }\n        break;\n    }\n  }\n\n  /**\n   * When both the new password and the confirmation password\n   * match the new password is saved. Else when the passwords\n   * don't match or are empty an error message is displayed.\n   * @return true if both password fields match else false\n   */\n  private Boolean validate_password(String new_password_value,\n      String confirm_password_value){\n\n    if(!new_password_value.equals(confirm_password_value)){\n      display_toast(\"Your Passwords do not match\");\n      return false;\n    }\n    else if(new_password_value.equals(\"\") &&\n        new_password_value.equals(\"\")){\n      display_toast(\"Your Passwords cannot be empty\");\n      return false;\n    }\n    else{\n      password_db.set_password(new_password_value);\n      display_toast(\"Your new password was saved!\");\n      return true;\n    }\n  }\n}\n```\nIf you pay enough attention to the newpassword xml and Java code behind you'll have no trouble at all with the resetpassword code as its very similar.\nWe'll begin with the layout for the resetpassword code, so create the file \"resetpassword.xml\" within the res/layout/ folder of your project.\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/resetpassword_relative_layout\" \nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\">\n\n<TextView \nandroid:id=\"@+id/resetpassword_old_password_text\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:text=\"@string/resetpassword_old_text\"/>\n\n<EditText \nandroid:id=\"@+id/resetpassword_old_password_edit\" \nandroid:hint=\"@string/resetpassword_old_hint\"\nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:layout_below=\"@id/resetpassword_old_password_text\"\nandroid:singleLine=\"true\"\nandroid:maxLength=\"10\"/>\n\n<TextView \nandroid:id=\"@+id/resetpassword_new_password_text\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:text=\"@string/resetpassword_new_text\"\nandroid:layout_below=\"@id/resetpassword_old_password_edit\"/>\n\n<EditText \nandroid:id=\"@+id/resetpassword_new_password_edit\" \nandroid:hint=\"@string/resetpassword_new_hint\"\nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:layout_below=\"@id/resetpassword_new_password_text\"\nandroid:singleLine=\"true\"\nandroid:maxLength=\"10\"/>\n\n<TextView \nandroid:id=\"@+id/resetpassword_confirm_password_text\" \nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:text=\"@string/resetpassword_confirm_text\"\nandroid:layout_below=\"@id/resetpassword_new_password_edit\"/>\n\n<EditText \nandroid:id=\"@+id/resetpassword_confirm_password_edit\" \nandroid:hint=\"@string/resetpassword_confirm_hint\"\nandroid:layout_width=\"fill_parent\" \nandroid:layout_height=\"wrap_content\" \nandroid:layout_below=\"@id/resetpassword_confirm_password_text\"\nandroid:singleLine=\"true\"\nandroid:maxLength=\"10\"/>\n\n<Button\nandroid:id=\"@+id/resetpassword_back_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/newpassword_back\"\nandroid:layout_below=\"@id/resetpassword_confirm_password_edit\"\nandroid:layout_alignLeft=\"@id/resetpassword_confirm_password_edit\"\nandroid:onClick=\"reset_button_click_handler\"/>\n\n<Button\nandroid:id=\"@+id/resetpassword_save_button\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_width=\"wrap_content\"\nandroid:text=\"@string/newpassword_save\"\nandroid:layout_below=\"@id/resetpassword_confirm_password_edit\"\nandroid:layout_alignRight=\"@id/resetpassword_confirm_password_edit\"\nandroid:onClick=\"reset_button_click_handler\"/>\n\n</RelativeLayout>\n```\nThe addition here for the reset password xml layout is the entry for the current or old password. We going to assert that the value entered there must be found within the database before we can create a new transaction to store the value of a new password. Now create the file within the src/ folder of your project called \"ResetPassword.java\". I was extra careful to write useful comments within this file so be sure to read them before moving on to the last part.\n```java\npackage com.example;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\n\n/**\n * Resets the applications' password used to escape from the dialer activity\n */\npublic class ResetPassword extends HomeScreen {\n\n  private String current_password = null;\n  private EditText new_password_field = null;\n  private EditText confirm_password_field = null;\n  private EditText old_password_field = null;\n\n  /*\n   * (non-Javadoc)\n   * @see android.app.Activity#onCreate(android.os.Bundle)\n   */\n  public void onCreate(Bundle saved_instance_state){\n    super.onCreate(saved_instance_state);\n    this.setContentView(R.layout.resetpassword);\n\n    current_password = password_db.get_password();\n    new_password_field = (EditText)findViewById(\n        R.id.resetpassword_new_password_edit);\n    confirm_password_field = (EditText)findViewById(\n        R.id.resetpassword_confirm_password_edit);\n    old_password_field = (EditText)findViewById(\n        R.id.resetpassword_old_password_edit);\n  }\n\n  /**\n   * Manages the button click events for the NewPassword Activity.<br />\n   * Clicking back returns to the HomeScreen.<br />\n   * Clicking save will save the password if it passes the validation\n   * check.\n   * @param button_clicked\n   */\n  public void reset_button_click_handler(View button_clicked){\n    Intent homescreen_intent = new Intent(this.getApplicationContext(),\n        HomeScreen.class);\n\n    switch(button_clicked.getId()){\n      case R.id.resetpassword_back_button:\n        this.startActivity(homescreen_intent);\n        ResetPassword.this.finish();\n        break;\n\n      case R.id.resetpassword_save_button:\n        if(validate_password(\n              old_password_field.getText().toString().trim(),\n              new_password_field.getText().toString().trim(),\n              confirm_password_field.getText().toString().trim()\n              )){\n          this.startActivity(homescreen_intent);\n          ResetPassword.this.finish();\n        }\n        break;\n    }\n  }\n\n  /**\n   * When the new password equals the confirmation password\n   * and the old password equals the current password \n   * then the new password is reset. Else when the passwords\n   * don't match or are empty or the old password doesn't match the\n   * current password then an error message is displayed.\n   * @return true if both password fields match else false\n   */\n  private Boolean validate_password(String old_password_value,\n      String new_password_value, String confirm_password_value){\n    if(!old_password_value.equals(current_password)){\n      display_toast(\"Your old password is incorrect\");\n      return false;\n    }\n    else if(!new_password_value.equals(confirm_password_value)){\n      display_toast(\"Your Passwords do not match\");\n      return false;\n    }\n    else if(new_password_value.equals(\"\") &&\n        confirm_password_value.equals(\"\")){\n      display_toast(\"Your Passwords cannot be empty\");\n      return false;\n    }\n    else{\n      password_db.reset_password(new_password_value);\n      display_toast(\"Your new password was saved!\");\n      return true;\n    }\n  }\n}\n```\nWe are now ready to explore the basics of the Android SQLite API.\nWithin the src folder of your project add the file \"PasswordDB.java\".\n```java\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\n/**\n * Represents the Password Database\n * @author Demetrious\n *\n */\npublic class PasswordDB extends SQLiteOpenHelper {\n\n  private static final String db_name = \"PasswordDB\";\n  private static final String password_table = \"Passwords\";\n  private static final String password_col_password_number = \"PassNo\";\n  private static final String password_col_password_value = \"PassVal\";\n```\nThe static strings we declared above represent the name of our database, table and two columns.\nThe password number or PassNo will be the primary key and the string value\nof the password(this is not a mission critical app so we're not going to encrpyt it) will be its stored value.\n\nNext we'll write the constructor for the database which will create the databasewith the name we gave it within the string db_name.\n```java\n    /**\n     * \n     * @param context\n     */\n    public PasswordDB(Context context) {\n      super(context, db_name, null, 1);\n    }\n```\nWith our database in place the next step is to create the Table.\nThe code below will accomplish just that, look at the JavaDoc I wrote to see the corresponding SQL.\n```java\n    /**\n     * Invokes the SQL statements below.\n     *  <p>\n     *belowCREATE TABLE IF NOT EXISTS Password( <br />\n     *brPassNoINTEGER PRIMARY KEY, <br />\n     *brPassValVARCHAR(10) NOT NULL <br />\n     *br);\n     * </p>\n     * (non-Javadoc)\n     * @see android.database.sqlite.SQLiteOpenHelper#onCreate(android.database.sqlite.SQLiteDatabase)\n     */\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n      db.execSQL(\"CREATE TABLE IF NOT EXISTS \" + password_table + \"(\" + \n          password_col_password_number + \" INTEGER PRIMARY KEY,\" +\n          password_col_password_value + \" VARCHAR(10) NOT NULL\" +\n          \");\");\n    }\n```\nThe next method onUpgrade() is a required function but we're not going to actually implement it since we don't need it for this example.\n```java\n    /**\n     * (non-Javadoc)\n     * @see android.database.sqlite.SQLiteOpenHelper#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)\n     */\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, \n        int newVersion) {\n    }\n```\nWe'll of course need a way to insert a new password into our database.\nThe method set_password does just that. All its doing is calling a basic SQL insert into query but using the Android API helper method insert();\n```java\n    /**\n     * Inserts a new password into the Password DB via the following SQL.\n     * <p>\n     * INSERT INTO Password (PassVal)<br />\n     * VALUES('new_password');\n     * </p>\n     * @param new_password\n     */\n    public void set_password(String new_password){\n      SQLiteDatabase db = this.getWritableDatabase();\n\n      ContentValues content_values = new ContentValues();\n\n      content_values.put(password_col_password_value, new_password);\n\n      db.insert(password_table, password_col_password_value, \n          content_values);\n      db.close();\n    }\n```\nMuch like a Java property we need a getter to accompany the setter.\nHowever here we'll first write a raw query which will place a cursor at the first result row that was found from our SELECT statement.\nDatabase cursors can be though of as table iterators.\nThe cursor will begin at the result table itself, you must first move it to the  result row to begin reading data.\nOnce at a result row you have to move the cursor column by column and read the rrow value from each.\nSince we are only going to be storing a single password the first row result will always contain the password we want to fetch. \n```java\n    /**\n     * Returns the existing password assuming that one exists via the \n     * following SQL.\n     * <p>\n     * SELECT * <br />\n     * FROM Passwords <br />\n     * WHERE PassNo='1';\n     * </p>\n     * @return A String with the current password\n     */\n    public String get_password(){\n      SQLiteDatabase db = this.getWritableDatabase();\n\n      Cursor cursor = db.rawQuery(\n          \"SELECT \" + password_col_password_value +\n          \" FROM \" + password_table +\n          \" WHERE \" + password_col_password_number + \"=\\'1\\';\", null);\n\n      cursor.moveToFirst();\n      Integer column_index = cursor.getColumnIndex(\n          password_col_password_value);\n      String string_value = cursor.getString(column_index);\n\n      cursor.close();\n      db.close();\n\n      return string_value;\n    }\n```\nNow the question becomes how do we update an existing password?\nTo do so we have to use the update() method which is another Android SQLite API wrapper around the traditional SQL UPDATE WHERE statement.\nLooking at the JavaDoc I wrote you can see how we would write this if it were a regular SQL statement.\n\nDespite the Android SQL API being a little verbose(this might change in the future) the parameterized input means that we would be safe from any type of injection attacks since we're not passing a rawQuery from the user input.\nIn short using the parameterized wrapper methods is more code but it saves you from the potential danger of calling rawQueries which substitute in user values.\n```java\n    /**\n     * Updates the existing password based on the following SQL.\n     * <p>\n     *  UPDATE Password <br />\n     *brSET PassVal='new_password' <br />\n     *brWHERE PassVal='old_password';\n     * </p>\n     * @param new_password\n     */\n    public void reset_password(String new_password){\n      String old_password = get_password();\n      SQLiteDatabase db = this.getWritableDatabase();\n      ContentValues content_values = new ContentValues();\n\n      content_values.put(password_col_password_value, new_password);\n\n      String where_clause = password_col_password_value + \"=?\";\n      String[] where_args = {old_password};\n      db.update(password_table, content_values, where_clause, \n          where_args);\n\n      db.close();\n    }\n```\nLastly we need a way to verify if a password has been set or not. \nThis will allow us to determine when we need to prompt the user for a reset.\nIts short and sweet, just run a select query and count the results.\n```java\n    /**\n     * Uses the following SQL.\n     * <p>\n     * SELECT * <br />\n     * FROM Passwords <br />\n     * WHERE PassNo='1';\n     * </p>\n     * @return true if a password exists else false\n     */\n    public Boolean is_password(){\n      SQLiteDatabase db = this.getWritableDatabase();\n\n      Cursor cursor = db.rawQuery(\n          \"SELECT \" + password_col_password_value +\n          \" FROM \" + password_table +\n          \" WHERE \" + password_col_password_number + \"=\\'1\\';\", null);\n\n      if(cursor != null && cursor.getCount() > 0 ){\n        db.close();\n        cursor.close();\n        return true;\n      }\n      else{\n        db.close();\n        cursor.close();\n        return false;\n      }\n    }\n}\n```\nPerhaps you got lost(its better if you followed along closely) but here is the PasswordDB class in full.\n```java\n//Add your package name here!\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\npublic class PasswordDB extends SQLiteOpenHelper {\n\n  private static final String db_name = \"PasswordDB\";\n  private static final String password_table = \"Passwords\";\n  private static final String password_col_password_number = \"PassNo\";\n  private static final String password_col_password_value = \"PassVal\";\n\n  /**\n   * \n   * @param context\n   */\n  public PasswordDB(Context context) {\n    super(context, db_name, null, 1);\n  }\n\n  /**\n   * Invokes the SQL statements below.\n   *  <p>\n   *belowCREATE TABLE IF NOT EXISTS Password( <br />\n   *brPassNoINTEGER PRIMARY KEY, <br />\n   *brPassValVARCHAR(10) NOT NULL <br />\n   *br);\n   * </p>\n   * (non-Javadoc)\n   * @see android.database.sqlite.SQLiteOpenHelper#onCreate(android.database.sqlite.SQLiteDatabase)\n   */\n  @Override\n    public void onCreate(SQLiteDatabase db) {\n      db.execSQL(\"CREATE TABLE IF NOT EXISTS \" + password_table + \"(\" + \n          password_col_password_number + \" INTEGER PRIMARY KEY,\" +\n          password_col_password_value + \" VARCHAR(10) NOT NULL\" +\n          \");\");\n    }\n\n  /**\n   * (non-Javadoc)\n   * @see android.database.sqlite.SQLiteOpenHelper#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)\n   */\n  @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, \n        int newVersion) {\n    }\n\n  /**\n   * Inserts a new password into the Password DB via the following SQL.\n   * <p>\n   * INSERT INTO Password (PassVal)<br />\n   * VALUES('new_password');\n   * </p>\n   * @param new_password\n   */\n  public void set_password(String new_password){\n    SQLiteDatabase db = this.getWritableDatabase();\n\n    ContentValues content_values = new ContentValues();\n\n    content_values.put(password_col_password_value, new_password);\n\n    db.insert(password_table, password_col_password_value, \n        content_values);\n    db.close();\n  }\n\n  /**\n   * Returns the existing password assuming that one exists via the \n   * following SQL.\n   * <p>\n   * SELECT * <br />\n   * FROM Passwords <br />\n   * WHERE PassNo='1';\n   * </p>\n   * @return A String with the current password\n   */\n  public String get_password(){\n    SQLiteDatabase db = this.getWritableDatabase();\n\n    Cursor cursor = db.rawQuery(\n        \"SELECT \" + password_col_password_value +\n        \" FROM \" + password_table +\n        \" WHERE \" + password_col_password_number + \"=\\'1\\';\", null);\n\n    cursor.moveToFirst();\n    Integer column_index = cursor.getColumnIndex(\n        password_col_password_value);\n    String string_value = cursor.getString(column_index);\n\n    cursor.close();\n    db.close();\n\n    return string_value;\n  }\n\n  /**\n   * Updates the existing password based on the following SQL.\n   * <p>\n   *  UPDATE Password <br />\n   *brSET PassVal='new_password' <br />\n   *brWHERE PassVal='old_password';\n   * </p>\n   * @param new_password\n   */\n  public void reset_password(String new_password){\n    String old_password = get_password();\n    SQLiteDatabase db = this.getWritableDatabase();\n    ContentValues content_values = new ContentValues();\n\n    content_values.put(password_col_password_value, new_password);\n\n    String where_clause = password_col_password_value + \"=?\";\n    String[] where_args = {old_password};\n    db.update(password_table, content_values, where_clause, \n        where_args);\n\n    db.close();\n  }\n\n  /**\n   * Uses the following SQL.\n   * <p>\n   * SELECT * <br />\n   * FROM Passwords <br />\n   * WHERE PassNo='1';\n   * </p>\n   * @return true if a password exists else false\n   */\n  public Boolean is_password(){\n    SQLiteDatabase db = this.getWritableDatabase();\n\n    Cursor cursor = db.rawQuery(\n        \"SELECT \" + password_col_password_value +\n        \" FROM \" + password_table +\n        \" WHERE \" + password_col_password_number + \"=\\'1\\';\", null);\n\n    if(cursor != null && cursor.getCount() > 0 ){\n      db.close();\n      cursor.close();\n      return true;\n    }\n    else{\n      db.close();\n      cursor.close();\n      return false;\n    }\n  }\n}\n```\nSo there you go, an Android application that makes use of the SQLite API. Perhaps you can extend this application or something.\n\nAnyways... enjoy your guestDialer app. \n","slug":"guestdialer","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3hh000myswveswmd96j","layout":"post","photos":[],"link":"","content":"<p>In this tutorial we’ll step through the process of using the Android’s builtin support for SqlLite to store a password and retrive it in a rather interesting attempt at creating a guest dialer application. When I first imagined a guest dialer I had in mind an application that would allow you to let someone use your phone without giving them total access to your incomming messages and other sensitive data. However, a lock-in application basically classifies as a malware when you think about it so whatever… at least I learned about the SqlLite API.</p>\n<a id=\"more\"></a>\n<p>Before begining this tutorial make sure you have the following… </p>\n<ul>\n<li>Java runtime and SDK installed</li>\n<li>Android SDK</li>\n<li>Some IDE which supports Android development such as Eclipse or IntelliJ IDEA(the free community edition can be used for Android Dev)</li>\n<li>Some familiarity at least(not much don’t worry) with Android Development</li>\n</ul>\n<p>Within your IDE of choice create a new Android project and call it Secure Dialer(actually you can name it whatever but I’ll just refer to it as Secure Dialer throughout this tutorial).</p>\n<p>Now locate the pre configured file called “AndroidManifest.xml”.<br>The AndroidManifest file is the standard configuration file for Android applications.<br>Its where you determine which permissions you demand from the phone OS as well as where you setup the various activity screens and many other things.<br>Just think of the AndroidManifest as the app’s system profile if that helps.<br>To start us off lets declare the permissions we need the end user to accept in order for our application to function correctly.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> </span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">package</span>=<span class=\"string\">\"org.secure.dialer\"</span></div><div class=\"line\"><span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\"><span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span> <span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"8\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> </span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CALL_PHONE\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">uses-permission</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> </span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_PHONE_STATE\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">uses-permission</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Next we’ll fill out the <application> element; this is the element where we can declare<br>the activities and setup any intent-filters which we might need as well.</application></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span> </span></div><div class=\"line\"><span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/icon\"</span> </div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> </div><div class=\"line\"><span class=\"attr\">android:debuggable</span>=<span class=\"string\">\"true\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\".HomeScreen\"</span></div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/homescreen_label\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\".Dialer\"</span></div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/dialer_label\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\".NewPassword\"</span></div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/newpassword_label\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\".ResetPassword\"</span></div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/resetpassword_label\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Now go ahead and save the new AndroidManifest.xml with our changes in place.<br>Next up is the resource file strings.xml.</p>\n<p>strings.xml if you need a refresher is a special resource file that is standard across Androidapps because its the file where you define all of the text strings which will appear throughout your app.</p>\n<p>Although is practical to define strings within the .java files its considered good Android development practice to keep as many of the applications strings within the strings.xml.</p>\n<p>You might think its crazy but for large applications it makes updating text notfications a piece of cake.<br>So navigate within your IDE to res/values/strings.xml or create the file if it doesn’t exist.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"app_name\"</span>&gt;</span>SecureDialer<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"homescreen_label\"</span>&gt;</span>Homescreen Activity<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"homescreen_dialer\"</span>&gt;</span>Dialer<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"homescreen_password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"homescreen_exit\"</span>&gt;</span>Exit<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_label\"</span>&gt;</span>Newpassword Activity<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_new_text\"</span>&gt;</span>Enter new password:<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_confirm_text\"</span>&gt;</span>Repeat the password:<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_new_hint\"</span>&gt;</span>Type new password here<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_confirm_hint\"</span>&gt;</span>Repeat password here<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_back\"</span>&gt;</span>Back<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_save\"</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_label\"</span>&gt;</span>Resetpassword Activity<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_old_text\"</span>&gt;</span>Enter old password:<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_old_hint\"</span>&gt;</span>Type old password here<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_new_text\"</span>&gt;</span>Enter new password:<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_new_hint\"</span>&gt;</span>Type new password here<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_confirm_text\"</span>&gt;</span>Confirm password:<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_confirm_hint\"</span>&gt;</span>Repeat password here<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialer_label\"</span>&gt;</span>Dialer Activity<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialer_dial\"</span>&gt;</span>Dial<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialer_clear\"</span>&gt;</span>Clear<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialer_done\"</span>&gt;</span>Done<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialerpassword_enter\"</span>&gt;</span>Enter<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialerpassword_nevermind\"</span>&gt;</span>Nevermind<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Remember all of those @string/some_name values within the AndroidManifest.xml?<br>Well that is how we reference the values stored within res/strings.xml.</p>\n<p>Moving along next create the Java class file HomeScreen within your applications src folder if you want to follow along with the code I have it under <div>src/org/secure/dialer/HomeScreen.java.</div><br>Don’t worry about all of those string values you just typed or pasted we’ll use them shortly as we introduce each activity screen.</p>\n<p>As is normal with Android development we will first create the visual layouts and then once all our buttons and views are setup we then add Java to support the various actions we want to allow our users to make.</p>\n<p>Be warned though that this style of visuals first and then application logic might sound strange if you’re comming from a web development MVC or MVVM background in which you first design your Models before hooking up controller logic before finnally designing a UI; but don’t let it get to you too much because you’ll see how its much easier for you to structure your Java code since you basically build application logic on top of objects created from your visual layout.</p>\n<p>But enough chit chat, create a new file “homescreen.xml” within <div>/res/layout/</div></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"comment\">&lt;!-- </span></div><div class=\"line\">A great tutorial on how to design button themes</div><div class=\"line\">http://blog.androgames.net/40/custom-button-style-and-theme/</div><div class=\"line\">--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> </span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homescreen_relative_layout\"</span></div><div class=\"line\"><span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homescreen_dialer_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/homescreen_dialer\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"homescreen_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homescreen_password_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/homescreen_dialer_button\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/homescreen_password\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"homescreen_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homescreen_exit_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/homescreen_password_button\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/homescreen_exit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"homescreen_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The homescreen is fairly basic it will just appear as three buttons vertically tiled.<br>When we get to the code for the homescreen you’ll see how easily you hookup code to support the android:onClick= tags from your xml file.</p>\n<p>Now create the Java class file “HomeScreen.java” within your project’s src/ folder.<br>Here you’ll also notice a class called “PasswordDB” created, that is the object representation of our SQLite database which is the focus of the article and we’ll cover it in depth later on.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">protected</span> PasswordDB password_db;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * <span class=\"doctag\">@see</span> android.app.Activity#onCreate(android.os.Bundle)</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle saved_instance_state)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(saved_instance_state);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setContentView(R.layout.homescreen);</div><div class=\"line\">    password_db = <span class=\"keyword\">new</span> PasswordDB(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Manages the button click events for the HomeScreen Activity.&lt;br /&gt;</div><div class=\"line\">   * Clicking exit terminates the app.&lt;br /&gt;</div><div class=\"line\">   * Clicking password launches either the newpassword or resetpassword</div><div class=\"line\">   * activity depending on whether a password is currently stored.&lt;br /&gt;</div><div class=\"line\">   * Clicking dialer launches the dialer activity.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> button_clicked</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">homescreen_button_click_handler</span><span class=\"params\">(View button_clicked)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(button_clicked.getId())&#123;</div><div class=\"line\">      Boolean password_found = password_db.is_password();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.homescreen_exit_button:</div><div class=\"line\">      HomeScreen.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.homescreen_password_button:</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>(!password_found)&#123;</div><div class=\"line\">        Intent new_password_intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>.getApplicationContext(), NewPassword.class);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(new_password_intent);</div><div class=\"line\">        HomeScreen.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        Intent reset_password_intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>.getApplicationContext(), ResetPassword.class);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(reset_password_intent);</div><div class=\"line\">        HomeScreen.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.homescreen_dialer_button:</div><div class=\"line\">      <span class=\"keyword\">if</span>(password_found) &#123;</div><div class=\"line\">        Intent dialer_intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>.getApplicationContext(), Dialer.class);</div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(dialer_intent);</div><div class=\"line\">        HomeScreen.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        display_toast(<span class=\"string\">\"No password has been set yet.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Displays the string passed as a new toast</div><div class=\"line\">   * <span class=\"doctag\">@param</span> message</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">display_toast</span><span class=\"params\">(String message)</span></span></div><div class=\"line\">  &#123;</div><div class=\"line\">    Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Pay attention to the homescreen_button_click_handler.<br>Remember inside our Homescreen.xml file where we defined the onClick attribute for each of the three buttons?<br>Now you see how easy it is within the Java code to look up the button’s unique id name and write handler code, it just becomes a switch case on the getId() method of the View which generated the click event.<br>To think if you tried it the other way around you would have foolishly built up three different button handler events where we have just a single button_handler for the entire Homescreen.</p>\n<p>This style of design also makes our code very modular; if you wanted to add another button its as easy as popping in another case statement.<br>Looking at the button_click_handler code when the user presses the homescreen_dialer_button we launch the Dialer activity screen… lets do that.<br></p><p></p>\n<p></p><p><br>As before we’ll create the dialer layout first, so create the file “dialer.xml” within the layout directory res/layout.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_relative_layout\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_number_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:focusable</span>=<span class=\"string\">\"false\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_one\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_number_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/dialer_number_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_two\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"2\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_number_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_one\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_three\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"3\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_number_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_two\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_four\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"4\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_one\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/dialer_one\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_five\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"5\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_two\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_four\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_six\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"6\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_three\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_five\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_seven\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"7\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_four\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/dialer_four\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_eight\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"8\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_five\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_seven\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_nine\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"9\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_six\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_eight\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_pound\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"#\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_seven\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/dialer_seven\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_zero\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_eight\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_pound\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_star\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"*\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_nine\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_zero\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_dial_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dialer_dial\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_pound\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignParentLeft</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_clear_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dialer_clear\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_star\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_done_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dialer_done\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_dial_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_centerHorizontal</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>As you can guess all of the numerical button are what you should expect from a phone dialer.<br>Of intrest is the non-focusable editbox where the phonenumber will be displayed as the user types and the three buttons near the bottom; dial, clear and done.<br>The layout as you can see is rather plain but the interesting bits will come next when we add the Java code.<br>However before that we need to creat the layout for the password prompt which will display once the guest has finished making a call and might potentially have the chance to muck around with your phone.</p>\n<p>Add the file “dialerpassword.xml” to the res/layout folder.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialerpassword_relative_layout\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialerpassword_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/newpassword_confirm_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialerpassword_enter_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dialerpassword_enter\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialerpassword_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/dialerpassword_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialerpassword_nevermind_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dialerpassword_nevermind\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialerpassword_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignRight</span>=<span class=\"string\">\"@id/dialerpassword_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Finally create the Java class file “Dialer.java” and place it within your src/ folder.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Dialog;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.Uri;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.telephony.TelephonyManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.KeyEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Window;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.WindowManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View.OnClickListener;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"><span class=\"keyword\">import</span> android.telephony.PhoneStateListener;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dialer</span> <span class=\"keyword\">extends</span> <span class=\"title\">HomeScreen</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> String current_password = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText dialer_phone_number_field = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> Dialog password_dialog = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText dialog_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> PhoneStateListener phone_state_listener = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> TelephonyManager telephony_manager = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * @see android.app.Activity#onCreate(android.os.Bundle)</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle saved_instance_state)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Hides both the title and status bar</span></div><div class=\"line\">    <span class=\"comment\">// Must be called calling super.onCreate()</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class=\"line\">    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,</div><div class=\"line\">        WindowManager.LayoutParams.FLAG_FULLSCREEN);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(saved_instance_state);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setContentView(R.layout.dialer);</div><div class=\"line\"></div><div class=\"line\">    current_password = password_db.get_password();</div><div class=\"line\">    dialer_phone_number_field = (EditText)findViewById(R.id.dialer_number_edit);</div><div class=\"line\">    phone_state_listener = <span class=\"keyword\">new</span> CallEndedListener();</div><div class=\"line\">    telephony_manager = (TelephonyManager) <span class=\"keyword\">this</span>.getSystemService(TELEPHONY_SERVICE);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Manages the button click events for the HomeScreen Activity.&lt;br /&gt;</div><div class=\"line\">   * Clicking the numpad adds the number to the dial box&lt;br /&gt;</div><div class=\"line\">   * Clicking dial calls the number within the dial box&lt;br /&gt;</div><div class=\"line\">   * Clicking clear erases the dial box&lt;br /&gt;</div><div class=\"line\">   * Clicking done prompts for the password&lt;br /&gt;</div><div class=\"line\">   * <span class=\"doctag\">@param</span> button_clicked</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dialer_button_click_handler</span><span class=\"params\">(View button_clicked)</span></span>&#123;</div><div class=\"line\">    StringBuilder phone_number = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span>(button_clicked.getId())&#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_one:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'1'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_two:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'2'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_three:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'3'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_four:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'4'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_five:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'5'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_six:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'6'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_seven:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'7'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_eight:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'8'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_nine:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'9'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_zero:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'0'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_star:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'*'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_pound:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'#'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Copies the phone_number_field to a StringBuilder,</span></div><div class=\"line\">        <span class=\"comment\">// deletes the last digit and dumps the StringBuilder</span></div><div class=\"line\">        <span class=\"comment\">// back to the phone_number_field</span></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_clear_button:</div><div class=\"line\">        <span class=\"keyword\">if</span>(!dialer_phone_number_field.getText().toString().equals(<span class=\"string\">\"\"</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dialer_phone_number_field.getText().toString().length(); ++i)&#123;</div><div class=\"line\">            phone_number.append(dialer_phone_number_field.getText().toString().charAt(i));</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          phone_number.deleteCharAt(phone_number.length() - <span class=\"number\">1</span>);</div><div class=\"line\">          dialer_phone_number_field.setText(phone_number.toString());</div><div class=\"line\">          phone_number.setLength(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Launches the dialog box prompting for the new password</span></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_done_button:</div><div class=\"line\">        password_dialog = make_password_dialog(<span class=\"keyword\">this</span>);</div><div class=\"line\">        password_dialog.show();</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_dial_button:</div><div class=\"line\">        <span class=\"keyword\">if</span>(dialer_phone_number_field.getText().toString().equals(<span class=\"string\">\"\"</span>))&#123;</div><div class=\"line\">          display_toast(<span class=\"string\">\"Enter a phone number to dial\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          perform_dial();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Creates a dialog for the password confirmation</div><div class=\"line\">   * <span class=\"doctag\">@param</span> context</div><div class=\"line\">   * <span class=\"doctag\">@return</span></div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Dialog <span class=\"title\">make_password_dialog</span><span class=\"params\">(Context context)</span></span>&#123;</div><div class=\"line\">    Dialog dialog = <span class=\"keyword\">new</span> Dialog(context);</div><div class=\"line\"></div><div class=\"line\">    dialog.setContentView(R.layout.dialerpassword);</div><div class=\"line\">    dialog.setTitle(<span class=\"string\">\"Password?\"</span>);</div><div class=\"line\">    dialog.setCancelable(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    dialog_password_field = (EditText)dialog.findViewById(R.id.dialerpassword_password_edit);</div><div class=\"line\">    Button dialog_enter = (Button)dialog.findViewById(R.id.dialerpassword_enter_button);</div><div class=\"line\">    dialog_enter.setOnClickListener(dialog_click_listener);</div><div class=\"line\">    Button dialog_nevermind = (Button)dialog.findViewById(R.id.dialerpassword_nevermind_button);</div><div class=\"line\">    dialog_nevermind.setOnClickListener(dialog_click_listener);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> dialog;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Custom View.OnClickListener interface for the password</div><div class=\"line\">   * dialog buttons.</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">public</span> OnClickListener dialog_click_listener = <span class=\"keyword\">new</span> View.OnClickListener()&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Clicking nevermind closes the dialog menu&lt;br /&gt;</div><div class=\"line\">     * Clicking done validates the password entered.</div><div class=\"line\">     * (non-Javadoc)</div><div class=\"line\">     * <span class=\"doctag\">@see</span> android.view.View.OnClickListener#onClick(android.view.View)</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View button_clicked)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span>(button_clicked.getId())&#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> R.id.dialerpassword_nevermind_button:</div><div class=\"line\">            password_dialog.dismiss();</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">case</span> R.id.dialerpassword_enter_button:</div><div class=\"line\">            <span class=\"keyword\">if</span>(validate_password(dialog_password_field.getText().toString().trim()))&#123;</div><div class=\"line\">              password_dialog.dismiss();</div><div class=\"line\">              Intent homescreen_intent = <span class=\"keyword\">new</span> Intent(getApplicationContext(), HomeScreen.class);</div><div class=\"line\">              startActivity(homescreen_intent);</div><div class=\"line\">              Dialer.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Validates the password typed by the user to check if it</div><div class=\"line\">   * matches the current password stored in the database.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> password_value</div><div class=\"line\">   * <span class=\"doctag\">@return</span> true if the password was valid</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Boolean <span class=\"title\">validate_password</span><span class=\"params\">(String password_value)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!password_value.equals(current_password))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Incorrect password!\"</span>);</div><div class=\"line\">      <span class=\"keyword\">this</span>.dialog_password_field.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * A small hack to disable the back button</div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * <span class=\"doctag\">@see</span> android.app.Activity#onBackPressed()</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"The back button is disabled\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Lets the user call using the dial button</div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * <span class=\"doctag\">@see</span> android.app.Activity#onKeyDown(int, android.view.KeyEvent)</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(keyCode == KeyEvent.KEYCODE_CALL)&#123;</div><div class=\"line\">      perform_dial();</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Dials the desired phone number and creates a listener to</div><div class=\"line\">   * to capture the state when the phone call has ended.</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">perform_dial</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(dialer_phone_number_field != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        telephony_manager.listen(phone_state_listener, PhoneStateListener.LISTEN_CALL_STATE);</div><div class=\"line\">        Intent phone_call = <span class=\"keyword\">new</span> Intent(Intent.ACTION_CALL,</div><div class=\"line\">            Uri.parse(<span class=\"string\">\"tel:\"</span> + dialer_phone_number_field.getText()));</div><div class=\"line\">        startActivity(phone_call);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">catch</span>(Exception error)&#123;</div><div class=\"line\">        error.printStackTrace();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@author</span> Alex Bredariol Grilo</div><div class=\"line\">   * &#123;<span class=\"doctag\">@link</span> www.umamao.com&#125;</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallEndedListener</span> <span class=\"keyword\">extends</span> <span class=\"title\">PhoneStateListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> called = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* Waits until the phone call is done and restarts the activity.</span></div><div class=\"line\">     *</div><div class=\"line\">     * (non-Javadoc)</div><div class=\"line\">     * @see android.telephony.PhoneStateListener#onCallStateChanged(int, java.lang.String)</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCallStateChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> state, String incoming_number)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(called &amp;&amp; state == TelephonyManager.CALL_STATE_IDLE)&#123;</div><div class=\"line\">          called = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">          telephony_manager.listen(<span class=\"keyword\">this</span>,</div><div class=\"line\">              PhoneStateListener.LISTEN_NONE);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">            Dialer.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">            Intent dialer_restart = <span class=\"keyword\">new</span> Intent(Dialer.<span class=\"keyword\">this</span>, Dialer.class);</div><div class=\"line\">            dialer_restart.setAction(Intent.ACTION_MAIN);</div><div class=\"line\">            startActivity(dialer_restart);</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          <span class=\"comment\">// When the phone is not in idle mode it is currently</span></div><div class=\"line\">          <span class=\"comment\">// in use</span></div><div class=\"line\">          <span class=\"keyword\">if</span>(state == TelephonyManager.CALL_STATE_OFFHOOK)&#123;</div><div class=\"line\">            called = <span class=\"keyword\">true</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Stepping through the code for the Dialer class you’ll notice that its relatively simple.<br>Since the activity is once again button based the meat of the code involves deciding what we should do once each button handler event is triggered.</p>\n<p>A quick thing to notice is that the Dialer class we defined extends the HomeScreen where we intialized the password database object; so all of the password interaction is due to our great use of inheritance.</p>\n<p>Anyhow the basic idea for the Dialer activity is the following…</p>\n<ol>\n<li>Pressing the numeric keys lets the user enter a phonenumber</li>\n<li>The clear button should delete a numeric character one at a time</li>\n<li>Dial… makes a phonecall</li>\n<li>Done should prompt the user for a password, if correct unlocks the app</li>\n</ol>\n<p>What you’ll notice here is that the prompting for a password is how we make the dialer somewhat secure. If the wrong one is entered the user should theorectically have no other access to your phone meaning they can’t touch your apps, peek at your emails or do anything else.<br>Looking at the code you’ll see the function make_password_dialog() which creates the kinda mini embedded activity when the user triggers the dialer_done_button click event.</p>\n<p>The remaining code within the Dialer class involves the TelephonyManager which is the Android API’s way of letting developers controller the actions of the phone listener and receiver.<br>Its rather easy to understand after you force yourself to think of the Phone as advancing across as series of states such as IDLE, OFFHOOK, LISTEN_CALL and create a mental map of those states as you normally talk on the phone. Now we’ll return back to the Homescreen and add in the code to support the new and reset password buttons. </p>\n<p>Each of the buttons will have a layout and Java class file associated. Lets begin with the NewPassword class, create the file “newpassword.xml” within the res/layout folder of your Android project. The xml rather easy to understand as its just a regular enter password and repeat it once type of layout you’ve seen all over the place.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_relative_layout\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> </span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_new_password_text\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_new_text\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span> </span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_new_password_edit\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/newpassword_new_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/newpassword_new_password_text\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> </span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_confirm_password_text\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_confirm_text\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/newpassword_new_password_edit\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span> </span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_confirm_password_edit\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/newpassword_confirm_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/newpassword_confirm_password_text\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_back_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_back\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/newpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/newpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"newpassword_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_save_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_save\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/newpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignRight</span>=<span class=\"string\">\"@id/newpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"newpassword_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The Java code should be titled “NewPassword.java” and stored within the src/ folder of your project.<br>The code consist of letting the user enter a password into the editText box, and validate that the repeated value matches the original.<br>Once the validation has been accepted we make a DB transaction and store the password.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewPassword</span> <span class=\"keyword\">extends</span> <span class=\"title\">HomeScreen</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> EditText new_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText confirm_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * @see android.app.Activity#onCreate(android.os.Bundle)</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle saved_instance_state)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(saved_instance_state);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setContentView(R.layout.newpassword);</div><div class=\"line\"></div><div class=\"line\">    new_password_field = (EditText)findViewById(</div><div class=\"line\">        R.id.newpassword_new_password_edit);</div><div class=\"line\">    confirm_password_field = (EditText)findViewById(</div><div class=\"line\">        R.id.newpassword_confirm_password_edit);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Manages the button click events for the NewPassword Activity.&lt;br /&gt;</div><div class=\"line\">   * Clicking back returns to the HomeScreen.&lt;br /&gt;</div><div class=\"line\">   * Clicking save will save the password if it passes the validation</div><div class=\"line\">   * check.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> button_clicked</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newpassword_button_click_handler</span><span class=\"params\">(View button_clicked)</span></span>&#123;</div><div class=\"line\">    Intent homescreen_intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>.getApplicationContext(),</div><div class=\"line\">        HomeScreen.class);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span>(button_clicked.getId())&#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.newpassword_back_button:</div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(homescreen_intent);</div><div class=\"line\">        NewPassword.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.newpassword_save_button:</div><div class=\"line\">        <span class=\"keyword\">if</span>(validate_password(</div><div class=\"line\">              new_password_field.getText().toString().trim(),</div><div class=\"line\">              confirm_password_field.getText().toString().trim()</div><div class=\"line\">              ))&#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.startActivity(homescreen_intent);</div><div class=\"line\">          NewPassword.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * When both the new password and the confirmation password</div><div class=\"line\">   * match the new password is saved. Else when the passwords</div><div class=\"line\">   * don't match or are empty an error message is displayed.</div><div class=\"line\">   * <span class=\"doctag\">@return</span> true if both password fields match else false</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Boolean <span class=\"title\">validate_password</span><span class=\"params\">(String new_password_value,</span></span></div><div class=\"line\">      String confirm_password_value)&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!new_password_value.equals(confirm_password_value))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your Passwords do not match\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(new_password_value.equals(<span class=\"string\">\"\"</span>) &amp;&amp;</div><div class=\"line\">        new_password_value.equals(<span class=\"string\">\"\"</span>))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your Passwords cannot be empty\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      password_db.set_password(new_password_value);</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your new password was saved!\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>If you pay enough attention to the newpassword xml and Java code behind you’ll have no trouble at all with the resetpassword code as its very similar.<br>We’ll begin with the layout for the resetpassword code, so create the file “resetpassword.xml” within the res/layout/ folder of your project.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_relative_layout\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> </span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_old_password_text\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/resetpassword_old_text\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span> </span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_old_password_edit\"</span> </div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/resetpassword_old_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_old_password_text\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:maxLength</span>=<span class=\"string\">\"10\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> </span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_new_password_text\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/resetpassword_new_text\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_old_password_edit\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span> </span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_new_password_edit\"</span> </div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/resetpassword_new_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_new_password_text\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:maxLength</span>=<span class=\"string\">\"10\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> </span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_confirm_password_text\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/resetpassword_confirm_text\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_new_password_edit\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span> </span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_confirm_password_edit\"</span> </div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/resetpassword_confirm_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_confirm_password_text\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:maxLength</span>=<span class=\"string\">\"10\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_back_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_back\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/resetpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"reset_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_save_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_save\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignRight</span>=<span class=\"string\">\"@id/resetpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"reset_button_click_handler\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>The addition here for the reset password xml layout is the entry for the current or old password. We going to assert that the value entered there must be found within the database before we can create a new transaction to store the value of a new password. Now create the file within the src/ folder of your project called “ResetPassword.java”. I was extra careful to write useful comments within this file so be sure to read them before moving on to the last part.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Resets the applications' password used to escape from the dialer activity</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResetPassword</span> <span class=\"keyword\">extends</span> <span class=\"title\">HomeScreen</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> String current_password = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText new_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText confirm_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText old_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * @see android.app.Activity#onCreate(android.os.Bundle)</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle saved_instance_state)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(saved_instance_state);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setContentView(R.layout.resetpassword);</div><div class=\"line\"></div><div class=\"line\">    current_password = password_db.get_password();</div><div class=\"line\">    new_password_field = (EditText)findViewById(</div><div class=\"line\">        R.id.resetpassword_new_password_edit);</div><div class=\"line\">    confirm_password_field = (EditText)findViewById(</div><div class=\"line\">        R.id.resetpassword_confirm_password_edit);</div><div class=\"line\">    old_password_field = (EditText)findViewById(</div><div class=\"line\">        R.id.resetpassword_old_password_edit);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Manages the button click events for the NewPassword Activity.&lt;br /&gt;</div><div class=\"line\">   * Clicking back returns to the HomeScreen.&lt;br /&gt;</div><div class=\"line\">   * Clicking save will save the password if it passes the validation</div><div class=\"line\">   * check.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> button_clicked</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reset_button_click_handler</span><span class=\"params\">(View button_clicked)</span></span>&#123;</div><div class=\"line\">    Intent homescreen_intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>.getApplicationContext(),</div><div class=\"line\">        HomeScreen.class);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span>(button_clicked.getId())&#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.resetpassword_back_button:</div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(homescreen_intent);</div><div class=\"line\">        ResetPassword.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.resetpassword_save_button:</div><div class=\"line\">        <span class=\"keyword\">if</span>(validate_password(</div><div class=\"line\">              old_password_field.getText().toString().trim(),</div><div class=\"line\">              new_password_field.getText().toString().trim(),</div><div class=\"line\">              confirm_password_field.getText().toString().trim()</div><div class=\"line\">              ))&#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.startActivity(homescreen_intent);</div><div class=\"line\">          ResetPassword.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * When the new password equals the confirmation password</div><div class=\"line\">   * and the old password equals the current password </div><div class=\"line\">   * then the new password is reset. Else when the passwords</div><div class=\"line\">   * don't match or are empty or the old password doesn't match the</div><div class=\"line\">   * current password then an error message is displayed.</div><div class=\"line\">   * <span class=\"doctag\">@return</span> true if both password fields match else false</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Boolean <span class=\"title\">validate_password</span><span class=\"params\">(String old_password_value,</span></span></div><div class=\"line\">      String new_password_value, String confirm_password_value)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!old_password_value.equals(current_password))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your old password is incorrect\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!new_password_value.equals(confirm_password_value))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your Passwords do not match\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(new_password_value.equals(<span class=\"string\">\"\"</span>) &amp;&amp;</div><div class=\"line\">        confirm_password_value.equals(<span class=\"string\">\"\"</span>))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your Passwords cannot be empty\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      password_db.reset_password(new_password_value);</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your new password was saved!\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We are now ready to explore the basics of the Android SQLite API.<br>Within the src folder of your project add the file “PasswordDB.java”.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.content.ContentValues;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.Cursor;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.sqlite.SQLiteDatabase;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.sqlite.SQLiteOpenHelper;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Represents the Password Database</div><div class=\"line\"> * <span class=\"doctag\">@author</span> Demetrious</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PasswordDB</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String db_name = <span class=\"string\">\"PasswordDB\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_table = <span class=\"string\">\"Passwords\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_col_password_number = <span class=\"string\">\"PassNo\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_col_password_value = <span class=\"string\">\"PassVal\"</span>;</div></pre></td></tr></table></figure></p>\n<p>The static strings we declared above represent the name of our database, table and two columns.<br>The password number or PassNo will be the primary key and the string value<br>of the password(this is not a mission critical app so we’re not going to encrpyt it) will be its stored value.</p>\n<p>Next we’ll write the constructor for the database which will create the databasewith the name we gave it within the string db_name.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * </div><div class=\"line\"> * <span class=\"doctag\">@param</span> context</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PasswordDB</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>(context, db_name, <span class=\"keyword\">null</span>, <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>With our database in place the next step is to create the Table.<br>The code below will accomplish just that, look at the JavaDoc I wrote to see the corresponding SQL.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Invokes the SQL statements below.</div><div class=\"line\"> *  &lt;p&gt;</div><div class=\"line\"> *belowCREATE TABLE IF NOT EXISTS Password( &lt;br /&gt;</div><div class=\"line\"> *brPassNoINTEGER PRIMARY KEY, &lt;br /&gt;</div><div class=\"line\"> *brPassValVARCHAR(10) NOT NULL &lt;br /&gt;</div><div class=\"line\"> *br);</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> * (non-Javadoc)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.database.sqlite.SQLiteOpenHelper#onCreate(android.database.sqlite.SQLiteDatabase)</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">  db.execSQL(<span class=\"string\">\"CREATE TABLE IF NOT EXISTS \"</span> + password_table + <span class=\"string\">\"(\"</span> + </div><div class=\"line\">      password_col_password_number + <span class=\"string\">\" INTEGER PRIMARY KEY,\"</span> +</div><div class=\"line\">      password_col_password_value + <span class=\"string\">\" VARCHAR(10) NOT NULL\"</span> +</div><div class=\"line\">      <span class=\"string\">\");\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The next method onUpgrade() is a required function but we’re not going to actually implement it since we don’t need it for this example.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * (non-Javadoc)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.database.sqlite.SQLiteOpenHelper#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, </span></span></div><div class=\"line\">    <span class=\"keyword\">int</span> newVersion) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We’ll of course need a way to insert a new password into our database.<br>The method set_password does just that. All its doing is calling a basic SQL insert into query but using the Android API helper method insert();<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Inserts a new password into the Password DB via the following SQL.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * INSERT INTO Password (PassVal)&lt;br /&gt;</div><div class=\"line\"> * VALUES('new_password');</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> * <span class=\"doctag\">@param</span> new_password</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set_password</span><span class=\"params\">(String new_password)</span></span>&#123;</div><div class=\"line\">  SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">  ContentValues content_values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\"></div><div class=\"line\">  content_values.put(password_col_password_value, new_password);</div><div class=\"line\"></div><div class=\"line\">  db.insert(password_table, password_col_password_value, </div><div class=\"line\">      content_values);</div><div class=\"line\">  db.close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Much like a Java property we need a getter to accompany the setter.<br>However here we’ll first write a raw query which will place a cursor at the first result row that was found from our SELECT statement.<br>Database cursors can be though of as table iterators.<br>The cursor will begin at the result table itself, you must first move it to the  result row to begin reading data.<br>Once at a result row you have to move the cursor column by column and read the rrow value from each.<br>Since we are only going to be storing a single password the first row result will always contain the password we want to fetch.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Returns the existing password assuming that one exists via the </div><div class=\"line\"> * following SQL.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * SELECT * &lt;br /&gt;</div><div class=\"line\"> * FROM Passwords &lt;br /&gt;</div><div class=\"line\"> * WHERE PassNo='1';</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> * <span class=\"doctag\">@return</span> A String with the current password</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get_password</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">  Cursor cursor = db.rawQuery(</div><div class=\"line\">      <span class=\"string\">\"SELECT \"</span> + password_col_password_value +</div><div class=\"line\">      <span class=\"string\">\" FROM \"</span> + password_table +</div><div class=\"line\">      <span class=\"string\">\" WHERE \"</span> + password_col_password_number + <span class=\"string\">\"=\\'1\\';\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">  cursor.moveToFirst();</div><div class=\"line\">  Integer column_index = cursor.getColumnIndex(</div><div class=\"line\">      password_col_password_value);</div><div class=\"line\">  String string_value = cursor.getString(column_index);</div><div class=\"line\"></div><div class=\"line\">  cursor.close();</div><div class=\"line\">  db.close();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> string_value;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now the question becomes how do we update an existing password?<br>To do so we have to use the update() method which is another Android SQLite API wrapper around the traditional SQL UPDATE WHERE statement.<br>Looking at the JavaDoc I wrote you can see how we would write this if it were a regular SQL statement.</p>\n<p>Despite the Android SQL API being a little verbose(this might change in the future) the parameterized input means that we would be safe from any type of injection attacks since we’re not passing a rawQuery from the user input.<br>In short using the parameterized wrapper methods is more code but it saves you from the potential danger of calling rawQueries which substitute in user values.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Updates the existing password based on the following SQL.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> *  UPDATE Password &lt;br /&gt;</div><div class=\"line\"> *brSET PassVal='new_password' &lt;br /&gt;</div><div class=\"line\"> *brWHERE PassVal='old_password';</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> * <span class=\"doctag\">@param</span> new_password</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reset_password</span><span class=\"params\">(String new_password)</span></span>&#123;</div><div class=\"line\">  String old_password = get_password();</div><div class=\"line\">  SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\">  ContentValues content_values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\"></div><div class=\"line\">  content_values.put(password_col_password_value, new_password);</div><div class=\"line\"></div><div class=\"line\">  String where_clause = password_col_password_value + <span class=\"string\">\"=?\"</span>;</div><div class=\"line\">  String[] where_args = &#123;old_password&#125;;</div><div class=\"line\">  db.update(password_table, content_values, where_clause, </div><div class=\"line\">      where_args);</div><div class=\"line\"></div><div class=\"line\">  db.close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Lastly we need a way to verify if a password has been set or not.<br>This will allow us to determine when we need to prompt the user for a reset.<br>Its short and sweet, just run a select query and count the results.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Uses the following SQL.</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * SELECT * &lt;br /&gt;</div><div class=\"line\">     * FROM Passwords &lt;br /&gt;</div><div class=\"line\">     * WHERE PassNo='1';</div><div class=\"line\">     * &lt;/p&gt;</div><div class=\"line\">     * <span class=\"doctag\">@return</span> true if a password exists else false</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">is_password</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">      Cursor cursor = db.rawQuery(</div><div class=\"line\">          <span class=\"string\">\"SELECT \"</span> + password_col_password_value +</div><div class=\"line\">          <span class=\"string\">\" FROM \"</span> + password_table +</div><div class=\"line\">          <span class=\"string\">\" WHERE \"</span> + password_col_password_number + <span class=\"string\">\"=\\'1\\';\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>(cursor != <span class=\"keyword\">null</span> &amp;&amp; cursor.getCount() &gt; <span class=\"number\">0</span> )&#123;</div><div class=\"line\">        db.close();</div><div class=\"line\">        cursor.close();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        db.close();</div><div class=\"line\">        cursor.close();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Perhaps you got lost(its better if you followed along closely) but here is the PasswordDB class in full.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Add your package name here!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.ContentValues;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.Cursor;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.sqlite.SQLiteDatabase;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.sqlite.SQLiteOpenHelper;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PasswordDB</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String db_name = <span class=\"string\">\"PasswordDB\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_table = <span class=\"string\">\"Passwords\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_col_password_number = <span class=\"string\">\"PassNo\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_col_password_value = <span class=\"string\">\"PassVal\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * </div><div class=\"line\">   * <span class=\"doctag\">@param</span> context</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PasswordDB</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, db_name, <span class=\"keyword\">null</span>, <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Invokes the SQL statements below.</div><div class=\"line\">   *  &lt;p&gt;</div><div class=\"line\">   *belowCREATE TABLE IF NOT EXISTS Password( &lt;br /&gt;</div><div class=\"line\">   *brPassNoINTEGER PRIMARY KEY, &lt;br /&gt;</div><div class=\"line\">   *brPassValVARCHAR(10) NOT NULL &lt;br /&gt;</div><div class=\"line\">   *br);</div><div class=\"line\">   * &lt;/p&gt;</div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * <span class=\"doctag\">@see</span> android.database.sqlite.SQLiteOpenHelper#onCreate(android.database.sqlite.SQLiteDatabase)</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">      db.execSQL(<span class=\"string\">\"CREATE TABLE IF NOT EXISTS \"</span> + password_table + <span class=\"string\">\"(\"</span> + </div><div class=\"line\">          password_col_password_number + <span class=\"string\">\" INTEGER PRIMARY KEY,\"</span> +</div><div class=\"line\">          password_col_password_value + <span class=\"string\">\" VARCHAR(10) NOT NULL\"</span> +</div><div class=\"line\">          <span class=\"string\">\");\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * <span class=\"doctag\">@see</span> android.database.sqlite.SQLiteOpenHelper#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, </span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> newVersion) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Inserts a new password into the Password DB via the following SQL.</div><div class=\"line\">   * &lt;p&gt;</div><div class=\"line\">   * INSERT INTO Password (PassVal)&lt;br /&gt;</div><div class=\"line\">   * VALUES('new_password');</div><div class=\"line\">   * &lt;/p&gt;</div><div class=\"line\">   * <span class=\"doctag\">@param</span> new_password</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set_password</span><span class=\"params\">(String new_password)</span></span>&#123;</div><div class=\"line\">    SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">    ContentValues content_values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\"></div><div class=\"line\">    content_values.put(password_col_password_value, new_password);</div><div class=\"line\"></div><div class=\"line\">    db.insert(password_table, password_col_password_value, </div><div class=\"line\">        content_values);</div><div class=\"line\">    db.close();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Returns the existing password assuming that one exists via the </div><div class=\"line\">   * following SQL.</div><div class=\"line\">   * &lt;p&gt;</div><div class=\"line\">   * SELECT * &lt;br /&gt;</div><div class=\"line\">   * FROM Passwords &lt;br /&gt;</div><div class=\"line\">   * WHERE PassNo='1';</div><div class=\"line\">   * &lt;/p&gt;</div><div class=\"line\">   * <span class=\"doctag\">@return</span> A String with the current password</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get_password</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">    Cursor cursor = db.rawQuery(</div><div class=\"line\">        <span class=\"string\">\"SELECT \"</span> + password_col_password_value +</div><div class=\"line\">        <span class=\"string\">\" FROM \"</span> + password_table +</div><div class=\"line\">        <span class=\"string\">\" WHERE \"</span> + password_col_password_number + <span class=\"string\">\"=\\'1\\';\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    cursor.moveToFirst();</div><div class=\"line\">    Integer column_index = cursor.getColumnIndex(</div><div class=\"line\">        password_col_password_value);</div><div class=\"line\">    String string_value = cursor.getString(column_index);</div><div class=\"line\"></div><div class=\"line\">    cursor.close();</div><div class=\"line\">    db.close();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> string_value;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Updates the existing password based on the following SQL.</div><div class=\"line\">   * &lt;p&gt;</div><div class=\"line\">   *  UPDATE Password &lt;br /&gt;</div><div class=\"line\">   *brSET PassVal='new_password' &lt;br /&gt;</div><div class=\"line\">   *brWHERE PassVal='old_password';</div><div class=\"line\">   * &lt;/p&gt;</div><div class=\"line\">   * <span class=\"doctag\">@param</span> new_password</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reset_password</span><span class=\"params\">(String new_password)</span></span>&#123;</div><div class=\"line\">    String old_password = get_password();</div><div class=\"line\">    SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\">    ContentValues content_values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\"></div><div class=\"line\">    content_values.put(password_col_password_value, new_password);</div><div class=\"line\"></div><div class=\"line\">    String where_clause = password_col_password_value + <span class=\"string\">\"=?\"</span>;</div><div class=\"line\">    String[] where_args = &#123;old_password&#125;;</div><div class=\"line\">    db.update(password_table, content_values, where_clause, </div><div class=\"line\">        where_args);</div><div class=\"line\"></div><div class=\"line\">    db.close();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Uses the following SQL.</div><div class=\"line\">   * &lt;p&gt;</div><div class=\"line\">   * SELECT * &lt;br /&gt;</div><div class=\"line\">   * FROM Passwords &lt;br /&gt;</div><div class=\"line\">   * WHERE PassNo='1';</div><div class=\"line\">   * &lt;/p&gt;</div><div class=\"line\">   * <span class=\"doctag\">@return</span> true if a password exists else false</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">is_password</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">    Cursor cursor = db.rawQuery(</div><div class=\"line\">        <span class=\"string\">\"SELECT \"</span> + password_col_password_value +</div><div class=\"line\">        <span class=\"string\">\" FROM \"</span> + password_table +</div><div class=\"line\">        <span class=\"string\">\" WHERE \"</span> + password_col_password_number + <span class=\"string\">\"=\\'1\\';\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(cursor != <span class=\"keyword\">null</span> &amp;&amp; cursor.getCount() &gt; <span class=\"number\">0</span> )&#123;</div><div class=\"line\">      db.close();</div><div class=\"line\">      cursor.close();</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      db.close();</div><div class=\"line\">      cursor.close();</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>So there you go, an Android application that makes use of the SQLite API. Perhaps you can extend this application or something.</p>\n<p>Anyways… enjoy your guestDialer app. </p>\n","site":{"data":{}},"excerpt":"<p>In this tutorial we’ll step through the process of using the Android’s builtin support for SqlLite to store a password and retrive it in a rather interesting attempt at creating a guest dialer application. When I first imagined a guest dialer I had in mind an application that would allow you to let someone use your phone without giving them total access to your incomming messages and other sensitive data. However, a lock-in application basically classifies as a malware when you think about it so whatever… at least I learned about the SqlLite API.</p>","more":"<p>Before begining this tutorial make sure you have the following… </p>\n<ul>\n<li>Java runtime and SDK installed</li>\n<li>Android SDK</li>\n<li>Some IDE which supports Android development such as Eclipse or IntelliJ IDEA(the free community edition can be used for Android Dev)</li>\n<li>Some familiarity at least(not much don’t worry) with Android Development</li>\n</ul>\n<p>Within your IDE of choice create a new Android project and call it Secure Dialer(actually you can name it whatever but I’ll just refer to it as Secure Dialer throughout this tutorial).</p>\n<p>Now locate the pre configured file called “AndroidManifest.xml”.<br>The AndroidManifest file is the standard configuration file for Android applications.<br>Its where you determine which permissions you demand from the phone OS as well as where you setup the various activity screens and many other things.<br>Just think of the AndroidManifest as the app’s system profile if that helps.<br>To start us off lets declare the permissions we need the end user to accept in order for our application to function correctly.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> </div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">package</span>=<span class=\"string\">\"org.secure.dialer\"</span></div><div class=\"line\"><span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\"><span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span> <span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"8\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> </div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CALL_PHONE\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">uses-permission</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> </div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_PHONE_STATE\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">uses-permission</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Next we’ll fill out the <application> element; this is the element where we can declare<br>the activities and setup any intent-filters which we might need as well.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span> </div><div class=\"line\"><span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/icon\"</span> </div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> </div><div class=\"line\"><span class=\"attr\">android:debuggable</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\".HomeScreen\"</span></div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/homescreen_label\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\".Dialer\"</span></div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/dialer_label\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\".NewPassword\"</span></div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/newpassword_label\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\".ResetPassword\"</span></div><div class=\"line\"><span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/resetpassword_label\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Now go ahead and save the new AndroidManifest.xml with our changes in place.<br>Next up is the resource file strings.xml.</p>\n<p>strings.xml if you need a refresher is a special resource file that is standard across Androidapps because its the file where you define all of the text strings which will appear throughout your app.</p>\n<p>Although is practical to define strings within the .java files its considered good Android development practice to keep as many of the applications strings within the strings.xml.</p>\n<p>You might think its crazy but for large applications it makes updating text notfications a piece of cake.<br>So navigate within your IDE to res/values/strings.xml or create the file if it doesn’t exist.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"app_name\"</span>&gt;</span>SecureDialer<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"homescreen_label\"</span>&gt;</span>Homescreen Activity<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"homescreen_dialer\"</span>&gt;</span>Dialer<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"homescreen_password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"homescreen_exit\"</span>&gt;</span>Exit<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_label\"</span>&gt;</span>Newpassword Activity<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_new_text\"</span>&gt;</span>Enter new password:<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_confirm_text\"</span>&gt;</span>Repeat the password:<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_new_hint\"</span>&gt;</span>Type new password here<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_confirm_hint\"</span>&gt;</span>Repeat password here<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_back\"</span>&gt;</span>Back<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"newpassword_save\"</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_label\"</span>&gt;</span>Resetpassword Activity<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_old_text\"</span>&gt;</span>Enter old password:<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_old_hint\"</span>&gt;</span>Type old password here<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_new_text\"</span>&gt;</span>Enter new password:<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_new_hint\"</span>&gt;</span>Type new password here<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_confirm_text\"</span>&gt;</span>Confirm password:<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"resetpassword_confirm_hint\"</span>&gt;</span>Repeat password here<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialer_label\"</span>&gt;</span>Dialer Activity<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialer_dial\"</span>&gt;</span>Dial<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialer_clear\"</span>&gt;</span>Clear<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialer_done\"</span>&gt;</span>Done<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialerpassword_enter\"</span>&gt;</span>Enter<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dialerpassword_nevermind\"</span>&gt;</span>Nevermind<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Remember all of those @string/some_name values within the AndroidManifest.xml?<br>Well that is how we reference the values stored within res/strings.xml.</p>\n<p>Moving along next create the Java class file HomeScreen within your applications src folder if you want to follow along with the code I have it under <div>src/org/secure/dialer/HomeScreen.java.</div><br>Don’t worry about all of those string values you just typed or pasted we’ll use them shortly as we introduce each activity screen.</p>\n<p>As is normal with Android development we will first create the visual layouts and then once all our buttons and views are setup we then add Java to support the various actions we want to allow our users to make.</p>\n<p>Be warned though that this style of visuals first and then application logic might sound strange if you’re comming from a web development MVC or MVVM background in which you first design your Models before hooking up controller logic before finnally designing a UI; but don’t let it get to you too much because you’ll see how its much easier for you to structure your Java code since you basically build application logic on top of objects created from your visual layout.</p>\n<p>But enough chit chat, create a new file “homescreen.xml” within <div>/res/layout/</div></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"comment\">&lt;!-- </div><div class=\"line\">A great tutorial on how to design button themes</div><div class=\"line\">http://blog.androgames.net/40/custom-button-style-and-theme/</div><div class=\"line\">--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> </div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homescreen_relative_layout\"</span></div><div class=\"line\"><span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homescreen_dialer_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/homescreen_dialer\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"homescreen_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homescreen_password_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/homescreen_dialer_button\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/homescreen_password\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"homescreen_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homescreen_exit_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/homescreen_password_button\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/homescreen_exit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"homescreen_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The homescreen is fairly basic it will just appear as three buttons vertically tiled.<br>When we get to the code for the homescreen you’ll see how easily you hookup code to support the android:onClick= tags from your xml file.</p>\n<p>Now create the Java class file “HomeScreen.java” within your project’s src/ folder.<br>Here you’ll also notice a class called “PasswordDB” created, that is the object representation of our SQLite database which is the focus of the article and we’ll cover it in depth later on.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">protected</span> PasswordDB password_db;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * <span class=\"doctag\">@see</span> android.app.Activity#onCreate(android.os.Bundle)</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle saved_instance_state)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(saved_instance_state);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setContentView(R.layout.homescreen);</div><div class=\"line\">    password_db = <span class=\"keyword\">new</span> PasswordDB(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Manages the button click events for the HomeScreen Activity.&lt;br /&gt;</div><div class=\"line\">   * Clicking exit terminates the app.&lt;br /&gt;</div><div class=\"line\">   * Clicking password launches either the newpassword or resetpassword</div><div class=\"line\">   * activity depending on whether a password is currently stored.&lt;br /&gt;</div><div class=\"line\">   * Clicking dialer launches the dialer activity.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> button_clicked</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">homescreen_button_click_handler</span><span class=\"params\">(View button_clicked)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(button_clicked.getId())&#123;</div><div class=\"line\">      Boolean password_found = password_db.is_password();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.homescreen_exit_button:</div><div class=\"line\">      HomeScreen.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.homescreen_password_button:</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>(!password_found)&#123;</div><div class=\"line\">        Intent new_password_intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>.getApplicationContext(), NewPassword.class);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(new_password_intent);</div><div class=\"line\">        HomeScreen.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        Intent reset_password_intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>.getApplicationContext(), ResetPassword.class);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(reset_password_intent);</div><div class=\"line\">        HomeScreen.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.homescreen_dialer_button:</div><div class=\"line\">      <span class=\"keyword\">if</span>(password_found) &#123;</div><div class=\"line\">        Intent dialer_intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>.getApplicationContext(), Dialer.class);</div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(dialer_intent);</div><div class=\"line\">        HomeScreen.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        display_toast(<span class=\"string\">\"No password has been set yet.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Displays the string passed as a new toast</div><div class=\"line\">   * <span class=\"doctag\">@param</span> message</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">display_toast</span><span class=\"params\">(String message)</span></div><div class=\"line\">  </span>&#123;</div><div class=\"line\">    Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Pay attention to the homescreen_button_click_handler.<br>Remember inside our Homescreen.xml file where we defined the onClick attribute for each of the three buttons?<br>Now you see how easy it is within the Java code to look up the button’s unique id name and write handler code, it just becomes a switch case on the getId() method of the View which generated the click event.<br>To think if you tried it the other way around you would have foolishly built up three different button handler events where we have just a single button_handler for the entire Homescreen.</p>\n<p>This style of design also makes our code very modular; if you wanted to add another button its as easy as popping in another case statement.<br>Looking at the button_click_handler code when the user presses the homescreen_dialer_button we launch the Dialer activity screen… lets do that.<br></p></p>\n<p><p><br>As before we’ll create the dialer layout first, so create the file “dialer.xml” within the layout directory res/layout.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_relative_layout\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_number_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:focusable</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_one\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_number_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/dialer_number_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_two\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"2\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_number_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_one\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_three\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"3\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_number_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_two\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_four\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"4\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_one\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/dialer_one\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_five\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"5\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_two\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_four\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_six\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"6\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_three\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_five\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_seven\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"7\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_four\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/dialer_four\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_eight\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"8\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_five\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_seven\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_nine\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"9\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_six\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_eight\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_pound\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"#\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_seven\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/dialer_seven\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_zero\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_eight\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_pound\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_star\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"*\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_nine\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/dialer_zero\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_dial_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dialer_dial\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_pound\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignParentLeft</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_clear_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dialer_clear\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_star\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialer_done_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dialer_done\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialer_dial_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_centerHorizontal</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>As you can guess all of the numerical button are what you should expect from a phone dialer.<br>Of intrest is the non-focusable editbox where the phonenumber will be displayed as the user types and the three buttons near the bottom; dial, clear and done.<br>The layout as you can see is rather plain but the interesting bits will come next when we add the Java code.<br>However before that we need to creat the layout for the password prompt which will display once the guest has finished making a call and might potentially have the chance to muck around with your phone.</p>\n<p>Add the file “dialerpassword.xml” to the res/layout folder.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialerpassword_relative_layout\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialerpassword_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/newpassword_confirm_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialerpassword_enter_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dialerpassword_enter\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialerpassword_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/dialerpassword_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dialerpassword_nevermind_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/dialerpassword_nevermind\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/dialerpassword_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignRight</span>=<span class=\"string\">\"@id/dialerpassword_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"dialer_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Finally create the Java class file “Dialer.java” and place it within your src/ folder.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Dialog;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.Uri;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.telephony.TelephonyManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.KeyEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Window;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.WindowManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View.OnClickListener;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"><span class=\"keyword\">import</span> android.telephony.PhoneStateListener;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dialer</span> <span class=\"keyword\">extends</span> <span class=\"title\">HomeScreen</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> String current_password = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText dialer_phone_number_field = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> Dialog password_dialog = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText dialog_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> PhoneStateListener phone_state_listener = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> TelephonyManager telephony_manager = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * @see android.app.Activity#onCreate(android.os.Bundle)</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle saved_instance_state)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Hides both the title and status bar</span></div><div class=\"line\">    <span class=\"comment\">// Must be called calling super.onCreate()</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class=\"line\">    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,</div><div class=\"line\">        WindowManager.LayoutParams.FLAG_FULLSCREEN);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(saved_instance_state);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setContentView(R.layout.dialer);</div><div class=\"line\"></div><div class=\"line\">    current_password = password_db.get_password();</div><div class=\"line\">    dialer_phone_number_field = (EditText)findViewById(R.id.dialer_number_edit);</div><div class=\"line\">    phone_state_listener = <span class=\"keyword\">new</span> CallEndedListener();</div><div class=\"line\">    telephony_manager = (TelephonyManager) <span class=\"keyword\">this</span>.getSystemService(TELEPHONY_SERVICE);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Manages the button click events for the HomeScreen Activity.&lt;br /&gt;</div><div class=\"line\">   * Clicking the numpad adds the number to the dial box&lt;br /&gt;</div><div class=\"line\">   * Clicking dial calls the number within the dial box&lt;br /&gt;</div><div class=\"line\">   * Clicking clear erases the dial box&lt;br /&gt;</div><div class=\"line\">   * Clicking done prompts for the password&lt;br /&gt;</div><div class=\"line\">   * <span class=\"doctag\">@param</span> button_clicked</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dialer_button_click_handler</span><span class=\"params\">(View button_clicked)</span></span>&#123;</div><div class=\"line\">    StringBuilder phone_number = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span>(button_clicked.getId())&#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_one:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'1'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_two:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'2'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_three:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'3'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_four:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'4'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_five:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'5'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_six:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'6'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_seven:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'7'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_eight:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'8'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_nine:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'9'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_zero:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'0'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_star:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'*'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_pound:</div><div class=\"line\">        phone_number.append(<span class=\"string\">'#'</span>);</div><div class=\"line\">        dialer_phone_number_field.append(phone_number);</div><div class=\"line\">        phone_number.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Copies the phone_number_field to a StringBuilder,</span></div><div class=\"line\">        <span class=\"comment\">// deletes the last digit and dumps the StringBuilder</span></div><div class=\"line\">        <span class=\"comment\">// back to the phone_number_field</span></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_clear_button:</div><div class=\"line\">        <span class=\"keyword\">if</span>(!dialer_phone_number_field.getText().toString().equals(<span class=\"string\">\"\"</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dialer_phone_number_field.getText().toString().length(); ++i)&#123;</div><div class=\"line\">            phone_number.append(dialer_phone_number_field.getText().toString().charAt(i));</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          phone_number.deleteCharAt(phone_number.length() - <span class=\"number\">1</span>);</div><div class=\"line\">          dialer_phone_number_field.setText(phone_number.toString());</div><div class=\"line\">          phone_number.setLength(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Launches the dialog box prompting for the new password</span></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_done_button:</div><div class=\"line\">        password_dialog = make_password_dialog(<span class=\"keyword\">this</span>);</div><div class=\"line\">        password_dialog.show();</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.dialer_dial_button:</div><div class=\"line\">        <span class=\"keyword\">if</span>(dialer_phone_number_field.getText().toString().equals(<span class=\"string\">\"\"</span>))&#123;</div><div class=\"line\">          display_toast(<span class=\"string\">\"Enter a phone number to dial\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          perform_dial();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Creates a dialog for the password confirmation</div><div class=\"line\">   * <span class=\"doctag\">@param</span> context</div><div class=\"line\">   * <span class=\"doctag\">@return</span></div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Dialog <span class=\"title\">make_password_dialog</span><span class=\"params\">(Context context)</span></span>&#123;</div><div class=\"line\">    Dialog dialog = <span class=\"keyword\">new</span> Dialog(context);</div><div class=\"line\"></div><div class=\"line\">    dialog.setContentView(R.layout.dialerpassword);</div><div class=\"line\">    dialog.setTitle(<span class=\"string\">\"Password?\"</span>);</div><div class=\"line\">    dialog.setCancelable(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">    dialog_password_field = (EditText)dialog.findViewById(R.id.dialerpassword_password_edit);</div><div class=\"line\">    Button dialog_enter = (Button)dialog.findViewById(R.id.dialerpassword_enter_button);</div><div class=\"line\">    dialog_enter.setOnClickListener(dialog_click_listener);</div><div class=\"line\">    Button dialog_nevermind = (Button)dialog.findViewById(R.id.dialerpassword_nevermind_button);</div><div class=\"line\">    dialog_nevermind.setOnClickListener(dialog_click_listener);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> dialog;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Custom View.OnClickListener interface for the password</div><div class=\"line\">   * dialog buttons.</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"keyword\">public</span> OnClickListener dialog_click_listener = <span class=\"keyword\">new</span> View.OnClickListener()&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Clicking nevermind closes the dialog menu&lt;br /&gt;</div><div class=\"line\">     * Clicking done validates the password entered.</div><div class=\"line\">     * (non-Javadoc)</div><div class=\"line\">     * <span class=\"doctag\">@see</span> android.view.View.OnClickListener#onClick(android.view.View)</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View button_clicked)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span>(button_clicked.getId())&#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> R.id.dialerpassword_nevermind_button:</div><div class=\"line\">            password_dialog.dismiss();</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">case</span> R.id.dialerpassword_enter_button:</div><div class=\"line\">            <span class=\"keyword\">if</span>(validate_password(dialog_password_field.getText().toString().trim()))&#123;</div><div class=\"line\">              password_dialog.dismiss();</div><div class=\"line\">              Intent homescreen_intent = <span class=\"keyword\">new</span> Intent(getApplicationContext(), HomeScreen.class);</div><div class=\"line\">              startActivity(homescreen_intent);</div><div class=\"line\">              Dialer.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Validates the password typed by the user to check if it</div><div class=\"line\">   * matches the current password stored in the database.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> password_value</div><div class=\"line\">   * <span class=\"doctag\">@return</span> true if the password was valid</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Boolean <span class=\"title\">validate_password</span><span class=\"params\">(String password_value)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!password_value.equals(current_password))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Incorrect password!\"</span>);</div><div class=\"line\">      <span class=\"keyword\">this</span>.dialog_password_field.setText(<span class=\"string\">\"\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * A small hack to disable the back button</div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * <span class=\"doctag\">@see</span> android.app.Activity#onBackPressed()</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"The back button is disabled\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Lets the user call using the dial button</div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * <span class=\"doctag\">@see</span> android.app.Activity#onKeyDown(int, android.view.KeyEvent)</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(keyCode == KeyEvent.KEYCODE_CALL)&#123;</div><div class=\"line\">      perform_dial();</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Dials the desired phone number and creates a listener to</div><div class=\"line\">   * to capture the state when the phone call has ended.</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">perform_dial</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(dialer_phone_number_field != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        telephony_manager.listen(phone_state_listener, PhoneStateListener.LISTEN_CALL_STATE);</div><div class=\"line\">        Intent phone_call = <span class=\"keyword\">new</span> Intent(Intent.ACTION_CALL,</div><div class=\"line\">            Uri.parse(<span class=\"string\">\"tel:\"</span> + dialer_phone_number_field.getText()));</div><div class=\"line\">        startActivity(phone_call);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">catch</span>(Exception error)&#123;</div><div class=\"line\">        error.printStackTrace();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@author</span> Alex Bredariol Grilo</div><div class=\"line\">   * &#123;<span class=\"doctag\">@link</span> www.umamao.com&#125;</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallEndedListener</span> <span class=\"keyword\">extends</span> <span class=\"title\">PhoneStateListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> called = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* Waits until the phone call is done and restarts the activity.</div><div class=\"line\">     *</div><div class=\"line\">     * (non-Javadoc)</div><div class=\"line\">     * @see android.telephony.PhoneStateListener#onCallStateChanged(int, java.lang.String)</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCallStateChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> state, String incoming_number)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(called &amp;&amp; state == TelephonyManager.CALL_STATE_IDLE)&#123;</div><div class=\"line\">          called = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">          telephony_manager.listen(<span class=\"keyword\">this</span>,</div><div class=\"line\">              PhoneStateListener.LISTEN_NONE);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">            Dialer.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">            Intent dialer_restart = <span class=\"keyword\">new</span> Intent(Dialer.<span class=\"keyword\">this</span>, Dialer.class);</div><div class=\"line\">            dialer_restart.setAction(Intent.ACTION_MAIN);</div><div class=\"line\">            startActivity(dialer_restart);</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          <span class=\"comment\">// When the phone is not in idle mode it is currently</span></div><div class=\"line\">          <span class=\"comment\">// in use</span></div><div class=\"line\">          <span class=\"keyword\">if</span>(state == TelephonyManager.CALL_STATE_OFFHOOK)&#123;</div><div class=\"line\">            called = <span class=\"keyword\">true</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Stepping through the code for the Dialer class you’ll notice that its relatively simple.<br>Since the activity is once again button based the meat of the code involves deciding what we should do once each button handler event is triggered.</p>\n<p>A quick thing to notice is that the Dialer class we defined extends the HomeScreen where we intialized the password database object; so all of the password interaction is due to our great use of inheritance.</p>\n<p>Anyhow the basic idea for the Dialer activity is the following…</p>\n<ol>\n<li>Pressing the numeric keys lets the user enter a phonenumber</li>\n<li>The clear button should delete a numeric character one at a time</li>\n<li>Dial… makes a phonecall</li>\n<li>Done should prompt the user for a password, if correct unlocks the app</li>\n</ol>\n<p>What you’ll notice here is that the prompting for a password is how we make the dialer somewhat secure. If the wrong one is entered the user should theorectically have no other access to your phone meaning they can’t touch your apps, peek at your emails or do anything else.<br>Looking at the code you’ll see the function make_password_dialog() which creates the kinda mini embedded activity when the user triggers the dialer_done_button click event.</p>\n<p>The remaining code within the Dialer class involves the TelephonyManager which is the Android API’s way of letting developers controller the actions of the phone listener and receiver.<br>Its rather easy to understand after you force yourself to think of the Phone as advancing across as series of states such as IDLE, OFFHOOK, LISTEN_CALL and create a mental map of those states as you normally talk on the phone. Now we’ll return back to the Homescreen and add in the code to support the new and reset password buttons. </p>\n<p>Each of the buttons will have a layout and Java class file associated. Lets begin with the NewPassword class, create the file “newpassword.xml” within the res/layout folder of your Android project. The xml rather easy to understand as its just a regular enter password and repeat it once type of layout you’ve seen all over the place.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_relative_layout\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> </div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_new_password_text\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_new_text\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span> </div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_new_password_edit\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/newpassword_new_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/newpassword_new_password_text\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> </div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_confirm_password_text\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_confirm_text\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/newpassword_new_password_edit\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span> </div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_confirm_password_edit\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/newpassword_confirm_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/newpassword_confirm_password_text\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_back_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_back\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/newpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/newpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"newpassword_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/newpassword_save_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_save\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/newpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignRight</span>=<span class=\"string\">\"@id/newpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"newpassword_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The Java code should be titled “NewPassword.java” and stored within the src/ folder of your project.<br>The code consist of letting the user enter a password into the editText box, and validate that the repeated value matches the original.<br>Once the validation has been accepted we make a DB transaction and store the password.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewPassword</span> <span class=\"keyword\">extends</span> <span class=\"title\">HomeScreen</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> EditText new_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText confirm_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * @see android.app.Activity#onCreate(android.os.Bundle)</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle saved_instance_state)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(saved_instance_state);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setContentView(R.layout.newpassword);</div><div class=\"line\"></div><div class=\"line\">    new_password_field = (EditText)findViewById(</div><div class=\"line\">        R.id.newpassword_new_password_edit);</div><div class=\"line\">    confirm_password_field = (EditText)findViewById(</div><div class=\"line\">        R.id.newpassword_confirm_password_edit);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Manages the button click events for the NewPassword Activity.&lt;br /&gt;</div><div class=\"line\">   * Clicking back returns to the HomeScreen.&lt;br /&gt;</div><div class=\"line\">   * Clicking save will save the password if it passes the validation</div><div class=\"line\">   * check.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> button_clicked</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newpassword_button_click_handler</span><span class=\"params\">(View button_clicked)</span></span>&#123;</div><div class=\"line\">    Intent homescreen_intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>.getApplicationContext(),</div><div class=\"line\">        HomeScreen.class);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span>(button_clicked.getId())&#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.newpassword_back_button:</div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(homescreen_intent);</div><div class=\"line\">        NewPassword.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.newpassword_save_button:</div><div class=\"line\">        <span class=\"keyword\">if</span>(validate_password(</div><div class=\"line\">              new_password_field.getText().toString().trim(),</div><div class=\"line\">              confirm_password_field.getText().toString().trim()</div><div class=\"line\">              ))&#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.startActivity(homescreen_intent);</div><div class=\"line\">          NewPassword.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * When both the new password and the confirmation password</div><div class=\"line\">   * match the new password is saved. Else when the passwords</div><div class=\"line\">   * don't match or are empty an error message is displayed.</div><div class=\"line\">   * <span class=\"doctag\">@return</span> true if both password fields match else false</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Boolean <span class=\"title\">validate_password</span><span class=\"params\">(String new_password_value,</div><div class=\"line\">      String confirm_password_value)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!new_password_value.equals(confirm_password_value))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your Passwords do not match\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(new_password_value.equals(<span class=\"string\">\"\"</span>) &amp;&amp;</div><div class=\"line\">        new_password_value.equals(<span class=\"string\">\"\"</span>))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your Passwords cannot be empty\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      password_db.set_password(new_password_value);</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your new password was saved!\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>If you pay enough attention to the newpassword xml and Java code behind you’ll have no trouble at all with the resetpassword code as its very similar.<br>We’ll begin with the layout for the resetpassword code, so create the file “resetpassword.xml” within the res/layout/ folder of your project.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></div><div class=\"line\"><span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_relative_layout\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> </div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_old_password_text\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/resetpassword_old_text\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span> </div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_old_password_edit\"</span> </div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/resetpassword_old_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_old_password_text\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:maxLength</span>=<span class=\"string\">\"10\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> </div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_new_password_text\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/resetpassword_new_text\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_old_password_edit\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span> </div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_new_password_edit\"</span> </div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/resetpassword_new_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_new_password_text\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:maxLength</span>=<span class=\"string\">\"10\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> </div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_confirm_password_text\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/resetpassword_confirm_text\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_new_password_edit\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">EditText</span> </div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_confirm_password_edit\"</span> </div><div class=\"line\"><span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/resetpassword_confirm_hint\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> </div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_confirm_password_text\"</span></div><div class=\"line\"><span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\"><span class=\"attr\">android:maxLength</span>=<span class=\"string\">\"10\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_back_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_back\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignLeft</span>=<span class=\"string\">\"@id/resetpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"reset_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/resetpassword_save_button\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\"><span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newpassword_save\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/resetpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_alignRight</span>=<span class=\"string\">\"@id/resetpassword_confirm_password_edit\"</span></div><div class=\"line\"><span class=\"attr\">android:onClick</span>=<span class=\"string\">\"reset_button_click_handler\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>The addition here for the reset password xml layout is the entry for the current or old password. We going to assert that the value entered there must be found within the database before we can create a new transaction to store the value of a new password. Now create the file within the src/ folder of your project called “ResetPassword.java”. I was extra careful to write useful comments within this file so be sure to read them before moving on to the last part.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Resets the applications' password used to escape from the dialer activity</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResetPassword</span> <span class=\"keyword\">extends</span> <span class=\"title\">HomeScreen</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> String current_password = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText new_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText confirm_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> EditText old_password_field = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * @see android.app.Activity#onCreate(android.os.Bundle)</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle saved_instance_state)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(saved_instance_state);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setContentView(R.layout.resetpassword);</div><div class=\"line\"></div><div class=\"line\">    current_password = password_db.get_password();</div><div class=\"line\">    new_password_field = (EditText)findViewById(</div><div class=\"line\">        R.id.resetpassword_new_password_edit);</div><div class=\"line\">    confirm_password_field = (EditText)findViewById(</div><div class=\"line\">        R.id.resetpassword_confirm_password_edit);</div><div class=\"line\">    old_password_field = (EditText)findViewById(</div><div class=\"line\">        R.id.resetpassword_old_password_edit);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Manages the button click events for the NewPassword Activity.&lt;br /&gt;</div><div class=\"line\">   * Clicking back returns to the HomeScreen.&lt;br /&gt;</div><div class=\"line\">   * Clicking save will save the password if it passes the validation</div><div class=\"line\">   * check.</div><div class=\"line\">   * <span class=\"doctag\">@param</span> button_clicked</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reset_button_click_handler</span><span class=\"params\">(View button_clicked)</span></span>&#123;</div><div class=\"line\">    Intent homescreen_intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>.getApplicationContext(),</div><div class=\"line\">        HomeScreen.class);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span>(button_clicked.getId())&#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.resetpassword_back_button:</div><div class=\"line\">        <span class=\"keyword\">this</span>.startActivity(homescreen_intent);</div><div class=\"line\">        ResetPassword.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">case</span> R.id.resetpassword_save_button:</div><div class=\"line\">        <span class=\"keyword\">if</span>(validate_password(</div><div class=\"line\">              old_password_field.getText().toString().trim(),</div><div class=\"line\">              new_password_field.getText().toString().trim(),</div><div class=\"line\">              confirm_password_field.getText().toString().trim()</div><div class=\"line\">              ))&#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.startActivity(homescreen_intent);</div><div class=\"line\">          ResetPassword.<span class=\"keyword\">this</span>.finish();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * When the new password equals the confirmation password</div><div class=\"line\">   * and the old password equals the current password </div><div class=\"line\">   * then the new password is reset. Else when the passwords</div><div class=\"line\">   * don't match or are empty or the old password doesn't match the</div><div class=\"line\">   * current password then an error message is displayed.</div><div class=\"line\">   * <span class=\"doctag\">@return</span> true if both password fields match else false</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Boolean <span class=\"title\">validate_password</span><span class=\"params\">(String old_password_value,</div><div class=\"line\">      String new_password_value, String confirm_password_value)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!old_password_value.equals(current_password))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your old password is incorrect\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!new_password_value.equals(confirm_password_value))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your Passwords do not match\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(new_password_value.equals(<span class=\"string\">\"\"</span>) &amp;&amp;</div><div class=\"line\">        confirm_password_value.equals(<span class=\"string\">\"\"</span>))&#123;</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your Passwords cannot be empty\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      password_db.reset_password(new_password_value);</div><div class=\"line\">      display_toast(<span class=\"string\">\"Your new password was saved!\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We are now ready to explore the basics of the Android SQLite API.<br>Within the src folder of your project add the file “PasswordDB.java”.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.content.ContentValues;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.Cursor;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.sqlite.SQLiteDatabase;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.sqlite.SQLiteOpenHelper;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Represents the Password Database</div><div class=\"line\"> * <span class=\"doctag\">@author</span> Demetrious</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PasswordDB</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String db_name = <span class=\"string\">\"PasswordDB\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_table = <span class=\"string\">\"Passwords\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_col_password_number = <span class=\"string\">\"PassNo\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_col_password_value = <span class=\"string\">\"PassVal\"</span>;</div></pre></td></tr></table></figure></p>\n<p>The static strings we declared above represent the name of our database, table and two columns.<br>The password number or PassNo will be the primary key and the string value<br>of the password(this is not a mission critical app so we’re not going to encrpyt it) will be its stored value.</p>\n<p>Next we’ll write the constructor for the database which will create the databasewith the name we gave it within the string db_name.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * </div><div class=\"line\"> * <span class=\"doctag\">@param</span> context</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PasswordDB</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>(context, db_name, <span class=\"keyword\">null</span>, <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>With our database in place the next step is to create the Table.<br>The code below will accomplish just that, look at the JavaDoc I wrote to see the corresponding SQL.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Invokes the SQL statements below.</div><div class=\"line\"> *  &lt;p&gt;</div><div class=\"line\"> *belowCREATE TABLE IF NOT EXISTS Password( &lt;br /&gt;</div><div class=\"line\"> *brPassNoINTEGER PRIMARY KEY, &lt;br /&gt;</div><div class=\"line\"> *brPassValVARCHAR(10) NOT NULL &lt;br /&gt;</div><div class=\"line\"> *br);</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> * (non-Javadoc)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.database.sqlite.SQLiteOpenHelper#onCreate(android.database.sqlite.SQLiteDatabase)</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">  db.execSQL(<span class=\"string\">\"CREATE TABLE IF NOT EXISTS \"</span> + password_table + <span class=\"string\">\"(\"</span> + </div><div class=\"line\">      password_col_password_number + <span class=\"string\">\" INTEGER PRIMARY KEY,\"</span> +</div><div class=\"line\">      password_col_password_value + <span class=\"string\">\" VARCHAR(10) NOT NULL\"</span> +</div><div class=\"line\">      <span class=\"string\">\");\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The next method onUpgrade() is a required function but we’re not going to actually implement it since we don’t need it for this example.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * (non-Javadoc)</div><div class=\"line\"> * <span class=\"doctag\">@see</span> android.database.sqlite.SQLiteOpenHelper#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, </div><div class=\"line\">    <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We’ll of course need a way to insert a new password into our database.<br>The method set_password does just that. All its doing is calling a basic SQL insert into query but using the Android API helper method insert();<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Inserts a new password into the Password DB via the following SQL.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * INSERT INTO Password (PassVal)&lt;br /&gt;</div><div class=\"line\"> * VALUES('new_password');</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> * <span class=\"doctag\">@param</span> new_password</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set_password</span><span class=\"params\">(String new_password)</span></span>&#123;</div><div class=\"line\">  SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">  ContentValues content_values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\"></div><div class=\"line\">  content_values.put(password_col_password_value, new_password);</div><div class=\"line\"></div><div class=\"line\">  db.insert(password_table, password_col_password_value, </div><div class=\"line\">      content_values);</div><div class=\"line\">  db.close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Much like a Java property we need a getter to accompany the setter.<br>However here we’ll first write a raw query which will place a cursor at the first result row that was found from our SELECT statement.<br>Database cursors can be though of as table iterators.<br>The cursor will begin at the result table itself, you must first move it to the  result row to begin reading data.<br>Once at a result row you have to move the cursor column by column and read the rrow value from each.<br>Since we are only going to be storing a single password the first row result will always contain the password we want to fetch.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Returns the existing password assuming that one exists via the </div><div class=\"line\"> * following SQL.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * SELECT * &lt;br /&gt;</div><div class=\"line\"> * FROM Passwords &lt;br /&gt;</div><div class=\"line\"> * WHERE PassNo='1';</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> * <span class=\"doctag\">@return</span> A String with the current password</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get_password</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">  Cursor cursor = db.rawQuery(</div><div class=\"line\">      <span class=\"string\">\"SELECT \"</span> + password_col_password_value +</div><div class=\"line\">      <span class=\"string\">\" FROM \"</span> + password_table +</div><div class=\"line\">      <span class=\"string\">\" WHERE \"</span> + password_col_password_number + <span class=\"string\">\"=\\'1\\';\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">  cursor.moveToFirst();</div><div class=\"line\">  Integer column_index = cursor.getColumnIndex(</div><div class=\"line\">      password_col_password_value);</div><div class=\"line\">  String string_value = cursor.getString(column_index);</div><div class=\"line\"></div><div class=\"line\">  cursor.close();</div><div class=\"line\">  db.close();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> string_value;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now the question becomes how do we update an existing password?<br>To do so we have to use the update() method which is another Android SQLite API wrapper around the traditional SQL UPDATE WHERE statement.<br>Looking at the JavaDoc I wrote you can see how we would write this if it were a regular SQL statement.</p>\n<p>Despite the Android SQL API being a little verbose(this might change in the future) the parameterized input means that we would be safe from any type of injection attacks since we’re not passing a rawQuery from the user input.<br>In short using the parameterized wrapper methods is more code but it saves you from the potential danger of calling rawQueries which substitute in user values.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Updates the existing password based on the following SQL.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> *  UPDATE Password &lt;br /&gt;</div><div class=\"line\"> *brSET PassVal='new_password' &lt;br /&gt;</div><div class=\"line\"> *brWHERE PassVal='old_password';</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> * <span class=\"doctag\">@param</span> new_password</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reset_password</span><span class=\"params\">(String new_password)</span></span>&#123;</div><div class=\"line\">  String old_password = get_password();</div><div class=\"line\">  SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\">  ContentValues content_values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\"></div><div class=\"line\">  content_values.put(password_col_password_value, new_password);</div><div class=\"line\"></div><div class=\"line\">  String where_clause = password_col_password_value + <span class=\"string\">\"=?\"</span>;</div><div class=\"line\">  String[] where_args = &#123;old_password&#125;;</div><div class=\"line\">  db.update(password_table, content_values, where_clause, </div><div class=\"line\">      where_args);</div><div class=\"line\"></div><div class=\"line\">  db.close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Lastly we need a way to verify if a password has been set or not.<br>This will allow us to determine when we need to prompt the user for a reset.<br>Its short and sweet, just run a select query and count the results.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Uses the following SQL.</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * SELECT * &lt;br /&gt;</div><div class=\"line\">     * FROM Passwords &lt;br /&gt;</div><div class=\"line\">     * WHERE PassNo='1';</div><div class=\"line\">     * &lt;/p&gt;</div><div class=\"line\">     * <span class=\"doctag\">@return</span> true if a password exists else false</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">is_password</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">      Cursor cursor = db.rawQuery(</div><div class=\"line\">          <span class=\"string\">\"SELECT \"</span> + password_col_password_value +</div><div class=\"line\">          <span class=\"string\">\" FROM \"</span> + password_table +</div><div class=\"line\">          <span class=\"string\">\" WHERE \"</span> + password_col_password_number + <span class=\"string\">\"=\\'1\\';\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>(cursor != <span class=\"keyword\">null</span> &amp;&amp; cursor.getCount() &gt; <span class=\"number\">0</span> )&#123;</div><div class=\"line\">        db.close();</div><div class=\"line\">        cursor.close();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        db.close();</div><div class=\"line\">        cursor.close();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Perhaps you got lost(its better if you followed along closely) but here is the PasswordDB class in full.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Add your package name here!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.ContentValues;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.Cursor;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.sqlite.SQLiteDatabase;</div><div class=\"line\"><span class=\"keyword\">import</span> android.database.sqlite.SQLiteOpenHelper;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PasswordDB</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String db_name = <span class=\"string\">\"PasswordDB\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_table = <span class=\"string\">\"Passwords\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_col_password_number = <span class=\"string\">\"PassNo\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String password_col_password_value = <span class=\"string\">\"PassVal\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * </div><div class=\"line\">   * <span class=\"doctag\">@param</span> context</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PasswordDB</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, db_name, <span class=\"keyword\">null</span>, <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Invokes the SQL statements below.</div><div class=\"line\">   *  &lt;p&gt;</div><div class=\"line\">   *belowCREATE TABLE IF NOT EXISTS Password( &lt;br /&gt;</div><div class=\"line\">   *brPassNoINTEGER PRIMARY KEY, &lt;br /&gt;</div><div class=\"line\">   *brPassValVARCHAR(10) NOT NULL &lt;br /&gt;</div><div class=\"line\">   *br);</div><div class=\"line\">   * &lt;/p&gt;</div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * <span class=\"doctag\">@see</span> android.database.sqlite.SQLiteOpenHelper#onCreate(android.database.sqlite.SQLiteDatabase)</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">      db.execSQL(<span class=\"string\">\"CREATE TABLE IF NOT EXISTS \"</span> + password_table + <span class=\"string\">\"(\"</span> + </div><div class=\"line\">          password_col_password_number + <span class=\"string\">\" INTEGER PRIMARY KEY,\"</span> +</div><div class=\"line\">          password_col_password_value + <span class=\"string\">\" VARCHAR(10) NOT NULL\"</span> +</div><div class=\"line\">          <span class=\"string\">\");\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * (non-Javadoc)</div><div class=\"line\">   * <span class=\"doctag\">@see</span> android.database.sqlite.SQLiteOpenHelper#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, </div><div class=\"line\">        <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Inserts a new password into the Password DB via the following SQL.</div><div class=\"line\">   * &lt;p&gt;</div><div class=\"line\">   * INSERT INTO Password (PassVal)&lt;br /&gt;</div><div class=\"line\">   * VALUES('new_password');</div><div class=\"line\">   * &lt;/p&gt;</div><div class=\"line\">   * <span class=\"doctag\">@param</span> new_password</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set_password</span><span class=\"params\">(String new_password)</span></span>&#123;</div><div class=\"line\">    SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">    ContentValues content_values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\"></div><div class=\"line\">    content_values.put(password_col_password_value, new_password);</div><div class=\"line\"></div><div class=\"line\">    db.insert(password_table, password_col_password_value, </div><div class=\"line\">        content_values);</div><div class=\"line\">    db.close();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Returns the existing password assuming that one exists via the </div><div class=\"line\">   * following SQL.</div><div class=\"line\">   * &lt;p&gt;</div><div class=\"line\">   * SELECT * &lt;br /&gt;</div><div class=\"line\">   * FROM Passwords &lt;br /&gt;</div><div class=\"line\">   * WHERE PassNo='1';</div><div class=\"line\">   * &lt;/p&gt;</div><div class=\"line\">   * <span class=\"doctag\">@return</span> A String with the current password</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get_password</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">    Cursor cursor = db.rawQuery(</div><div class=\"line\">        <span class=\"string\">\"SELECT \"</span> + password_col_password_value +</div><div class=\"line\">        <span class=\"string\">\" FROM \"</span> + password_table +</div><div class=\"line\">        <span class=\"string\">\" WHERE \"</span> + password_col_password_number + <span class=\"string\">\"=\\'1\\';\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    cursor.moveToFirst();</div><div class=\"line\">    Integer column_index = cursor.getColumnIndex(</div><div class=\"line\">        password_col_password_value);</div><div class=\"line\">    String string_value = cursor.getString(column_index);</div><div class=\"line\"></div><div class=\"line\">    cursor.close();</div><div class=\"line\">    db.close();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> string_value;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Updates the existing password based on the following SQL.</div><div class=\"line\">   * &lt;p&gt;</div><div class=\"line\">   *  UPDATE Password &lt;br /&gt;</div><div class=\"line\">   *brSET PassVal='new_password' &lt;br /&gt;</div><div class=\"line\">   *brWHERE PassVal='old_password';</div><div class=\"line\">   * &lt;/p&gt;</div><div class=\"line\">   * <span class=\"doctag\">@param</span> new_password</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reset_password</span><span class=\"params\">(String new_password)</span></span>&#123;</div><div class=\"line\">    String old_password = get_password();</div><div class=\"line\">    SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\">    ContentValues content_values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\"></div><div class=\"line\">    content_values.put(password_col_password_value, new_password);</div><div class=\"line\"></div><div class=\"line\">    String where_clause = password_col_password_value + <span class=\"string\">\"=?\"</span>;</div><div class=\"line\">    String[] where_args = &#123;old_password&#125;;</div><div class=\"line\">    db.update(password_table, content_values, where_clause, </div><div class=\"line\">        where_args);</div><div class=\"line\"></div><div class=\"line\">    db.close();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Uses the following SQL.</div><div class=\"line\">   * &lt;p&gt;</div><div class=\"line\">   * SELECT * &lt;br /&gt;</div><div class=\"line\">   * FROM Passwords &lt;br /&gt;</div><div class=\"line\">   * WHERE PassNo='1';</div><div class=\"line\">   * &lt;/p&gt;</div><div class=\"line\">   * <span class=\"doctag\">@return</span> true if a password exists else false</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">is_password</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    SQLiteDatabase db = <span class=\"keyword\">this</span>.getWritableDatabase();</div><div class=\"line\"></div><div class=\"line\">    Cursor cursor = db.rawQuery(</div><div class=\"line\">        <span class=\"string\">\"SELECT \"</span> + password_col_password_value +</div><div class=\"line\">        <span class=\"string\">\" FROM \"</span> + password_table +</div><div class=\"line\">        <span class=\"string\">\" WHERE \"</span> + password_col_password_number + <span class=\"string\">\"=\\'1\\';\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(cursor != <span class=\"keyword\">null</span> &amp;&amp; cursor.getCount() &gt; <span class=\"number\">0</span> )&#123;</div><div class=\"line\">      db.close();</div><div class=\"line\">      cursor.close();</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      db.close();</div><div class=\"line\">      cursor.close();</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>So there you go, an Android application that makes use of the SQLite API. Perhaps you can extend this application or something.</p>\n<p>Anyways… enjoy your guestDialer app. </p>"},{"title":"The Projects page, a slidejs tutorial","date":"2012-09-12T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/newprojectspage.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/newprojectspage.JPG","comments":0,"_content":"I used some interesting jquery tricks(at least to me) to make the projects page more visually appealing; read on to learn how it was made. This is the beginning of a series on updates to the overall blog that I will post as I continue to learn more about both the Ruby Jekyll gem and web design in general.\n\n<!-- more -->\nThe projects page was designed using jquery and a neat javascript library called slidesjs<a href=\"http://slidesjs.com/\">(slidesjs.com)</a>.\nSlidesjs is a simple yet elegant slideshow library with many special features such as the ability to add captions and various transition effects to your slides.\n\nI choose to use it mainly because I found the documentaion well prepared<a href=\"http://slidesjs.com/#docs\">(slidesjs.com/#doc)</a>, on the site you'll find the rest of the features I won't touch on in this article.This first part of the project page is the underlying html file, in this file you'll notice the structure of the main div tag which holds the sildes_container. From within the slides_container you just add your slides and content as a div tag with the class slide; and from there you can put whatever you want into it.\n\nBelow is a copy of an early version of the projects page which was adapted from the \"images with captions\" example from slidesjs.\nThe only real change I made(excluding the image sources and caption content) is the last div tag at the bottom, <div id=\"project-description\"> this div tag allows me to swap out the contents of the projects page as you move across the slideshow using jquery which we'll cover after the CSS bit.\n\n```html\n<div id=\"container\">\n<div id=\"example\">\n<div id=\"slides\">\n<div class=\"slides_container\">\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/jliba/4665625073/\" title=\"145.365 - Happy Bokeh Thursday! | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-1.jpg\" width=\"570\" height=\"270\" alt=\"Slide 1\"></a>\n<div class=\"caption\" style=\"bottom:0\">\n<b>Project A</b>\n<a href=\"foeafjoljf\">Live Demo</a>&nbsp;|&nbsp;<a href=\"foeafjoljf\">GitHub</a>\n<p>\nThis is just a test to check things out.\n</p>\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/stephangeyer/3020487807/\" title=\"Taxi | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-2.jpg\" width=\"570\" height=\"270\" alt=\"Slide 2\"></a>\n<div class=\"caption\">\n<b>Project B</b>\n<a href=\"foeafjoljf\">Buy it on Google Play</a>&nbsp;|&nbsp;<a href=\"foeafjoljf\">GitHub</a>\n<p>\nIt took me a while to build it out but its done now.\n</p>\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/childofwar/2984345060/\" title=\"Happy Bokeh raining Day | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-3.jpg\" width=\"570\" height=\"270\" alt=\"Slide 3\"></a>\n<div class=\"caption\">\nHappy Bokeh raining Day\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/b-tal/117037943/\" title=\"We Eat Light | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-4.jpg\" width=\"570\" height=\"270\" alt=\"Slide 4\"></a>\n<div class=\"caption\">\nWe Eat Light\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/bu7amd/3447416780/\" title=\"&amp;ldquo;I must go down to the sea again, to the lonely sea and the sky; and all I ask is a tall ship and a star to steer her by.&amp;rdquo; | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-5.jpg\" width=\"570\" height=\"270\" alt=\"Slide 5\"></a>\n<div class=\"caption\">\n&amp;ldquo;I must go down to the sea again, to the lonely sea and the sky...&amp;rdquo;\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/streetpreacher/2078765853/\" title=\"twelve.inch | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-6.jpg\" width=\"570\" height=\"270\" alt=\"Slide 6\"></a>\n<div class=\"caption\">\ntwelve.inch\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/aftab/3152515428/\" title=\"Save my love for loneliness | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-7.jpg\" width=\"570\" height=\"270\" alt=\"Slide 7\"></a>\n<div class=\"caption\">\nSave my love for loneliness\n</div>\n</div>\n</div>\n<a href=\"#\" class=\"prev\"><img src=\"/images/slidesjs/arrow-prev.png\" width=\"24\" height=\"43\" alt=\"Arrow Prev\"></a>\n<a href=\"#\" class=\"next\"><img src=\"/images/slidesjs/arrow-next.png\" width=\"24\" height=\"43\" alt=\"Arrow Next\"></a>\n</div>\n<img src=\"/images/slidesjs/example-frame.png\" width=\"739\" height=\"341\" alt=\"Example Frame\" id=\"frame\">\n</div>\n</div>\n<div id=\"project-description\">\n</div>\n```\nThe css shown below is very minimal and uses nothing out of the ordinary\n```css\n#container {\n  width:580px;\npadding:10px;\nmargin:0 auto;\nposition:relative;\n         z-index:0;\n}\n\n#example {\nwidth:600px;\nheight:350px;\nposition:relative;\n}\n\n#frame {\nposition:absolute;\n         z-index:0;\nwidth:739px;\nheight:341px;\ntop:-3px;\nleft:-80px;\n}\n\n/*\n   Slideshow\n */\n#slides {\nposition:absolute;\ntop:15px;\nleft:4px;\n     z-index:100;\n}\n\n/*\n   Slides container\nImportant:\nSet the width of your slides container\nSet to display none, prevents content flash\n */\n.slides_container {\nwidth:570px;\noverflow:hidden;\nposition:relative;\ndisplay:none;\n}\n\n/*\n   Each slide\nImportant:\nSet the width of your slides\nIf height not specified height will be set by the slide content\nSet to display block\n */\n.slides_container div.slide {\nwidth:570px;\nheight:270px;\ndisplay:block;\n}\n\n\n/*\n   Next/prev buttons\n */\n#slides .next,#slides .prev {\nposition:absolute;\ntop:107px;\nleft:-39px;\nwidth:24px;\nheight:43px;\ndisplay:block;\n        z-index:101;\n}\n\n#slides .next {\nleft:585px;\n}\n\n/*\n   Pagination\n */\n.pagination {\nmargin:26px auto 0;\nwidth:100px;\n}\n\n.pagination li {\nfloat:left;\nmargin:0 1px;\n       list-style:none;\n}\n\n.pagination li a {\ndisplay:block;\nwidth:12px;\nheight:0;\n       padding-top:12px;\n       background-image:url(/images/slidesjs/pagination.png);\n       background-position:0 0;\nfloat:left;\noverflow:hidden;\n}\n\n.pagination li.current a {\n  background-position:0 -12px;\n}\n```\nFinally here is the javascript code for the projects page which calls the slidesjs library animation functions.\nThe main addition here is the showDescription(), it takes the div tag I mentioned before and extracts the current visible slides' content and displays it on every page transition.\n```javascript\n$(function(){\n    $('#slides').slides({\npreload: true,\npreloadImage: '/images/slidesjs/loading.gif',\nplay: 0,\npause: 2500,\nhoverPause: true,\nanimationStart: function(current){\n},\nanimationComplete: function(current){\nshowDescription();\n},\nslidesLoaded: function() {\nshowDescription();\n}\n});\n\n    function showDescription() {\n    //slide content\n    var $sc = $('div.slide').filter(function() {\n        return this.style.display !== 'none';\n        });\n    //caption\n    var cap = $sc.children('div.caption').html();\n    $('div#project-description').html(cap);\n    }\n});\n```\nOf particular merit here is the jquery filter function. \nWhat this allows us to do is to basically only extract the sole visible slide from the div holding the slides by looking at the display property.\n\nIn addition the jquery children function lets us run what is basically a sub-query on a given jquery object.\nFrom my perspective I could have easily just included the children search in the original query but I tend to keep queries short and simple to help the code remain easy to read.\n\nWell that about wraps up how I put together the projects page... be sure to visit the projects page every once in a while.\n","source":"_posts/newprojectspage.md","raw":"---\ntitle: The Projects page, a slidejs tutorial\ndate: 2012-09-12\ntags: [javascript]\ncategories: [tutorial]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/newprojectspage.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/newprojectspage.JPG\ncomments: false\n---\nI used some interesting jquery tricks(at least to me) to make the projects page more visually appealing; read on to learn how it was made. This is the beginning of a series on updates to the overall blog that I will post as I continue to learn more about both the Ruby Jekyll gem and web design in general.\n\n<!-- more -->\nThe projects page was designed using jquery and a neat javascript library called slidesjs<a href=\"http://slidesjs.com/\">(slidesjs.com)</a>.\nSlidesjs is a simple yet elegant slideshow library with many special features such as the ability to add captions and various transition effects to your slides.\n\nI choose to use it mainly because I found the documentaion well prepared<a href=\"http://slidesjs.com/#docs\">(slidesjs.com/#doc)</a>, on the site you'll find the rest of the features I won't touch on in this article.This first part of the project page is the underlying html file, in this file you'll notice the structure of the main div tag which holds the sildes_container. From within the slides_container you just add your slides and content as a div tag with the class slide; and from there you can put whatever you want into it.\n\nBelow is a copy of an early version of the projects page which was adapted from the \"images with captions\" example from slidesjs.\nThe only real change I made(excluding the image sources and caption content) is the last div tag at the bottom, <div id=\"project-description\"> this div tag allows me to swap out the contents of the projects page as you move across the slideshow using jquery which we'll cover after the CSS bit.\n\n```html\n<div id=\"container\">\n<div id=\"example\">\n<div id=\"slides\">\n<div class=\"slides_container\">\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/jliba/4665625073/\" title=\"145.365 - Happy Bokeh Thursday! | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-1.jpg\" width=\"570\" height=\"270\" alt=\"Slide 1\"></a>\n<div class=\"caption\" style=\"bottom:0\">\n<b>Project A</b>\n<a href=\"foeafjoljf\">Live Demo</a>&nbsp;|&nbsp;<a href=\"foeafjoljf\">GitHub</a>\n<p>\nThis is just a test to check things out.\n</p>\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/stephangeyer/3020487807/\" title=\"Taxi | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-2.jpg\" width=\"570\" height=\"270\" alt=\"Slide 2\"></a>\n<div class=\"caption\">\n<b>Project B</b>\n<a href=\"foeafjoljf\">Buy it on Google Play</a>&nbsp;|&nbsp;<a href=\"foeafjoljf\">GitHub</a>\n<p>\nIt took me a while to build it out but its done now.\n</p>\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/childofwar/2984345060/\" title=\"Happy Bokeh raining Day | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-3.jpg\" width=\"570\" height=\"270\" alt=\"Slide 3\"></a>\n<div class=\"caption\">\nHappy Bokeh raining Day\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/b-tal/117037943/\" title=\"We Eat Light | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-4.jpg\" width=\"570\" height=\"270\" alt=\"Slide 4\"></a>\n<div class=\"caption\">\nWe Eat Light\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/bu7amd/3447416780/\" title=\"&amp;ldquo;I must go down to the sea again, to the lonely sea and the sky; and all I ask is a tall ship and a star to steer her by.&amp;rdquo; | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-5.jpg\" width=\"570\" height=\"270\" alt=\"Slide 5\"></a>\n<div class=\"caption\">\n&amp;ldquo;I must go down to the sea again, to the lonely sea and the sky...&amp;rdquo;\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/streetpreacher/2078765853/\" title=\"twelve.inch | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-6.jpg\" width=\"570\" height=\"270\" alt=\"Slide 6\"></a>\n<div class=\"caption\">\ntwelve.inch\n</div>\n</div>\n<div class=\"slide\">\n<a href=\"http://www.flickr.com/photos/aftab/3152515428/\" title=\"Save my love for loneliness | Flickr - Photo Sharing!\" target=\"_blank\"><img src=\"/images/slidesjs/slide-7.jpg\" width=\"570\" height=\"270\" alt=\"Slide 7\"></a>\n<div class=\"caption\">\nSave my love for loneliness\n</div>\n</div>\n</div>\n<a href=\"#\" class=\"prev\"><img src=\"/images/slidesjs/arrow-prev.png\" width=\"24\" height=\"43\" alt=\"Arrow Prev\"></a>\n<a href=\"#\" class=\"next\"><img src=\"/images/slidesjs/arrow-next.png\" width=\"24\" height=\"43\" alt=\"Arrow Next\"></a>\n</div>\n<img src=\"/images/slidesjs/example-frame.png\" width=\"739\" height=\"341\" alt=\"Example Frame\" id=\"frame\">\n</div>\n</div>\n<div id=\"project-description\">\n</div>\n```\nThe css shown below is very minimal and uses nothing out of the ordinary\n```css\n#container {\n  width:580px;\npadding:10px;\nmargin:0 auto;\nposition:relative;\n         z-index:0;\n}\n\n#example {\nwidth:600px;\nheight:350px;\nposition:relative;\n}\n\n#frame {\nposition:absolute;\n         z-index:0;\nwidth:739px;\nheight:341px;\ntop:-3px;\nleft:-80px;\n}\n\n/*\n   Slideshow\n */\n#slides {\nposition:absolute;\ntop:15px;\nleft:4px;\n     z-index:100;\n}\n\n/*\n   Slides container\nImportant:\nSet the width of your slides container\nSet to display none, prevents content flash\n */\n.slides_container {\nwidth:570px;\noverflow:hidden;\nposition:relative;\ndisplay:none;\n}\n\n/*\n   Each slide\nImportant:\nSet the width of your slides\nIf height not specified height will be set by the slide content\nSet to display block\n */\n.slides_container div.slide {\nwidth:570px;\nheight:270px;\ndisplay:block;\n}\n\n\n/*\n   Next/prev buttons\n */\n#slides .next,#slides .prev {\nposition:absolute;\ntop:107px;\nleft:-39px;\nwidth:24px;\nheight:43px;\ndisplay:block;\n        z-index:101;\n}\n\n#slides .next {\nleft:585px;\n}\n\n/*\n   Pagination\n */\n.pagination {\nmargin:26px auto 0;\nwidth:100px;\n}\n\n.pagination li {\nfloat:left;\nmargin:0 1px;\n       list-style:none;\n}\n\n.pagination li a {\ndisplay:block;\nwidth:12px;\nheight:0;\n       padding-top:12px;\n       background-image:url(/images/slidesjs/pagination.png);\n       background-position:0 0;\nfloat:left;\noverflow:hidden;\n}\n\n.pagination li.current a {\n  background-position:0 -12px;\n}\n```\nFinally here is the javascript code for the projects page which calls the slidesjs library animation functions.\nThe main addition here is the showDescription(), it takes the div tag I mentioned before and extracts the current visible slides' content and displays it on every page transition.\n```javascript\n$(function(){\n    $('#slides').slides({\npreload: true,\npreloadImage: '/images/slidesjs/loading.gif',\nplay: 0,\npause: 2500,\nhoverPause: true,\nanimationStart: function(current){\n},\nanimationComplete: function(current){\nshowDescription();\n},\nslidesLoaded: function() {\nshowDescription();\n}\n});\n\n    function showDescription() {\n    //slide content\n    var $sc = $('div.slide').filter(function() {\n        return this.style.display !== 'none';\n        });\n    //caption\n    var cap = $sc.children('div.caption').html();\n    $('div#project-description').html(cap);\n    }\n});\n```\nOf particular merit here is the jquery filter function. \nWhat this allows us to do is to basically only extract the sole visible slide from the div holding the slides by looking at the display property.\n\nIn addition the jquery children function lets us run what is basically a sub-query on a given jquery object.\nFrom my perspective I could have easily just included the children search in the original query but I tend to keep queries short and simple to help the code remain easy to read.\n\nWell that about wraps up how I put together the projects page... be sure to visit the projects page every once in a while.\n","slug":"newprojectspage","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3hj000oyswv8sj9fr4z","layout":"post","photos":[],"link":"","content":"<p>I used some interesting jquery tricks(at least to me) to make the projects page more visually appealing; read on to learn how it was made. This is the beginning of a series on updates to the overall blog that I will post as I continue to learn more about both the Ruby Jekyll gem and web design in general.</p>\n<a id=\"more\"></a>\n<p>The projects page was designed using jquery and a neat javascript library called slidesjs<a href=\"http://slidesjs.com/\" target=\"_blank\" rel=\"external\">(slidesjs.com)</a>.<br>Slidesjs is a simple yet elegant slideshow library with many special features such as the ability to add captions and various transition effects to your slides.</p>\n<p>I choose to use it mainly because I found the documentaion well prepared<a href=\"http://slidesjs.com/#docs\" target=\"_blank\" rel=\"external\">(slidesjs.com/#doc)</a>, on the site you’ll find the rest of the features I won’t touch on in this article.This first part of the project page is the underlying html file, in this file you’ll notice the structure of the main div tag which holds the sildes_container. From within the slides_container you just add your slides and content as a div tag with the class slide; and from there you can put whatever you want into it.</p>\n<p>Below is a copy of an early version of the projects page which was adapted from the “images with captions” example from slidesjs.<br>The only real change I made(excluding the image sources and caption content) is the last div tag at the bottom, <div id=\"project-description\"> this div tag allows me to swap out the contents of the projects page as you move across the slideshow using jquery which we’ll cover after the CSS bit.</div></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"slides\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slides_container\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/jliba/4665625073/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"145.365 - Happy Bokeh Thursday! | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-1.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"bottom:0\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Project A<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"foeafjoljf\"</span>&gt;</span>Live Demo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;nbsp;|&amp;nbsp;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"foeafjoljf\"</span>&gt;</span>GitHub<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">This is just a test to check things out.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/stephangeyer/3020487807/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Taxi | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-2.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Project B<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"foeafjoljf\"</span>&gt;</span>Buy it on Google Play<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;nbsp;|&amp;nbsp;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"foeafjoljf\"</span>&gt;</span>GitHub<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">It took me a while to build it out but its done now.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/childofwar/2984345060/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Happy Bokeh raining Day | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-3.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\">Happy Bokeh raining Day</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/b-tal/117037943/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"We Eat Light | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-4.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\">We Eat Light</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/bu7amd/3447416780/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&amp;amp;ldquo;I must go down to the sea again, to the lonely sea and the sky; and all I ask is a tall ship and a star to steer her by.&amp;amp;rdquo; | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-5.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\">&amp;amp;ldquo;I must go down to the sea again, to the lonely sea and the sky...&amp;amp;rdquo;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/streetpreacher/2078765853/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"twelve.inch | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-6.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 6\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\">twelve.inch</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/aftab/3152515428/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Save my love for loneliness | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-7.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 7\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\">Save my love for loneliness</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prev\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/arrow-prev.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"24\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"43\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Arrow Prev\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/arrow-next.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"24\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"43\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Arrow Next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/example-frame.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"739\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"341\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Example Frame\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"frame\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"project-description\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The css shown below is very minimal and uses nothing out of the ordinary<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">580px</span>;</div><div class=\"line\"><span class=\"attribute\">padding</span>:<span class=\"number\">10px</span>;</div><div class=\"line\"><span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</div><div class=\"line\"><span class=\"attribute\">position</span>:relative;</div><div class=\"line\">         <span class=\"attribute\">z-index</span>:<span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#example</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">600px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">350px</span>;</div><div class=\"line\"><span class=\"attribute\">position</span>:relative;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#frame</span> &#123;</div><div class=\"line\"><span class=\"attribute\">position</span>:absolute;</div><div class=\"line\">         <span class=\"attribute\">z-index</span>:<span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">739px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">341px</span>;</div><div class=\"line\"><span class=\"attribute\">top</span>:-<span class=\"number\">3px</span>;</div><div class=\"line\"><span class=\"attribute\">left</span>:-<span class=\"number\">80px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">   Slideshow</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"selector-id\">#slides</span> &#123;</div><div class=\"line\"><span class=\"attribute\">position</span>:absolute;</div><div class=\"line\"><span class=\"attribute\">top</span>:<span class=\"number\">15px</span>;</div><div class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">4px</span>;</div><div class=\"line\">     <span class=\"attribute\">z-index</span>:<span class=\"number\">100</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">   Slides container</div><div class=\"line\">Important:</div><div class=\"line\">Set the width of your slides container</div><div class=\"line\">Set to display none, prevents content flash</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"selector-class\">.slides_container</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">570px</span>;</div><div class=\"line\"><span class=\"attribute\">overflow</span>:hidden;</div><div class=\"line\"><span class=\"attribute\">position</span>:relative;</div><div class=\"line\"><span class=\"attribute\">display</span>:none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">   Each slide</div><div class=\"line\">Important:</div><div class=\"line\">Set the width of your slides</div><div class=\"line\">If height not specified height will be set by the slide content</div><div class=\"line\">Set to display block</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"selector-class\">.slides_container</span> <span class=\"selector-tag\">div</span><span class=\"selector-class\">.slide</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">570px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">270px</span>;</div><div class=\"line\"><span class=\"attribute\">display</span>:block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">   Next/prev buttons</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"selector-id\">#slides</span> <span class=\"selector-class\">.next</span>,<span class=\"selector-id\">#slides</span> <span class=\"selector-class\">.prev</span> &#123;</div><div class=\"line\"><span class=\"attribute\">position</span>:absolute;</div><div class=\"line\"><span class=\"attribute\">top</span>:<span class=\"number\">107px</span>;</div><div class=\"line\"><span class=\"attribute\">left</span>:-<span class=\"number\">39px</span>;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">24px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">43px</span>;</div><div class=\"line\"><span class=\"attribute\">display</span>:block;</div><div class=\"line\">        <span class=\"attribute\">z-index</span>:<span class=\"number\">101</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#slides</span> <span class=\"selector-class\">.next</span> &#123;</div><div class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">585px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">   Pagination</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"selector-class\">.pagination</span> &#123;</div><div class=\"line\"><span class=\"attribute\">margin</span>:<span class=\"number\">26px</span> auto <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.pagination</span> <span class=\"selector-tag\">li</span> &#123;</div><div class=\"line\"><span class=\"attribute\">float</span>:left;</div><div class=\"line\"><span class=\"attribute\">margin</span>:<span class=\"number\">0</span> <span class=\"number\">1px</span>;</div><div class=\"line\">       <span class=\"attribute\">list-style</span>:none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.pagination</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\"><span class=\"attribute\">display</span>:block;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">12px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"attribute\">padding-top</span>:<span class=\"number\">12px</span>;</div><div class=\"line\">       <span class=\"attribute\">background-image</span>:<span class=\"built_in\">url</span>(/images/slidesjs/pagination.png);</div><div class=\"line\">       <span class=\"attribute\">background-position</span>:<span class=\"number\">0</span> <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"attribute\">float</span>:left;</div><div class=\"line\"><span class=\"attribute\">overflow</span>:hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.pagination</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.current</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-position</span>:<span class=\"number\">0</span> -<span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Finally here is the javascript code for the projects page which calls the slidesjs library animation functions.<br>The main addition here is the showDescription(), it takes the div tag I mentioned before and extracts the current visible slides’ content and displays it on every page transition.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#slides'</span>).slides(&#123;</div><div class=\"line\"><span class=\"attr\">preload</span>: <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">preloadImage</span>: <span class=\"string\">'/images/slidesjs/loading.gif'</span>,</div><div class=\"line\"><span class=\"attr\">play</span>: <span class=\"number\">0</span>,</div><div class=\"line\"><span class=\"attr\">pause</span>: <span class=\"number\">2500</span>,</div><div class=\"line\"><span class=\"attr\">hoverPause</span>: <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">animationStart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">current</span>)</span>&#123;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">animationComplete</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">current</span>)</span>&#123;</div><div class=\"line\">showDescription();</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">slidesLoaded</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">showDescription();</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showDescription</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//slide content</span></div><div class=\"line\">    <span class=\"keyword\">var</span> $sc = $(<span class=\"string\">'div.slide'</span>).filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.style.display !== <span class=\"string\">'none'</span>;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    <span class=\"comment\">//caption</span></div><div class=\"line\">    <span class=\"keyword\">var</span> cap = $sc.children(<span class=\"string\">'div.caption'</span>).html();</div><div class=\"line\">    $(<span class=\"string\">'div#project-description'</span>).html(cap);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Of particular merit here is the jquery filter function.<br>What this allows us to do is to basically only extract the sole visible slide from the div holding the slides by looking at the display property.</p>\n<p>In addition the jquery children function lets us run what is basically a sub-query on a given jquery object.<br>From my perspective I could have easily just included the children search in the original query but I tend to keep queries short and simple to help the code remain easy to read.</p>\n<p>Well that about wraps up how I put together the projects page… be sure to visit the projects page every once in a while.</p>\n","site":{"data":{}},"excerpt":"<p>I used some interesting jquery tricks(at least to me) to make the projects page more visually appealing; read on to learn how it was made. This is the beginning of a series on updates to the overall blog that I will post as I continue to learn more about both the Ruby Jekyll gem and web design in general.</p>","more":"<p>The projects page was designed using jquery and a neat javascript library called slidesjs<a href=\"http://slidesjs.com/\">(slidesjs.com)</a>.<br>Slidesjs is a simple yet elegant slideshow library with many special features such as the ability to add captions and various transition effects to your slides.</p>\n<p>I choose to use it mainly because I found the documentaion well prepared<a href=\"http://slidesjs.com/#docs\">(slidesjs.com/#doc)</a>, on the site you’ll find the rest of the features I won’t touch on in this article.This first part of the project page is the underlying html file, in this file you’ll notice the structure of the main div tag which holds the sildes_container. From within the slides_container you just add your slides and content as a div tag with the class slide; and from there you can put whatever you want into it.</p>\n<p>Below is a copy of an early version of the projects page which was adapted from the “images with captions” example from slidesjs.<br>The only real change I made(excluding the image sources and caption content) is the last div tag at the bottom, <div id=\"project-description\"> this div tag allows me to swap out the contents of the projects page as you move across the slideshow using jquery which we’ll cover after the CSS bit.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"slides\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slides_container\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/jliba/4665625073/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"145.365 - Happy Bokeh Thursday! | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-1.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"bottom:0\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Project A<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"foeafjoljf\"</span>&gt;</span>Live Demo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;nbsp;|&amp;nbsp;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"foeafjoljf\"</span>&gt;</span>GitHub<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">This is just a test to check things out.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/stephangeyer/3020487807/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Taxi | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-2.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Project B<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"foeafjoljf\"</span>&gt;</span>Buy it on Google Play<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;nbsp;|&amp;nbsp;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"foeafjoljf\"</span>&gt;</span>GitHub<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">It took me a while to build it out but its done now.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/childofwar/2984345060/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Happy Bokeh raining Day | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-3.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\">Happy Bokeh raining Day</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/b-tal/117037943/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"We Eat Light | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-4.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\">We Eat Light</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/bu7amd/3447416780/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&amp;amp;ldquo;I must go down to the sea again, to the lonely sea and the sky; and all I ask is a tall ship and a star to steer her by.&amp;amp;rdquo; | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-5.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\">&amp;amp;ldquo;I must go down to the sea again, to the lonely sea and the sky...&amp;amp;rdquo;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/streetpreacher/2078765853/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"twelve.inch | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-6.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 6\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\">twelve.inch</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.flickr.com/photos/aftab/3152515428/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Save my love for loneliness | Flickr - Photo Sharing!\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/slide-7.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"570\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"270\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Slide 7\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"caption\"</span>&gt;</span></div><div class=\"line\">Save my love for loneliness</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prev\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/arrow-prev.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"24\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"43\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Arrow Prev\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/arrow-next.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"24\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"43\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Arrow Next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/images/slidesjs/example-frame.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"739\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"341\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Example Frame\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"frame\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"project-description\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The css shown below is very minimal and uses nothing out of the ordinary<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">580px</span>;</div><div class=\"line\"><span class=\"attribute\">padding</span>:<span class=\"number\">10px</span>;</div><div class=\"line\"><span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto;</div><div class=\"line\"><span class=\"attribute\">position</span>:relative;</div><div class=\"line\">         <span class=\"attribute\">z-index</span>:<span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#example</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">600px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">350px</span>;</div><div class=\"line\"><span class=\"attribute\">position</span>:relative;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#frame</span> &#123;</div><div class=\"line\"><span class=\"attribute\">position</span>:absolute;</div><div class=\"line\">         <span class=\"attribute\">z-index</span>:<span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">739px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">341px</span>;</div><div class=\"line\"><span class=\"attribute\">top</span>:-<span class=\"number\">3px</span>;</div><div class=\"line\"><span class=\"attribute\">left</span>:-<span class=\"number\">80px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">   Slideshow</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"selector-id\">#slides</span> &#123;</div><div class=\"line\"><span class=\"attribute\">position</span>:absolute;</div><div class=\"line\"><span class=\"attribute\">top</span>:<span class=\"number\">15px</span>;</div><div class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">4px</span>;</div><div class=\"line\">     <span class=\"attribute\">z-index</span>:<span class=\"number\">100</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">   Slides container</div><div class=\"line\">Important:</div><div class=\"line\">Set the width of your slides container</div><div class=\"line\">Set to display none, prevents content flash</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"selector-class\">.slides_container</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">570px</span>;</div><div class=\"line\"><span class=\"attribute\">overflow</span>:hidden;</div><div class=\"line\"><span class=\"attribute\">position</span>:relative;</div><div class=\"line\"><span class=\"attribute\">display</span>:none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">   Each slide</div><div class=\"line\">Important:</div><div class=\"line\">Set the width of your slides</div><div class=\"line\">If height not specified height will be set by the slide content</div><div class=\"line\">Set to display block</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"selector-class\">.slides_container</span> <span class=\"selector-tag\">div</span><span class=\"selector-class\">.slide</span> &#123;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">570px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">270px</span>;</div><div class=\"line\"><span class=\"attribute\">display</span>:block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">   Next/prev buttons</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"selector-id\">#slides</span> <span class=\"selector-class\">.next</span>,<span class=\"selector-id\">#slides</span> <span class=\"selector-class\">.prev</span> &#123;</div><div class=\"line\"><span class=\"attribute\">position</span>:absolute;</div><div class=\"line\"><span class=\"attribute\">top</span>:<span class=\"number\">107px</span>;</div><div class=\"line\"><span class=\"attribute\">left</span>:-<span class=\"number\">39px</span>;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">24px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">43px</span>;</div><div class=\"line\"><span class=\"attribute\">display</span>:block;</div><div class=\"line\">        <span class=\"attribute\">z-index</span>:<span class=\"number\">101</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#slides</span> <span class=\"selector-class\">.next</span> &#123;</div><div class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">585px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">   Pagination</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"selector-class\">.pagination</span> &#123;</div><div class=\"line\"><span class=\"attribute\">margin</span>:<span class=\"number\">26px</span> auto <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.pagination</span> <span class=\"selector-tag\">li</span> &#123;</div><div class=\"line\"><span class=\"attribute\">float</span>:left;</div><div class=\"line\"><span class=\"attribute\">margin</span>:<span class=\"number\">0</span> <span class=\"number\">1px</span>;</div><div class=\"line\">       <span class=\"attribute\">list-style</span>:none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.pagination</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\"><span class=\"attribute\">display</span>:block;</div><div class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">12px</span>;</div><div class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"attribute\">padding-top</span>:<span class=\"number\">12px</span>;</div><div class=\"line\">       <span class=\"attribute\">background-image</span>:<span class=\"built_in\">url</span>(/images/slidesjs/pagination.png);</div><div class=\"line\">       <span class=\"attribute\">background-position</span>:<span class=\"number\">0</span> <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"attribute\">float</span>:left;</div><div class=\"line\"><span class=\"attribute\">overflow</span>:hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.pagination</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.current</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-position</span>:<span class=\"number\">0</span> -<span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Finally here is the javascript code for the projects page which calls the slidesjs library animation functions.<br>The main addition here is the showDescription(), it takes the div tag I mentioned before and extracts the current visible slides’ content and displays it on every page transition.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#slides'</span>).slides(&#123;</div><div class=\"line\"><span class=\"attr\">preload</span>: <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">preloadImage</span>: <span class=\"string\">'/images/slidesjs/loading.gif'</span>,</div><div class=\"line\"><span class=\"attr\">play</span>: <span class=\"number\">0</span>,</div><div class=\"line\"><span class=\"attr\">pause</span>: <span class=\"number\">2500</span>,</div><div class=\"line\"><span class=\"attr\">hoverPause</span>: <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">animationStart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">current</span>)</span>&#123;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">animationComplete</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">current</span>)</span>&#123;</div><div class=\"line\">showDescription();</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">slidesLoaded</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">showDescription();</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showDescription</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//slide content</span></div><div class=\"line\">    <span class=\"keyword\">var</span> $sc = $(<span class=\"string\">'div.slide'</span>).filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.style.display !== <span class=\"string\">'none'</span>;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    <span class=\"comment\">//caption</span></div><div class=\"line\">    <span class=\"keyword\">var</span> cap = $sc.children(<span class=\"string\">'div.caption'</span>).html();</div><div class=\"line\">    $(<span class=\"string\">'div#project-description'</span>).html(cap);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Of particular merit here is the jquery filter function.<br>What this allows us to do is to basically only extract the sole visible slide from the div holding the slides by looking at the display property.</p>\n<p>In addition the jquery children function lets us run what is basically a sub-query on a given jquery object.<br>From my perspective I could have easily just included the children search in the original query but I tend to keep queries short and simple to help the code remain easy to read.</p>\n<p>Well that about wraps up how I put together the projects page… be sure to visit the projects page every once in a while.</p>"},{"title":"Patomic - A PHP Library For The Datomic REST Client","date":"2014-07-02T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/patomicbeta.jpg","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/patomicbeta.jpg","comments":0,"_content":"Its been about six months since I started building a PHP library to help PHP devs interact with the Datomic REST API. Over one hundred commits later I finnally released the beta version of the project to the public. I announced it on Reddit's PHP developers subreddit and as expected it didn't generate a lot of interest. However, on the other hand Patomic was quite exciting to build and really kept my PHP skills razor sharp.\n\n<!-- more -->\n## Patomic - A PHP Library For The Datomic REST Client\n\n### Some links to Patomic on the web\n\n- The official GitHub repo can be found at [http://github.com/taywils/patomic](http://github.com/taywils/patomic)\n\n- The discussion thread on Reddit is at [http://www.reddit.com/r/PHP/](http://www.reddit.com/r/PHP/comments/2a28uu/patomic_an_object_oriented_interface_for_the/)\n\n### My thoughts on finally releasing an open source library\nIn short Patomic was a huge step for me in terms of becoming a better software developer. Ever since I began taking coding seriously in 2011 I was always impressed by the sheer quality and vast number of open source tools, utilities, libraries, frameworks etc... that were just freely available for anyone to download and use. This occured to me when I first started coding in Ruby after having only written C and C++ while using Rubygems. I knew instantly that the Ruby community took a bold step when it integrated the package manager into the core language itself; all of a sudden everyone was hacking on crazy offbeat gems and Ruby I believe at one point was the most popular language on GitHub most likely for that very reason. Anyways aside from my early facination with open source tools I tried several times to create a re-usable library or large project of sorts but always fell short of just completing something or quit when I got to the boring parts. \n\n<blockquote>\nIf there is one thing to take away from building my first open source project its that persistence is key. There were many times when I just wanted to quit, start something new, go work on other code or just shrug and call it a night. Looking back at the GitHub commits the codebase changed so much over the course of the project and it just goes to show you how much time went into re-thinking and refactoring the scope of the project.\n</blockquote>\n\nFor instance look at this here blog, its been a work in progress since about 2011 and this current iteration is the 3rd complete re-write. I often tell myself over and over that one day I'll just sit down and make it mobile responsive but for some reason I never find the time or some other lame excuse. Anyways as you can tell from the timing of this blog post that its important to just commit to a task and endure the boring aspects. Along the way you'll pick up brand new skills, possibly meet new people and who knows it just might open up some interesting opportunities.\n","source":"_posts/patomicbeta.md","raw":"---\ntitle: Patomic - A PHP Library For The Datomic REST Client\ndate: 2014-07-02\ntags: [php]\ncategories: [open-source, project, datomic]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/patomicbeta.jpg\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/patomicbeta.jpg\ncomments: false\n---\nIts been about six months since I started building a PHP library to help PHP devs interact with the Datomic REST API. Over one hundred commits later I finnally released the beta version of the project to the public. I announced it on Reddit's PHP developers subreddit and as expected it didn't generate a lot of interest. However, on the other hand Patomic was quite exciting to build and really kept my PHP skills razor sharp.\n\n<!-- more -->\n## Patomic - A PHP Library For The Datomic REST Client\n\n### Some links to Patomic on the web\n\n- The official GitHub repo can be found at [http://github.com/taywils/patomic](http://github.com/taywils/patomic)\n\n- The discussion thread on Reddit is at [http://www.reddit.com/r/PHP/](http://www.reddit.com/r/PHP/comments/2a28uu/patomic_an_object_oriented_interface_for_the/)\n\n### My thoughts on finally releasing an open source library\nIn short Patomic was a huge step for me in terms of becoming a better software developer. Ever since I began taking coding seriously in 2011 I was always impressed by the sheer quality and vast number of open source tools, utilities, libraries, frameworks etc... that were just freely available for anyone to download and use. This occured to me when I first started coding in Ruby after having only written C and C++ while using Rubygems. I knew instantly that the Ruby community took a bold step when it integrated the package manager into the core language itself; all of a sudden everyone was hacking on crazy offbeat gems and Ruby I believe at one point was the most popular language on GitHub most likely for that very reason. Anyways aside from my early facination with open source tools I tried several times to create a re-usable library or large project of sorts but always fell short of just completing something or quit when I got to the boring parts. \n\n<blockquote>\nIf there is one thing to take away from building my first open source project its that persistence is key. There were many times when I just wanted to quit, start something new, go work on other code or just shrug and call it a night. Looking back at the GitHub commits the codebase changed so much over the course of the project and it just goes to show you how much time went into re-thinking and refactoring the scope of the project.\n</blockquote>\n\nFor instance look at this here blog, its been a work in progress since about 2011 and this current iteration is the 3rd complete re-write. I often tell myself over and over that one day I'll just sit down and make it mobile responsive but for some reason I never find the time or some other lame excuse. Anyways as you can tell from the timing of this blog post that its important to just commit to a task and endure the boring aspects. Along the way you'll pick up brand new skills, possibly meet new people and who knows it just might open up some interesting opportunities.\n","slug":"patomicbeta","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3hm000syswvqh5y81lx","layout":"post","photos":[],"link":"","content":"<p>Its been about six months since I started building a PHP library to help PHP devs interact with the Datomic REST API. Over one hundred commits later I finnally released the beta version of the project to the public. I announced it on Reddit’s PHP developers subreddit and as expected it didn’t generate a lot of interest. However, on the other hand Patomic was quite exciting to build and really kept my PHP skills razor sharp.</p>\n<a id=\"more\"></a>\n<h2 id=\"Patomic-A-PHP-Library-For-The-Datomic-REST-Client\"><a href=\"#Patomic-A-PHP-Library-For-The-Datomic-REST-Client\" class=\"headerlink\" title=\"Patomic - A PHP Library For The Datomic REST Client\"></a>Patomic - A PHP Library For The Datomic REST Client</h2><h3 id=\"Some-links-to-Patomic-on-the-web\"><a href=\"#Some-links-to-Patomic-on-the-web\" class=\"headerlink\" title=\"Some links to Patomic on the web\"></a>Some links to Patomic on the web</h3><ul>\n<li><p>The official GitHub repo can be found at <a href=\"http://github.com/taywils/patomic\" target=\"_blank\" rel=\"external\">http://github.com/taywils/patomic</a></p>\n</li>\n<li><p>The discussion thread on Reddit is at <a href=\"http://www.reddit.com/r/PHP/comments/2a28uu/patomic_an_object_oriented_interface_for_the/\" target=\"_blank\" rel=\"external\">http://www.reddit.com/r/PHP/</a></p>\n</li>\n</ul>\n<h3 id=\"My-thoughts-on-finally-releasing-an-open-source-library\"><a href=\"#My-thoughts-on-finally-releasing-an-open-source-library\" class=\"headerlink\" title=\"My thoughts on finally releasing an open source library\"></a>My thoughts on finally releasing an open source library</h3><p>In short Patomic was a huge step for me in terms of becoming a better software developer. Ever since I began taking coding seriously in 2011 I was always impressed by the sheer quality and vast number of open source tools, utilities, libraries, frameworks etc… that were just freely available for anyone to download and use. This occured to me when I first started coding in Ruby after having only written C and C++ while using Rubygems. I knew instantly that the Ruby community took a bold step when it integrated the package manager into the core language itself; all of a sudden everyone was hacking on crazy offbeat gems and Ruby I believe at one point was the most popular language on GitHub most likely for that very reason. Anyways aside from my early facination with open source tools I tried several times to create a re-usable library or large project of sorts but always fell short of just completing something or quit when I got to the boring parts. </p>\n<blockquote><br>If there is one thing to take away from building my first open source project its that persistence is key. There were many times when I just wanted to quit, start something new, go work on other code or just shrug and call it a night. Looking back at the GitHub commits the codebase changed so much over the course of the project and it just goes to show you how much time went into re-thinking and refactoring the scope of the project.<br></blockquote>\n\n<p>For instance look at this here blog, its been a work in progress since about 2011 and this current iteration is the 3rd complete re-write. I often tell myself over and over that one day I’ll just sit down and make it mobile responsive but for some reason I never find the time or some other lame excuse. Anyways as you can tell from the timing of this blog post that its important to just commit to a task and endure the boring aspects. Along the way you’ll pick up brand new skills, possibly meet new people and who knows it just might open up some interesting opportunities.</p>\n","site":{"data":{}},"excerpt":"<p>Its been about six months since I started building a PHP library to help PHP devs interact with the Datomic REST API. Over one hundred commits later I finnally released the beta version of the project to the public. I announced it on Reddit’s PHP developers subreddit and as expected it didn’t generate a lot of interest. However, on the other hand Patomic was quite exciting to build and really kept my PHP skills razor sharp.</p>","more":"<h2 id=\"Patomic-A-PHP-Library-For-The-Datomic-REST-Client\"><a href=\"#Patomic-A-PHP-Library-For-The-Datomic-REST-Client\" class=\"headerlink\" title=\"Patomic - A PHP Library For The Datomic REST Client\"></a>Patomic - A PHP Library For The Datomic REST Client</h2><h3 id=\"Some-links-to-Patomic-on-the-web\"><a href=\"#Some-links-to-Patomic-on-the-web\" class=\"headerlink\" title=\"Some links to Patomic on the web\"></a>Some links to Patomic on the web</h3><ul>\n<li><p>The official GitHub repo can be found at <a href=\"http://github.com/taywils/patomic\">http://github.com/taywils/patomic</a></p>\n</li>\n<li><p>The discussion thread on Reddit is at <a href=\"http://www.reddit.com/r/PHP/comments/2a28uu/patomic_an_object_oriented_interface_for_the/\">http://www.reddit.com/r/PHP/</a></p>\n</li>\n</ul>\n<h3 id=\"My-thoughts-on-finally-releasing-an-open-source-library\"><a href=\"#My-thoughts-on-finally-releasing-an-open-source-library\" class=\"headerlink\" title=\"My thoughts on finally releasing an open source library\"></a>My thoughts on finally releasing an open source library</h3><p>In short Patomic was a huge step for me in terms of becoming a better software developer. Ever since I began taking coding seriously in 2011 I was always impressed by the sheer quality and vast number of open source tools, utilities, libraries, frameworks etc… that were just freely available for anyone to download and use. This occured to me when I first started coding in Ruby after having only written C and C++ while using Rubygems. I knew instantly that the Ruby community took a bold step when it integrated the package manager into the core language itself; all of a sudden everyone was hacking on crazy offbeat gems and Ruby I believe at one point was the most popular language on GitHub most likely for that very reason. Anyways aside from my early facination with open source tools I tried several times to create a re-usable library or large project of sorts but always fell short of just completing something or quit when I got to the boring parts. </p>\n<blockquote><br>If there is one thing to take away from building my first open source project its that persistence is key. There were many times when I just wanted to quit, start something new, go work on other code or just shrug and call it a night. Looking back at the GitHub commits the codebase changed so much over the course of the project and it just goes to show you how much time went into re-thinking and refactoring the scope of the project.<br></blockquote>\n\n<p>For instance look at this here blog, its been a work in progress since about 2011 and this current iteration is the 3rd complete re-write. I often tell myself over and over that one day I’ll just sit down and make it mobile responsive but for some reason I never find the time or some other lame excuse. Anyways as you can tell from the timing of this blog post that its important to just commit to a task and endure the boring aspects. Along the way you’ll pick up brand new skills, possibly meet new people and who knows it just might open up some interesting opportunities.</p>"},{"title":"Java Spark Framework Tutorial","date":"2013-11-05T08:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/javasparkframeworktutorial.jpg","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/javasparkframeworktutorial.jpg","comments":0,"_content":"Some friends and I want build a large project in Java beginning early next year so in the meantime we all need to brush up on web development with Java. Although I've used Spring(which is awesome by the way) I wanted to explore some alternatives for building some lightweight MVC apps that can be rapidly developed without having to worry about the overhead of learning the Spring framework in depth. Thus I discovered Spark; a micro framework for Java.\n\n<!-- more -->\n## Setting up Java for web development\n\n### Before you begin download and install Git\n\n- [Download and install git](http://git-scm.com/)\n\n- The main GitRepo for this tutorial is [https://github.com/taywils/java_spark_tutorial](https://github.com/taywils/java_spark_tutorial)\n\n- So create a new directory on your machine, then change directory into it and run the following code\n\n```\ngit clone https://github.com/taywils/java_spark_tutorial.git .\n```\n\n- In order to follow along with each step of the tutorial we'll want to be able to pull down remote git branches into our local repo\n\n```\ngit fetch origin\n```\n\n- Run the following git command in order to list all remote branches or just browse the Java spark tutorial repo on Github [https://github.com/taywils/java_spark_tutorial](https://github.com/taywils/java_spark_tutorial)\n\n```\ngit branch -a\n```\n\n### Downloading the JRE and JDK\n\n- Check to see if you already have Java 7 installed on your machine by opening either terminal or command prompt and typing **java --version**\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_version_snap.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_version_snap.png\" alt=\"java version\"/></a>\n</div>\n\n<blockquote>\nIf you see a similiar result then you can skip this section and go to \"Configuring your IDE\" since you already have a working Java runtime.\n</blockquote>\n\n- Go to Java downloads page and follow the instructions [click here to dowload Java](https://java.com/en/download/index.jsp)\n\n- If you're still having trouble try adding the Java install directory to your environment HOME path or just Google how to install Java 7\n\n### Configuring your IDE\nAs for the choice of IDE, we have quite a few but I prefer to use IntelliJ IDEA by JetBrains. It supports Java and many other programming languages and it has superb documentation and a large community of developers who write amazing plugins.\n\n- [Download the community edition of IntelliJ for free](http://www.jetbrains.com/idea/free_java_ide.html)\n\n- If you plan on using Java professionally or are just frustrated by the lack of features on the community edition then you can purchase the professional edition as well.\n\n- Otherwise there is always [Eclipse](http://www.eclipse.org/) and [NetBeans](https://netbeans.org/)\n\n### Get Hello World running and configure Maven\nAssuming you chose to install the community edition of IntelliJ IDEA we'll get Hello World running just to make sure you have your Java Runtime and SDK setup correctly.\n\n- Open IntelliJ\n\n- From the main menu click the \"Configure\" icon, we are going to check to see if we have \"Maven\" configured as it will be used later.\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_create_new_project.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_create_new_project.png\" alt=\"create project\"/></a>\n</div>\n\n- On the configure screen click \"Plugins\"\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_menu.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_menu.png\" alt=\"plugins\"/></a>\n</div>\n\n- Verify that Maven is checked along with the Maven Integration Extension\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_maven_checked.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_maven_checked.png\" alt=\"maven checked\"/></a>\n</div>\n\n### Install Maven onto your machine\n\n- Open a web browser and [Download Apache Maven](http://maven.apache.org/download.cgi)\n\n- If you're using a Mac I recommend using Homebrew \n```\nbrew install maven\n```\n\n- Follow the instructions on how to test that you have it installed properly [Apache Maven in 5 Minutes](http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html)\n\n<blockquote class=\"quote\">\nApache Maven is wonderfully complex and powerful tool used by Java developers for everything from build automation to project package installation and versioning to running your JUnit tests. For the most part we'll be using it as a package manager similar to Ruby gem, PHP composer and or C# NuGet.\n</blockquote>\n\n### Setup Maven for IntelliJ \n\n- So far so good, now go back to the IntelliJ home screen click \"Create New Project\"\n\n- On create project screen you might see a bunch of options on the leftmost sidebar but the one we want to select is *Maven Module* under the \"Java\" heading\n\n- IntelliJ will then create a new project for us alredy setup for using Maven to manage our external dependencies.\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_new_project_select.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_new_project_select.png\" alt=\"new maven project\"/></a>\n</div>\n\n- Once the new project has been created I named mine \"Sparkle\" figure out how to open \"Project Settings\" for your project, you should see \"Maven\" from the list of Settings and your screen will resemble the images below.\n\n- For Windows users you'll want to set your \"M2 HOME\" by adding the Maven install folder path to the system environment variables. You'll then not have to explicitly set a M2 Home from the settings screen\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_windows.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_windows.png\" alt=\"windows maven settings\"/></a>\n</div>\n\n- For Linux users it will be some variation of /usr/share or whatever your distribution did with the Maven install but the below is my setup for Ubuntu 12 \n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_linux.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_linux.png\" alt=\"linux maven settings\"/></a>\n</div>\n\n- On Mac OSX it will probably be very similar to Linux\n\n<blockquote>\nDo not think for one second that just because IntelliJ can manage your Maven that you shouldn't learn how to use the Maven command line interface.\nThe Maven cli is pretty robust and is what your IDE calls in the background anyways so don't be lazy... actually I take that back... be lazy\n</blockquote>\n\n### Hello World...\n```\ngit checkout -b hello_step_1 origin/hello_step_1 \n```\n\n- Now that we've setup Maven we're just going to create a quick hello world program. From the Project sidebar click src -> main and then right click the \"java\" folder\n\n- Create a new class file and name it \"HelloSpark\"\n\n- Now enter the code\n\n<script src=\"https://gist.github.com/taywils/7332503.js\"> </script>\n\n- Next from the top toolbar click Build -> Make Project\n\n- Then right next to Build on the toolbar click Run -> Run 'Hello Spark'\n\n- If you don't get something like shown in the image below then you probably misconfigured your Java or IntelliJ settings. Please seek advanced troubleshooting on StackOverflow or the IntelliJ documentation.\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_hellospark_hello_world.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_hellospark_hello_world.png\" alt=\"Hello World\"/></a>\n</div>\n\n## Running the Spark demo app\n\n```\ngit checkout -b spark_demo_step_1 origin/spark_demo_step_1\n```\n\n- Lets begin by modifying our Hello world class file to use the Spark framework so we can get started with Java web development\n\n<div align=\"center\">\n<a href=\"http://www.sparkjava.com/index.html\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_logo.png\" alt=\"Spark A Java MVC micro framework\"/></a>\n</div>\n\n- Maven allows us to include external dependencies within our projects via the _pom.xml_ file. So open up the _pom.xml_ file and add the dependency for Spark.\n\n<script src=\"https://gist.github.com/taywils/7366389.js\"> </script>\n\n- From Intellij when you make a change to a Maven pom.xml file you can set it to \"enable auto-import\" so it refreshes your Maven dependencies when you update your pom.xml\n\n```\ngit checkout -b spark_demo_step_2 origin/spark_demo_step_2\n```\n\n- Next open up HelloSpark.java and remove all the existing code... replace it with the snippet below\n\n<script src=\"https://gist.github.com/taywils/7366522.js\"> </script>\n\n<blockquote>\nJust in case you were curious you'll note that the Spark documentation uses \"import static\" so [here is a brief explaination of import static](http://stackoverflow.com/questions/162187/what-does-the-static-modifier-after-import-mean). In short you can uses a class' static methods without explicitly typing the classname; beware of its pitfalls though.\n</blockquote>\n\n- Now from within IntelliJ click Run -> \"run 'HelloSpark' from the top menu, the code will startup and then it will let you know that Spark is currently running on some port most likely localhost:4567\n\n- Launch a new web browser window and goto [http://localhost:4567/hello](http://localhost:4567/hello)\n\n- Congrats!!! You are now a super web developer!\n\n<blockquote>\nSo how does that work? Like many MVC applications Spark provides us a basic router to let our app respond to HTTP requests. Of the four most commonly used are GET PUT POST DELETE. Those four HTTP request types when used in conjunction with the HTTP Header(s) for the request such as Content-type: application/json and or application/x-www-form-urlencoded allow us to capture and handle all sorts of browser request. For a good [introduction to HTTP and REST see the article on net.tutsplus](http://net.tutsplus.com/tutorials/other/a-beginners-introduction-to-http-and-rest/)\n</blockquote>\n\n- For some more fun play around with some of the basic features you can do with Route such as capturing user supplied parameters and or adding new routes\n\n```\ngit checkout -b spark_demo_step_3 origin/spark_demo_step_3\n```\n\n<script src=\"https://gist.github.com/taywils/7366801.js\"> </script>\n\n- Next lets introduce the POST request. We're going to use POST to store some data and then display it as a list. This example is very crude and will help us segway into mini blog tutorial further on in the article.\n\n```\ngit checkout -b spark_demo_step_4 origin/spark_demo_step_4\n```\n\n- In the snippet of code below we use a POST request on the route _/add/:item_ to add things to our list and then use GET on the route _/list_ to display them\n\n<script src=\"https://gist.github.com/taywils/7367126.js\"> </script>\n\n- So update your HelloSpark.java file, press build and then run the code. Launch your web browser and goto [http://localhost:4567/list](http://localhost:4567/list)\n\n- You should be greeted by our message \"Try adding some things to your list\"\n\n- Now you might be tempted to try navigating to [http://localhost:4567/add/bananas](http://localhost:4567/add/bananas) or something \n\n<blockquote>\n__BUT THAT WON'T WORK AT ALL!__\n</blockquote>\n\n- When we visit urls from our web browser we by default use the GET request so http://www.google.com calls the GET request on some google webserver somewhere.\n\n<blockquote>\nIf you're puzzled as to why you hit a 404 page when we clearly defined a POST route to /add/ you've just discovered that our application will only route POST request to a post handler method. To fix this we should actually send a HTTP POST request instead of using GET.\n</blockquote>\n\n- To send a POST request open a terminal window and use _curl_ or if you're on a windows machine use PowerShell _yes I said PowerShell please stop using command prompt_\n\n```\ncurl -X POST http://localhost:4567/add/apples\n```\n\n```\nInvoke-RestMethod -Uri http://localhost:4567/add/apples -Method POST \n```\n\n- Try making a few POST request and thing go back to [http://localhost:4567/list](http://localhost:4567/list) and be amazed\n\n## CRUD Example: A Blog\n\n<blockquote>\nWithin this section we'll be creating a basic blog application that will eventually grow more complex as we add more features. Its important to start off slow so the first iteration of the blog will be very concise and perform just the bare minium in order to function. Being a CRUD app each aspect of CRUD will be explored.\n</blockquote>\n\n- Before we start our blog application will need an object representation of an Article. Our article will have title, summary and content for now. Article.java is just plain old Java so there really isn't much to get excited about; the MVC web stuff will follow.\n\n- Within the same package as _HelloSpark.java_ create the file _Article.java_\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_project_display.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_project_display.png\" alt=\"Project structure with Article.java\"/></a>\n</div>\n\n<script src=\"https://gist.github.com/taywils/7393394.js\"> </script>\n\n### Create\n\n- Return to your HelloSpark.java code and delete everything making sure you're starting off with a clean slate\n\n```\ngit checkout -b spark_blog_step_1 origin/spark_blog_step_1 \n```\n\n- We'll begin by importing all of the necessary files which include the spark library and the two java.util classes\n\n- As a blog our objective is to Create, Read, Update and Delete new articles which are just bodies of text which we'll also assign a unique identification number and a timestamp of the date when we created the article.\n\n<script src=\"https://gist.github.com/taywils/7382438.js\"> </script>\n\n- When a user hits the root index of the blog we should show the list of articles written ordered by their date of creation else a message that indicates no articles have yet been added. To accomplish this we'll add a conditional statment and create a *StringBuilder* object to render some HTML\n\n<script src=\"https://gist.github.com/taywils/7382471.js\"> </script>\n\n- In order to publish articles we need a way to create them and submit the information to our server side code. Add another GET method which will handle requests made to /article/create\n\n- On the page is a form which accepts a new title, summary and content for the new blog article\n\n<script src=\"https://gist.github.com/taywils/7393074.js\"> </script>\n\n- Right now you may restart the Spark app and note that by clicking the \"Write Article\" link you are sent over to the form we created...\n\n- However when you click the \"Publish\" button nothing happens; in order to fix that we need write a method to handle the POST request called from /article/create\n\n- We'll want to persist the article to our storage on the server side code by capturing the form elements _article-title_, _article-summary_ and _article-content_\n\n<script src=\"https://gist.github.com/taywils/7393125.js\"> </script>\n\n### Read\n\n```\ngit checkout -b spark_blog_step_2 origin/spark_blog_step_2\n```\n\n<blockquote>\nThe next part of CRUD is actually the easist since it doesn't actually involve modifying data. To do so we'll use the read article link associated with every Article object and use the unique id number of the article to pull its information from our storage when the user requests a GET /article/read/:id from our server\n</blockquote>\n\n- To read an article is very simple, just use a for loop until we find the ID of the article. Of course using a straight up iterative search is horrific for very large numbers of articles but we'll look at alternative data persistance later on in this post.\n\n<script src=\"https://gist.github.com/taywils/7394124.js\"> </script>\n\n### Update\n\n```\ngit checkout -b spark_blog_step_3 origin/spark_blog_step_3\n```\n\n- When updating an existing article all we need to do is possibly overwrite the found content, so add a new Route for /article/update/:id \n\n- The code behind the /article/update/:id will use the same form as the /article/create except the form fields will be pre-populated\n\n<script src=\"https://gist.github.com/taywils/7403433.js\"> </script>\n\n- Now all that is left is to add the POST handler for our update form\n\n<script src=\"https://gist.github.com/taywils/7403558.js\"> </script>\n\n### Delete\n\n```\ngit checkout -b spark_blog_step_4 origin/spark_blog_step_4\n```\n\n<blockquote>\nAlong with Read Delete is another rather simple action since it only requires a single method along with a redirect\nHowever if you recall back to when we created the Article Model, we had a boolean value called _deleted_. In this sense any deleted articles are basically marked as deleted and not shown to the UI. Later on when we explore different types of persistence we'll actually delete articles for good but for now this will have to suffice.\n</blockquote>\n\n- Within your HelloSpark.java file add the method to handle the delete action /article/delete/:id\n\n<script src=\"https://gist.github.com/taywils/7404207.js\"> </script>\n\n- Lastly we need to go back and edit our Blog homepage to hide deleted articles\n\n<script src=\"https://gist.github.com/taywils/7404222.js\"> </script>\n\n## Putting the V in MVC\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_bootstrap.PNG\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_bootstrap.PNG\" alt=\"blog bootstrap3\"/></a>\n</div>\n\n<blockquote>\nRecall how in the previous code all of our views or HTML code was simply shoved into our controller routes... this won't work in actual practice and is in fact not a very sane way to structure code. Thus we'll soon work out a method to deal with the fact that our core logic should be separated from what our clients view. This idea is what brings us to the VIEW portion of Model View Controller.\n</blockquote>\n\n- In this section we will be using a very powerful Java templating engine called _Freemarker_ which will allow us to separate our Controller logic from our View layer\n\n- Lucky for us the author of the Spark framework has already created a library _spark-template-freemarker_ which provides an interface to using the Freemarker template engine. So open up your pom.xml file and add the following dependency.\n\n<script src=\"https://gist.github.com/taywils/7461578.js\"> </script> \n\n<blockquote>\nHowever before we start demonstrating the power of a well made html templating engine its important to not let your templated HTML get out of hand; to the point where your templated HTML substitues for your entire application. A famous blog post titled [Your templating engine sucks and everything you have ever written is spaghetti code](http://www.workingsoftware.com.au/page/Your_templating_engine_sucks_and_everything_you_have_ever_written_is_spaghetti_code_yes_you) takes a critical look at how easy it is to completely and utterly abuse the living crap out of your code by overusing template engines until all of your code basically becomes PHP4... and lets not go back to those days. For the TL;DR the author basically says to avoid heavy use of conditionals and or functions/macros within your templated HTML; think of it as when developing a Java application and how you [rarely ever want to manually invoke the garbage collector.](http://stackoverflow.com/questions/66540/system-gc-in-java)\n</blockquote>\n\n- Lets keep moving... for now we'll add a test Route to our application before we go back and refactor the blog code to remove the messy string injected html.\n\n```\ngit checkout -b spark_view_step_1 origin/spark_view_step_1\n```\n\n- In the code below we create a HashMap which will map our Java objects to variables which can be called directly from our View templated HTML files\n\n- The HashMap elements _blogTitle_, _descriptionTitle_, and the two _descriptionBody_ will be reffered to within our freemarker templates and appear exactly as they do within the HelloSpark.java file.\n\n<script src=\"https://gist.github.com/taywils/7462642.js\"> </script>\n\n- Next within your IntelliJ project directory create the folder structure beginning with the _resources_ directory resources/spark/template/freemarker\n\n- Once that is done right click on the newly created directory adn add the file \"layout.ftl\" the naming here is important since we will be discussing a common pattern in MVC which is to split your Views between layouts and templates. \n\n<blockquote>\nLayouts are like view container which hold multiple templates. Take my blog for example; it uses a layout which holds the top navigation bar and the disqus comments in the footer and swaps out article templates for each of my blog posts. Intelligent use of templates and layouts means that we can inject different views to our clients depening on the data sent to the view from the controller.\n</blockquote>\n\n- *This is not a tutorial on HTML and CSS so for now lets just assume the HTML code is correct.*\n\n- Anyhow the code below is for the file _layout.ftl_ notice where we inject the Java variables we sent to the view using the `${some_variable_name_here}` syntax. Don't forget to checkout the documentation for Freemarker or Google for some Freemarker tutorials if you are confused.\n\n<script src=\"https://gist.github.com/taywils/7462774.js\"> </script>\n\n- By the way don't forget to experiment with Freemarker. Try passing serveral variable to the ftl file and get the hang of templating; its a popular technique that is used in many different programming languages [including the Javascript Framework AngularJS](http://docs.angularjs.org/guide/templates)\n\n### View templates and layouts\n\n```\ngit checkout -b spark_view_step_2 origin/spark_view_step_2\n```\n\n- Given the new Bootstrap 3 powered homepage we just completed, lets now go back and refactor our old code to move the HTML injected strings out of our Controllers and into proper HTML files.\n\n- Create a new file called *articleList.ftl* or just edit the existing one and place it within the directory __sparkle/src/main/resources/spark/template/freemarker/articleList.ftl__\n\n- Now open up HelloSpark.java and GET method for the \"/\" url and change it to use the FreeMarkerRoute instead of the regular route. For our refactor we're going to create a HashMap to store the Java Objects we wish to pass onto the view __articleList.ftl__ file.\n\n<blockquote>\nFinnally no more creating String objects to hold our HTML!\n</blockquote>\n\n<script src=\"https://gist.github.com/taywils/7480416.js\"> </script>\n\n- With our Controller updated to use the layout.ftl file we now need to update our layout.ftl with the new values provided by the viewObject HashMap\n\n- Layouts allow use to embed child HTML pages within them so pay attention to the code where we inject a template called articleList.ftl via the \"include\" Freemarker tag. This allows us to separate our head and navigation links from our article View markup.\n\n<script src=\"https://gist.github.com/taywils/7480455.js\"> </script>\n\n- Finnally we'll create another Freemaker template file within the same directory as the layout.ftl called \"articleList.ftl\"\n\n<blockquote>\nLook at the code snippet for the articleList.ftl file. Pay special attention to how templating engines such as FreeMarker allow us to use conditional statements and loop over enumerable objects such as Arrays and HashMaps. However if you remember the article about why your templating engine sucks then you should agree that conditionals and loops are about all our templating engine should be responsible for... more complex logic should stay server-side within the respective Controller.\n</blockquote>\n\n<script src=\"https://gist.github.com/taywils/7480504.js\"> </script>\n\n```\ngit checkout -b spark_view_step_3 origin/spark_view_step_3\n```\n\n- Next we're going to redo the write article form, so open up HelloSpark.java and edit the route /article/create \n\n<script src=\"https://gist.github.com/taywils/7668728.js\"> </script>\n\n- Notice how simple our form view code became within the controller code because all of our view specific code will now be placed within an actual HTML file instead of nasty string appened spaghetti code\n\n- Create the freemarker template file called *articleForm.ftl*\n\n<script src=\"https://gist.github.com/taywils/7668761.js\"> </script>\n\n```\ngit checkout -b spark_view_step_4 origin/spark_view_step_4\n```\n\n- Lastly we need to update the views for editing and reading articles, so open up HelloSpark.java and change the following routes within your controller code until it matches.\n\n<script src=\"https://gist.github.com/taywils/7670579.js\"> </script>\n\n- First we're going to add a new freemarker template file called *articleRead.ftl*\n\n<script src=\"https://gist.github.com/taywils/7670586.js\"> </script>\n\n- Lastly we need to re-use our existing *articleForm.ftl* but when the user chooses to update an article we need to populate the form with the article content to be edited\n\n- This can be accomplished by using Freemarker conditionals to check for an existing article and if found then place its attritbutes within the form fields\n\n<script src=\"https://gist.github.com/taywils/7670599.js\"> </script>\n\n## Some other persistence options\n\nIn this section we're going to explore different ways for storing our application data other than stricly within the memory of our java servlet. Being a more pragmatic developer I've chosen to stick with three of the more popular database models (Relational, Document Store and Key-value) for educational purposes.\n\n- [db-engines.com definition of Relational Model](http://db-engines.com/en/article/Relational+DBMS?ref=RDBMS)\n\n- [db-engines.com definition of Document Store Model](http://db-engines.com/en/article/Document+Stores)\n\n- [db-engines.com definition of Key-value Store Model](http://db-engines.com/en/article/Key-value+Stores)\n\nWhile you're at it be sure to at least learn a bit about alternative Database Models such as __wide-column stores__, __search optimized databases__, __graph databases__ and lesser known db models such as __content stores__.\n\n### Relational Storage via Postgres\n\nThere has always been that lingering question in the open-source community about the pros and cons of MySQL vs Postgres(or PostgreSQL but I prefer it by the street name) but over the years Postgres has finnally caught up in terms of features and performance (probably due to Heroku and AWS but thats another topic). As for myself I've never used Postgres before due to all of my professional work using MySQL on a LAMP stack but its always fun to learn new things.\n\n[An article on the rise of Postgres](http://readwrite.com/2013/09/10/postresql-hits-93-new-levels-of-popularity-with-the-cool-kids)\n\n### Getting started with PostgreSQL\n\n- Ok lets start, go to [http://www.postgresql.org/download/](http://www.postgresql.org/download/)\n\n- I'm using Ubuntu Linux but choose whatever platform you need; follow the instructions and continue reading this article when you have Postgres installed.\n\n```\nsudo apt-get install postgresql\n```\n\n- Lets verify that the postgres installer worked type into your console\n\n```\nwhich psql\n```\n\n- In order to start the postgres command line interface use the command\n\n```\npsql\n```\n\n<blockquote>\nIf you encounter the error message __psql: FATAL:  role \"$USER\" does not exist__ then you probably need to run postgresql as the postgre admin; To do that just run the following command.\n</blockquote>\n\n```\nsudo -u postgres psql\n```\n\n- You should get familiar with the postgres command line interface(cli) before continuing; it differs a bit from other database systems in that many admin features are separate terminal commands which are ran from outside the cli\n\n```\ngit checkout -b spark_storage_step_1 origin/spark_storage_step_1\n```\n\n- In order for us to begin using Postgres update our *pom.xml* file and add a new dependency.\n\n- From the command line run the following to create the database which we'll be using\n\n```\nsudo -u postgres createdb sparkledb\n```\n\n- The first thing we'll want to do is build a service class to interact with each of our database types, within your project's java directory create the file *ArticleDbService.java*\n\n<script src=\"https://gist.github.com/taywils/7866235.js\"> </script>\n\n### A Short Intermission: Refactoring The Servlet In-Memory Storage Into A Data Access Object Class\n\n- The ArticleDbService.java file we just created serves as the interface to the persistence storages we will implement; we are currently setup to use a java ArrayList for our storage this will be moved into a new file.\n\n- Create the file *ArticleServletDao.java*\n\n<script src=\"https://gist.github.com/taywils/7866271.js\"> </script>\n\n- The *ArticleServletDao* implements the ArticleDbService methods and as such will allow use to swap it out as the current implmentation for the ArticleDbService object within our Blog application.\n\n- Now lets go back and refactor the *HelloSpark.java* to use the ArticleDbService. The changes are mentioned within the comments so read them so you understand; notice how much simpler our Route methods have become since we moved the DataAccess logic to its own service(s).\n\n<script src=\"https://gist.github.com/taywils/7866367.js\"> </script>\n\n### Building a PostgreSQL DAO for our Blog\n\n```\ngit checkout -b spark_storage_step_2 origin/spark_storage_step_2\n```\n\n- Before we can connect to the database from the Java class we created we need to set a password for the postgres user.\n\n```\nsudo -u postgres psql\n```\n\n- Then from the psql command line interface set the password, to keep the example simple lets use the same name as the password(that way the Java code won't fail to connect)\n\n```\nalter user postgres password postgres;\n```\n\n- Our Data Access Object(DAO) class for Postgres should be created as a new file named *ArticlePostgresDao.java*\n\n- The ArticlePostgreDao SQL code is pretty straight forward as far as the SQL goes since the queries are fairly basic(there are no complex JOINs and or temp tables) so I've left some helpful comments throughout the file.\n\n<script src=\"https://gist.github.com/taywils/7904757.js\"> </script>\n\n- One more quick refactor... add the following constructor to *Article.java* which is used by the ArticlePostgresDao.\n\n<script src=\"https://gist.github.com/taywils/7904766.js\"> </script>\n\n- To use the ArticlePostgresDao just swap its name in place of the ArticleServletDao within the file *HelloSpark.java*. I hope you're starting the see the power of the infamous design pattern [program to interfaces, not implementations](http://stackoverflow.com/questions/2697783/). \n\n### Document Storage with MongoDB\n\n```\ngit checkout -b spark_storage_step_3 origin/spark_storage_step_3\n```\n\n- Update your *pom.xml* to include the MongoDB Java Driver \n\n<script src=\"https://gist.github.com/taywils/7366389.js\"> </script>\n\n- The key aspect to using Document stores versus say a traditional relational DB is that we can (optionally)forego schema design and just store our data as freeform documents.\n\n- Begin by [downloading and installing MongoDB](http://www.mongodb.org/downloads), it shouldn't be too much of a hassle. [If you get stuck read the manual](http://docs.mongodb.org/manual/)\n\n- Now that we're done installing MongoDB create a new file within your src/main/java directory called *ArticleMongoDao.java*\n\n<script src=\"https://gist.github.com/taywils/7952171.js\"> </script>\n\n- We're not even skimming the surface as to what MongoDB is fully capable of due to the simplicity of this application but I imagine you're starting to picture the flexibility one obtains by removing the constraint of a rigid schema from the underlying DAO.\n\n## Homework: Create a checklist application\n\n- Use the examples presented in the tutorial to write a Java web app using Spark to let a user create, read, update and delete daily tasks.\n","source":"_posts/javasparkframeworktutorial.md","raw":"---\ntitle: Java Spark Framework Tutorial\ndate: 2013-11-05 \ntags: [java]\ncategories: [web, tutorial]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/javasparkframeworktutorial.jpg\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/javasparkframeworktutorial.jpg\ncomments: false\n---\nSome friends and I want build a large project in Java beginning early next year so in the meantime we all need to brush up on web development with Java. Although I've used Spring(which is awesome by the way) I wanted to explore some alternatives for building some lightweight MVC apps that can be rapidly developed without having to worry about the overhead of learning the Spring framework in depth. Thus I discovered Spark; a micro framework for Java.\n\n<!-- more -->\n## Setting up Java for web development\n\n### Before you begin download and install Git\n\n- [Download and install git](http://git-scm.com/)\n\n- The main GitRepo for this tutorial is [https://github.com/taywils/java_spark_tutorial](https://github.com/taywils/java_spark_tutorial)\n\n- So create a new directory on your machine, then change directory into it and run the following code\n\n```\ngit clone https://github.com/taywils/java_spark_tutorial.git .\n```\n\n- In order to follow along with each step of the tutorial we'll want to be able to pull down remote git branches into our local repo\n\n```\ngit fetch origin\n```\n\n- Run the following git command in order to list all remote branches or just browse the Java spark tutorial repo on Github [https://github.com/taywils/java_spark_tutorial](https://github.com/taywils/java_spark_tutorial)\n\n```\ngit branch -a\n```\n\n### Downloading the JRE and JDK\n\n- Check to see if you already have Java 7 installed on your machine by opening either terminal or command prompt and typing **java --version**\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_version_snap.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_version_snap.png\" alt=\"java version\"/></a>\n</div>\n\n<blockquote>\nIf you see a similiar result then you can skip this section and go to \"Configuring your IDE\" since you already have a working Java runtime.\n</blockquote>\n\n- Go to Java downloads page and follow the instructions [click here to dowload Java](https://java.com/en/download/index.jsp)\n\n- If you're still having trouble try adding the Java install directory to your environment HOME path or just Google how to install Java 7\n\n### Configuring your IDE\nAs for the choice of IDE, we have quite a few but I prefer to use IntelliJ IDEA by JetBrains. It supports Java and many other programming languages and it has superb documentation and a large community of developers who write amazing plugins.\n\n- [Download the community edition of IntelliJ for free](http://www.jetbrains.com/idea/free_java_ide.html)\n\n- If you plan on using Java professionally or are just frustrated by the lack of features on the community edition then you can purchase the professional edition as well.\n\n- Otherwise there is always [Eclipse](http://www.eclipse.org/) and [NetBeans](https://netbeans.org/)\n\n### Get Hello World running and configure Maven\nAssuming you chose to install the community edition of IntelliJ IDEA we'll get Hello World running just to make sure you have your Java Runtime and SDK setup correctly.\n\n- Open IntelliJ\n\n- From the main menu click the \"Configure\" icon, we are going to check to see if we have \"Maven\" configured as it will be used later.\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_create_new_project.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_create_new_project.png\" alt=\"create project\"/></a>\n</div>\n\n- On the configure screen click \"Plugins\"\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_menu.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_menu.png\" alt=\"plugins\"/></a>\n</div>\n\n- Verify that Maven is checked along with the Maven Integration Extension\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_maven_checked.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_maven_checked.png\" alt=\"maven checked\"/></a>\n</div>\n\n### Install Maven onto your machine\n\n- Open a web browser and [Download Apache Maven](http://maven.apache.org/download.cgi)\n\n- If you're using a Mac I recommend using Homebrew \n```\nbrew install maven\n```\n\n- Follow the instructions on how to test that you have it installed properly [Apache Maven in 5 Minutes](http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html)\n\n<blockquote class=\"quote\">\nApache Maven is wonderfully complex and powerful tool used by Java developers for everything from build automation to project package installation and versioning to running your JUnit tests. For the most part we'll be using it as a package manager similar to Ruby gem, PHP composer and or C# NuGet.\n</blockquote>\n\n### Setup Maven for IntelliJ \n\n- So far so good, now go back to the IntelliJ home screen click \"Create New Project\"\n\n- On create project screen you might see a bunch of options on the leftmost sidebar but the one we want to select is *Maven Module* under the \"Java\" heading\n\n- IntelliJ will then create a new project for us alredy setup for using Maven to manage our external dependencies.\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_new_project_select.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_new_project_select.png\" alt=\"new maven project\"/></a>\n</div>\n\n- Once the new project has been created I named mine \"Sparkle\" figure out how to open \"Project Settings\" for your project, you should see \"Maven\" from the list of Settings and your screen will resemble the images below.\n\n- For Windows users you'll want to set your \"M2 HOME\" by adding the Maven install folder path to the system environment variables. You'll then not have to explicitly set a M2 Home from the settings screen\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_windows.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_windows.png\" alt=\"windows maven settings\"/></a>\n</div>\n\n- For Linux users it will be some variation of /usr/share or whatever your distribution did with the Maven install but the below is my setup for Ubuntu 12 \n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_linux.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_linux.png\" alt=\"linux maven settings\"/></a>\n</div>\n\n- On Mac OSX it will probably be very similar to Linux\n\n<blockquote>\nDo not think for one second that just because IntelliJ can manage your Maven that you shouldn't learn how to use the Maven command line interface.\nThe Maven cli is pretty robust and is what your IDE calls in the background anyways so don't be lazy... actually I take that back... be lazy\n</blockquote>\n\n### Hello World...\n```\ngit checkout -b hello_step_1 origin/hello_step_1 \n```\n\n- Now that we've setup Maven we're just going to create a quick hello world program. From the Project sidebar click src -> main and then right click the \"java\" folder\n\n- Create a new class file and name it \"HelloSpark\"\n\n- Now enter the code\n\n<script src=\"https://gist.github.com/taywils/7332503.js\"> </script>\n\n- Next from the top toolbar click Build -> Make Project\n\n- Then right next to Build on the toolbar click Run -> Run 'Hello Spark'\n\n- If you don't get something like shown in the image below then you probably misconfigured your Java or IntelliJ settings. Please seek advanced troubleshooting on StackOverflow or the IntelliJ documentation.\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_hellospark_hello_world.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_hellospark_hello_world.png\" alt=\"Hello World\"/></a>\n</div>\n\n## Running the Spark demo app\n\n```\ngit checkout -b spark_demo_step_1 origin/spark_demo_step_1\n```\n\n- Lets begin by modifying our Hello world class file to use the Spark framework so we can get started with Java web development\n\n<div align=\"center\">\n<a href=\"http://www.sparkjava.com/index.html\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_logo.png\" alt=\"Spark A Java MVC micro framework\"/></a>\n</div>\n\n- Maven allows us to include external dependencies within our projects via the _pom.xml_ file. So open up the _pom.xml_ file and add the dependency for Spark.\n\n<script src=\"https://gist.github.com/taywils/7366389.js\"> </script>\n\n- From Intellij when you make a change to a Maven pom.xml file you can set it to \"enable auto-import\" so it refreshes your Maven dependencies when you update your pom.xml\n\n```\ngit checkout -b spark_demo_step_2 origin/spark_demo_step_2\n```\n\n- Next open up HelloSpark.java and remove all the existing code... replace it with the snippet below\n\n<script src=\"https://gist.github.com/taywils/7366522.js\"> </script>\n\n<blockquote>\nJust in case you were curious you'll note that the Spark documentation uses \"import static\" so [here is a brief explaination of import static](http://stackoverflow.com/questions/162187/what-does-the-static-modifier-after-import-mean). In short you can uses a class' static methods without explicitly typing the classname; beware of its pitfalls though.\n</blockquote>\n\n- Now from within IntelliJ click Run -> \"run 'HelloSpark' from the top menu, the code will startup and then it will let you know that Spark is currently running on some port most likely localhost:4567\n\n- Launch a new web browser window and goto [http://localhost:4567/hello](http://localhost:4567/hello)\n\n- Congrats!!! You are now a super web developer!\n\n<blockquote>\nSo how does that work? Like many MVC applications Spark provides us a basic router to let our app respond to HTTP requests. Of the four most commonly used are GET PUT POST DELETE. Those four HTTP request types when used in conjunction with the HTTP Header(s) for the request such as Content-type: application/json and or application/x-www-form-urlencoded allow us to capture and handle all sorts of browser request. For a good [introduction to HTTP and REST see the article on net.tutsplus](http://net.tutsplus.com/tutorials/other/a-beginners-introduction-to-http-and-rest/)\n</blockquote>\n\n- For some more fun play around with some of the basic features you can do with Route such as capturing user supplied parameters and or adding new routes\n\n```\ngit checkout -b spark_demo_step_3 origin/spark_demo_step_3\n```\n\n<script src=\"https://gist.github.com/taywils/7366801.js\"> </script>\n\n- Next lets introduce the POST request. We're going to use POST to store some data and then display it as a list. This example is very crude and will help us segway into mini blog tutorial further on in the article.\n\n```\ngit checkout -b spark_demo_step_4 origin/spark_demo_step_4\n```\n\n- In the snippet of code below we use a POST request on the route _/add/:item_ to add things to our list and then use GET on the route _/list_ to display them\n\n<script src=\"https://gist.github.com/taywils/7367126.js\"> </script>\n\n- So update your HelloSpark.java file, press build and then run the code. Launch your web browser and goto [http://localhost:4567/list](http://localhost:4567/list)\n\n- You should be greeted by our message \"Try adding some things to your list\"\n\n- Now you might be tempted to try navigating to [http://localhost:4567/add/bananas](http://localhost:4567/add/bananas) or something \n\n<blockquote>\n__BUT THAT WON'T WORK AT ALL!__\n</blockquote>\n\n- When we visit urls from our web browser we by default use the GET request so http://www.google.com calls the GET request on some google webserver somewhere.\n\n<blockquote>\nIf you're puzzled as to why you hit a 404 page when we clearly defined a POST route to /add/ you've just discovered that our application will only route POST request to a post handler method. To fix this we should actually send a HTTP POST request instead of using GET.\n</blockquote>\n\n- To send a POST request open a terminal window and use _curl_ or if you're on a windows machine use PowerShell _yes I said PowerShell please stop using command prompt_\n\n```\ncurl -X POST http://localhost:4567/add/apples\n```\n\n```\nInvoke-RestMethod -Uri http://localhost:4567/add/apples -Method POST \n```\n\n- Try making a few POST request and thing go back to [http://localhost:4567/list](http://localhost:4567/list) and be amazed\n\n## CRUD Example: A Blog\n\n<blockquote>\nWithin this section we'll be creating a basic blog application that will eventually grow more complex as we add more features. Its important to start off slow so the first iteration of the blog will be very concise and perform just the bare minium in order to function. Being a CRUD app each aspect of CRUD will be explored.\n</blockquote>\n\n- Before we start our blog application will need an object representation of an Article. Our article will have title, summary and content for now. Article.java is just plain old Java so there really isn't much to get excited about; the MVC web stuff will follow.\n\n- Within the same package as _HelloSpark.java_ create the file _Article.java_\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_project_display.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_project_display.png\" alt=\"Project structure with Article.java\"/></a>\n</div>\n\n<script src=\"https://gist.github.com/taywils/7393394.js\"> </script>\n\n### Create\n\n- Return to your HelloSpark.java code and delete everything making sure you're starting off with a clean slate\n\n```\ngit checkout -b spark_blog_step_1 origin/spark_blog_step_1 \n```\n\n- We'll begin by importing all of the necessary files which include the spark library and the two java.util classes\n\n- As a blog our objective is to Create, Read, Update and Delete new articles which are just bodies of text which we'll also assign a unique identification number and a timestamp of the date when we created the article.\n\n<script src=\"https://gist.github.com/taywils/7382438.js\"> </script>\n\n- When a user hits the root index of the blog we should show the list of articles written ordered by their date of creation else a message that indicates no articles have yet been added. To accomplish this we'll add a conditional statment and create a *StringBuilder* object to render some HTML\n\n<script src=\"https://gist.github.com/taywils/7382471.js\"> </script>\n\n- In order to publish articles we need a way to create them and submit the information to our server side code. Add another GET method which will handle requests made to /article/create\n\n- On the page is a form which accepts a new title, summary and content for the new blog article\n\n<script src=\"https://gist.github.com/taywils/7393074.js\"> </script>\n\n- Right now you may restart the Spark app and note that by clicking the \"Write Article\" link you are sent over to the form we created...\n\n- However when you click the \"Publish\" button nothing happens; in order to fix that we need write a method to handle the POST request called from /article/create\n\n- We'll want to persist the article to our storage on the server side code by capturing the form elements _article-title_, _article-summary_ and _article-content_\n\n<script src=\"https://gist.github.com/taywils/7393125.js\"> </script>\n\n### Read\n\n```\ngit checkout -b spark_blog_step_2 origin/spark_blog_step_2\n```\n\n<blockquote>\nThe next part of CRUD is actually the easist since it doesn't actually involve modifying data. To do so we'll use the read article link associated with every Article object and use the unique id number of the article to pull its information from our storage when the user requests a GET /article/read/:id from our server\n</blockquote>\n\n- To read an article is very simple, just use a for loop until we find the ID of the article. Of course using a straight up iterative search is horrific for very large numbers of articles but we'll look at alternative data persistance later on in this post.\n\n<script src=\"https://gist.github.com/taywils/7394124.js\"> </script>\n\n### Update\n\n```\ngit checkout -b spark_blog_step_3 origin/spark_blog_step_3\n```\n\n- When updating an existing article all we need to do is possibly overwrite the found content, so add a new Route for /article/update/:id \n\n- The code behind the /article/update/:id will use the same form as the /article/create except the form fields will be pre-populated\n\n<script src=\"https://gist.github.com/taywils/7403433.js\"> </script>\n\n- Now all that is left is to add the POST handler for our update form\n\n<script src=\"https://gist.github.com/taywils/7403558.js\"> </script>\n\n### Delete\n\n```\ngit checkout -b spark_blog_step_4 origin/spark_blog_step_4\n```\n\n<blockquote>\nAlong with Read Delete is another rather simple action since it only requires a single method along with a redirect\nHowever if you recall back to when we created the Article Model, we had a boolean value called _deleted_. In this sense any deleted articles are basically marked as deleted and not shown to the UI. Later on when we explore different types of persistence we'll actually delete articles for good but for now this will have to suffice.\n</blockquote>\n\n- Within your HelloSpark.java file add the method to handle the delete action /article/delete/:id\n\n<script src=\"https://gist.github.com/taywils/7404207.js\"> </script>\n\n- Lastly we need to go back and edit our Blog homepage to hide deleted articles\n\n<script src=\"https://gist.github.com/taywils/7404222.js\"> </script>\n\n## Putting the V in MVC\n\n<div align=\"center\">\n<a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_bootstrap.PNG\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_bootstrap.PNG\" alt=\"blog bootstrap3\"/></a>\n</div>\n\n<blockquote>\nRecall how in the previous code all of our views or HTML code was simply shoved into our controller routes... this won't work in actual practice and is in fact not a very sane way to structure code. Thus we'll soon work out a method to deal with the fact that our core logic should be separated from what our clients view. This idea is what brings us to the VIEW portion of Model View Controller.\n</blockquote>\n\n- In this section we will be using a very powerful Java templating engine called _Freemarker_ which will allow us to separate our Controller logic from our View layer\n\n- Lucky for us the author of the Spark framework has already created a library _spark-template-freemarker_ which provides an interface to using the Freemarker template engine. So open up your pom.xml file and add the following dependency.\n\n<script src=\"https://gist.github.com/taywils/7461578.js\"> </script> \n\n<blockquote>\nHowever before we start demonstrating the power of a well made html templating engine its important to not let your templated HTML get out of hand; to the point where your templated HTML substitues for your entire application. A famous blog post titled [Your templating engine sucks and everything you have ever written is spaghetti code](http://www.workingsoftware.com.au/page/Your_templating_engine_sucks_and_everything_you_have_ever_written_is_spaghetti_code_yes_you) takes a critical look at how easy it is to completely and utterly abuse the living crap out of your code by overusing template engines until all of your code basically becomes PHP4... and lets not go back to those days. For the TL;DR the author basically says to avoid heavy use of conditionals and or functions/macros within your templated HTML; think of it as when developing a Java application and how you [rarely ever want to manually invoke the garbage collector.](http://stackoverflow.com/questions/66540/system-gc-in-java)\n</blockquote>\n\n- Lets keep moving... for now we'll add a test Route to our application before we go back and refactor the blog code to remove the messy string injected html.\n\n```\ngit checkout -b spark_view_step_1 origin/spark_view_step_1\n```\n\n- In the code below we create a HashMap which will map our Java objects to variables which can be called directly from our View templated HTML files\n\n- The HashMap elements _blogTitle_, _descriptionTitle_, and the two _descriptionBody_ will be reffered to within our freemarker templates and appear exactly as they do within the HelloSpark.java file.\n\n<script src=\"https://gist.github.com/taywils/7462642.js\"> </script>\n\n- Next within your IntelliJ project directory create the folder structure beginning with the _resources_ directory resources/spark/template/freemarker\n\n- Once that is done right click on the newly created directory adn add the file \"layout.ftl\" the naming here is important since we will be discussing a common pattern in MVC which is to split your Views between layouts and templates. \n\n<blockquote>\nLayouts are like view container which hold multiple templates. Take my blog for example; it uses a layout which holds the top navigation bar and the disqus comments in the footer and swaps out article templates for each of my blog posts. Intelligent use of templates and layouts means that we can inject different views to our clients depening on the data sent to the view from the controller.\n</blockquote>\n\n- *This is not a tutorial on HTML and CSS so for now lets just assume the HTML code is correct.*\n\n- Anyhow the code below is for the file _layout.ftl_ notice where we inject the Java variables we sent to the view using the `${some_variable_name_here}` syntax. Don't forget to checkout the documentation for Freemarker or Google for some Freemarker tutorials if you are confused.\n\n<script src=\"https://gist.github.com/taywils/7462774.js\"> </script>\n\n- By the way don't forget to experiment with Freemarker. Try passing serveral variable to the ftl file and get the hang of templating; its a popular technique that is used in many different programming languages [including the Javascript Framework AngularJS](http://docs.angularjs.org/guide/templates)\n\n### View templates and layouts\n\n```\ngit checkout -b spark_view_step_2 origin/spark_view_step_2\n```\n\n- Given the new Bootstrap 3 powered homepage we just completed, lets now go back and refactor our old code to move the HTML injected strings out of our Controllers and into proper HTML files.\n\n- Create a new file called *articleList.ftl* or just edit the existing one and place it within the directory __sparkle/src/main/resources/spark/template/freemarker/articleList.ftl__\n\n- Now open up HelloSpark.java and GET method for the \"/\" url and change it to use the FreeMarkerRoute instead of the regular route. For our refactor we're going to create a HashMap to store the Java Objects we wish to pass onto the view __articleList.ftl__ file.\n\n<blockquote>\nFinnally no more creating String objects to hold our HTML!\n</blockquote>\n\n<script src=\"https://gist.github.com/taywils/7480416.js\"> </script>\n\n- With our Controller updated to use the layout.ftl file we now need to update our layout.ftl with the new values provided by the viewObject HashMap\n\n- Layouts allow use to embed child HTML pages within them so pay attention to the code where we inject a template called articleList.ftl via the \"include\" Freemarker tag. This allows us to separate our head and navigation links from our article View markup.\n\n<script src=\"https://gist.github.com/taywils/7480455.js\"> </script>\n\n- Finnally we'll create another Freemaker template file within the same directory as the layout.ftl called \"articleList.ftl\"\n\n<blockquote>\nLook at the code snippet for the articleList.ftl file. Pay special attention to how templating engines such as FreeMarker allow us to use conditional statements and loop over enumerable objects such as Arrays and HashMaps. However if you remember the article about why your templating engine sucks then you should agree that conditionals and loops are about all our templating engine should be responsible for... more complex logic should stay server-side within the respective Controller.\n</blockquote>\n\n<script src=\"https://gist.github.com/taywils/7480504.js\"> </script>\n\n```\ngit checkout -b spark_view_step_3 origin/spark_view_step_3\n```\n\n- Next we're going to redo the write article form, so open up HelloSpark.java and edit the route /article/create \n\n<script src=\"https://gist.github.com/taywils/7668728.js\"> </script>\n\n- Notice how simple our form view code became within the controller code because all of our view specific code will now be placed within an actual HTML file instead of nasty string appened spaghetti code\n\n- Create the freemarker template file called *articleForm.ftl*\n\n<script src=\"https://gist.github.com/taywils/7668761.js\"> </script>\n\n```\ngit checkout -b spark_view_step_4 origin/spark_view_step_4\n```\n\n- Lastly we need to update the views for editing and reading articles, so open up HelloSpark.java and change the following routes within your controller code until it matches.\n\n<script src=\"https://gist.github.com/taywils/7670579.js\"> </script>\n\n- First we're going to add a new freemarker template file called *articleRead.ftl*\n\n<script src=\"https://gist.github.com/taywils/7670586.js\"> </script>\n\n- Lastly we need to re-use our existing *articleForm.ftl* but when the user chooses to update an article we need to populate the form with the article content to be edited\n\n- This can be accomplished by using Freemarker conditionals to check for an existing article and if found then place its attritbutes within the form fields\n\n<script src=\"https://gist.github.com/taywils/7670599.js\"> </script>\n\n## Some other persistence options\n\nIn this section we're going to explore different ways for storing our application data other than stricly within the memory of our java servlet. Being a more pragmatic developer I've chosen to stick with three of the more popular database models (Relational, Document Store and Key-value) for educational purposes.\n\n- [db-engines.com definition of Relational Model](http://db-engines.com/en/article/Relational+DBMS?ref=RDBMS)\n\n- [db-engines.com definition of Document Store Model](http://db-engines.com/en/article/Document+Stores)\n\n- [db-engines.com definition of Key-value Store Model](http://db-engines.com/en/article/Key-value+Stores)\n\nWhile you're at it be sure to at least learn a bit about alternative Database Models such as __wide-column stores__, __search optimized databases__, __graph databases__ and lesser known db models such as __content stores__.\n\n### Relational Storage via Postgres\n\nThere has always been that lingering question in the open-source community about the pros and cons of MySQL vs Postgres(or PostgreSQL but I prefer it by the street name) but over the years Postgres has finnally caught up in terms of features and performance (probably due to Heroku and AWS but thats another topic). As for myself I've never used Postgres before due to all of my professional work using MySQL on a LAMP stack but its always fun to learn new things.\n\n[An article on the rise of Postgres](http://readwrite.com/2013/09/10/postresql-hits-93-new-levels-of-popularity-with-the-cool-kids)\n\n### Getting started with PostgreSQL\n\n- Ok lets start, go to [http://www.postgresql.org/download/](http://www.postgresql.org/download/)\n\n- I'm using Ubuntu Linux but choose whatever platform you need; follow the instructions and continue reading this article when you have Postgres installed.\n\n```\nsudo apt-get install postgresql\n```\n\n- Lets verify that the postgres installer worked type into your console\n\n```\nwhich psql\n```\n\n- In order to start the postgres command line interface use the command\n\n```\npsql\n```\n\n<blockquote>\nIf you encounter the error message __psql: FATAL:  role \"$USER\" does not exist__ then you probably need to run postgresql as the postgre admin; To do that just run the following command.\n</blockquote>\n\n```\nsudo -u postgres psql\n```\n\n- You should get familiar with the postgres command line interface(cli) before continuing; it differs a bit from other database systems in that many admin features are separate terminal commands which are ran from outside the cli\n\n```\ngit checkout -b spark_storage_step_1 origin/spark_storage_step_1\n```\n\n- In order for us to begin using Postgres update our *pom.xml* file and add a new dependency.\n\n- From the command line run the following to create the database which we'll be using\n\n```\nsudo -u postgres createdb sparkledb\n```\n\n- The first thing we'll want to do is build a service class to interact with each of our database types, within your project's java directory create the file *ArticleDbService.java*\n\n<script src=\"https://gist.github.com/taywils/7866235.js\"> </script>\n\n### A Short Intermission: Refactoring The Servlet In-Memory Storage Into A Data Access Object Class\n\n- The ArticleDbService.java file we just created serves as the interface to the persistence storages we will implement; we are currently setup to use a java ArrayList for our storage this will be moved into a new file.\n\n- Create the file *ArticleServletDao.java*\n\n<script src=\"https://gist.github.com/taywils/7866271.js\"> </script>\n\n- The *ArticleServletDao* implements the ArticleDbService methods and as such will allow use to swap it out as the current implmentation for the ArticleDbService object within our Blog application.\n\n- Now lets go back and refactor the *HelloSpark.java* to use the ArticleDbService. The changes are mentioned within the comments so read them so you understand; notice how much simpler our Route methods have become since we moved the DataAccess logic to its own service(s).\n\n<script src=\"https://gist.github.com/taywils/7866367.js\"> </script>\n\n### Building a PostgreSQL DAO for our Blog\n\n```\ngit checkout -b spark_storage_step_2 origin/spark_storage_step_2\n```\n\n- Before we can connect to the database from the Java class we created we need to set a password for the postgres user.\n\n```\nsudo -u postgres psql\n```\n\n- Then from the psql command line interface set the password, to keep the example simple lets use the same name as the password(that way the Java code won't fail to connect)\n\n```\nalter user postgres password postgres;\n```\n\n- Our Data Access Object(DAO) class for Postgres should be created as a new file named *ArticlePostgresDao.java*\n\n- The ArticlePostgreDao SQL code is pretty straight forward as far as the SQL goes since the queries are fairly basic(there are no complex JOINs and or temp tables) so I've left some helpful comments throughout the file.\n\n<script src=\"https://gist.github.com/taywils/7904757.js\"> </script>\n\n- One more quick refactor... add the following constructor to *Article.java* which is used by the ArticlePostgresDao.\n\n<script src=\"https://gist.github.com/taywils/7904766.js\"> </script>\n\n- To use the ArticlePostgresDao just swap its name in place of the ArticleServletDao within the file *HelloSpark.java*. I hope you're starting the see the power of the infamous design pattern [program to interfaces, not implementations](http://stackoverflow.com/questions/2697783/). \n\n### Document Storage with MongoDB\n\n```\ngit checkout -b spark_storage_step_3 origin/spark_storage_step_3\n```\n\n- Update your *pom.xml* to include the MongoDB Java Driver \n\n<script src=\"https://gist.github.com/taywils/7366389.js\"> </script>\n\n- The key aspect to using Document stores versus say a traditional relational DB is that we can (optionally)forego schema design and just store our data as freeform documents.\n\n- Begin by [downloading and installing MongoDB](http://www.mongodb.org/downloads), it shouldn't be too much of a hassle. [If you get stuck read the manual](http://docs.mongodb.org/manual/)\n\n- Now that we're done installing MongoDB create a new file within your src/main/java directory called *ArticleMongoDao.java*\n\n<script src=\"https://gist.github.com/taywils/7952171.js\"> </script>\n\n- We're not even skimming the surface as to what MongoDB is fully capable of due to the simplicity of this application but I imagine you're starting to picture the flexibility one obtains by removing the constraint of a rigid schema from the underlying DAO.\n\n## Homework: Create a checklist application\n\n- Use the examples presented in the tutorial to write a Java web app using Spark to let a user create, read, update and delete daily tasks.\n","slug":"javasparkframeworktutorial","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3hp000vyswv73ppehsr","layout":"post","photos":[],"link":"","content":"<p>Some friends and I want build a large project in Java beginning early next year so in the meantime we all need to brush up on web development with Java. Although I’ve used Spring(which is awesome by the way) I wanted to explore some alternatives for building some lightweight MVC apps that can be rapidly developed without having to worry about the overhead of learning the Spring framework in depth. Thus I discovered Spark; a micro framework for Java.</p>\n<a id=\"more\"></a>\n<h2 id=\"Setting-up-Java-for-web-development\"><a href=\"#Setting-up-Java-for-web-development\" class=\"headerlink\" title=\"Setting up Java for web development\"></a>Setting up Java for web development</h2><h3 id=\"Before-you-begin-download-and-install-Git\"><a href=\"#Before-you-begin-download-and-install-Git\" class=\"headerlink\" title=\"Before you begin download and install Git\"></a>Before you begin download and install Git</h3><ul>\n<li><p><a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">Download and install git</a></p>\n</li>\n<li><p>The main GitRepo for this tutorial is <a href=\"https://github.com/taywils/java_spark_tutorial\" target=\"_blank\" rel=\"external\">https://github.com/taywils/java_spark_tutorial</a></p>\n</li>\n<li><p>So create a new directory on your machine, then change directory into it and run the following code</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/taywils/java_spark_tutorial.git .</div></pre></td></tr></table></figure>\n<ul>\n<li>In order to follow along with each step of the tutorial we’ll want to be able to pull down remote git branches into our local repo</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch origin</div></pre></td></tr></table></figure>\n<ul>\n<li>Run the following git command in order to list all remote branches or just browse the Java spark tutorial repo on Github <a href=\"https://github.com/taywils/java_spark_tutorial\" target=\"_blank\" rel=\"external\">https://github.com/taywils/java_spark_tutorial</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -a</div></pre></td></tr></table></figure>\n<h3 id=\"Downloading-the-JRE-and-JDK\"><a href=\"#Downloading-the-JRE-and-JDK\" class=\"headerlink\" title=\"Downloading the JRE and JDK\"></a>Downloading the JRE and JDK</h3><ul>\n<li>Check to see if you already have Java 7 installed on your machine by opening either terminal or command prompt and typing <strong>java –version</strong></li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_version_snap.png\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_version_snap.png\" alt=\"java version\"></a><br></div>\n\n<blockquote><br>If you see a similiar result then you can skip this section and go to “Configuring your IDE” since you already have a working Java runtime.<br></blockquote>\n\n<ul>\n<li><p>Go to Java downloads page and follow the instructions <a href=\"https://java.com/en/download/index.jsp\" target=\"_blank\" rel=\"external\">click here to dowload Java</a></p>\n</li>\n<li><p>If you’re still having trouble try adding the Java install directory to your environment HOME path or just Google how to install Java 7</p>\n</li>\n</ul>\n<h3 id=\"Configuring-your-IDE\"><a href=\"#Configuring-your-IDE\" class=\"headerlink\" title=\"Configuring your IDE\"></a>Configuring your IDE</h3><p>As for the choice of IDE, we have quite a few but I prefer to use IntelliJ IDEA by JetBrains. It supports Java and many other programming languages and it has superb documentation and a large community of developers who write amazing plugins.</p>\n<ul>\n<li><p><a href=\"http://www.jetbrains.com/idea/free_java_ide.html\" target=\"_blank\" rel=\"external\">Download the community edition of IntelliJ for free</a></p>\n</li>\n<li><p>If you plan on using Java professionally or are just frustrated by the lack of features on the community edition then you can purchase the professional edition as well.</p>\n</li>\n<li><p>Otherwise there is always <a href=\"http://www.eclipse.org/\" target=\"_blank\" rel=\"external\">Eclipse</a> and <a href=\"https://netbeans.org/\" target=\"_blank\" rel=\"external\">NetBeans</a></p>\n</li>\n</ul>\n<h3 id=\"Get-Hello-World-running-and-configure-Maven\"><a href=\"#Get-Hello-World-running-and-configure-Maven\" class=\"headerlink\" title=\"Get Hello World running and configure Maven\"></a>Get Hello World running and configure Maven</h3><p>Assuming you chose to install the community edition of IntelliJ IDEA we’ll get Hello World running just to make sure you have your Java Runtime and SDK setup correctly.</p>\n<ul>\n<li><p>Open IntelliJ</p>\n</li>\n<li><p>From the main menu click the “Configure” icon, we are going to check to see if we have “Maven” configured as it will be used later.</p>\n</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_create_new_project.png\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_create_new_project.png\" alt=\"create project\"></a><br></div>\n\n<ul>\n<li>On the configure screen click “Plugins”</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_menu.png\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_menu.png\" alt=\"plugins\"></a><br></div>\n\n<ul>\n<li>Verify that Maven is checked along with the Maven Integration Extension</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_maven_checked.png\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_maven_checked.png\" alt=\"maven checked\"></a><br></div>\n\n<h3 id=\"Install-Maven-onto-your-machine\"><a href=\"#Install-Maven-onto-your-machine\" class=\"headerlink\" title=\"Install Maven onto your machine\"></a>Install Maven onto your machine</h3><ul>\n<li><p>Open a web browser and <a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"external\">Download Apache Maven</a></p>\n</li>\n<li><p>If you’re using a Mac I recommend using Homebrew </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install maven</div></pre></td></tr></table></figure>\n</li>\n<li><p>Follow the instructions on how to test that you have it installed properly <a href=\"http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html\" target=\"_blank\" rel=\"external\">Apache Maven in 5 Minutes</a></p>\n</li>\n</ul>\n<blockquote class=\"quote\"><br>Apache Maven is wonderfully complex and powerful tool used by Java developers for everything from build automation to project package installation and versioning to running your JUnit tests. For the most part we’ll be using it as a package manager similar to Ruby gem, PHP composer and or C# NuGet.<br></blockquote>\n\n<h3 id=\"Setup-Maven-for-IntelliJ\"><a href=\"#Setup-Maven-for-IntelliJ\" class=\"headerlink\" title=\"Setup Maven for IntelliJ\"></a>Setup Maven for IntelliJ</h3><ul>\n<li><p>So far so good, now go back to the IntelliJ home screen click “Create New Project”</p>\n</li>\n<li><p>On create project screen you might see a bunch of options on the leftmost sidebar but the one we want to select is <em>Maven Module</em> under the “Java” heading</p>\n</li>\n<li><p>IntelliJ will then create a new project for us alredy setup for using Maven to manage our external dependencies.</p>\n</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_new_project_select.png\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_new_project_select.png\" alt=\"new maven project\"></a><br></div>\n\n<ul>\n<li><p>Once the new project has been created I named mine “Sparkle” figure out how to open “Project Settings” for your project, you should see “Maven” from the list of Settings and your screen will resemble the images below.</p>\n</li>\n<li><p>For Windows users you’ll want to set your “M2 HOME” by adding the Maven install folder path to the system environment variables. You’ll then not have to explicitly set a M2 Home from the settings screen</p>\n</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_windows.png\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_windows.png\" alt=\"windows maven settings\"></a><br></div>\n\n<ul>\n<li>For Linux users it will be some variation of /usr/share or whatever your distribution did with the Maven install but the below is my setup for Ubuntu 12 </li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_linux.png\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_linux.png\" alt=\"linux maven settings\"></a><br></div>\n\n<ul>\n<li>On Mac OSX it will probably be very similar to Linux</li>\n</ul>\n<blockquote><br>Do not think for one second that just because IntelliJ can manage your Maven that you shouldn’t learn how to use the Maven command line interface.<br>The Maven cli is pretty robust and is what your IDE calls in the background anyways so don’t be lazy… actually I take that back… be lazy<br></blockquote>\n\n<h3 id=\"Hello-World…\"><a href=\"#Hello-World…\" class=\"headerlink\" title=\"Hello World…\"></a>Hello World…</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b hello_step_1 origin/hello_step_1</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Now that we’ve setup Maven we’re just going to create a quick hello world program. From the Project sidebar click src -&gt; main and then right click the “java” folder</p>\n</li>\n<li><p>Create a new class file and name it “HelloSpark”</p>\n</li>\n<li><p>Now enter the code</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7332503.js\"> </script>\n\n<ul>\n<li><p>Next from the top toolbar click Build -&gt; Make Project</p>\n</li>\n<li><p>Then right next to Build on the toolbar click Run -&gt; Run ‘Hello Spark’</p>\n</li>\n<li><p>If you don’t get something like shown in the image below then you probably misconfigured your Java or IntelliJ settings. Please seek advanced troubleshooting on StackOverflow or the IntelliJ documentation.</p>\n</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_hellospark_hello_world.png\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_hellospark_hello_world.png\" alt=\"Hello World\"></a><br></div>\n\n<h2 id=\"Running-the-Spark-demo-app\"><a href=\"#Running-the-Spark-demo-app\" class=\"headerlink\" title=\"Running the Spark demo app\"></a>Running the Spark demo app</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_demo_step_1 origin/spark_demo_step_1</div></pre></td></tr></table></figure>\n<ul>\n<li>Lets begin by modifying our Hello world class file to use the Spark framework so we can get started with Java web development</li>\n</ul>\n<div align=\"center\"><br><a href=\"http://www.sparkjava.com/index.html\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_logo.png\" alt=\"Spark A Java MVC micro framework\"></a><br></div>\n\n<ul>\n<li>Maven allows us to include external dependencies within our projects via the <em>pom.xml</em> file. So open up the <em>pom.xml</em> file and add the dependency for Spark.</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7366389.js\"> </script>\n\n<ul>\n<li>From Intellij when you make a change to a Maven pom.xml file you can set it to “enable auto-import” so it refreshes your Maven dependencies when you update your pom.xml</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_demo_step_2 origin/spark_demo_step_2</div></pre></td></tr></table></figure>\n<ul>\n<li>Next open up HelloSpark.java and remove all the existing code… replace it with the snippet below</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7366522.js\"> </script>\n\n<blockquote><br>Just in case you were curious you’ll note that the Spark documentation uses “import static” so <a href=\"http://stackoverflow.com/questions/162187/what-does-the-static-modifier-after-import-mean\" target=\"_blank\" rel=\"external\">here is a brief explaination of import static</a>. In short you can uses a class’ static methods without explicitly typing the classname; beware of its pitfalls though.<br></blockquote>\n\n<ul>\n<li><p>Now from within IntelliJ click Run -&gt; “run ‘HelloSpark’ from the top menu, the code will startup and then it will let you know that Spark is currently running on some port most likely localhost:4567</p>\n</li>\n<li><p>Launch a new web browser window and goto <a href=\"http://localhost:4567/hello\" target=\"_blank\" rel=\"external\">http://localhost:4567/hello</a></p>\n</li>\n<li><p>Congrats!!! You are now a super web developer!</p>\n</li>\n</ul>\n<blockquote><br>So how does that work? Like many MVC applications Spark provides us a basic router to let our app respond to HTTP requests. Of the four most commonly used are GET PUT POST DELETE. Those four HTTP request types when used in conjunction with the HTTP Header(s) for the request such as Content-type: application/json and or application/x-www-form-urlencoded allow us to capture and handle all sorts of browser request. For a good <a href=\"http://net.tutsplus.com/tutorials/other/a-beginners-introduction-to-http-and-rest/\" target=\"_blank\" rel=\"external\">introduction to HTTP and REST see the article on net.tutsplus</a><br></blockquote>\n\n<ul>\n<li>For some more fun play around with some of the basic features you can do with Route such as capturing user supplied parameters and or adding new routes</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_demo_step_3 origin/spark_demo_step_3</div></pre></td></tr></table></figure>\n<script src=\"https://gist.github.com/taywils/7366801.js\"> </script>\n\n<ul>\n<li>Next lets introduce the POST request. We’re going to use POST to store some data and then display it as a list. This example is very crude and will help us segway into mini blog tutorial further on in the article.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_demo_step_4 origin/spark_demo_step_4</div></pre></td></tr></table></figure>\n<ul>\n<li>In the snippet of code below we use a POST request on the route <em>/add/:item</em> to add things to our list and then use GET on the route <em>/list</em> to display them</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7367126.js\"> </script>\n\n<ul>\n<li><p>So update your HelloSpark.java file, press build and then run the code. Launch your web browser and goto <a href=\"http://localhost:4567/list\" target=\"_blank\" rel=\"external\">http://localhost:4567/list</a></p>\n</li>\n<li><p>You should be greeted by our message “Try adding some things to your list”</p>\n</li>\n<li><p>Now you might be tempted to try navigating to <a href=\"http://localhost:4567/add/bananas\" target=\"_blank\" rel=\"external\">http://localhost:4567/add/bananas</a> or something </p>\n</li>\n</ul>\n<blockquote><br><strong>BUT THAT WON’T WORK AT ALL!</strong><br></blockquote>\n\n<ul>\n<li>When we visit urls from our web browser we by default use the GET request so <a href=\"http://www.google.com\" target=\"_blank\" rel=\"external\">http://www.google.com</a> calls the GET request on some google webserver somewhere.</li>\n</ul>\n<blockquote><br>If you’re puzzled as to why you hit a 404 page when we clearly defined a POST route to /add/ you’ve just discovered that our application will only route POST request to a post handler method. To fix this we should actually send a HTTP POST request instead of using GET.<br></blockquote>\n\n<ul>\n<li>To send a POST request open a terminal window and use <em>curl</em> or if you’re on a windows machine use PowerShell <em>yes I said PowerShell please stop using command prompt</em></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -X POST http://localhost:4567/add/apples</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Invoke-RestMethod -Uri http://localhost:4567/add/apples -Method POST</div></pre></td></tr></table></figure>\n<ul>\n<li>Try making a few POST request and thing go back to <a href=\"http://localhost:4567/list\" target=\"_blank\" rel=\"external\">http://localhost:4567/list</a> and be amazed</li>\n</ul>\n<h2 id=\"CRUD-Example-A-Blog\"><a href=\"#CRUD-Example-A-Blog\" class=\"headerlink\" title=\"CRUD Example: A Blog\"></a>CRUD Example: A Blog</h2><blockquote><br>Within this section we’ll be creating a basic blog application that will eventually grow more complex as we add more features. Its important to start off slow so the first iteration of the blog will be very concise and perform just the bare minium in order to function. Being a CRUD app each aspect of CRUD will be explored.<br></blockquote>\n\n<ul>\n<li><p>Before we start our blog application will need an object representation of an Article. Our article will have title, summary and content for now. Article.java is just plain old Java so there really isn’t much to get excited about; the MVC web stuff will follow.</p>\n</li>\n<li><p>Within the same package as <em>HelloSpark.java</em> create the file <em>Article.java</em></p>\n</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_project_display.png\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_project_display.png\" alt=\"Project structure with Article.java\"></a><br></div>\n\n<script src=\"https://gist.github.com/taywils/7393394.js\"> </script>\n\n<h3 id=\"Create\"><a href=\"#Create\" class=\"headerlink\" title=\"Create\"></a>Create</h3><ul>\n<li>Return to your HelloSpark.java code and delete everything making sure you’re starting off with a clean slate</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_blog_step_1 origin/spark_blog_step_1</div></pre></td></tr></table></figure>\n<ul>\n<li><p>We’ll begin by importing all of the necessary files which include the spark library and the two java.util classes</p>\n</li>\n<li><p>As a blog our objective is to Create, Read, Update and Delete new articles which are just bodies of text which we’ll also assign a unique identification number and a timestamp of the date when we created the article.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7382438.js\"> </script>\n\n<ul>\n<li>When a user hits the root index of the blog we should show the list of articles written ordered by their date of creation else a message that indicates no articles have yet been added. To accomplish this we’ll add a conditional statment and create a <em>StringBuilder</em> object to render some HTML</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7382471.js\"> </script>\n\n<ul>\n<li><p>In order to publish articles we need a way to create them and submit the information to our server side code. Add another GET method which will handle requests made to /article/create</p>\n</li>\n<li><p>On the page is a form which accepts a new title, summary and content for the new blog article</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7393074.js\"> </script>\n\n<ul>\n<li><p>Right now you may restart the Spark app and note that by clicking the “Write Article” link you are sent over to the form we created…</p>\n</li>\n<li><p>However when you click the “Publish” button nothing happens; in order to fix that we need write a method to handle the POST request called from /article/create</p>\n</li>\n<li><p>We’ll want to persist the article to our storage on the server side code by capturing the form elements <em>article-title</em>, <em>article-summary</em> and <em>article-content</em></p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7393125.js\"> </script>\n\n<h3 id=\"Read\"><a href=\"#Read\" class=\"headerlink\" title=\"Read\"></a>Read</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_blog_step_2 origin/spark_blog_step_2</div></pre></td></tr></table></figure>\n<blockquote><br>The next part of CRUD is actually the easist since it doesn’t actually involve modifying data. To do so we’ll use the read article link associated with every Article object and use the unique id number of the article to pull its information from our storage when the user requests a GET /article/read/:id from our server<br></blockquote>\n\n<ul>\n<li>To read an article is very simple, just use a for loop until we find the ID of the article. Of course using a straight up iterative search is horrific for very large numbers of articles but we’ll look at alternative data persistance later on in this post.</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7394124.js\"> </script>\n\n<h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_blog_step_3 origin/spark_blog_step_3</div></pre></td></tr></table></figure>\n<ul>\n<li><p>When updating an existing article all we need to do is possibly overwrite the found content, so add a new Route for /article/update/:id </p>\n</li>\n<li><p>The code behind the /article/update/:id will use the same form as the /article/create except the form fields will be pre-populated</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7403433.js\"> </script>\n\n<ul>\n<li>Now all that is left is to add the POST handler for our update form</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7403558.js\"> </script>\n\n<h3 id=\"Delete\"><a href=\"#Delete\" class=\"headerlink\" title=\"Delete\"></a>Delete</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_blog_step_4 origin/spark_blog_step_4</div></pre></td></tr></table></figure>\n<blockquote><br>Along with Read Delete is another rather simple action since it only requires a single method along with a redirect<br>However if you recall back to when we created the Article Model, we had a boolean value called <em>deleted</em>. In this sense any deleted articles are basically marked as deleted and not shown to the UI. Later on when we explore different types of persistence we’ll actually delete articles for good but for now this will have to suffice.<br></blockquote>\n\n<ul>\n<li>Within your HelloSpark.java file add the method to handle the delete action /article/delete/:id</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7404207.js\"> </script>\n\n<ul>\n<li>Lastly we need to go back and edit our Blog homepage to hide deleted articles</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7404222.js\"> </script>\n\n<h2 id=\"Putting-the-V-in-MVC\"><a href=\"#Putting-the-V-in-MVC\" class=\"headerlink\" title=\"Putting the V in MVC\"></a>Putting the V in MVC</h2><div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_bootstrap.PNG\" target=\"_blank\" rel=\"external\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_bootstrap.PNG\" alt=\"blog bootstrap3\"></a><br></div>\n\n<blockquote><br>Recall how in the previous code all of our views or HTML code was simply shoved into our controller routes… this won’t work in actual practice and is in fact not a very sane way to structure code. Thus we’ll soon work out a method to deal with the fact that our core logic should be separated from what our clients view. This idea is what brings us to the VIEW portion of Model View Controller.<br></blockquote>\n\n<ul>\n<li><p>In this section we will be using a very powerful Java templating engine called <em>Freemarker</em> which will allow us to separate our Controller logic from our View layer</p>\n</li>\n<li><p>Lucky for us the author of the Spark framework has already created a library <em>spark-template-freemarker</em> which provides an interface to using the Freemarker template engine. So open up your pom.xml file and add the following dependency.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7461578.js\"> </script> \n\n<blockquote><br>However before we start demonstrating the power of a well made html templating engine its important to not let your templated HTML get out of hand; to the point where your templated HTML substitues for your entire application. A famous blog post titled <a href=\"http://www.workingsoftware.com.au/page/Your_templating_engine_sucks_and_everything_you_have_ever_written_is_spaghetti_code_yes_you\" target=\"_blank\" rel=\"external\">Your templating engine sucks and everything you have ever written is spaghetti code</a> takes a critical look at how easy it is to completely and utterly abuse the living crap out of your code by overusing template engines until all of your code basically becomes PHP4… and lets not go back to those days. For the TL;DR the author basically says to avoid heavy use of conditionals and or functions/macros within your templated HTML; think of it as when developing a Java application and how you <a href=\"http://stackoverflow.com/questions/66540/system-gc-in-java\" target=\"_blank\" rel=\"external\">rarely ever want to manually invoke the garbage collector.</a><br></blockquote>\n\n<ul>\n<li>Lets keep moving… for now we’ll add a test Route to our application before we go back and refactor the blog code to remove the messy string injected html.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_view_step_1 origin/spark_view_step_1</div></pre></td></tr></table></figure>\n<ul>\n<li><p>In the code below we create a HashMap which will map our Java objects to variables which can be called directly from our View templated HTML files</p>\n</li>\n<li><p>The HashMap elements <em>blogTitle</em>, <em>descriptionTitle</em>, and the two <em>descriptionBody</em> will be reffered to within our freemarker templates and appear exactly as they do within the HelloSpark.java file.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7462642.js\"> </script>\n\n<ul>\n<li><p>Next within your IntelliJ project directory create the folder structure beginning with the <em>resources</em> directory resources/spark/template/freemarker</p>\n</li>\n<li><p>Once that is done right click on the newly created directory adn add the file “layout.ftl” the naming here is important since we will be discussing a common pattern in MVC which is to split your Views between layouts and templates. </p>\n</li>\n</ul>\n<blockquote><br>Layouts are like view container which hold multiple templates. Take my blog for example; it uses a layout which holds the top navigation bar and the disqus comments in the footer and swaps out article templates for each of my blog posts. Intelligent use of templates and layouts means that we can inject different views to our clients depening on the data sent to the view from the controller.<br></blockquote>\n\n<ul>\n<li><p><em>This is not a tutorial on HTML and CSS so for now lets just assume the HTML code is correct.</em></p>\n</li>\n<li><p>Anyhow the code below is for the file <em>layout.ftl</em> notice where we inject the Java variables we sent to the view using the <code>${some_variable_name_here}</code> syntax. Don’t forget to checkout the documentation for Freemarker or Google for some Freemarker tutorials if you are confused.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7462774.js\"> </script>\n\n<ul>\n<li>By the way don’t forget to experiment with Freemarker. Try passing serveral variable to the ftl file and get the hang of templating; its a popular technique that is used in many different programming languages <a href=\"http://docs.angularjs.org/guide/templates\" target=\"_blank\" rel=\"external\">including the Javascript Framework AngularJS</a></li>\n</ul>\n<h3 id=\"View-templates-and-layouts\"><a href=\"#View-templates-and-layouts\" class=\"headerlink\" title=\"View templates and layouts\"></a>View templates and layouts</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_view_step_2 origin/spark_view_step_2</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Given the new Bootstrap 3 powered homepage we just completed, lets now go back and refactor our old code to move the HTML injected strings out of our Controllers and into proper HTML files.</p>\n</li>\n<li><p>Create a new file called <em>articleList.ftl</em> or just edit the existing one and place it within the directory <strong>sparkle/src/main/resources/spark/template/freemarker/articleList.ftl</strong></p>\n</li>\n<li><p>Now open up HelloSpark.java and GET method for the “/“ url and change it to use the FreeMarkerRoute instead of the regular route. For our refactor we’re going to create a HashMap to store the Java Objects we wish to pass onto the view <strong>articleList.ftl</strong> file.</p>\n</li>\n</ul>\n<blockquote><br>Finnally no more creating String objects to hold our HTML!<br></blockquote>\n\n<script src=\"https://gist.github.com/taywils/7480416.js\"> </script>\n\n<ul>\n<li><p>With our Controller updated to use the layout.ftl file we now need to update our layout.ftl with the new values provided by the viewObject HashMap</p>\n</li>\n<li><p>Layouts allow use to embed child HTML pages within them so pay attention to the code where we inject a template called articleList.ftl via the “include” Freemarker tag. This allows us to separate our head and navigation links from our article View markup.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7480455.js\"> </script>\n\n<ul>\n<li>Finnally we’ll create another Freemaker template file within the same directory as the layout.ftl called “articleList.ftl”</li>\n</ul>\n<blockquote><br>Look at the code snippet for the articleList.ftl file. Pay special attention to how templating engines such as FreeMarker allow us to use conditional statements and loop over enumerable objects such as Arrays and HashMaps. However if you remember the article about why your templating engine sucks then you should agree that conditionals and loops are about all our templating engine should be responsible for… more complex logic should stay server-side within the respective Controller.<br></blockquote>\n\n<script src=\"https://gist.github.com/taywils/7480504.js\"> </script>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_view_step_3 origin/spark_view_step_3</div></pre></td></tr></table></figure>\n<ul>\n<li>Next we’re going to redo the write article form, so open up HelloSpark.java and edit the route /article/create </li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7668728.js\"> </script>\n\n<ul>\n<li><p>Notice how simple our form view code became within the controller code because all of our view specific code will now be placed within an actual HTML file instead of nasty string appened spaghetti code</p>\n</li>\n<li><p>Create the freemarker template file called <em>articleForm.ftl</em></p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7668761.js\"> </script>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_view_step_4 origin/spark_view_step_4</div></pre></td></tr></table></figure>\n<ul>\n<li>Lastly we need to update the views for editing and reading articles, so open up HelloSpark.java and change the following routes within your controller code until it matches.</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7670579.js\"> </script>\n\n<ul>\n<li>First we’re going to add a new freemarker template file called <em>articleRead.ftl</em></li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7670586.js\"> </script>\n\n<ul>\n<li><p>Lastly we need to re-use our existing <em>articleForm.ftl</em> but when the user chooses to update an article we need to populate the form with the article content to be edited</p>\n</li>\n<li><p>This can be accomplished by using Freemarker conditionals to check for an existing article and if found then place its attritbutes within the form fields</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7670599.js\"> </script>\n\n<h2 id=\"Some-other-persistence-options\"><a href=\"#Some-other-persistence-options\" class=\"headerlink\" title=\"Some other persistence options\"></a>Some other persistence options</h2><p>In this section we’re going to explore different ways for storing our application data other than stricly within the memory of our java servlet. Being a more pragmatic developer I’ve chosen to stick with three of the more popular database models (Relational, Document Store and Key-value) for educational purposes.</p>\n<ul>\n<li><p><a href=\"http://db-engines.com/en/article/Relational+DBMS?ref=RDBMS\" target=\"_blank\" rel=\"external\">db-engines.com definition of Relational Model</a></p>\n</li>\n<li><p><a href=\"http://db-engines.com/en/article/Document+Stores\" target=\"_blank\" rel=\"external\">db-engines.com definition of Document Store Model</a></p>\n</li>\n<li><p><a href=\"http://db-engines.com/en/article/Key-value+Stores\" target=\"_blank\" rel=\"external\">db-engines.com definition of Key-value Store Model</a></p>\n</li>\n</ul>\n<p>While you’re at it be sure to at least learn a bit about alternative Database Models such as <strong>wide-column stores</strong>, <strong>search optimized databases</strong>, <strong>graph databases</strong> and lesser known db models such as <strong>content stores</strong>.</p>\n<h3 id=\"Relational-Storage-via-Postgres\"><a href=\"#Relational-Storage-via-Postgres\" class=\"headerlink\" title=\"Relational Storage via Postgres\"></a>Relational Storage via Postgres</h3><p>There has always been that lingering question in the open-source community about the pros and cons of MySQL vs Postgres(or PostgreSQL but I prefer it by the street name) but over the years Postgres has finnally caught up in terms of features and performance (probably due to Heroku and AWS but thats another topic). As for myself I’ve never used Postgres before due to all of my professional work using MySQL on a LAMP stack but its always fun to learn new things.</p>\n<p><a href=\"http://readwrite.com/2013/09/10/postresql-hits-93-new-levels-of-popularity-with-the-cool-kids\" target=\"_blank\" rel=\"external\">An article on the rise of Postgres</a></p>\n<h3 id=\"Getting-started-with-PostgreSQL\"><a href=\"#Getting-started-with-PostgreSQL\" class=\"headerlink\" title=\"Getting started with PostgreSQL\"></a>Getting started with PostgreSQL</h3><ul>\n<li><p>Ok lets start, go to <a href=\"http://www.postgresql.org/download/\" target=\"_blank\" rel=\"external\">http://www.postgresql.org/download/</a></p>\n</li>\n<li><p>I’m using Ubuntu Linux but choose whatever platform you need; follow the instructions and continue reading this article when you have Postgres installed.</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install postgresql</div></pre></td></tr></table></figure>\n<ul>\n<li>Lets verify that the postgres installer worked type into your console</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">which psql</div></pre></td></tr></table></figure>\n<ul>\n<li>In order to start the postgres command line interface use the command</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">psql</div></pre></td></tr></table></figure>\n<blockquote><br>If you encounter the error message <strong>psql: FATAL:  role “$USER” does not exist</strong> then you probably need to run postgresql as the postgre admin; To do that just run the following command.<br></blockquote>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -u postgres psql</div></pre></td></tr></table></figure>\n<ul>\n<li>You should get familiar with the postgres command line interface(cli) before continuing; it differs a bit from other database systems in that many admin features are separate terminal commands which are ran from outside the cli</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_storage_step_1 origin/spark_storage_step_1</div></pre></td></tr></table></figure>\n<ul>\n<li><p>In order for us to begin using Postgres update our <em>pom.xml</em> file and add a new dependency.</p>\n</li>\n<li><p>From the command line run the following to create the database which we’ll be using</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -u postgres createdb sparkledb</div></pre></td></tr></table></figure>\n<ul>\n<li>The first thing we’ll want to do is build a service class to interact with each of our database types, within your project’s java directory create the file <em>ArticleDbService.java</em></li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7866235.js\"> </script>\n\n<h3 id=\"A-Short-Intermission-Refactoring-The-Servlet-In-Memory-Storage-Into-A-Data-Access-Object-Class\"><a href=\"#A-Short-Intermission-Refactoring-The-Servlet-In-Memory-Storage-Into-A-Data-Access-Object-Class\" class=\"headerlink\" title=\"A Short Intermission: Refactoring The Servlet In-Memory Storage Into A Data Access Object Class\"></a>A Short Intermission: Refactoring The Servlet In-Memory Storage Into A Data Access Object Class</h3><ul>\n<li><p>The ArticleDbService.java file we just created serves as the interface to the persistence storages we will implement; we are currently setup to use a java ArrayList for our storage this will be moved into a new file.</p>\n</li>\n<li><p>Create the file <em>ArticleServletDao.java</em></p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7866271.js\"> </script>\n\n<ul>\n<li><p>The <em>ArticleServletDao</em> implements the ArticleDbService methods and as such will allow use to swap it out as the current implmentation for the ArticleDbService object within our Blog application.</p>\n</li>\n<li><p>Now lets go back and refactor the <em>HelloSpark.java</em> to use the ArticleDbService. The changes are mentioned within the comments so read them so you understand; notice how much simpler our Route methods have become since we moved the DataAccess logic to its own service(s).</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7866367.js\"> </script>\n\n<h3 id=\"Building-a-PostgreSQL-DAO-for-our-Blog\"><a href=\"#Building-a-PostgreSQL-DAO-for-our-Blog\" class=\"headerlink\" title=\"Building a PostgreSQL DAO for our Blog\"></a>Building a PostgreSQL DAO for our Blog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_storage_step_2 origin/spark_storage_step_2</div></pre></td></tr></table></figure>\n<ul>\n<li>Before we can connect to the database from the Java class we created we need to set a password for the postgres user.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -u postgres psql</div></pre></td></tr></table></figure>\n<ul>\n<li>Then from the psql command line interface set the password, to keep the example simple lets use the same name as the password(that way the Java code won’t fail to connect)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter user postgres password postgres;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Our Data Access Object(DAO) class for Postgres should be created as a new file named <em>ArticlePostgresDao.java</em></p>\n</li>\n<li><p>The ArticlePostgreDao SQL code is pretty straight forward as far as the SQL goes since the queries are fairly basic(there are no complex JOINs and or temp tables) so I’ve left some helpful comments throughout the file.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7904757.js\"> </script>\n\n<ul>\n<li>One more quick refactor… add the following constructor to <em>Article.java</em> which is used by the ArticlePostgresDao.</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7904766.js\"> </script>\n\n<ul>\n<li>To use the ArticlePostgresDao just swap its name in place of the ArticleServletDao within the file <em>HelloSpark.java</em>. I hope you’re starting the see the power of the infamous design pattern <a href=\"http://stackoverflow.com/questions/2697783/\" target=\"_blank\" rel=\"external\">program to interfaces, not implementations</a>. </li>\n</ul>\n<h3 id=\"Document-Storage-with-MongoDB\"><a href=\"#Document-Storage-with-MongoDB\" class=\"headerlink\" title=\"Document Storage with MongoDB\"></a>Document Storage with MongoDB</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_storage_step_3 origin/spark_storage_step_3</div></pre></td></tr></table></figure>\n<ul>\n<li>Update your <em>pom.xml</em> to include the MongoDB Java Driver </li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7366389.js\"> </script>\n\n<ul>\n<li><p>The key aspect to using Document stores versus say a traditional relational DB is that we can (optionally)forego schema design and just store our data as freeform documents.</p>\n</li>\n<li><p>Begin by <a href=\"http://www.mongodb.org/downloads\" target=\"_blank\" rel=\"external\">downloading and installing MongoDB</a>, it shouldn’t be too much of a hassle. <a href=\"http://docs.mongodb.org/manual/\" target=\"_blank\" rel=\"external\">If you get stuck read the manual</a></p>\n</li>\n<li><p>Now that we’re done installing MongoDB create a new file within your src/main/java directory called <em>ArticleMongoDao.java</em></p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7952171.js\"> </script>\n\n<ul>\n<li>We’re not even skimming the surface as to what MongoDB is fully capable of due to the simplicity of this application but I imagine you’re starting to picture the flexibility one obtains by removing the constraint of a rigid schema from the underlying DAO.</li>\n</ul>\n<h2 id=\"Homework-Create-a-checklist-application\"><a href=\"#Homework-Create-a-checklist-application\" class=\"headerlink\" title=\"Homework: Create a checklist application\"></a>Homework: Create a checklist application</h2><ul>\n<li>Use the examples presented in the tutorial to write a Java web app using Spark to let a user create, read, update and delete daily tasks.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Some friends and I want build a large project in Java beginning early next year so in the meantime we all need to brush up on web development with Java. Although I’ve used Spring(which is awesome by the way) I wanted to explore some alternatives for building some lightweight MVC apps that can be rapidly developed without having to worry about the overhead of learning the Spring framework in depth. Thus I discovered Spark; a micro framework for Java.</p>","more":"<h2 id=\"Setting-up-Java-for-web-development\"><a href=\"#Setting-up-Java-for-web-development\" class=\"headerlink\" title=\"Setting up Java for web development\"></a>Setting up Java for web development</h2><h3 id=\"Before-you-begin-download-and-install-Git\"><a href=\"#Before-you-begin-download-and-install-Git\" class=\"headerlink\" title=\"Before you begin download and install Git\"></a>Before you begin download and install Git</h3><ul>\n<li><p><a href=\"http://git-scm.com/\">Download and install git</a></p>\n</li>\n<li><p>The main GitRepo for this tutorial is <a href=\"https://github.com/taywils/java_spark_tutorial\">https://github.com/taywils/java_spark_tutorial</a></p>\n</li>\n<li><p>So create a new directory on your machine, then change directory into it and run the following code</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/taywils/java_spark_tutorial.git .</div></pre></td></tr></table></figure>\n<ul>\n<li>In order to follow along with each step of the tutorial we’ll want to be able to pull down remote git branches into our local repo</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch origin</div></pre></td></tr></table></figure>\n<ul>\n<li>Run the following git command in order to list all remote branches or just browse the Java spark tutorial repo on Github <a href=\"https://github.com/taywils/java_spark_tutorial\">https://github.com/taywils/java_spark_tutorial</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -a</div></pre></td></tr></table></figure>\n<h3 id=\"Downloading-the-JRE-and-JDK\"><a href=\"#Downloading-the-JRE-and-JDK\" class=\"headerlink\" title=\"Downloading the JRE and JDK\"></a>Downloading the JRE and JDK</h3><ul>\n<li>Check to see if you already have Java 7 installed on your machine by opening either terminal or command prompt and typing <strong>java –version</strong></li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_version_snap.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_version_snap.png\" alt=\"java version\"/></a><br></div>\n\n<blockquote><br>If you see a similiar result then you can skip this section and go to “Configuring your IDE” since you already have a working Java runtime.<br></blockquote>\n\n<ul>\n<li><p>Go to Java downloads page and follow the instructions <a href=\"https://java.com/en/download/index.jsp\">click here to dowload Java</a></p>\n</li>\n<li><p>If you’re still having trouble try adding the Java install directory to your environment HOME path or just Google how to install Java 7</p>\n</li>\n</ul>\n<h3 id=\"Configuring-your-IDE\"><a href=\"#Configuring-your-IDE\" class=\"headerlink\" title=\"Configuring your IDE\"></a>Configuring your IDE</h3><p>As for the choice of IDE, we have quite a few but I prefer to use IntelliJ IDEA by JetBrains. It supports Java and many other programming languages and it has superb documentation and a large community of developers who write amazing plugins.</p>\n<ul>\n<li><p><a href=\"http://www.jetbrains.com/idea/free_java_ide.html\">Download the community edition of IntelliJ for free</a></p>\n</li>\n<li><p>If you plan on using Java professionally or are just frustrated by the lack of features on the community edition then you can purchase the professional edition as well.</p>\n</li>\n<li><p>Otherwise there is always <a href=\"http://www.eclipse.org/\">Eclipse</a> and <a href=\"https://netbeans.org/\">NetBeans</a></p>\n</li>\n</ul>\n<h3 id=\"Get-Hello-World-running-and-configure-Maven\"><a href=\"#Get-Hello-World-running-and-configure-Maven\" class=\"headerlink\" title=\"Get Hello World running and configure Maven\"></a>Get Hello World running and configure Maven</h3><p>Assuming you chose to install the community edition of IntelliJ IDEA we’ll get Hello World running just to make sure you have your Java Runtime and SDK setup correctly.</p>\n<ul>\n<li><p>Open IntelliJ</p>\n</li>\n<li><p>From the main menu click the “Configure” icon, we are going to check to see if we have “Maven” configured as it will be used later.</p>\n</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_create_new_project.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_create_new_project.png\" alt=\"create project\"/></a><br></div>\n\n<ul>\n<li>On the configure screen click “Plugins”</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_menu.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_menu.png\" alt=\"plugins\"/></a><br></div>\n\n<ul>\n<li>Verify that Maven is checked along with the Maven Integration Extension</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_maven_checked.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_intellij_configure_maven_checked.png\" alt=\"maven checked\"/></a><br></div>\n\n<h3 id=\"Install-Maven-onto-your-machine\"><a href=\"#Install-Maven-onto-your-machine\" class=\"headerlink\" title=\"Install Maven onto your machine\"></a>Install Maven onto your machine</h3><ul>\n<li><p>Open a web browser and <a href=\"http://maven.apache.org/download.cgi\">Download Apache Maven</a></p>\n</li>\n<li><p>If you’re using a Mac I recommend using Homebrew </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install maven</div></pre></td></tr></table></figure>\n</li>\n<li><p>Follow the instructions on how to test that you have it installed properly <a href=\"http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html\">Apache Maven in 5 Minutes</a></p>\n</li>\n</ul>\n<blockquote class=\"quote\"><br>Apache Maven is wonderfully complex and powerful tool used by Java developers for everything from build automation to project package installation and versioning to running your JUnit tests. For the most part we’ll be using it as a package manager similar to Ruby gem, PHP composer and or C# NuGet.<br></blockquote>\n\n<h3 id=\"Setup-Maven-for-IntelliJ\"><a href=\"#Setup-Maven-for-IntelliJ\" class=\"headerlink\" title=\"Setup Maven for IntelliJ\"></a>Setup Maven for IntelliJ</h3><ul>\n<li><p>So far so good, now go back to the IntelliJ home screen click “Create New Project”</p>\n</li>\n<li><p>On create project screen you might see a bunch of options on the leftmost sidebar but the one we want to select is <em>Maven Module</em> under the “Java” heading</p>\n</li>\n<li><p>IntelliJ will then create a new project for us alredy setup for using Maven to manage our external dependencies.</p>\n</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_new_project_select.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_new_project_select.png\" alt=\"new maven project\"/></a><br></div>\n\n<ul>\n<li><p>Once the new project has been created I named mine “Sparkle” figure out how to open “Project Settings” for your project, you should see “Maven” from the list of Settings and your screen will resemble the images below.</p>\n</li>\n<li><p>For Windows users you’ll want to set your “M2 HOME” by adding the Maven install folder path to the system environment variables. You’ll then not have to explicitly set a M2 Home from the settings screen</p>\n</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_windows.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_windows.png\" alt=\"windows maven settings\"/></a><br></div>\n\n<ul>\n<li>For Linux users it will be some variation of /usr/share or whatever your distribution did with the Maven install but the below is my setup for Ubuntu 12 </li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_linux.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_maven_settings_linux.png\" alt=\"linux maven settings\"/></a><br></div>\n\n<ul>\n<li>On Mac OSX it will probably be very similar to Linux</li>\n</ul>\n<blockquote><br>Do not think for one second that just because IntelliJ can manage your Maven that you shouldn’t learn how to use the Maven command line interface.<br>The Maven cli is pretty robust and is what your IDE calls in the background anyways so don’t be lazy… actually I take that back… be lazy<br></blockquote>\n\n<h3 id=\"Hello-World…\"><a href=\"#Hello-World…\" class=\"headerlink\" title=\"Hello World…\"></a>Hello World…</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b hello_step_1 origin/hello_step_1</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Now that we’ve setup Maven we’re just going to create a quick hello world program. From the Project sidebar click src -&gt; main and then right click the “java” folder</p>\n</li>\n<li><p>Create a new class file and name it “HelloSpark”</p>\n</li>\n<li><p>Now enter the code</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7332503.js\"> </script>\n\n<ul>\n<li><p>Next from the top toolbar click Build -&gt; Make Project</p>\n</li>\n<li><p>Then right next to Build on the toolbar click Run -&gt; Run ‘Hello Spark’</p>\n</li>\n<li><p>If you don’t get something like shown in the image below then you probably misconfigured your Java or IntelliJ settings. Please seek advanced troubleshooting on StackOverflow or the IntelliJ documentation.</p>\n</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_hellospark_hello_world.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_hellospark_hello_world.png\" alt=\"Hello World\"/></a><br></div>\n\n<h2 id=\"Running-the-Spark-demo-app\"><a href=\"#Running-the-Spark-demo-app\" class=\"headerlink\" title=\"Running the Spark demo app\"></a>Running the Spark demo app</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_demo_step_1 origin/spark_demo_step_1</div></pre></td></tr></table></figure>\n<ul>\n<li>Lets begin by modifying our Hello world class file to use the Spark framework so we can get started with Java web development</li>\n</ul>\n<div align=\"center\"><br><a href=\"http://www.sparkjava.com/index.html\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_logo.png\" alt=\"Spark A Java MVC micro framework\"/></a><br></div>\n\n<ul>\n<li>Maven allows us to include external dependencies within our projects via the <em>pom.xml</em> file. So open up the <em>pom.xml</em> file and add the dependency for Spark.</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7366389.js\"> </script>\n\n<ul>\n<li>From Intellij when you make a change to a Maven pom.xml file you can set it to “enable auto-import” so it refreshes your Maven dependencies when you update your pom.xml</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_demo_step_2 origin/spark_demo_step_2</div></pre></td></tr></table></figure>\n<ul>\n<li>Next open up HelloSpark.java and remove all the existing code… replace it with the snippet below</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7366522.js\"> </script>\n\n<blockquote><br>Just in case you were curious you’ll note that the Spark documentation uses “import static” so <a href=\"http://stackoverflow.com/questions/162187/what-does-the-static-modifier-after-import-mean\">here is a brief explaination of import static</a>. In short you can uses a class’ static methods without explicitly typing the classname; beware of its pitfalls though.<br></blockquote>\n\n<ul>\n<li><p>Now from within IntelliJ click Run -&gt; “run ‘HelloSpark’ from the top menu, the code will startup and then it will let you know that Spark is currently running on some port most likely localhost:4567</p>\n</li>\n<li><p>Launch a new web browser window and goto <a href=\"http://localhost:4567/hello\">http://localhost:4567/hello</a></p>\n</li>\n<li><p>Congrats!!! You are now a super web developer!</p>\n</li>\n</ul>\n<blockquote><br>So how does that work? Like many MVC applications Spark provides us a basic router to let our app respond to HTTP requests. Of the four most commonly used are GET PUT POST DELETE. Those four HTTP request types when used in conjunction with the HTTP Header(s) for the request such as Content-type: application/json and or application/x-www-form-urlencoded allow us to capture and handle all sorts of browser request. For a good <a href=\"http://net.tutsplus.com/tutorials/other/a-beginners-introduction-to-http-and-rest/\">introduction to HTTP and REST see the article on net.tutsplus</a><br></blockquote>\n\n<ul>\n<li>For some more fun play around with some of the basic features you can do with Route such as capturing user supplied parameters and or adding new routes</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_demo_step_3 origin/spark_demo_step_3</div></pre></td></tr></table></figure>\n<script src=\"https://gist.github.com/taywils/7366801.js\"> </script>\n\n<ul>\n<li>Next lets introduce the POST request. We’re going to use POST to store some data and then display it as a list. This example is very crude and will help us segway into mini blog tutorial further on in the article.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_demo_step_4 origin/spark_demo_step_4</div></pre></td></tr></table></figure>\n<ul>\n<li>In the snippet of code below we use a POST request on the route <em>/add/:item</em> to add things to our list and then use GET on the route <em>/list</em> to display them</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7367126.js\"> </script>\n\n<ul>\n<li><p>So update your HelloSpark.java file, press build and then run the code. Launch your web browser and goto <a href=\"http://localhost:4567/list\">http://localhost:4567/list</a></p>\n</li>\n<li><p>You should be greeted by our message “Try adding some things to your list”</p>\n</li>\n<li><p>Now you might be tempted to try navigating to <a href=\"http://localhost:4567/add/bananas\">http://localhost:4567/add/bananas</a> or something </p>\n</li>\n</ul>\n<blockquote><br><strong>BUT THAT WON’T WORK AT ALL!</strong><br></blockquote>\n\n<ul>\n<li>When we visit urls from our web browser we by default use the GET request so <a href=\"http://www.google.com\">http://www.google.com</a> calls the GET request on some google webserver somewhere.</li>\n</ul>\n<blockquote><br>If you’re puzzled as to why you hit a 404 page when we clearly defined a POST route to /add/ you’ve just discovered that our application will only route POST request to a post handler method. To fix this we should actually send a HTTP POST request instead of using GET.<br></blockquote>\n\n<ul>\n<li>To send a POST request open a terminal window and use <em>curl</em> or if you’re on a windows machine use PowerShell <em>yes I said PowerShell please stop using command prompt</em></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -X POST http://localhost:4567/add/apples</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Invoke-RestMethod -Uri http://localhost:4567/add/apples -Method POST</div></pre></td></tr></table></figure>\n<ul>\n<li>Try making a few POST request and thing go back to <a href=\"http://localhost:4567/list\">http://localhost:4567/list</a> and be amazed</li>\n</ul>\n<h2 id=\"CRUD-Example-A-Blog\"><a href=\"#CRUD-Example-A-Blog\" class=\"headerlink\" title=\"CRUD Example: A Blog\"></a>CRUD Example: A Blog</h2><blockquote><br>Within this section we’ll be creating a basic blog application that will eventually grow more complex as we add more features. Its important to start off slow so the first iteration of the blog will be very concise and perform just the bare minium in order to function. Being a CRUD app each aspect of CRUD will be explored.<br></blockquote>\n\n<ul>\n<li><p>Before we start our blog application will need an object representation of an Article. Our article will have title, summary and content for now. Article.java is just plain old Java so there really isn’t much to get excited about; the MVC web stuff will follow.</p>\n</li>\n<li><p>Within the same package as <em>HelloSpark.java</em> create the file <em>Article.java</em></p>\n</li>\n</ul>\n<div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_project_display.png\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_project_display.png\" alt=\"Project structure with Article.java\"/></a><br></div>\n\n<script src=\"https://gist.github.com/taywils/7393394.js\"> </script>\n\n<h3 id=\"Create\"><a href=\"#Create\" class=\"headerlink\" title=\"Create\"></a>Create</h3><ul>\n<li>Return to your HelloSpark.java code and delete everything making sure you’re starting off with a clean slate</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_blog_step_1 origin/spark_blog_step_1</div></pre></td></tr></table></figure>\n<ul>\n<li><p>We’ll begin by importing all of the necessary files which include the spark library and the two java.util classes</p>\n</li>\n<li><p>As a blog our objective is to Create, Read, Update and Delete new articles which are just bodies of text which we’ll also assign a unique identification number and a timestamp of the date when we created the article.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7382438.js\"> </script>\n\n<ul>\n<li>When a user hits the root index of the blog we should show the list of articles written ordered by their date of creation else a message that indicates no articles have yet been added. To accomplish this we’ll add a conditional statment and create a <em>StringBuilder</em> object to render some HTML</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7382471.js\"> </script>\n\n<ul>\n<li><p>In order to publish articles we need a way to create them and submit the information to our server side code. Add another GET method which will handle requests made to /article/create</p>\n</li>\n<li><p>On the page is a form which accepts a new title, summary and content for the new blog article</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7393074.js\"> </script>\n\n<ul>\n<li><p>Right now you may restart the Spark app and note that by clicking the “Write Article” link you are sent over to the form we created…</p>\n</li>\n<li><p>However when you click the “Publish” button nothing happens; in order to fix that we need write a method to handle the POST request called from /article/create</p>\n</li>\n<li><p>We’ll want to persist the article to our storage on the server side code by capturing the form elements <em>article-title</em>, <em>article-summary</em> and <em>article-content</em></p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7393125.js\"> </script>\n\n<h3 id=\"Read\"><a href=\"#Read\" class=\"headerlink\" title=\"Read\"></a>Read</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_blog_step_2 origin/spark_blog_step_2</div></pre></td></tr></table></figure>\n<blockquote><br>The next part of CRUD is actually the easist since it doesn’t actually involve modifying data. To do so we’ll use the read article link associated with every Article object and use the unique id number of the article to pull its information from our storage when the user requests a GET /article/read/:id from our server<br></blockquote>\n\n<ul>\n<li>To read an article is very simple, just use a for loop until we find the ID of the article. Of course using a straight up iterative search is horrific for very large numbers of articles but we’ll look at alternative data persistance later on in this post.</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7394124.js\"> </script>\n\n<h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_blog_step_3 origin/spark_blog_step_3</div></pre></td></tr></table></figure>\n<ul>\n<li><p>When updating an existing article all we need to do is possibly overwrite the found content, so add a new Route for /article/update/:id </p>\n</li>\n<li><p>The code behind the /article/update/:id will use the same form as the /article/create except the form fields will be pre-populated</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7403433.js\"> </script>\n\n<ul>\n<li>Now all that is left is to add the POST handler for our update form</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7403558.js\"> </script>\n\n<h3 id=\"Delete\"><a href=\"#Delete\" class=\"headerlink\" title=\"Delete\"></a>Delete</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_blog_step_4 origin/spark_blog_step_4</div></pre></td></tr></table></figure>\n<blockquote><br>Along with Read Delete is another rather simple action since it only requires a single method along with a redirect<br>However if you recall back to when we created the Article Model, we had a boolean value called <em>deleted</em>. In this sense any deleted articles are basically marked as deleted and not shown to the UI. Later on when we explore different types of persistence we’ll actually delete articles for good but for now this will have to suffice.<br></blockquote>\n\n<ul>\n<li>Within your HelloSpark.java file add the method to handle the delete action /article/delete/:id</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7404207.js\"> </script>\n\n<ul>\n<li>Lastly we need to go back and edit our Blog homepage to hide deleted articles</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7404222.js\"> </script>\n\n<h2 id=\"Putting-the-V-in-MVC\"><a href=\"#Putting-the-V-in-MVC\" class=\"headerlink\" title=\"Putting the V in MVC\"></a>Putting the V in MVC</h2><div align=\"center\"><br><a href=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_bootstrap.PNG\"><img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/java_spark_tutorial/java_spark_blog_bootstrap.PNG\" alt=\"blog bootstrap3\"/></a><br></div>\n\n<blockquote><br>Recall how in the previous code all of our views or HTML code was simply shoved into our controller routes… this won’t work in actual practice and is in fact not a very sane way to structure code. Thus we’ll soon work out a method to deal with the fact that our core logic should be separated from what our clients view. This idea is what brings us to the VIEW portion of Model View Controller.<br></blockquote>\n\n<ul>\n<li><p>In this section we will be using a very powerful Java templating engine called <em>Freemarker</em> which will allow us to separate our Controller logic from our View layer</p>\n</li>\n<li><p>Lucky for us the author of the Spark framework has already created a library <em>spark-template-freemarker</em> which provides an interface to using the Freemarker template engine. So open up your pom.xml file and add the following dependency.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7461578.js\"> </script> \n\n<blockquote><br>However before we start demonstrating the power of a well made html templating engine its important to not let your templated HTML get out of hand; to the point where your templated HTML substitues for your entire application. A famous blog post titled <a href=\"http://www.workingsoftware.com.au/page/Your_templating_engine_sucks_and_everything_you_have_ever_written_is_spaghetti_code_yes_you\">Your templating engine sucks and everything you have ever written is spaghetti code</a> takes a critical look at how easy it is to completely and utterly abuse the living crap out of your code by overusing template engines until all of your code basically becomes PHP4… and lets not go back to those days. For the TL;DR the author basically says to avoid heavy use of conditionals and or functions/macros within your templated HTML; think of it as when developing a Java application and how you <a href=\"http://stackoverflow.com/questions/66540/system-gc-in-java\">rarely ever want to manually invoke the garbage collector.</a><br></blockquote>\n\n<ul>\n<li>Lets keep moving… for now we’ll add a test Route to our application before we go back and refactor the blog code to remove the messy string injected html.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_view_step_1 origin/spark_view_step_1</div></pre></td></tr></table></figure>\n<ul>\n<li><p>In the code below we create a HashMap which will map our Java objects to variables which can be called directly from our View templated HTML files</p>\n</li>\n<li><p>The HashMap elements <em>blogTitle</em>, <em>descriptionTitle</em>, and the two <em>descriptionBody</em> will be reffered to within our freemarker templates and appear exactly as they do within the HelloSpark.java file.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7462642.js\"> </script>\n\n<ul>\n<li><p>Next within your IntelliJ project directory create the folder structure beginning with the <em>resources</em> directory resources/spark/template/freemarker</p>\n</li>\n<li><p>Once that is done right click on the newly created directory adn add the file “layout.ftl” the naming here is important since we will be discussing a common pattern in MVC which is to split your Views between layouts and templates. </p>\n</li>\n</ul>\n<blockquote><br>Layouts are like view container which hold multiple templates. Take my blog for example; it uses a layout which holds the top navigation bar and the disqus comments in the footer and swaps out article templates for each of my blog posts. Intelligent use of templates and layouts means that we can inject different views to our clients depening on the data sent to the view from the controller.<br></blockquote>\n\n<ul>\n<li><p><em>This is not a tutorial on HTML and CSS so for now lets just assume the HTML code is correct.</em></p>\n</li>\n<li><p>Anyhow the code below is for the file <em>layout.ftl</em> notice where we inject the Java variables we sent to the view using the <code>${some_variable_name_here}</code> syntax. Don’t forget to checkout the documentation for Freemarker or Google for some Freemarker tutorials if you are confused.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7462774.js\"> </script>\n\n<ul>\n<li>By the way don’t forget to experiment with Freemarker. Try passing serveral variable to the ftl file and get the hang of templating; its a popular technique that is used in many different programming languages <a href=\"http://docs.angularjs.org/guide/templates\">including the Javascript Framework AngularJS</a></li>\n</ul>\n<h3 id=\"View-templates-and-layouts\"><a href=\"#View-templates-and-layouts\" class=\"headerlink\" title=\"View templates and layouts\"></a>View templates and layouts</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_view_step_2 origin/spark_view_step_2</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Given the new Bootstrap 3 powered homepage we just completed, lets now go back and refactor our old code to move the HTML injected strings out of our Controllers and into proper HTML files.</p>\n</li>\n<li><p>Create a new file called <em>articleList.ftl</em> or just edit the existing one and place it within the directory <strong>sparkle/src/main/resources/spark/template/freemarker/articleList.ftl</strong></p>\n</li>\n<li><p>Now open up HelloSpark.java and GET method for the “/“ url and change it to use the FreeMarkerRoute instead of the regular route. For our refactor we’re going to create a HashMap to store the Java Objects we wish to pass onto the view <strong>articleList.ftl</strong> file.</p>\n</li>\n</ul>\n<blockquote><br>Finnally no more creating String objects to hold our HTML!<br></blockquote>\n\n<script src=\"https://gist.github.com/taywils/7480416.js\"> </script>\n\n<ul>\n<li><p>With our Controller updated to use the layout.ftl file we now need to update our layout.ftl with the new values provided by the viewObject HashMap</p>\n</li>\n<li><p>Layouts allow use to embed child HTML pages within them so pay attention to the code where we inject a template called articleList.ftl via the “include” Freemarker tag. This allows us to separate our head and navigation links from our article View markup.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7480455.js\"> </script>\n\n<ul>\n<li>Finnally we’ll create another Freemaker template file within the same directory as the layout.ftl called “articleList.ftl”</li>\n</ul>\n<blockquote><br>Look at the code snippet for the articleList.ftl file. Pay special attention to how templating engines such as FreeMarker allow us to use conditional statements and loop over enumerable objects such as Arrays and HashMaps. However if you remember the article about why your templating engine sucks then you should agree that conditionals and loops are about all our templating engine should be responsible for… more complex logic should stay server-side within the respective Controller.<br></blockquote>\n\n<script src=\"https://gist.github.com/taywils/7480504.js\"> </script>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_view_step_3 origin/spark_view_step_3</div></pre></td></tr></table></figure>\n<ul>\n<li>Next we’re going to redo the write article form, so open up HelloSpark.java and edit the route /article/create </li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7668728.js\"> </script>\n\n<ul>\n<li><p>Notice how simple our form view code became within the controller code because all of our view specific code will now be placed within an actual HTML file instead of nasty string appened spaghetti code</p>\n</li>\n<li><p>Create the freemarker template file called <em>articleForm.ftl</em></p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7668761.js\"> </script>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_view_step_4 origin/spark_view_step_4</div></pre></td></tr></table></figure>\n<ul>\n<li>Lastly we need to update the views for editing and reading articles, so open up HelloSpark.java and change the following routes within your controller code until it matches.</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7670579.js\"> </script>\n\n<ul>\n<li>First we’re going to add a new freemarker template file called <em>articleRead.ftl</em></li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7670586.js\"> </script>\n\n<ul>\n<li><p>Lastly we need to re-use our existing <em>articleForm.ftl</em> but when the user chooses to update an article we need to populate the form with the article content to be edited</p>\n</li>\n<li><p>This can be accomplished by using Freemarker conditionals to check for an existing article and if found then place its attritbutes within the form fields</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7670599.js\"> </script>\n\n<h2 id=\"Some-other-persistence-options\"><a href=\"#Some-other-persistence-options\" class=\"headerlink\" title=\"Some other persistence options\"></a>Some other persistence options</h2><p>In this section we’re going to explore different ways for storing our application data other than stricly within the memory of our java servlet. Being a more pragmatic developer I’ve chosen to stick with three of the more popular database models (Relational, Document Store and Key-value) for educational purposes.</p>\n<ul>\n<li><p><a href=\"http://db-engines.com/en/article/Relational+DBMS?ref=RDBMS\">db-engines.com definition of Relational Model</a></p>\n</li>\n<li><p><a href=\"http://db-engines.com/en/article/Document+Stores\">db-engines.com definition of Document Store Model</a></p>\n</li>\n<li><p><a href=\"http://db-engines.com/en/article/Key-value+Stores\">db-engines.com definition of Key-value Store Model</a></p>\n</li>\n</ul>\n<p>While you’re at it be sure to at least learn a bit about alternative Database Models such as <strong>wide-column stores</strong>, <strong>search optimized databases</strong>, <strong>graph databases</strong> and lesser known db models such as <strong>content stores</strong>.</p>\n<h3 id=\"Relational-Storage-via-Postgres\"><a href=\"#Relational-Storage-via-Postgres\" class=\"headerlink\" title=\"Relational Storage via Postgres\"></a>Relational Storage via Postgres</h3><p>There has always been that lingering question in the open-source community about the pros and cons of MySQL vs Postgres(or PostgreSQL but I prefer it by the street name) but over the years Postgres has finnally caught up in terms of features and performance (probably due to Heroku and AWS but thats another topic). As for myself I’ve never used Postgres before due to all of my professional work using MySQL on a LAMP stack but its always fun to learn new things.</p>\n<p><a href=\"http://readwrite.com/2013/09/10/postresql-hits-93-new-levels-of-popularity-with-the-cool-kids\">An article on the rise of Postgres</a></p>\n<h3 id=\"Getting-started-with-PostgreSQL\"><a href=\"#Getting-started-with-PostgreSQL\" class=\"headerlink\" title=\"Getting started with PostgreSQL\"></a>Getting started with PostgreSQL</h3><ul>\n<li><p>Ok lets start, go to <a href=\"http://www.postgresql.org/download/\">http://www.postgresql.org/download/</a></p>\n</li>\n<li><p>I’m using Ubuntu Linux but choose whatever platform you need; follow the instructions and continue reading this article when you have Postgres installed.</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install postgresql</div></pre></td></tr></table></figure>\n<ul>\n<li>Lets verify that the postgres installer worked type into your console</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">which psql</div></pre></td></tr></table></figure>\n<ul>\n<li>In order to start the postgres command line interface use the command</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">psql</div></pre></td></tr></table></figure>\n<blockquote><br>If you encounter the error message <strong>psql: FATAL:  role “$USER” does not exist</strong> then you probably need to run postgresql as the postgre admin; To do that just run the following command.<br></blockquote>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -u postgres psql</div></pre></td></tr></table></figure>\n<ul>\n<li>You should get familiar with the postgres command line interface(cli) before continuing; it differs a bit from other database systems in that many admin features are separate terminal commands which are ran from outside the cli</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_storage_step_1 origin/spark_storage_step_1</div></pre></td></tr></table></figure>\n<ul>\n<li><p>In order for us to begin using Postgres update our <em>pom.xml</em> file and add a new dependency.</p>\n</li>\n<li><p>From the command line run the following to create the database which we’ll be using</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -u postgres createdb sparkledb</div></pre></td></tr></table></figure>\n<ul>\n<li>The first thing we’ll want to do is build a service class to interact with each of our database types, within your project’s java directory create the file <em>ArticleDbService.java</em></li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7866235.js\"> </script>\n\n<h3 id=\"A-Short-Intermission-Refactoring-The-Servlet-In-Memory-Storage-Into-A-Data-Access-Object-Class\"><a href=\"#A-Short-Intermission-Refactoring-The-Servlet-In-Memory-Storage-Into-A-Data-Access-Object-Class\" class=\"headerlink\" title=\"A Short Intermission: Refactoring The Servlet In-Memory Storage Into A Data Access Object Class\"></a>A Short Intermission: Refactoring The Servlet In-Memory Storage Into A Data Access Object Class</h3><ul>\n<li><p>The ArticleDbService.java file we just created serves as the interface to the persistence storages we will implement; we are currently setup to use a java ArrayList for our storage this will be moved into a new file.</p>\n</li>\n<li><p>Create the file <em>ArticleServletDao.java</em></p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7866271.js\"> </script>\n\n<ul>\n<li><p>The <em>ArticleServletDao</em> implements the ArticleDbService methods and as such will allow use to swap it out as the current implmentation for the ArticleDbService object within our Blog application.</p>\n</li>\n<li><p>Now lets go back and refactor the <em>HelloSpark.java</em> to use the ArticleDbService. The changes are mentioned within the comments so read them so you understand; notice how much simpler our Route methods have become since we moved the DataAccess logic to its own service(s).</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7866367.js\"> </script>\n\n<h3 id=\"Building-a-PostgreSQL-DAO-for-our-Blog\"><a href=\"#Building-a-PostgreSQL-DAO-for-our-Blog\" class=\"headerlink\" title=\"Building a PostgreSQL DAO for our Blog\"></a>Building a PostgreSQL DAO for our Blog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_storage_step_2 origin/spark_storage_step_2</div></pre></td></tr></table></figure>\n<ul>\n<li>Before we can connect to the database from the Java class we created we need to set a password for the postgres user.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -u postgres psql</div></pre></td></tr></table></figure>\n<ul>\n<li>Then from the psql command line interface set the password, to keep the example simple lets use the same name as the password(that way the Java code won’t fail to connect)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter user postgres password postgres;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Our Data Access Object(DAO) class for Postgres should be created as a new file named <em>ArticlePostgresDao.java</em></p>\n</li>\n<li><p>The ArticlePostgreDao SQL code is pretty straight forward as far as the SQL goes since the queries are fairly basic(there are no complex JOINs and or temp tables) so I’ve left some helpful comments throughout the file.</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7904757.js\"> </script>\n\n<ul>\n<li>One more quick refactor… add the following constructor to <em>Article.java</em> which is used by the ArticlePostgresDao.</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7904766.js\"> </script>\n\n<ul>\n<li>To use the ArticlePostgresDao just swap its name in place of the ArticleServletDao within the file <em>HelloSpark.java</em>. I hope you’re starting the see the power of the infamous design pattern <a href=\"http://stackoverflow.com/questions/2697783/\">program to interfaces, not implementations</a>. </li>\n</ul>\n<h3 id=\"Document-Storage-with-MongoDB\"><a href=\"#Document-Storage-with-MongoDB\" class=\"headerlink\" title=\"Document Storage with MongoDB\"></a>Document Storage with MongoDB</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b spark_storage_step_3 origin/spark_storage_step_3</div></pre></td></tr></table></figure>\n<ul>\n<li>Update your <em>pom.xml</em> to include the MongoDB Java Driver </li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7366389.js\"> </script>\n\n<ul>\n<li><p>The key aspect to using Document stores versus say a traditional relational DB is that we can (optionally)forego schema design and just store our data as freeform documents.</p>\n</li>\n<li><p>Begin by <a href=\"http://www.mongodb.org/downloads\">downloading and installing MongoDB</a>, it shouldn’t be too much of a hassle. <a href=\"http://docs.mongodb.org/manual/\">If you get stuck read the manual</a></p>\n</li>\n<li><p>Now that we’re done installing MongoDB create a new file within your src/main/java directory called <em>ArticleMongoDao.java</em></p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/taywils/7952171.js\"> </script>\n\n<ul>\n<li>We’re not even skimming the surface as to what MongoDB is fully capable of due to the simplicity of this application but I imagine you’re starting to picture the flexibility one obtains by removing the constraint of a rigid schema from the underlying DAO.</li>\n</ul>\n<h2 id=\"Homework-Create-a-checklist-application\"><a href=\"#Homework-Create-a-checklist-application\" class=\"headerlink\" title=\"Homework: Create a checklist application\"></a>Homework: Create a checklist application</h2><ul>\n<li>Use the examples presented in the tutorial to write a Java web app using Spark to let a user create, read, update and delete daily tasks.</li>\n</ul>"},{"title":"Learning Magento - Starting Out","date":"2013-07-16T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/learningmagentopart1.jpg","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/learningmagentopart1.jpg","comments":0,"_content":"\nA new job has required me to learn as much as possible about the popular E-commerce framework Magento. In this series I'll blog about my entire learning experience; the good the bad and the ugly. Taken from the perspective of a developer who has only really heard of Magento from the PHP rumor mill I hope this series will be useful as a case study for Magento's ease of adoption.\n\n<!-- more -->\n### My Thoughts On The Current State Of E-commerce Software\n\nWhen I think of E-commerce software my mind automatically divides it into distinct categories.\n\n1. Small time E-commerce for low revenue Mom and Pop shops using Shopify\n2. Middle tier online companies using some online hosted provider such as Amazon and or Ebay\n3. Growing companies who can afford to hire I.T/Software Devs to build a customized platform\n4. These companies are usually flooding job boards looking for PHP and or Ruby developers\n5. They typically use Magento and or Ruby's well made but lesser known Spree framework\n6. Big time million dollar per year companines who have outgrown the base configurations of Magento/Spree\n7. At this point is where most large E-commerce companies tend to either make it or break it\n8. It's also at this crucial point where the company's success is directly correlated to the strength of their development team\n9. When moving beyond the bootstrapped defaults of Magento/Spree I've noticed a lot of fricition between what marketing/sales demands (like engravable products, blowout sales and or wacky often ill-defined store credit discounts) and where E-commerce developers start to enter long death march production support hours and basically begin to burn out.\n10. So the question becomes; how can E-commerce software biz-scale to handle complex sales/marketing demands?\n\n### Biz-scale and E-commerce\nOk yes I admit, I might not have a single f-ing clue what I'm trying to describe when I mention biz-scale but if you bear with me I'll try my best to explain. So in short its come to my very narrow perspective that the problem of just scaling out a technology stack to handle increased load and user uptime has been for the most part completely solved. Whether its introducing load balancing, spinning up some additional servers on Amazon EC2, Heroku, Windows Azure and the ever growing list of cloud computing hosts that developers can no longer make excuses for unesscessary downtime. However, on the flip side I have noticed a rather interesting trend... there are development shops which despite being able to scale out technologically speaking absolutely fail hard on their faces when it comes to implementing new features and meeting diverse customer demands. The simplest most apparent example of this is that hypothetical company we've all heard of lets call them X-com whose grey-beard developers looked at possible NoSQL options and threw them under the bus. For various reasons whether X-com developers just don't get that certain business logic can be better represented via graph-databases(Neo4j) or document stores(MongoDB) and that the ability of tools such as Redis to optionally persist caches to disk might actually be worth investing some time into in order to hedge against technical debt. Meanwhile customers are demanding that their product automatically sync with their mobile phones and X-com's marketing team needs informative up to the minute time sensitive reports to present to the board for increasing the bottom line.\n\nSo although X-com's servers handle peak load and minimal downtime, whether its through sheer ignorance, sloth and or plain stubborness the development team shudders at the single thought of adding a feature to their bloated platform. In my opinion I believe its not just the tech-stack that I'm addressing which I already believe is fine performant and highly scalable; I think the problem of extending features and building a strong platform boils down to being able to build upon layers of abstraction which algin with the needs of the business. When I see development teams blatantly trying to ape one anothers tech-stack simply because it worked for them misses the point entirely. Perhaps we as software developers are entering the end of the convention-over-configuration era simply because we need to fine tune our products to uniquely serve the interest of our customers and keep them delightled happy and satisfied. Or maybe its just that I've noticed just from casual observation that development tools have been growing more complex and tending towards high degrees of configuration as a direct response of consumer demand who have grown acustomed to more complex software.\n\nTo conclude this rant I'm always reminded of a previous job where the manager walks in and demands that we implement a sort of Twitter-esque style following for the user profiles on our website. The company at the time was not suffering from high load and or downtime but somehow our systems and tech-stack were so tailored to cookie-cutter user posts to a comment thread that it took considerable time(many developer hours lost) just to extend the very convention heavy system to handle Twitter style follow logic. I'll have to continue this rant about the need for software companies to handle biz-scale given that software scalabitlity has been solved for another time.\n\n### Some Notes On Setting Up A Magento Development Environment\nI've been reading through a fantastic book on Magento development titled [Magento PHP Developer's Guide](http://www.amazon.com/Magento-Developers-Guide-Allan-MacGregor/dp/1782163069) by Allan MacGregor and the first chapter of the book helps you setup a Magento development machine. However, I've noticed some rather odd bits here and there and I was forced to do a lot of Googling in order to properly setup my VM. There is a Vagrant setup included within the chapter but for smaller projects and single deployments Vagrant is overkill and developers looking to improve their devops chops miss out on seeing what those complex Vagrant configurations are actually automating. So this blog post today includes the steps I took to get my Magento development box up and running.\n\n### How I Setup A VirtualBox VM For Magento Development\n1. Download a copy of Virtual Box, you can find it here [VirtualBox Homepage](https://www.virtualbox.org/wiki/Downloads).\n2. Download Ubuntu 64-bit server disk image [Ubuntu 64-bit ISO](http://www.ubuntu.com/download/server)\n3. Install Virtual Box and create a new Ubuntu Server 64-bit machine, be sure to mount the Ubuntu.iso and select the boot order as cd-rom first.\n4. Just follow through the on screen instructions until you have a freshly installed Ubuntu Server\n5. By this point the instructions in the Magento PHP Developers book are rock solid and pretty much stick to the standard LAMP stack installation instructions such as those you can find at most websites.\n6. Install Apache2, PHP5 and MySql [LAMP Stack Setup](http://www.howtoforge.com/installing-apache2-with-php5-and-mysql-support-on-ubuntu-11.04-lamp)\n7. Once you have your lamp stack properly setup and you are able to hit the Apache2 dummy page as mentioned within the article the next step is to download and install Magento\n\n### How To Install Magento Community Edition With Sample Data\nI believe that its worth mentioning that the Magento version 2.0 code as of the date this blog post appears is currently on hiatus. In addition the official Magento Subversion trunk was unavailable to me and I kept getting connection errors. Being resourceful I performed the alternative steps.\n\nDownload Git for Linux via Ubuntu's package manager\n```\n$ sudo apt-get install git\n```\nNext we are going to create a directory for our magento development system as mentioned within the book by MacGregor.\n```\n$ sudo mkdir -p /srv/www/magento_dev/public_html/</br>\n$ sudo mkdir -p /srv/www/magento_dev/logs/</br>\n$ sudo mkdir -p /srv/www/magento_dev/ssl/</br>\n```\nUsing git we'll want to clone the Magento mirror repo into the `/srv/www/magento_dev/public_html/ directory.`\n```\n$ sudo git clone http://github.com/LokeyCoding/magento-mirror.git /srv/www/magento_dev/public_html/\n```\nThe above directories are necessary for magento to function properly else you will get strange errors when it tries to write to a non-existant log directory. Furthermore we need to perform some standard devops sys-admin stuff for Magento such as configuring apache2 virtual hosts, chown www-data:www-data and chmod -R 755. There are instructions on the Magento website [Magento File Configuration](http://www.magentocommerce.com/download) under the How to Get Started tab.\n\nAssuming you have a directory with the magento git repo cloned and file/directory permissions setup we need to now need to do just one more thing before running the Magento web installer script. In order to have your Magento test environment filled with useful sample data and images you'll need to head to the Magento site and follow the instructions there. However please be warned that all of the sample data files such as the media directory and the sample data .sql file must be put into your `path_to_magento/public_html/` before running the install script. [Magento Sample Data Install Instructions](http://www.magentocommerce.com/knowledge-base/entry/installing-the-sample-data-for-magento).\n</p>\n\n### Working With Magento So Far\nAs a regular PHP developer without any prior Magento development experience I can say that at first the environment setup and database configuration can be daunting and fustrating due to all the necessary apache2 settings, mysql, memcache and PHP5 but there is plenty of helpful advice scattered about the internet to help guide someone along such as myself. From a pure development perspective the Magento code base is simply HUGE... I've gathered that its configuration over convention and that it uses the Zend framework's modular design so its sort of a MVC within an MVC but overall its exposed me to some interesting new design patterns such as [Observer](http://en.wikipedia.org/wiki/Observer_pattern), [Front Controller](http://en.wikipedia.org/wiki/Front_Controller_pattern) and good ole [Factory](http://en.wikipedia.org/wiki/Factory_method_pattern) but I'm still green and looking to eventually master the popular Magento framework. Anyways, I'm trying some new things out with GitHub and have been looking to start a new C++ project.\n","source":"_posts/learningmagentopart1.md","raw":"---\ntitle: Learning Magento - Starting Out\ndate: 2013-07-16\ntags: [php]\ncategories: [web, magento]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/learningmagentopart1.jpg\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/learningmagentopart1.jpg\ncomments: false\n---\n\nA new job has required me to learn as much as possible about the popular E-commerce framework Magento. In this series I'll blog about my entire learning experience; the good the bad and the ugly. Taken from the perspective of a developer who has only really heard of Magento from the PHP rumor mill I hope this series will be useful as a case study for Magento's ease of adoption.\n\n<!-- more -->\n### My Thoughts On The Current State Of E-commerce Software\n\nWhen I think of E-commerce software my mind automatically divides it into distinct categories.\n\n1. Small time E-commerce for low revenue Mom and Pop shops using Shopify\n2. Middle tier online companies using some online hosted provider such as Amazon and or Ebay\n3. Growing companies who can afford to hire I.T/Software Devs to build a customized platform\n4. These companies are usually flooding job boards looking for PHP and or Ruby developers\n5. They typically use Magento and or Ruby's well made but lesser known Spree framework\n6. Big time million dollar per year companines who have outgrown the base configurations of Magento/Spree\n7. At this point is where most large E-commerce companies tend to either make it or break it\n8. It's also at this crucial point where the company's success is directly correlated to the strength of their development team\n9. When moving beyond the bootstrapped defaults of Magento/Spree I've noticed a lot of fricition between what marketing/sales demands (like engravable products, blowout sales and or wacky often ill-defined store credit discounts) and where E-commerce developers start to enter long death march production support hours and basically begin to burn out.\n10. So the question becomes; how can E-commerce software biz-scale to handle complex sales/marketing demands?\n\n### Biz-scale and E-commerce\nOk yes I admit, I might not have a single f-ing clue what I'm trying to describe when I mention biz-scale but if you bear with me I'll try my best to explain. So in short its come to my very narrow perspective that the problem of just scaling out a technology stack to handle increased load and user uptime has been for the most part completely solved. Whether its introducing load balancing, spinning up some additional servers on Amazon EC2, Heroku, Windows Azure and the ever growing list of cloud computing hosts that developers can no longer make excuses for unesscessary downtime. However, on the flip side I have noticed a rather interesting trend... there are development shops which despite being able to scale out technologically speaking absolutely fail hard on their faces when it comes to implementing new features and meeting diverse customer demands. The simplest most apparent example of this is that hypothetical company we've all heard of lets call them X-com whose grey-beard developers looked at possible NoSQL options and threw them under the bus. For various reasons whether X-com developers just don't get that certain business logic can be better represented via graph-databases(Neo4j) or document stores(MongoDB) and that the ability of tools such as Redis to optionally persist caches to disk might actually be worth investing some time into in order to hedge against technical debt. Meanwhile customers are demanding that their product automatically sync with their mobile phones and X-com's marketing team needs informative up to the minute time sensitive reports to present to the board for increasing the bottom line.\n\nSo although X-com's servers handle peak load and minimal downtime, whether its through sheer ignorance, sloth and or plain stubborness the development team shudders at the single thought of adding a feature to their bloated platform. In my opinion I believe its not just the tech-stack that I'm addressing which I already believe is fine performant and highly scalable; I think the problem of extending features and building a strong platform boils down to being able to build upon layers of abstraction which algin with the needs of the business. When I see development teams blatantly trying to ape one anothers tech-stack simply because it worked for them misses the point entirely. Perhaps we as software developers are entering the end of the convention-over-configuration era simply because we need to fine tune our products to uniquely serve the interest of our customers and keep them delightled happy and satisfied. Or maybe its just that I've noticed just from casual observation that development tools have been growing more complex and tending towards high degrees of configuration as a direct response of consumer demand who have grown acustomed to more complex software.\n\nTo conclude this rant I'm always reminded of a previous job where the manager walks in and demands that we implement a sort of Twitter-esque style following for the user profiles on our website. The company at the time was not suffering from high load and or downtime but somehow our systems and tech-stack were so tailored to cookie-cutter user posts to a comment thread that it took considerable time(many developer hours lost) just to extend the very convention heavy system to handle Twitter style follow logic. I'll have to continue this rant about the need for software companies to handle biz-scale given that software scalabitlity has been solved for another time.\n\n### Some Notes On Setting Up A Magento Development Environment\nI've been reading through a fantastic book on Magento development titled [Magento PHP Developer's Guide](http://www.amazon.com/Magento-Developers-Guide-Allan-MacGregor/dp/1782163069) by Allan MacGregor and the first chapter of the book helps you setup a Magento development machine. However, I've noticed some rather odd bits here and there and I was forced to do a lot of Googling in order to properly setup my VM. There is a Vagrant setup included within the chapter but for smaller projects and single deployments Vagrant is overkill and developers looking to improve their devops chops miss out on seeing what those complex Vagrant configurations are actually automating. So this blog post today includes the steps I took to get my Magento development box up and running.\n\n### How I Setup A VirtualBox VM For Magento Development\n1. Download a copy of Virtual Box, you can find it here [VirtualBox Homepage](https://www.virtualbox.org/wiki/Downloads).\n2. Download Ubuntu 64-bit server disk image [Ubuntu 64-bit ISO](http://www.ubuntu.com/download/server)\n3. Install Virtual Box and create a new Ubuntu Server 64-bit machine, be sure to mount the Ubuntu.iso and select the boot order as cd-rom first.\n4. Just follow through the on screen instructions until you have a freshly installed Ubuntu Server\n5. By this point the instructions in the Magento PHP Developers book are rock solid and pretty much stick to the standard LAMP stack installation instructions such as those you can find at most websites.\n6. Install Apache2, PHP5 and MySql [LAMP Stack Setup](http://www.howtoforge.com/installing-apache2-with-php5-and-mysql-support-on-ubuntu-11.04-lamp)\n7. Once you have your lamp stack properly setup and you are able to hit the Apache2 dummy page as mentioned within the article the next step is to download and install Magento\n\n### How To Install Magento Community Edition With Sample Data\nI believe that its worth mentioning that the Magento version 2.0 code as of the date this blog post appears is currently on hiatus. In addition the official Magento Subversion trunk was unavailable to me and I kept getting connection errors. Being resourceful I performed the alternative steps.\n\nDownload Git for Linux via Ubuntu's package manager\n```\n$ sudo apt-get install git\n```\nNext we are going to create a directory for our magento development system as mentioned within the book by MacGregor.\n```\n$ sudo mkdir -p /srv/www/magento_dev/public_html/</br>\n$ sudo mkdir -p /srv/www/magento_dev/logs/</br>\n$ sudo mkdir -p /srv/www/magento_dev/ssl/</br>\n```\nUsing git we'll want to clone the Magento mirror repo into the `/srv/www/magento_dev/public_html/ directory.`\n```\n$ sudo git clone http://github.com/LokeyCoding/magento-mirror.git /srv/www/magento_dev/public_html/\n```\nThe above directories are necessary for magento to function properly else you will get strange errors when it tries to write to a non-existant log directory. Furthermore we need to perform some standard devops sys-admin stuff for Magento such as configuring apache2 virtual hosts, chown www-data:www-data and chmod -R 755. There are instructions on the Magento website [Magento File Configuration](http://www.magentocommerce.com/download) under the How to Get Started tab.\n\nAssuming you have a directory with the magento git repo cloned and file/directory permissions setup we need to now need to do just one more thing before running the Magento web installer script. In order to have your Magento test environment filled with useful sample data and images you'll need to head to the Magento site and follow the instructions there. However please be warned that all of the sample data files such as the media directory and the sample data .sql file must be put into your `path_to_magento/public_html/` before running the install script. [Magento Sample Data Install Instructions](http://www.magentocommerce.com/knowledge-base/entry/installing-the-sample-data-for-magento).\n</p>\n\n### Working With Magento So Far\nAs a regular PHP developer without any prior Magento development experience I can say that at first the environment setup and database configuration can be daunting and fustrating due to all the necessary apache2 settings, mysql, memcache and PHP5 but there is plenty of helpful advice scattered about the internet to help guide someone along such as myself. From a pure development perspective the Magento code base is simply HUGE... I've gathered that its configuration over convention and that it uses the Zend framework's modular design so its sort of a MVC within an MVC but overall its exposed me to some interesting new design patterns such as [Observer](http://en.wikipedia.org/wiki/Observer_pattern), [Front Controller](http://en.wikipedia.org/wiki/Front_Controller_pattern) and good ole [Factory](http://en.wikipedia.org/wiki/Factory_method_pattern) but I'm still green and looking to eventually master the popular Magento framework. Anyways, I'm trying some new things out with GitHub and have been looking to start a new C++ project.\n","slug":"learningmagentopart1","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3hs000zyswvxim84c6f","layout":"post","photos":[],"link":"","content":"<p>A new job has required me to learn as much as possible about the popular E-commerce framework Magento. In this series I’ll blog about my entire learning experience; the good the bad and the ugly. Taken from the perspective of a developer who has only really heard of Magento from the PHP rumor mill I hope this series will be useful as a case study for Magento’s ease of adoption.</p>\n<a id=\"more\"></a>\n<h3 id=\"My-Thoughts-On-The-Current-State-Of-E-commerce-Software\"><a href=\"#My-Thoughts-On-The-Current-State-Of-E-commerce-Software\" class=\"headerlink\" title=\"My Thoughts On The Current State Of E-commerce Software\"></a>My Thoughts On The Current State Of E-commerce Software</h3><p>When I think of E-commerce software my mind automatically divides it into distinct categories.</p>\n<ol>\n<li>Small time E-commerce for low revenue Mom and Pop shops using Shopify</li>\n<li>Middle tier online companies using some online hosted provider such as Amazon and or Ebay</li>\n<li>Growing companies who can afford to hire I.T/Software Devs to build a customized platform</li>\n<li>These companies are usually flooding job boards looking for PHP and or Ruby developers</li>\n<li>They typically use Magento and or Ruby’s well made but lesser known Spree framework</li>\n<li>Big time million dollar per year companines who have outgrown the base configurations of Magento/Spree</li>\n<li>At this point is where most large E-commerce companies tend to either make it or break it</li>\n<li>It’s also at this crucial point where the company’s success is directly correlated to the strength of their development team</li>\n<li>When moving beyond the bootstrapped defaults of Magento/Spree I’ve noticed a lot of fricition between what marketing/sales demands (like engravable products, blowout sales and or wacky often ill-defined store credit discounts) and where E-commerce developers start to enter long death march production support hours and basically begin to burn out.</li>\n<li>So the question becomes; how can E-commerce software biz-scale to handle complex sales/marketing demands?</li>\n</ol>\n<h3 id=\"Biz-scale-and-E-commerce\"><a href=\"#Biz-scale-and-E-commerce\" class=\"headerlink\" title=\"Biz-scale and E-commerce\"></a>Biz-scale and E-commerce</h3><p>Ok yes I admit, I might not have a single f-ing clue what I’m trying to describe when I mention biz-scale but if you bear with me I’ll try my best to explain. So in short its come to my very narrow perspective that the problem of just scaling out a technology stack to handle increased load and user uptime has been for the most part completely solved. Whether its introducing load balancing, spinning up some additional servers on Amazon EC2, Heroku, Windows Azure and the ever growing list of cloud computing hosts that developers can no longer make excuses for unesscessary downtime. However, on the flip side I have noticed a rather interesting trend… there are development shops which despite being able to scale out technologically speaking absolutely fail hard on their faces when it comes to implementing new features and meeting diverse customer demands. The simplest most apparent example of this is that hypothetical company we’ve all heard of lets call them X-com whose grey-beard developers looked at possible NoSQL options and threw them under the bus. For various reasons whether X-com developers just don’t get that certain business logic can be better represented via graph-databases(Neo4j) or document stores(MongoDB) and that the ability of tools such as Redis to optionally persist caches to disk might actually be worth investing some time into in order to hedge against technical debt. Meanwhile customers are demanding that their product automatically sync with their mobile phones and X-com’s marketing team needs informative up to the minute time sensitive reports to present to the board for increasing the bottom line.</p>\n<p>So although X-com’s servers handle peak load and minimal downtime, whether its through sheer ignorance, sloth and or plain stubborness the development team shudders at the single thought of adding a feature to their bloated platform. In my opinion I believe its not just the tech-stack that I’m addressing which I already believe is fine performant and highly scalable; I think the problem of extending features and building a strong platform boils down to being able to build upon layers of abstraction which algin with the needs of the business. When I see development teams blatantly trying to ape one anothers tech-stack simply because it worked for them misses the point entirely. Perhaps we as software developers are entering the end of the convention-over-configuration era simply because we need to fine tune our products to uniquely serve the interest of our customers and keep them delightled happy and satisfied. Or maybe its just that I’ve noticed just from casual observation that development tools have been growing more complex and tending towards high degrees of configuration as a direct response of consumer demand who have grown acustomed to more complex software.</p>\n<p>To conclude this rant I’m always reminded of a previous job where the manager walks in and demands that we implement a sort of Twitter-esque style following for the user profiles on our website. The company at the time was not suffering from high load and or downtime but somehow our systems and tech-stack were so tailored to cookie-cutter user posts to a comment thread that it took considerable time(many developer hours lost) just to extend the very convention heavy system to handle Twitter style follow logic. I’ll have to continue this rant about the need for software companies to handle biz-scale given that software scalabitlity has been solved for another time.</p>\n<h3 id=\"Some-Notes-On-Setting-Up-A-Magento-Development-Environment\"><a href=\"#Some-Notes-On-Setting-Up-A-Magento-Development-Environment\" class=\"headerlink\" title=\"Some Notes On Setting Up A Magento Development Environment\"></a>Some Notes On Setting Up A Magento Development Environment</h3><p>I’ve been reading through a fantastic book on Magento development titled <a href=\"http://www.amazon.com/Magento-Developers-Guide-Allan-MacGregor/dp/1782163069\" target=\"_blank\" rel=\"external\">Magento PHP Developer’s Guide</a> by Allan MacGregor and the first chapter of the book helps you setup a Magento development machine. However, I’ve noticed some rather odd bits here and there and I was forced to do a lot of Googling in order to properly setup my VM. There is a Vagrant setup included within the chapter but for smaller projects and single deployments Vagrant is overkill and developers looking to improve their devops chops miss out on seeing what those complex Vagrant configurations are actually automating. So this blog post today includes the steps I took to get my Magento development box up and running.</p>\n<h3 id=\"How-I-Setup-A-VirtualBox-VM-For-Magento-Development\"><a href=\"#How-I-Setup-A-VirtualBox-VM-For-Magento-Development\" class=\"headerlink\" title=\"How I Setup A VirtualBox VM For Magento Development\"></a>How I Setup A VirtualBox VM For Magento Development</h3><ol>\n<li>Download a copy of Virtual Box, you can find it here <a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"external\">VirtualBox Homepage</a>.</li>\n<li>Download Ubuntu 64-bit server disk image <a href=\"http://www.ubuntu.com/download/server\" target=\"_blank\" rel=\"external\">Ubuntu 64-bit ISO</a></li>\n<li>Install Virtual Box and create a new Ubuntu Server 64-bit machine, be sure to mount the Ubuntu.iso and select the boot order as cd-rom first.</li>\n<li>Just follow through the on screen instructions until you have a freshly installed Ubuntu Server</li>\n<li>By this point the instructions in the Magento PHP Developers book are rock solid and pretty much stick to the standard LAMP stack installation instructions such as those you can find at most websites.</li>\n<li>Install Apache2, PHP5 and MySql <a href=\"http://www.howtoforge.com/installing-apache2-with-php5-and-mysql-support-on-ubuntu-11.04-lamp\" target=\"_blank\" rel=\"external\">LAMP Stack Setup</a></li>\n<li>Once you have your lamp stack properly setup and you are able to hit the Apache2 dummy page as mentioned within the article the next step is to download and install Magento</li>\n</ol>\n<h3 id=\"How-To-Install-Magento-Community-Edition-With-Sample-Data\"><a href=\"#How-To-Install-Magento-Community-Edition-With-Sample-Data\" class=\"headerlink\" title=\"How To Install Magento Community Edition With Sample Data\"></a>How To Install Magento Community Edition With Sample Data</h3><p>I believe that its worth mentioning that the Magento version 2.0 code as of the date this blog post appears is currently on hiatus. In addition the official Magento Subversion trunk was unavailable to me and I kept getting connection errors. Being resourceful I performed the alternative steps.</p>\n<p>Download Git for Linux via Ubuntu’s package manager<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install git</div></pre></td></tr></table></figure></p>\n<p>Next we are going to create a directory for our magento development system as mentioned within the book by MacGregor.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo mkdir -p /srv/www/magento_dev/public_html/&lt;/br&gt;</div><div class=\"line\">$ sudo mkdir -p /srv/www/magento_dev/logs/&lt;/br&gt;</div><div class=\"line\">$ sudo mkdir -p /srv/www/magento_dev/ssl/&lt;/br&gt;</div></pre></td></tr></table></figure></p>\n<p>Using git we’ll want to clone the Magento mirror repo into the <code>/srv/www/magento_dev/public_html/ directory.</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo git clone http://github.com/LokeyCoding/magento-mirror.git /srv/www/magento_dev/public_html/</div></pre></td></tr></table></figure></p>\n<p>The above directories are necessary for magento to function properly else you will get strange errors when it tries to write to a non-existant log directory. Furthermore we need to perform some standard devops sys-admin stuff for Magento such as configuring apache2 virtual hosts, chown www-data:www-data and chmod -R 755. There are instructions on the Magento website <a href=\"http://www.magentocommerce.com/download\" target=\"_blank\" rel=\"external\">Magento File Configuration</a> under the How to Get Started tab.</p>\n<p>Assuming you have a directory with the magento git repo cloned and file/directory permissions setup we need to now need to do just one more thing before running the Magento web installer script. In order to have your Magento test environment filled with useful sample data and images you’ll need to head to the Magento site and follow the instructions there. However please be warned that all of the sample data files such as the media directory and the sample data .sql file must be put into your <code>path_to_magento/public_html/</code> before running the install script. <a href=\"http://www.magentocommerce.com/knowledge-base/entry/installing-the-sample-data-for-magento\" target=\"_blank\" rel=\"external\">Magento Sample Data Install Instructions</a>.<br></p><p></p>\n<h3 id=\"Working-With-Magento-So-Far\"><a href=\"#Working-With-Magento-So-Far\" class=\"headerlink\" title=\"Working With Magento So Far\"></a>Working With Magento So Far</h3><p>As a regular PHP developer without any prior Magento development experience I can say that at first the environment setup and database configuration can be daunting and fustrating due to all the necessary apache2 settings, mysql, memcache and PHP5 but there is plenty of helpful advice scattered about the internet to help guide someone along such as myself. From a pure development perspective the Magento code base is simply HUGE… I’ve gathered that its configuration over convention and that it uses the Zend framework’s modular design so its sort of a MVC within an MVC but overall its exposed me to some interesting new design patterns such as <a href=\"http://en.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"external\">Observer</a>, <a href=\"http://en.wikipedia.org/wiki/Front_Controller_pattern\" target=\"_blank\" rel=\"external\">Front Controller</a> and good ole <a href=\"http://en.wikipedia.org/wiki/Factory_method_pattern\" target=\"_blank\" rel=\"external\">Factory</a> but I’m still green and looking to eventually master the popular Magento framework. Anyways, I’m trying some new things out with GitHub and have been looking to start a new C++ project.</p>\n","site":{"data":{}},"excerpt":"<p>A new job has required me to learn as much as possible about the popular E-commerce framework Magento. In this series I’ll blog about my entire learning experience; the good the bad and the ugly. Taken from the perspective of a developer who has only really heard of Magento from the PHP rumor mill I hope this series will be useful as a case study for Magento’s ease of adoption.</p>","more":"<h3 id=\"My-Thoughts-On-The-Current-State-Of-E-commerce-Software\"><a href=\"#My-Thoughts-On-The-Current-State-Of-E-commerce-Software\" class=\"headerlink\" title=\"My Thoughts On The Current State Of E-commerce Software\"></a>My Thoughts On The Current State Of E-commerce Software</h3><p>When I think of E-commerce software my mind automatically divides it into distinct categories.</p>\n<ol>\n<li>Small time E-commerce for low revenue Mom and Pop shops using Shopify</li>\n<li>Middle tier online companies using some online hosted provider such as Amazon and or Ebay</li>\n<li>Growing companies who can afford to hire I.T/Software Devs to build a customized platform</li>\n<li>These companies are usually flooding job boards looking for PHP and or Ruby developers</li>\n<li>They typically use Magento and or Ruby’s well made but lesser known Spree framework</li>\n<li>Big time million dollar per year companines who have outgrown the base configurations of Magento/Spree</li>\n<li>At this point is where most large E-commerce companies tend to either make it or break it</li>\n<li>It’s also at this crucial point where the company’s success is directly correlated to the strength of their development team</li>\n<li>When moving beyond the bootstrapped defaults of Magento/Spree I’ve noticed a lot of fricition between what marketing/sales demands (like engravable products, blowout sales and or wacky often ill-defined store credit discounts) and where E-commerce developers start to enter long death march production support hours and basically begin to burn out.</li>\n<li>So the question becomes; how can E-commerce software biz-scale to handle complex sales/marketing demands?</li>\n</ol>\n<h3 id=\"Biz-scale-and-E-commerce\"><a href=\"#Biz-scale-and-E-commerce\" class=\"headerlink\" title=\"Biz-scale and E-commerce\"></a>Biz-scale and E-commerce</h3><p>Ok yes I admit, I might not have a single f-ing clue what I’m trying to describe when I mention biz-scale but if you bear with me I’ll try my best to explain. So in short its come to my very narrow perspective that the problem of just scaling out a technology stack to handle increased load and user uptime has been for the most part completely solved. Whether its introducing load balancing, spinning up some additional servers on Amazon EC2, Heroku, Windows Azure and the ever growing list of cloud computing hosts that developers can no longer make excuses for unesscessary downtime. However, on the flip side I have noticed a rather interesting trend… there are development shops which despite being able to scale out technologically speaking absolutely fail hard on their faces when it comes to implementing new features and meeting diverse customer demands. The simplest most apparent example of this is that hypothetical company we’ve all heard of lets call them X-com whose grey-beard developers looked at possible NoSQL options and threw them under the bus. For various reasons whether X-com developers just don’t get that certain business logic can be better represented via graph-databases(Neo4j) or document stores(MongoDB) and that the ability of tools such as Redis to optionally persist caches to disk might actually be worth investing some time into in order to hedge against technical debt. Meanwhile customers are demanding that their product automatically sync with their mobile phones and X-com’s marketing team needs informative up to the minute time sensitive reports to present to the board for increasing the bottom line.</p>\n<p>So although X-com’s servers handle peak load and minimal downtime, whether its through sheer ignorance, sloth and or plain stubborness the development team shudders at the single thought of adding a feature to their bloated platform. In my opinion I believe its not just the tech-stack that I’m addressing which I already believe is fine performant and highly scalable; I think the problem of extending features and building a strong platform boils down to being able to build upon layers of abstraction which algin with the needs of the business. When I see development teams blatantly trying to ape one anothers tech-stack simply because it worked for them misses the point entirely. Perhaps we as software developers are entering the end of the convention-over-configuration era simply because we need to fine tune our products to uniquely serve the interest of our customers and keep them delightled happy and satisfied. Or maybe its just that I’ve noticed just from casual observation that development tools have been growing more complex and tending towards high degrees of configuration as a direct response of consumer demand who have grown acustomed to more complex software.</p>\n<p>To conclude this rant I’m always reminded of a previous job where the manager walks in and demands that we implement a sort of Twitter-esque style following for the user profiles on our website. The company at the time was not suffering from high load and or downtime but somehow our systems and tech-stack were so tailored to cookie-cutter user posts to a comment thread that it took considerable time(many developer hours lost) just to extend the very convention heavy system to handle Twitter style follow logic. I’ll have to continue this rant about the need for software companies to handle biz-scale given that software scalabitlity has been solved for another time.</p>\n<h3 id=\"Some-Notes-On-Setting-Up-A-Magento-Development-Environment\"><a href=\"#Some-Notes-On-Setting-Up-A-Magento-Development-Environment\" class=\"headerlink\" title=\"Some Notes On Setting Up A Magento Development Environment\"></a>Some Notes On Setting Up A Magento Development Environment</h3><p>I’ve been reading through a fantastic book on Magento development titled <a href=\"http://www.amazon.com/Magento-Developers-Guide-Allan-MacGregor/dp/1782163069\">Magento PHP Developer’s Guide</a> by Allan MacGregor and the first chapter of the book helps you setup a Magento development machine. However, I’ve noticed some rather odd bits here and there and I was forced to do a lot of Googling in order to properly setup my VM. There is a Vagrant setup included within the chapter but for smaller projects and single deployments Vagrant is overkill and developers looking to improve their devops chops miss out on seeing what those complex Vagrant configurations are actually automating. So this blog post today includes the steps I took to get my Magento development box up and running.</p>\n<h3 id=\"How-I-Setup-A-VirtualBox-VM-For-Magento-Development\"><a href=\"#How-I-Setup-A-VirtualBox-VM-For-Magento-Development\" class=\"headerlink\" title=\"How I Setup A VirtualBox VM For Magento Development\"></a>How I Setup A VirtualBox VM For Magento Development</h3><ol>\n<li>Download a copy of Virtual Box, you can find it here <a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox Homepage</a>.</li>\n<li>Download Ubuntu 64-bit server disk image <a href=\"http://www.ubuntu.com/download/server\">Ubuntu 64-bit ISO</a></li>\n<li>Install Virtual Box and create a new Ubuntu Server 64-bit machine, be sure to mount the Ubuntu.iso and select the boot order as cd-rom first.</li>\n<li>Just follow through the on screen instructions until you have a freshly installed Ubuntu Server</li>\n<li>By this point the instructions in the Magento PHP Developers book are rock solid and pretty much stick to the standard LAMP stack installation instructions such as those you can find at most websites.</li>\n<li>Install Apache2, PHP5 and MySql <a href=\"http://www.howtoforge.com/installing-apache2-with-php5-and-mysql-support-on-ubuntu-11.04-lamp\">LAMP Stack Setup</a></li>\n<li>Once you have your lamp stack properly setup and you are able to hit the Apache2 dummy page as mentioned within the article the next step is to download and install Magento</li>\n</ol>\n<h3 id=\"How-To-Install-Magento-Community-Edition-With-Sample-Data\"><a href=\"#How-To-Install-Magento-Community-Edition-With-Sample-Data\" class=\"headerlink\" title=\"How To Install Magento Community Edition With Sample Data\"></a>How To Install Magento Community Edition With Sample Data</h3><p>I believe that its worth mentioning that the Magento version 2.0 code as of the date this blog post appears is currently on hiatus. In addition the official Magento Subversion trunk was unavailable to me and I kept getting connection errors. Being resourceful I performed the alternative steps.</p>\n<p>Download Git for Linux via Ubuntu’s package manager<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install git</div></pre></td></tr></table></figure></p>\n<p>Next we are going to create a directory for our magento development system as mentioned within the book by MacGregor.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo mkdir -p /srv/www/magento_dev/public_html/&lt;/br&gt;</div><div class=\"line\">$ sudo mkdir -p /srv/www/magento_dev/logs/&lt;/br&gt;</div><div class=\"line\">$ sudo mkdir -p /srv/www/magento_dev/ssl/&lt;/br&gt;</div></pre></td></tr></table></figure></p>\n<p>Using git we’ll want to clone the Magento mirror repo into the <code>/srv/www/magento_dev/public_html/ directory.</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo git clone http://github.com/LokeyCoding/magento-mirror.git /srv/www/magento_dev/public_html/</div></pre></td></tr></table></figure></p>\n<p>The above directories are necessary for magento to function properly else you will get strange errors when it tries to write to a non-existant log directory. Furthermore we need to perform some standard devops sys-admin stuff for Magento such as configuring apache2 virtual hosts, chown www-data:www-data and chmod -R 755. There are instructions on the Magento website <a href=\"http://www.magentocommerce.com/download\">Magento File Configuration</a> under the How to Get Started tab.</p>\n<p>Assuming you have a directory with the magento git repo cloned and file/directory permissions setup we need to now need to do just one more thing before running the Magento web installer script. In order to have your Magento test environment filled with useful sample data and images you’ll need to head to the Magento site and follow the instructions there. However please be warned that all of the sample data files such as the media directory and the sample data .sql file must be put into your <code>path_to_magento/public_html/</code> before running the install script. <a href=\"http://www.magentocommerce.com/knowledge-base/entry/installing-the-sample-data-for-magento\">Magento Sample Data Install Instructions</a>.<br></p></p>\n<h3 id=\"Working-With-Magento-So-Far\"><a href=\"#Working-With-Magento-So-Far\" class=\"headerlink\" title=\"Working With Magento So Far\"></a>Working With Magento So Far</h3><p>As a regular PHP developer without any prior Magento development experience I can say that at first the environment setup and database configuration can be daunting and fustrating due to all the necessary apache2 settings, mysql, memcache and PHP5 but there is plenty of helpful advice scattered about the internet to help guide someone along such as myself. From a pure development perspective the Magento code base is simply HUGE… I’ve gathered that its configuration over convention and that it uses the Zend framework’s modular design so its sort of a MVC within an MVC but overall its exposed me to some interesting new design patterns such as <a href=\"http://en.wikipedia.org/wiki/Observer_pattern\">Observer</a>, <a href=\"http://en.wikipedia.org/wiki/Front_Controller_pattern\">Front Controller</a> and good ole <a href=\"http://en.wikipedia.org/wiki/Factory_method_pattern\">Factory</a> but I’m still green and looking to eventually master the popular Magento framework. Anyways, I’m trying some new things out with GitHub and have been looking to start a new C++ project.</p>"},{"title":"Install Python, Numpy, SciPy, IPython and Pandas on Windows","date":"2012-12-23T08:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/pythonfinance1.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/pythonfinance1.JPG","comments":0,"_content":"In this tutorial we'll setup a Python development environment on Windows 7. After finishing this tutorial you will be ready to start writing numerical applications, data analysis algorithmns and implement various machine learning methods. I've always wanted to get back into numerical computing and Python seems like the way to go.\n\n<!-- more -->\nIn this tutorial you will be setting up a numerical Python development environment for Windows 7.\n\nAs you might have already realized, Python is rather simple to setup on a Linux/MacOSX box but as with many open source based projects getting up and running on Windows is never trivial.\n\n1) Visit [http://www.python.org](http://www.python.org) and search for Python version 3.2.x\n\n- [http://www.python.org/download/releases/3.2.3/](http://www.python.org/download/releases/3.2.3/)\n\n- The 64-bit version currently doesn't support NumPy and or SciPy so grab the 32-bit version\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/1.PNG\" alt=\"Windows x86 32bit Python\" width=\"700px\" height=\"300px\"/>\n</div>\n\n2) Double click the Microsoft Installer file from Windows Explorer\n\n- Special thanks to [http://www.andrewsturges.com/2012/05/installing-numpy-for-python-3-in.html](http://www.andrewsturges.com/2012/05/installing-numpy-for-python-3-in.html)\n \n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/2.PNG\" alt=\"Windows x86 32bit Python\" width=\"505px\" height=\"435px\"/>\n</div>\n\n- According to Andrew we have to select the option \"Install just for me\"\n\n- Click \"Next\"\n\n- Install Python to the root directory of your hard disk mine was \"C:\\Python32\\\"\n\n- On the page \"Customize Python 3.2.x\" enable the option \"Add python.exe to Path\"\n\n- While still on the page \"Customize Python 3.2.x\" click \"Advanced\" this will open a new window\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/3.PNG\" alt=\"Windows x86 32bit Python\" width=\"505px\" height=\"435px\"/>\n</div>\n\n- Check the option on that page; for a discussion for why this option is used see the post on Stackoverflow\n\n[http://stackoverflow.com/questions/12376188/should-i-compile-py-files-to-byte-code-after-installation](http://stackoverflow.com/questions/12376188/should-i-compile-py-files-to-byte-code-after-installation)\n\n3) Verify that python installed correctly\n\n- Press the window key or click the start menu and type \"python\" and the search results should include \n\n- \"Python (command line)\" that is the one we want so click it.\n\n- You should be able to run a small Hello world program from the python interactive terminal\n\n4) Go install numpy\n\n- [http://sourceforge.net/projects/numpy/files/NumPy/1.6.2/numpy-1.6.2-win32-superpack-python3.2.exe/download](http://sourceforge.net/projects/numpy/files/NumPy/1.6.2/numpy-1.6.2-win32-superpack-python3.2.exe/download)\n\n- Once downloading is completed run the installer\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/4.PNG\" alt=\"Windows x86 32bit Python\" width=\"600px\" height=\"397px\"/>\n</div>\n\n- Verify that numpy was successfully installed by opening a command prompt and running the following code\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/5.PNG\" alt=\"Windows x86 32bit Python\" width=\"600px\" height=\"124px\"/>\n</div>\n\n5) Go grab a copy of Visual Studio 2012 if you don't already have a copy (don't worry you can use the free express edition)\n\n- I'm using the express version for desktop [http://www.microsoft.com/visualstudio/eng/downloads](http://www.microsoft.com/visualstudio/eng/downloads)\n\n6) Install the Visual Studio 2012 Isolated Shell the download link is found on the same page\n\n7) Install the Visual Studio 2012 Integrated Shell (same as step 6)\n\n- NOTICE! At this point if you went the free route and installed Visual Studio Express you will actually have two programs, Visual Studio 2012 in addition to Visual Studio Express\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/e.png\" width=\"262px\" height=\"469px\"/>\n</div>\n\n- To use Python you will have to use Visual Studio 2012\n\n- To use regular C#, C++, VB etc you will need to run the Visual Studio Express version\n\n8) Install the Python Tools for Visual Studio\n\n- [http://pytools.codeplex.com/](http://pytools.codeplex.com/)\n\n- Once you have installed the application you should be able to open Visual Studio 2012 and start a new Python application project\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/b.PNG\" width=\"475px\" height=\"306px\"/>\n</div>\n\n9) Within Visual Studio 2012 click Tools >> Options >> Python Tools and change the default version of python to 3.2\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/a.PNG\" width=\"375px\" height=\"220px\"/>\n</div>\n\n- As you remember from the earlier instructions Numpy currently does not support python 3.3 on Windows\n\n- If avaliable regenerate the intellisense database, this is what allows Visual Studio to perform autocomplete\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/f.png\" width=\"375px\" height=\"220px\"/>\n</div>\n\n- Next make sure you can get your visual studio 2012 to resemble the screenshots\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/d.png\" width=\"656px\" height=\"380px\"/>\n</div>\n\n- Numpy will show up in the autocomplete if you have been doing everything correctly\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/c.png\" width=\"450px\" height=\"450px\"/>\n</div>\n\n10) Setting up Pandas\n\n- Go get the latest version of Pandas [http://pandas.pydata.org/index.html](http://pandas.pydata.org/index.html)\n\n- Since we're using 32-bit Python 3.2 make sure you download the version that supports it\n \n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/g.PNG\" width=\"334px\" height=\"565px\"/>\n</div>\n\n- Download and install it\n\n11) Download the dateutil package from [http://pypi.python.org/pypi/python-dateutil](http://pypi.python.org/pypi/python-dateutil)\n\n- From within the python-dateutil 2.1 folder copy the folder \"dateutil\" to \"C:\\Python32\\Lib\\site-packages\"\n\n- The \"C:\\Python32\\Lib\\site-packages\" folder is where 3rd party packages are to be installed\n\n- You will need this for pandas to work properly\n\n12) Download the package called \"six\" from pypi [http://pypi.python.org/pypi/six/1.2.0](http://pypi.python.org/pypi/six/1.2.0)\n\n- Unlike dateutil \"six\" actually needs to be installed from the command line\n\n- Extract the zipped folder and then copy the contents to \"C:\\Python32\\Lib\\site-packages\"\n\n- Go into the six folder and run the following command\n\n- \"setup.py install\"\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/h.PNG\" width=\"450px\" height=\"38px\"/>\n</div>\n\n13) Verify that pandas is working\n\n- Open Visual Studio 2012 and either start a new Python application or open an existing one\n\n- Start the Python Interactive shell and enter the code that appears within the screenshot below\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/i.png\" width=\"473px\" height=\"230px\"/>\n</div>\n\n14) Install matplotlib for python\n\n- This tutorial is using python 3.2 and Numpy 1.6.2 for 32-bit Windows\n\n- [https://github.com/downloads/matplotlib/matplotlib/matplotlib-1.2.0.win32-py3.2.exe](https://github.com/downloads/matplotlib/matplotlib/matplotlib-1.2.0.win32-py3.2.exe)\n\n- After installing regenerate the intellisense database\n\n- Tools >> Options >> Python Tools >> Interpreter Options >> Generate Intellisense database\n\n15) Verify that matplotlib is running\n\n- Special thanks to [http://bespokeblog.wordpress.com/2011/07/07/basic-data-plotting-with-matplotlib-part-2-lines-points-formatting/](http://bespokeblog.wordpress.com/2011/07/07/basic-data-plotting-with-matplotlib-part-2-lines-points-formatting) for the example code\n\n- Try and reproduce the screenshot below within your visual studio environment\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/j.PNG\" width=\"430px\" height=\"345px\"/>\n</div>\n\n16) Install SciPy\n- We're using Python3.2 so get the appropriate version\n\n- [http://sourceforge.net/projects/scipy/files/scipy/0.11.0/scipy-0.11.0-win32-superpack-python3.2.exe/download](http://sourceforge.net/projects/scipy/files/scipy/0.11.0/scipy-0.11.0-win32-superpack-python3.2.exe/download)\n\n- Right click the installer and \"Run as administrator\" and then follow the on screen instructions\n\n- Regenerate the intellisense database within Visual Studio 2012 to ensure that Scipy will be autocompleted\n\n17) Install IPython\n\n- [http://www.windowsazure.com/en-us/develop/python/tutorials/ipython-notebook](http://www.windowsazure.com/en-us/develop/python/tutorials/ipython-notebook)\n\n- Follow the very detailed instructions on that site except the part about the `ipython_notebook_config.py` file I couldn't get that part to work.\n\n- If you get an error relating to missing module JinJa2 then open Powershell and run `easy_install.exe Jinja2`\n\n- I managed to get IPython working correctly using the following from Powershell\n\n```\nipython3.exe notebook --pylab=inline --profile=nbserver --certfile='C:\\Users\\YourNameHere\\.ipython\\profile_nbserver\\mycert.pem'\n```\n","source":"_posts/pythonfinance1.md","raw":"---\ntitle: Install Python, Numpy, SciPy, IPython and Pandas on Windows\ndate: 2012-12-23\ntags: [python]\ncategories: [tutorial]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/pythonfinance1.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/pythonfinance1.JPG\ncomments: false\n---\nIn this tutorial we'll setup a Python development environment on Windows 7. After finishing this tutorial you will be ready to start writing numerical applications, data analysis algorithmns and implement various machine learning methods. I've always wanted to get back into numerical computing and Python seems like the way to go.\n\n<!-- more -->\nIn this tutorial you will be setting up a numerical Python development environment for Windows 7.\n\nAs you might have already realized, Python is rather simple to setup on a Linux/MacOSX box but as with many open source based projects getting up and running on Windows is never trivial.\n\n1) Visit [http://www.python.org](http://www.python.org) and search for Python version 3.2.x\n\n- [http://www.python.org/download/releases/3.2.3/](http://www.python.org/download/releases/3.2.3/)\n\n- The 64-bit version currently doesn't support NumPy and or SciPy so grab the 32-bit version\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/1.PNG\" alt=\"Windows x86 32bit Python\" width=\"700px\" height=\"300px\"/>\n</div>\n\n2) Double click the Microsoft Installer file from Windows Explorer\n\n- Special thanks to [http://www.andrewsturges.com/2012/05/installing-numpy-for-python-3-in.html](http://www.andrewsturges.com/2012/05/installing-numpy-for-python-3-in.html)\n \n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/2.PNG\" alt=\"Windows x86 32bit Python\" width=\"505px\" height=\"435px\"/>\n</div>\n\n- According to Andrew we have to select the option \"Install just for me\"\n\n- Click \"Next\"\n\n- Install Python to the root directory of your hard disk mine was \"C:\\Python32\\\"\n\n- On the page \"Customize Python 3.2.x\" enable the option \"Add python.exe to Path\"\n\n- While still on the page \"Customize Python 3.2.x\" click \"Advanced\" this will open a new window\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/3.PNG\" alt=\"Windows x86 32bit Python\" width=\"505px\" height=\"435px\"/>\n</div>\n\n- Check the option on that page; for a discussion for why this option is used see the post on Stackoverflow\n\n[http://stackoverflow.com/questions/12376188/should-i-compile-py-files-to-byte-code-after-installation](http://stackoverflow.com/questions/12376188/should-i-compile-py-files-to-byte-code-after-installation)\n\n3) Verify that python installed correctly\n\n- Press the window key or click the start menu and type \"python\" and the search results should include \n\n- \"Python (command line)\" that is the one we want so click it.\n\n- You should be able to run a small Hello world program from the python interactive terminal\n\n4) Go install numpy\n\n- [http://sourceforge.net/projects/numpy/files/NumPy/1.6.2/numpy-1.6.2-win32-superpack-python3.2.exe/download](http://sourceforge.net/projects/numpy/files/NumPy/1.6.2/numpy-1.6.2-win32-superpack-python3.2.exe/download)\n\n- Once downloading is completed run the installer\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/4.PNG\" alt=\"Windows x86 32bit Python\" width=\"600px\" height=\"397px\"/>\n</div>\n\n- Verify that numpy was successfully installed by opening a command prompt and running the following code\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/5.PNG\" alt=\"Windows x86 32bit Python\" width=\"600px\" height=\"124px\"/>\n</div>\n\n5) Go grab a copy of Visual Studio 2012 if you don't already have a copy (don't worry you can use the free express edition)\n\n- I'm using the express version for desktop [http://www.microsoft.com/visualstudio/eng/downloads](http://www.microsoft.com/visualstudio/eng/downloads)\n\n6) Install the Visual Studio 2012 Isolated Shell the download link is found on the same page\n\n7) Install the Visual Studio 2012 Integrated Shell (same as step 6)\n\n- NOTICE! At this point if you went the free route and installed Visual Studio Express you will actually have two programs, Visual Studio 2012 in addition to Visual Studio Express\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/e.png\" width=\"262px\" height=\"469px\"/>\n</div>\n\n- To use Python you will have to use Visual Studio 2012\n\n- To use regular C#, C++, VB etc you will need to run the Visual Studio Express version\n\n8) Install the Python Tools for Visual Studio\n\n- [http://pytools.codeplex.com/](http://pytools.codeplex.com/)\n\n- Once you have installed the application you should be able to open Visual Studio 2012 and start a new Python application project\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/b.PNG\" width=\"475px\" height=\"306px\"/>\n</div>\n\n9) Within Visual Studio 2012 click Tools >> Options >> Python Tools and change the default version of python to 3.2\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/a.PNG\" width=\"375px\" height=\"220px\"/>\n</div>\n\n- As you remember from the earlier instructions Numpy currently does not support python 3.3 on Windows\n\n- If avaliable regenerate the intellisense database, this is what allows Visual Studio to perform autocomplete\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/f.png\" width=\"375px\" height=\"220px\"/>\n</div>\n\n- Next make sure you can get your visual studio 2012 to resemble the screenshots\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/d.png\" width=\"656px\" height=\"380px\"/>\n</div>\n\n- Numpy will show up in the autocomplete if you have been doing everything correctly\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/c.png\" width=\"450px\" height=\"450px\"/>\n</div>\n\n10) Setting up Pandas\n\n- Go get the latest version of Pandas [http://pandas.pydata.org/index.html](http://pandas.pydata.org/index.html)\n\n- Since we're using 32-bit Python 3.2 make sure you download the version that supports it\n \n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/g.PNG\" width=\"334px\" height=\"565px\"/>\n</div>\n\n- Download and install it\n\n11) Download the dateutil package from [http://pypi.python.org/pypi/python-dateutil](http://pypi.python.org/pypi/python-dateutil)\n\n- From within the python-dateutil 2.1 folder copy the folder \"dateutil\" to \"C:\\Python32\\Lib\\site-packages\"\n\n- The \"C:\\Python32\\Lib\\site-packages\" folder is where 3rd party packages are to be installed\n\n- You will need this for pandas to work properly\n\n12) Download the package called \"six\" from pypi [http://pypi.python.org/pypi/six/1.2.0](http://pypi.python.org/pypi/six/1.2.0)\n\n- Unlike dateutil \"six\" actually needs to be installed from the command line\n\n- Extract the zipped folder and then copy the contents to \"C:\\Python32\\Lib\\site-packages\"\n\n- Go into the six folder and run the following command\n\n- \"setup.py install\"\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/h.PNG\" width=\"450px\" height=\"38px\"/>\n</div>\n\n13) Verify that pandas is working\n\n- Open Visual Studio 2012 and either start a new Python application or open an existing one\n\n- Start the Python Interactive shell and enter the code that appears within the screenshot below\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/i.png\" width=\"473px\" height=\"230px\"/>\n</div>\n\n14) Install matplotlib for python\n\n- This tutorial is using python 3.2 and Numpy 1.6.2 for 32-bit Windows\n\n- [https://github.com/downloads/matplotlib/matplotlib/matplotlib-1.2.0.win32-py3.2.exe](https://github.com/downloads/matplotlib/matplotlib/matplotlib-1.2.0.win32-py3.2.exe)\n\n- After installing regenerate the intellisense database\n\n- Tools >> Options >> Python Tools >> Interpreter Options >> Generate Intellisense database\n\n15) Verify that matplotlib is running\n\n- Special thanks to [http://bespokeblog.wordpress.com/2011/07/07/basic-data-plotting-with-matplotlib-part-2-lines-points-formatting/](http://bespokeblog.wordpress.com/2011/07/07/basic-data-plotting-with-matplotlib-part-2-lines-points-formatting) for the example code\n\n- Try and reproduce the screenshot below within your visual studio environment\n\n<div class=\"justified-gallery\">\n  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/j.PNG\" width=\"430px\" height=\"345px\"/>\n</div>\n\n16) Install SciPy\n- We're using Python3.2 so get the appropriate version\n\n- [http://sourceforge.net/projects/scipy/files/scipy/0.11.0/scipy-0.11.0-win32-superpack-python3.2.exe/download](http://sourceforge.net/projects/scipy/files/scipy/0.11.0/scipy-0.11.0-win32-superpack-python3.2.exe/download)\n\n- Right click the installer and \"Run as administrator\" and then follow the on screen instructions\n\n- Regenerate the intellisense database within Visual Studio 2012 to ensure that Scipy will be autocompleted\n\n17) Install IPython\n\n- [http://www.windowsazure.com/en-us/develop/python/tutorials/ipython-notebook](http://www.windowsazure.com/en-us/develop/python/tutorials/ipython-notebook)\n\n- Follow the very detailed instructions on that site except the part about the `ipython_notebook_config.py` file I couldn't get that part to work.\n\n- If you get an error relating to missing module JinJa2 then open Powershell and run `easy_install.exe Jinja2`\n\n- I managed to get IPython working correctly using the following from Powershell\n\n```\nipython3.exe notebook --pylab=inline --profile=nbserver --certfile='C:\\Users\\YourNameHere\\.ipython\\profile_nbserver\\mycert.pem'\n```\n","slug":"pythonfinance1","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3hv0011yswv2s613swx","layout":"post","photos":[],"link":"","content":"<p>In this tutorial we’ll setup a Python development environment on Windows 7. After finishing this tutorial you will be ready to start writing numerical applications, data analysis algorithmns and implement various machine learning methods. I’ve always wanted to get back into numerical computing and Python seems like the way to go.</p>\n<a id=\"more\"></a>\n<p>In this tutorial you will be setting up a numerical Python development environment for Windows 7.</p>\n<p>As you might have already realized, Python is rather simple to setup on a Linux/MacOSX box but as with many open source based projects getting up and running on Windows is never trivial.</p>\n<p>1) Visit <a href=\"http://www.python.org\" target=\"_blank\" rel=\"external\">http://www.python.org</a> and search for Python version 3.2.x</p>\n<ul>\n<li><p><a href=\"http://www.python.org/download/releases/3.2.3/\" target=\"_blank\" rel=\"external\">http://www.python.org/download/releases/3.2.3/</a></p>\n</li>\n<li><p>The 64-bit version currently doesn’t support NumPy and or SciPy so grab the 32-bit version</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/1.PNG\" alt=\"Windows x86 32bit Python\" width=\"700px\" height=\"300px\"><br></div>\n\n<p>2) Double click the Microsoft Installer file from Windows Explorer</p>\n<ul>\n<li>Special thanks to <a href=\"http://www.andrewsturges.com/2012/05/installing-numpy-for-python-3-in.html\" target=\"_blank\" rel=\"external\">http://www.andrewsturges.com/2012/05/installing-numpy-for-python-3-in.html</a></li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/2.PNG\" alt=\"Windows x86 32bit Python\" width=\"505px\" height=\"435px\"><br></div>\n\n<ul>\n<li><p>According to Andrew we have to select the option “Install just for me”</p>\n</li>\n<li><p>Click “Next”</p>\n</li>\n<li><p>Install Python to the root directory of your hard disk mine was “C:\\Python32\\”</p>\n</li>\n<li><p>On the page “Customize Python 3.2.x” enable the option “Add python.exe to Path”</p>\n</li>\n<li><p>While still on the page “Customize Python 3.2.x” click “Advanced” this will open a new window</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/3.PNG\" alt=\"Windows x86 32bit Python\" width=\"505px\" height=\"435px\"><br></div>\n\n<ul>\n<li>Check the option on that page; for a discussion for why this option is used see the post on Stackoverflow</li>\n</ul>\n<p><a href=\"http://stackoverflow.com/questions/12376188/should-i-compile-py-files-to-byte-code-after-installation\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/12376188/should-i-compile-py-files-to-byte-code-after-installation</a></p>\n<p>3) Verify that python installed correctly</p>\n<ul>\n<li><p>Press the window key or click the start menu and type “python” and the search results should include </p>\n</li>\n<li><p>“Python (command line)” that is the one we want so click it.</p>\n</li>\n<li><p>You should be able to run a small Hello world program from the python interactive terminal</p>\n</li>\n</ul>\n<p>4) Go install numpy</p>\n<ul>\n<li><p><a href=\"http://sourceforge.net/projects/numpy/files/NumPy/1.6.2/numpy-1.6.2-win32-superpack-python3.2.exe/download\" target=\"_blank\" rel=\"external\">http://sourceforge.net/projects/numpy/files/NumPy/1.6.2/numpy-1.6.2-win32-superpack-python3.2.exe/download</a></p>\n</li>\n<li><p>Once downloading is completed run the installer</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/4.PNG\" alt=\"Windows x86 32bit Python\" width=\"600px\" height=\"397px\"><br></div>\n\n<ul>\n<li>Verify that numpy was successfully installed by opening a command prompt and running the following code</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/5.PNG\" alt=\"Windows x86 32bit Python\" width=\"600px\" height=\"124px\"><br></div>\n\n<p>5) Go grab a copy of Visual Studio 2012 if you don’t already have a copy (don’t worry you can use the free express edition)</p>\n<ul>\n<li>I’m using the express version for desktop <a href=\"http://www.microsoft.com/visualstudio/eng/downloads\" target=\"_blank\" rel=\"external\">http://www.microsoft.com/visualstudio/eng/downloads</a></li>\n</ul>\n<p>6) Install the Visual Studio 2012 Isolated Shell the download link is found on the same page</p>\n<p>7) Install the Visual Studio 2012 Integrated Shell (same as step 6)</p>\n<ul>\n<li>NOTICE! At this point if you went the free route and installed Visual Studio Express you will actually have two programs, Visual Studio 2012 in addition to Visual Studio Express</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/e.png\" width=\"262px\" height=\"469px\"><br></div>\n\n<ul>\n<li><p>To use Python you will have to use Visual Studio 2012</p>\n</li>\n<li><p>To use regular C#, C++, VB etc you will need to run the Visual Studio Express version</p>\n</li>\n</ul>\n<p>8) Install the Python Tools for Visual Studio</p>\n<ul>\n<li><p><a href=\"http://pytools.codeplex.com/\" target=\"_blank\" rel=\"external\">http://pytools.codeplex.com/</a></p>\n</li>\n<li><p>Once you have installed the application you should be able to open Visual Studio 2012 and start a new Python application project</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/b.PNG\" width=\"475px\" height=\"306px\"><br></div>\n\n<p>9) Within Visual Studio 2012 click Tools &gt;&gt; Options &gt;&gt; Python Tools and change the default version of python to 3.2</p>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/a.PNG\" width=\"375px\" height=\"220px\"><br></div>\n\n<ul>\n<li><p>As you remember from the earlier instructions Numpy currently does not support python 3.3 on Windows</p>\n</li>\n<li><p>If avaliable regenerate the intellisense database, this is what allows Visual Studio to perform autocomplete</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/f.png\" width=\"375px\" height=\"220px\"><br></div>\n\n<ul>\n<li>Next make sure you can get your visual studio 2012 to resemble the screenshots</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/d.png\" width=\"656px\" height=\"380px\"><br></div>\n\n<ul>\n<li>Numpy will show up in the autocomplete if you have been doing everything correctly</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/c.png\" width=\"450px\" height=\"450px\"><br></div>\n\n<p>10) Setting up Pandas</p>\n<ul>\n<li><p>Go get the latest version of Pandas <a href=\"http://pandas.pydata.org/index.html\" target=\"_blank\" rel=\"external\">http://pandas.pydata.org/index.html</a></p>\n</li>\n<li><p>Since we’re using 32-bit Python 3.2 make sure you download the version that supports it</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/g.PNG\" width=\"334px\" height=\"565px\"><br></div>\n\n<ul>\n<li>Download and install it</li>\n</ul>\n<p>11) Download the dateutil package from <a href=\"http://pypi.python.org/pypi/python-dateutil\" target=\"_blank\" rel=\"external\">http://pypi.python.org/pypi/python-dateutil</a></p>\n<ul>\n<li><p>From within the python-dateutil 2.1 folder copy the folder “dateutil” to “C:\\Python32\\Lib\\site-packages”</p>\n</li>\n<li><p>The “C:\\Python32\\Lib\\site-packages” folder is where 3rd party packages are to be installed</p>\n</li>\n<li><p>You will need this for pandas to work properly</p>\n</li>\n</ul>\n<p>12) Download the package called “six” from pypi <a href=\"http://pypi.python.org/pypi/six/1.2.0\" target=\"_blank\" rel=\"external\">http://pypi.python.org/pypi/six/1.2.0</a></p>\n<ul>\n<li><p>Unlike dateutil “six” actually needs to be installed from the command line</p>\n</li>\n<li><p>Extract the zipped folder and then copy the contents to “C:\\Python32\\Lib\\site-packages”</p>\n</li>\n<li><p>Go into the six folder and run the following command</p>\n</li>\n<li><p>“setup.py install”</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/h.PNG\" width=\"450px\" height=\"38px\"><br></div>\n\n<p>13) Verify that pandas is working</p>\n<ul>\n<li><p>Open Visual Studio 2012 and either start a new Python application or open an existing one</p>\n</li>\n<li><p>Start the Python Interactive shell and enter the code that appears within the screenshot below</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/i.png\" width=\"473px\" height=\"230px\"><br></div>\n\n<p>14) Install matplotlib for python</p>\n<ul>\n<li><p>This tutorial is using python 3.2 and Numpy 1.6.2 for 32-bit Windows</p>\n</li>\n<li><p><a href=\"https://github.com/downloads/matplotlib/matplotlib/matplotlib-1.2.0.win32-py3.2.exe\" target=\"_blank\" rel=\"external\">https://github.com/downloads/matplotlib/matplotlib/matplotlib-1.2.0.win32-py3.2.exe</a></p>\n</li>\n<li><p>After installing regenerate the intellisense database</p>\n</li>\n<li><p>Tools &gt;&gt; Options &gt;&gt; Python Tools &gt;&gt; Interpreter Options &gt;&gt; Generate Intellisense database</p>\n</li>\n</ul>\n<p>15) Verify that matplotlib is running</p>\n<ul>\n<li><p>Special thanks to <a href=\"http://bespokeblog.wordpress.com/2011/07/07/basic-data-plotting-with-matplotlib-part-2-lines-points-formatting\" target=\"_blank\" rel=\"external\">http://bespokeblog.wordpress.com/2011/07/07/basic-data-plotting-with-matplotlib-part-2-lines-points-formatting/</a> for the example code</p>\n</li>\n<li><p>Try and reproduce the screenshot below within your visual studio environment</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/j.PNG\" width=\"430px\" height=\"345px\"><br></div>\n\n<p>16) Install SciPy</p>\n<ul>\n<li><p>We’re using Python3.2 so get the appropriate version</p>\n</li>\n<li><p><a href=\"http://sourceforge.net/projects/scipy/files/scipy/0.11.0/scipy-0.11.0-win32-superpack-python3.2.exe/download\" target=\"_blank\" rel=\"external\">http://sourceforge.net/projects/scipy/files/scipy/0.11.0/scipy-0.11.0-win32-superpack-python3.2.exe/download</a></p>\n</li>\n<li><p>Right click the installer and “Run as administrator” and then follow the on screen instructions</p>\n</li>\n<li><p>Regenerate the intellisense database within Visual Studio 2012 to ensure that Scipy will be autocompleted</p>\n</li>\n</ul>\n<p>17) Install IPython</p>\n<ul>\n<li><p><a href=\"http://www.windowsazure.com/en-us/develop/python/tutorials/ipython-notebook\" target=\"_blank\" rel=\"external\">http://www.windowsazure.com/en-us/develop/python/tutorials/ipython-notebook</a></p>\n</li>\n<li><p>Follow the very detailed instructions on that site except the part about the <code>ipython_notebook_config.py</code> file I couldn’t get that part to work.</p>\n</li>\n<li><p>If you get an error relating to missing module JinJa2 then open Powershell and run <code>easy_install.exe Jinja2</code></p>\n</li>\n<li><p>I managed to get IPython working correctly using the following from Powershell</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ipython3.exe notebook --pylab=inline --profile=nbserver --certfile=&apos;C:\\Users\\YourNameHere\\.ipython\\profile_nbserver\\mycert.pem&apos;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>In this tutorial we’ll setup a Python development environment on Windows 7. After finishing this tutorial you will be ready to start writing numerical applications, data analysis algorithmns and implement various machine learning methods. I’ve always wanted to get back into numerical computing and Python seems like the way to go.</p>","more":"<p>In this tutorial you will be setting up a numerical Python development environment for Windows 7.</p>\n<p>As you might have already realized, Python is rather simple to setup on a Linux/MacOSX box but as with many open source based projects getting up and running on Windows is never trivial.</p>\n<p>1) Visit <a href=\"http://www.python.org\">http://www.python.org</a> and search for Python version 3.2.x</p>\n<ul>\n<li><p><a href=\"http://www.python.org/download/releases/3.2.3/\">http://www.python.org/download/releases/3.2.3/</a></p>\n</li>\n<li><p>The 64-bit version currently doesn’t support NumPy and or SciPy so grab the 32-bit version</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/1.PNG\" alt=\"Windows x86 32bit Python\" width=\"700px\" height=\"300px\"/><br></div>\n\n<p>2) Double click the Microsoft Installer file from Windows Explorer</p>\n<ul>\n<li>Special thanks to <a href=\"http://www.andrewsturges.com/2012/05/installing-numpy-for-python-3-in.html\">http://www.andrewsturges.com/2012/05/installing-numpy-for-python-3-in.html</a></li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/2.PNG\" alt=\"Windows x86 32bit Python\" width=\"505px\" height=\"435px\"/><br></div>\n\n<ul>\n<li><p>According to Andrew we have to select the option “Install just for me”</p>\n</li>\n<li><p>Click “Next”</p>\n</li>\n<li><p>Install Python to the root directory of your hard disk mine was “C:\\Python32\\”</p>\n</li>\n<li><p>On the page “Customize Python 3.2.x” enable the option “Add python.exe to Path”</p>\n</li>\n<li><p>While still on the page “Customize Python 3.2.x” click “Advanced” this will open a new window</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/3.PNG\" alt=\"Windows x86 32bit Python\" width=\"505px\" height=\"435px\"/><br></div>\n\n<ul>\n<li>Check the option on that page; for a discussion for why this option is used see the post on Stackoverflow</li>\n</ul>\n<p><a href=\"http://stackoverflow.com/questions/12376188/should-i-compile-py-files-to-byte-code-after-installation\">http://stackoverflow.com/questions/12376188/should-i-compile-py-files-to-byte-code-after-installation</a></p>\n<p>3) Verify that python installed correctly</p>\n<ul>\n<li><p>Press the window key or click the start menu and type “python” and the search results should include </p>\n</li>\n<li><p>“Python (command line)” that is the one we want so click it.</p>\n</li>\n<li><p>You should be able to run a small Hello world program from the python interactive terminal</p>\n</li>\n</ul>\n<p>4) Go install numpy</p>\n<ul>\n<li><p><a href=\"http://sourceforge.net/projects/numpy/files/NumPy/1.6.2/numpy-1.6.2-win32-superpack-python3.2.exe/download\">http://sourceforge.net/projects/numpy/files/NumPy/1.6.2/numpy-1.6.2-win32-superpack-python3.2.exe/download</a></p>\n</li>\n<li><p>Once downloading is completed run the installer</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/4.PNG\" alt=\"Windows x86 32bit Python\" width=\"600px\" height=\"397px\"/><br></div>\n\n<ul>\n<li>Verify that numpy was successfully installed by opening a command prompt and running the following code</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/5.PNG\" alt=\"Windows x86 32bit Python\" width=\"600px\" height=\"124px\"/><br></div>\n\n<p>5) Go grab a copy of Visual Studio 2012 if you don’t already have a copy (don’t worry you can use the free express edition)</p>\n<ul>\n<li>I’m using the express version for desktop <a href=\"http://www.microsoft.com/visualstudio/eng/downloads\">http://www.microsoft.com/visualstudio/eng/downloads</a></li>\n</ul>\n<p>6) Install the Visual Studio 2012 Isolated Shell the download link is found on the same page</p>\n<p>7) Install the Visual Studio 2012 Integrated Shell (same as step 6)</p>\n<ul>\n<li>NOTICE! At this point if you went the free route and installed Visual Studio Express you will actually have two programs, Visual Studio 2012 in addition to Visual Studio Express</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/e.png\" width=\"262px\" height=\"469px\"/><br></div>\n\n<ul>\n<li><p>To use Python you will have to use Visual Studio 2012</p>\n</li>\n<li><p>To use regular C#, C++, VB etc you will need to run the Visual Studio Express version</p>\n</li>\n</ul>\n<p>8) Install the Python Tools for Visual Studio</p>\n<ul>\n<li><p><a href=\"http://pytools.codeplex.com/\">http://pytools.codeplex.com/</a></p>\n</li>\n<li><p>Once you have installed the application you should be able to open Visual Studio 2012 and start a new Python application project</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/b.PNG\" width=\"475px\" height=\"306px\"/><br></div>\n\n<p>9) Within Visual Studio 2012 click Tools &gt;&gt; Options &gt;&gt; Python Tools and change the default version of python to 3.2</p>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/a.PNG\" width=\"375px\" height=\"220px\"/><br></div>\n\n<ul>\n<li><p>As you remember from the earlier instructions Numpy currently does not support python 3.3 on Windows</p>\n</li>\n<li><p>If avaliable regenerate the intellisense database, this is what allows Visual Studio to perform autocomplete</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/f.png\" width=\"375px\" height=\"220px\"/><br></div>\n\n<ul>\n<li>Next make sure you can get your visual studio 2012 to resemble the screenshots</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/d.png\" width=\"656px\" height=\"380px\"/><br></div>\n\n<ul>\n<li>Numpy will show up in the autocomplete if you have been doing everything correctly</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/c.png\" width=\"450px\" height=\"450px\"/><br></div>\n\n<p>10) Setting up Pandas</p>\n<ul>\n<li><p>Go get the latest version of Pandas <a href=\"http://pandas.pydata.org/index.html\">http://pandas.pydata.org/index.html</a></p>\n</li>\n<li><p>Since we’re using 32-bit Python 3.2 make sure you download the version that supports it</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/g.PNG\" width=\"334px\" height=\"565px\"/><br></div>\n\n<ul>\n<li>Download and install it</li>\n</ul>\n<p>11) Download the dateutil package from <a href=\"http://pypi.python.org/pypi/python-dateutil\">http://pypi.python.org/pypi/python-dateutil</a></p>\n<ul>\n<li><p>From within the python-dateutil 2.1 folder copy the folder “dateutil” to “C:\\Python32\\Lib\\site-packages”</p>\n</li>\n<li><p>The “C:\\Python32\\Lib\\site-packages” folder is where 3rd party packages are to be installed</p>\n</li>\n<li><p>You will need this for pandas to work properly</p>\n</li>\n</ul>\n<p>12) Download the package called “six” from pypi <a href=\"http://pypi.python.org/pypi/six/1.2.0\">http://pypi.python.org/pypi/six/1.2.0</a></p>\n<ul>\n<li><p>Unlike dateutil “six” actually needs to be installed from the command line</p>\n</li>\n<li><p>Extract the zipped folder and then copy the contents to “C:\\Python32\\Lib\\site-packages”</p>\n</li>\n<li><p>Go into the six folder and run the following command</p>\n</li>\n<li><p>“setup.py install”</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/h.PNG\" width=\"450px\" height=\"38px\"/><br></div>\n\n<p>13) Verify that pandas is working</p>\n<ul>\n<li><p>Open Visual Studio 2012 and either start a new Python application or open an existing one</p>\n</li>\n<li><p>Start the Python Interactive shell and enter the code that appears within the screenshot below</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/i.png\" width=\"473px\" height=\"230px\"/><br></div>\n\n<p>14) Install matplotlib for python</p>\n<ul>\n<li><p>This tutorial is using python 3.2 and Numpy 1.6.2 for 32-bit Windows</p>\n</li>\n<li><p><a href=\"https://github.com/downloads/matplotlib/matplotlib/matplotlib-1.2.0.win32-py3.2.exe\">https://github.com/downloads/matplotlib/matplotlib/matplotlib-1.2.0.win32-py3.2.exe</a></p>\n</li>\n<li><p>After installing regenerate the intellisense database</p>\n</li>\n<li><p>Tools &gt;&gt; Options &gt;&gt; Python Tools &gt;&gt; Interpreter Options &gt;&gt; Generate Intellisense database</p>\n</li>\n</ul>\n<p>15) Verify that matplotlib is running</p>\n<ul>\n<li><p>Special thanks to <a href=\"http://bespokeblog.wordpress.com/2011/07/07/basic-data-plotting-with-matplotlib-part-2-lines-points-formatting\">http://bespokeblog.wordpress.com/2011/07/07/basic-data-plotting-with-matplotlib-part-2-lines-points-formatting/</a> for the example code</p>\n</li>\n<li><p>Try and reproduce the screenshot below within your visual studio environment</p>\n</li>\n</ul>\n<div class=\"justified-gallery\"><br>  <img src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/win_py_tutorial/j.PNG\" width=\"430px\" height=\"345px\"/><br></div>\n\n<p>16) Install SciPy</p>\n<ul>\n<li><p>We’re using Python3.2 so get the appropriate version</p>\n</li>\n<li><p><a href=\"http://sourceforge.net/projects/scipy/files/scipy/0.11.0/scipy-0.11.0-win32-superpack-python3.2.exe/download\">http://sourceforge.net/projects/scipy/files/scipy/0.11.0/scipy-0.11.0-win32-superpack-python3.2.exe/download</a></p>\n</li>\n<li><p>Right click the installer and “Run as administrator” and then follow the on screen instructions</p>\n</li>\n<li><p>Regenerate the intellisense database within Visual Studio 2012 to ensure that Scipy will be autocompleted</p>\n</li>\n</ul>\n<p>17) Install IPython</p>\n<ul>\n<li><p><a href=\"http://www.windowsazure.com/en-us/develop/python/tutorials/ipython-notebook\">http://www.windowsazure.com/en-us/develop/python/tutorials/ipython-notebook</a></p>\n</li>\n<li><p>Follow the very detailed instructions on that site except the part about the <code>ipython_notebook_config.py</code> file I couldn’t get that part to work.</p>\n</li>\n<li><p>If you get an error relating to missing module JinJa2 then open Powershell and run <code>easy_install.exe Jinja2</code></p>\n</li>\n<li><p>I managed to get IPython working correctly using the following from Powershell</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ipython3.exe notebook --pylab=inline --profile=nbserver --certfile=&apos;C:\\Users\\YourNameHere\\.ipython\\profile_nbserver\\mycert.pem&apos;</div></pre></td></tr></table></figure>"},{"title":"New project update! A Question and Answer Board using PHP and MongoDB","date":"2012-07-15T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/qalite.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/qalite.JPG","comments":0,"_content":"QALite is a basic Question and Answer Board that's designed to be embedded within a larger site, it was built using MongoDB and a neat MVC PHP framework called Lithium. If you've ever been curious as to how to create a basic questions and answers site or would just like to see an example of applying MVC to PHP then you should definately check it out.\n\nTo see the source code for this app and read a brief description about the project [visit the Github repo for QALite][link_qalite]\n\n[link_qalite]: https://github.com/taywils/QA-LIte\n","source":"_posts/qalite.md","raw":"---\ntitle: New project update! A Question and Answer Board using PHP and MongoDB\ndate: 2012-07-15\ntags: [php, javascript]\ncategories: [open-source, project]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/qalite.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/qalite.JPG\ncomments: false\n---\nQALite is a basic Question and Answer Board that's designed to be embedded within a larger site, it was built using MongoDB and a neat MVC PHP framework called Lithium. If you've ever been curious as to how to create a basic questions and answers site or would just like to see an example of applying MVC to PHP then you should definately check it out.\n\nTo see the source code for this app and read a brief description about the project [visit the Github repo for QALite][link_qalite]\n\n[link_qalite]: https://github.com/taywils/QA-LIte\n","slug":"qalite","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3hz0015yswv647z0vox","layout":"post","photos":[],"link":"","content":"<p>QALite is a basic Question and Answer Board that’s designed to be embedded within a larger site, it was built using MongoDB and a neat MVC PHP framework called Lithium. If you’ve ever been curious as to how to create a basic questions and answers site or would just like to see an example of applying MVC to PHP then you should definately check it out.</p>\n<p>To see the source code for this app and read a brief description about the project <a href=\"https://github.com/taywils/QA-LIte\" target=\"_blank\" rel=\"external\">visit the Github repo for QALite</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>QALite is a basic Question and Answer Board that’s designed to be embedded within a larger site, it was built using MongoDB and a neat MVC PHP framework called Lithium. If you’ve ever been curious as to how to create a basic questions and answers site or would just like to see an example of applying MVC to PHP then you should definately check it out.</p>\n<p>To see the source code for this app and read a brief description about the project <a href=\"https://github.com/taywils/QA-LIte\">visit the Github repo for QALite</a></p>\n"},{"title":"Ruby Cramp tutorial build an RSS API with Ruby and Redis","date":"2012-10-28T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/rubycramprssfeed.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/rubycramprssfeed.JPG","comments":0,"_content":"A while ago I had wanted to design an API for delivering realtime RSS news feeds from multiple sites organized by category so that I wouldn't have to navigate a reading list of tabs within my browser or simply run out of interesting stories to read whenever my favorites sites offered me nothing of interest.\n\n<!-- more -->\nIn this tutorial we're going to be building a small API for categorized RSS feeds.\nThe choice of technology for this tutorial will the Ruby programming language, Redis for data caching and Cramp an async framework written in Ruby.\n\n<a href=\"http://www.ruby-lang.org/en/\">Installation and instructions for Ruby</a>\n\n<a href=\"http://redis.io/\">Redis installation and info</a>\n\n<a href=\"http://cramp.in/\">Cramp framework instructions</a>\n\nOnce you get all of the three components installed on your development machine you should be ready to go.\nTo begin you'll want to open your desired terminal application on your machine whether it be PowerShell on Windows or Terminal on Linux or OSX, create a new directory called &quot;NewsPlus&quot; and move into said directory.\nWithin the directory we'll invoke the Ruby Cramp gem scaffolding command to write the skeleton code for our app.\n```\n#Terminal window \n$ cramp new newsplus\n```\nAfter the scaffolding has completed the first thing we'll need to do is setup the Gemfile for the application.\nThe Gemfile contains all the information needed by your application in order to install its dependencies.\n```ruby\n#NewsPlus/Gemfile\nsource :rubygems\n\n# Rails Support Lib Classes\ngem 'activesupport'\n\n# Rails Internationalization\ngem 'i18n'\n\n# Cramp Framework \ngem 'cramp'\n\n# Ruby Redis Driver\ngem 'redis'\n\n# JSON support\ngem 'json'\n\n# Async webserver for running a cramp application\ngem 'thin'\n\n# Rack based routing\ngem 'http_router'\n\n# Collection of async-proof rack middlewares - https://github.com/rkh/async-rack.git\ngem 'async-rack'\n```\nWith your Gemfile complete run the next command to instruct the bundle gem to install all of the needed dependencies.\n```\n#Terminal Window\n$ bundle install\n```\nIf you don't have the bundle gem installed just run the command to install it and then try again.\n```\n#Terminal Window\n$ gem install bundler\n```\nWith the Gemfile all setup we can begin editing the configuration for the project.\nWithin the configuration file config.ru we'll add all required gems for our project and leave everything else default.\n```ruby\n#NewsPlus/config.ru\n# Gems and libs\nrequire 'redis'\nrequire 'open-uri'\nrequire 'rss'\nrequire 'json'\nrequire 'active_support/core_ext'\n\n# Cramp Application\nrequire './application'\n\nNewPlus::Application.initialize!\n\n# Development middlewares\nif NewPlus::Application.env == 'development'\n  use AsyncRack::CommonLogger\n\n  # Enable code reloading on every request\n  use Rack::Reloader, 0\n\n  # Serve assets from /public\n  use Rack::Static, :urls => [\"/javascripts\"], :root => NewPlus::Application.root(:public)\nend\n\n# Running thin :\n#\n#   bundle exec thin --max-persistent-conns 1024 --timeout 0 -R config.ru start\n#\n# Vebose mode :\n#\n#   Very useful when you want to view all the data being sent/received by thin\n#\n#   bundle exec thin --max-persistent-conns 1024 --timeout 0 -V -R config.ru start\n#\nrun NewPlus::Application.routes\n```\nAnother bit of pre configuration that we'll need before we start actually coding our application will be the application.rb file.\nWithin the application file we're going to leave all of the previous defaults setup by the Cramp scaffolding except for the last line.\nOn the last line we have to tell Cramp to require the sub-folders within the app folder in a specific order.\nThe reason being so that our data models don't try to reference helper modules that haven't been loaded yet.\n```ruby\n#NewsPlus/application.rb\nrequire \"rubygems\"\nrequire \"bundler\"\n\nmodule NewPlus\n  class Application\n\n  def self.root(path = nil)\n    @_root ||= File.expand_path(File.dirname(__FILE__))\n    path ? File.join(@_root, path.to_s) : @_root\n  end\n\n  def self.env\n  @_env ||= ENV['RACK_ENV'] || 'development'\n  end\n\n  def self.routes\n  @_routes ||= eval(File.read('./config/routes.rb'))\n  end\n\n  # Initialize the application\n  def self.initialize!\n  end\n\n  end\nend\n\nBundler.require(:default, NewPlus::Application.env)\n\n# Preload application classes in the order specified\n(Dir['./app/helpers/*.rb'] + Dir['./app/models/*.rb'] + Dir['./app/actions/*.rb']).each {|f| require f}\n```\nLastly to wrap up the pre-configuration we need to setup the routing for the app.\nLuckly for us the Cramp framework uses the well known Rack HttpRouter for Ruby. \nBelow is the code for the routes.rb file which we'll handle our GET and POST requests from.\n```ruby\n#NewsPlus/config/routes.rb\n# Check out https://github.com/joshbuddy/http_router for more information on HttpRouter\nHttpRouter.new do\n  post('/prepare').to(PrepareAction)\n  post('/refresh').to(RefreshAction)\n  get('/pull').to(PullAction)\n  get('/info').to(InfoAction)\nend\n```\nWe're keeping our API very simple, it consists of just four commands prepare, refresh, pull and info.\nPrepare is the initial call and fetches all rss site content from as defined within our sites model which we'll get to shortly.\nRefresh will go out and fetch the sites within the desired category again assuming they have been initially loaded with prepare call.\nPull is exactly what you think it is... it pulls down the RSS feed info from the web and stores it within Redis.\nInfo returns the channel element from the RSS xml, this is the element within an RSS document which informs the user about the origin of the xml document.\n\nNow that all of the configuration code has been written the next step is to define our storage code.\nSince we're using Redis as our in memory data storage we're going to need some helper code to connect a new Redis session.\nWithin your application directory navigate to the app directory and create a new directory called helpers.\nOn a Linux/Unix machine just use mkdir to create the helpers directory\n```\n#Terminal\n$ cd app\n$ mkdir helpers\n```\nNow create the file moduleredis.rb.\nBeing a Ruby module we're going to use the module code as a mixin within other parts of our code to give them Redis connectivity.\nThis might be a bit unfamiliar to those of you comming from languages such as Java or C++ where one tends to rely on abstract classes and inheritance but as a Ruby developer you should always consider whether or not a mixin should be used in place of inheritance.\n```ruby\n#NewsPlus/app/helpers/moduleredis.rb\nmodule RedisHelper\n  def connect_to_redis\n    @redis = Redis.new\n    puts \"INFO: Redis Connection started\"\n    yield\n  end\n\n  def close_redis\n    @redis.quit\n    puts \"INFO: Redis client disconnected\"\n  end\nend\n```\nNow that we have Redis connectivity, we can start adding code to support our two data models, the first will be the sites model.\nThe sites model will contain the information needed to define what a site is and how its key is stored within our Redis cache.\nUse whatever text editor or IDE and create the following file, call it sites.rb and place it within the models folder.\n```\n#Terminal\n$ mkdir NewsPlus/app/models\n```\n```ruby\n#NewsPlus/app/models/sites.rb\nclass Sites\n  attr_reader :sites\n\n    def initialize()\n      @sites = {\n        'hackernews' => { \n          url: 'http://news.ycombinator.com/rss', \n          attributes: %w{ title link comments description }, \n          category: \"tech\",\n          name: \"hackernews\"\n        },\n        'redditprogramming' => {\n          url: 'http://www.reddit.com/r/programming.rss',\n          attributes: %w{ title link description },\n          category: \"tech\",\n          name: 'reddit/r/programming'\n        },\n        'wsjusbusiness' => {\n          url: 'http://online.wsj.com/xml/rss/3_7014.xml',\n          attributes: %w{ title link description pubDate },\n          category: \"business\",\n          name: 'WSJ.com US Business'\n        }\n      }\n    end\n\n    def all_sites(category = nil)\n      return @sites if category.nil?\n\n      sites_hash = {}\n\n      @sites.each do |name, vals|\n        sites_hash[name] = vals if vals[:category] == category\n      end\n\n      return sites_hash\n    end\n\n    def get_redis_key(name, attribute)\n      \"#{@sites[name][:category]}:#{@sites[name][:name]}:#{attribute}\"\n    end\nend\n```\nOur sites model is not that involved really; all we're doing is storing a collection of RSS feeds via the @sites hashmap and the all_sites method will either return a dump of the @sites attr_reader or just those from the category passed as a string argument.\nFor this demonstration we're gonna restrict ourselves to just tech and business but you can add more if you wish.\n\nWithin the same models directory of your application create the next model file, call it newsfeed.rb.\nThe newsfeed model takes a sites information as provided and handle all translation of the RSS's native xml format to json.\nBy placing our site's RSS information in the json format we can then possibly build a web based reader that can take the json and display it in an interesting way via CSS3/HTML5 or perhaps with some visual javascript library.\n```ruby\n#NewsPlus/app/models/newsfeed.rb\nclass NewsFeed\n  attr_reader :feed, :item_attributes_array, :news_category, :site_name\n\n  def initialize(site_name, site_url, item_attributes_array, news_category)\n    @feed = Hash.from_xml open(site_url)\n    @item_attributes_array = item_attributes_array\n    @news_category = news_category\n    @site_name = site_name\n  end\n\n  def self.refresh(url)\n    new_feed = Hash.from_xml open(url)\n    new_feed['rss']['channel']['item'].to_json\n  end\n\n  def send_info()\n    info = { \n      siteName: @site_name,\n      homepageUrl: @feed['rss']['channel']['link'],\n      about: @feed['rss']['channel']['description'],\n      feedElements: @item_attributes_array,\n      category: @news_category.downcase\n    }\n    info.to_json\n  end\n\n  def send_stories()\n    @feed['rss']['channel']['item'].to_json\n  end\nend\n```\nWith both the newsfeed and sites models completed the next step is to code the Cramp equivalent of controllers.\nDue to the fact that Cramp is a non MVC framework although one can easily turn it into one if you want, Cramp requires that \nall routed web request are handled via actions.\n\nIf you recall earlier in this tutorial where we defined the file NewsPlus/config/routes.rb we defined two GET and two POST methods.\nThe first one we'll tackle is the Prepare action which you can think off as the initialization step.\n\nOpen a new file within the NewsPlus/app/actions/ directory and call it \"prepare_action.rb\"\nOne of the things you'll notice is that for Cramp actions you have to pay attention to is the order in which you declare your functions.\nCramp handles each request by filtering it through a series of callbacks, these are listed in order below.\n\n- before_start\n- respond_with\n- on_start\n- on_finish\n\nBased on the callback order above you place your action functions into each of the four callback categories.\nFor a more in depth discussion of the Cramp frameworks callback structure refer to the official project's documentation available at the following link. \n\n<a href=\"http://cramp.in/documentation\">http://cramp.in/documentation</a>\n\nHowever, by studying this example code you can gain an intuitive feel for how the callbacks process your request.\nIn each of the actions we'll include in this app the before_start callback usually involves connecting to redis and checking for request parameters.\nAddtionally the on_finish callback is where you want to put any clean up code and close open database connections or cache connections as is the case with this example.\nOne thing I forgot to mention is the Cramp framework function \"render\", what render does is return the response to the client.\nYou'll see render sprinkled around a bit but make sure you pay attention to what data its rendering back to the client; for this application we'll commit ourselves to just JSON formatted data but you can return plaintext if you want and or any other type as well.\n```ruby\n#NewsPlus/app/actions/prepare_action.rb\nclass PrepareAction < Cramp::Action\n  include RedisHelper\n\n  before_start :connect_to_redis, :pull_news_feeds, :cache_news_feeds\n  on_start :handle_request\n  on_finish :close_redis\n\n  def pull_news_feeds\n    @sites = Sites.new\n    @news_feeds = []\n\n    @sites.all_sites().each do |site_name, site_vals|\n      @news_feeds << NewsFeed.new(site_name, site_vals[:url], site_vals[:attributes], site_vals[:category])\n    end\n\n    puts \"INFO: News feeds pulled\"\n    yield\n  end\n\n  def cache_news_feeds\n    @news_feeds.each do |feed|\n      @redis.set(@sites.get_redis_key(feed.site_name, 'stories'), feed.send_stories())\n      @redis.set(@sites.get_redis_key(feed.site_name, 'info'), feed.send_info())\n    end\n\n    puts \"INFO: News feeds cached\"\n    yield\n  end\n\n  def respond_with\n    [201, {'Content-Type' => 'application/json'}]\n  end\n\n  def handle_request \n    response = {ok: \"prepare success\"}.to_json\n    render response\n    finish\n  end\nend\n```\nAs you can probably guess the goal of the prepare action is to just create new newsfeed objects from our sites and foreach feed cache its data.\nAnother point of interest is the use of the RedisHelper module, on the line \"include RedisHelper\" the mixin allows use to share\naccess code for the Redis cache across each of our actions, you'll see this same mixin throughout all of our actions.\nThe next action will be what is called the info action, the info action returns the RSS feed's root information which describes the feed.\n```ruby\n#NewsPlus/app/actions/info_action.rb\nclass InfoAction < Cramp::Action\n  include RedisHelper\n\n  before_start :connect_to_redis, :get_params, :info_sites\n  on_start :handle_request\n  on_finish :close_redis\n\n  def get_params\n    if(params.has_key?(:category))\n      @category = params[:category]\n      yield\n    else\n      @category = nil\n      yield\n    end\n  end\n\n  def info_sites \n    @response_data = []\n\n    @sites = Sites.new\n\n    @sites.all_sites(@category).each do |site_name, site_vals|\n      temp = nil\n      temp = @redis.get(@sites.get_redis_key(site_name, 'info'))\n      @response_data << temp\n    end\n    yield\n  end\n\n  def respond_with\n    [200, {'Content-Type' => 'application/json'}]\n  end\n\n  def handle_request \n    response = @response_data.to_json\n    render response\n    finish\n  end\nend\n```\nWith both prepare and info done we now want the ability to pull the raw information from the RSS feed, this will be represented by the pull action.\nGo into the app/actions directory and create a new file using your text editor of choice and call it pull_action.rb\n```ruby\n#NewsPlus/app/action/pull_action.rb\nclass PullAction < Cramp::Action\n  include RedisHelper\n\n  before_start :connect_to_redis, :get_params, :pull_sites\n  on_start :handle_request\n  on_finish :close_redis\n\n  def get_params\n    if(params.has_key?(:category))\n      @category = params[:category]\n      yield\n    else\n      puts \"No category param passed\"\n      @category = nil\n      yield\n    end\n  end\n\n  def pull_sites\n    @response_data = []\n\n    @sites = Sites.new\n\n    @sites.all_sites(@category).each do |site_name, site_vals|\n      puts \"pulling data for #{site_name}\"\n      temp = @redis.get(@sites.get_redis_key(site_name, 'stories'))\n      @response_data << temp\n    end\n    yield\n  end\n\n  def respond_with\n    [200, {'Content-Type' => 'application/json'}]\n  end\n\n  def handle_request \n    response = @response_data.to_json\n    render response\n    finish\n  end\nend\n```\nThe pull_action is similar to the info action with the exception that it fetches the stories redis key as opposed to the info redis key we definied within the sites model a while back.\n\nNow that you kinda have a feel for how Cramp handles request via a sequence of callbacks, you should easily follow the logic of the next action, the \"refresh_action\".\nWhat refresh does is rather simple... refresh just re-caches the rss data from the web; if the client passes an optional category parameter only those feeds under the said category will be refreshed. \n```ruby\n#NewPlus/app/actions/refresh_action.rb\nclass RefreshAction < Cramp::Action\n  include RedisHelper\n\n  before_start :connect_to_redis, :get_params, :refresh_sites\n  on_start :handle_request\n  on_finish :close_redis\n\n  def get_params\n    if(params.has_key?(:category))\n      @category = params[:category]\n      yield\n    else\n      @category = nil\n      yield\n    end\n  end\n\n  def refresh_sites\n    @sites = Sites.new\n\n    @sites.all_sites(@category).each do |site_name, site_vals|\n      @redis.set(@sites.get_redis_key(site_name, 'stories'), NewsFeed.refresh(site_vals[:url]))\n    end\n    yield\n  end\n\n  def respond_with\n    [201, {'Content-Type' => 'application/json'}]\n  end\n\n  def handle_request \n    response = {ok: \"refresh success\"}.to_json\n    render response\n    finish\n  end\nend\n```\nSo far so good we have at this point completed all of the necessary Ruby code required to run this application.\nThe next step is to start our redis server, to create a new redis server on a Linux/Unix machine you just run the code below in your terminal.\n```\n#Terminal\n$ cd location_where_you_installed_redis\n$ ./redis-2.4.17/src/redis-server\n```\nThat command will create a new redis server on the default port with the default settings which will be enough for our development environment.\nIn addition you may want to verify that our changes are being cached as we run through a test run of the code.\nThis requires that you start a redis client \n```\n#Terminal\n$ cd location_where_you_installed_redis\n$ ./redis-2.4.17/src/redis-cli\n```\nNow that you have both the redis client and server before starting the application begin the redis server or if you already have it running let it continue.\n\nOpen a new terminal window and navigate the to the directory of your project.\nThe following command will allow you to run the cramp application; this command was taken from the documentation at the Cramp homepage.\n```\n#Terminal\n$ bundle exec thin --timeout 0 -R config.ru start\n```\nOnce running you shouldn't see any error messages if everything has been typed correctly. As with all Cramp applications the default port number will be 3000 and the host set to local. We'll start by calling the prepare function from our mock api, open a terminal and type the following. The terminal command we will be using is called Curl, its a command line tool data transfer across various protocols including HTTP.\n```\n#Terminal\n$ curl -X POST 127.0.0.1:3000/prepare\n```\nThe response sent back from the server will be JSON indicating that the request succeded, now if you view your redis server the debug information will show that there are now 6 keys cached.\n\nRemember that each of our 3 sites have two keys; info and server for a total of six.\nTo run some of the other commands we can use curl again...\n```\n#Terminal\n$ curl -X POST 127.0.0.1:3000/refresh\n$ curl -X GET 127.0.0.1:3000/pull\n$ curl -X GET 127.0.0.1:3000/info\n```\nIf this is your first time using curl you might be wondering how one passes parameters, well its just like any http request you include the question mark and begin passing your parameters delimeted by the ampersand.\n\nSay you wanted to pull only tech rss feeds.\n```\n$ curl -X GET 127.0.0.1:3000/pull?category=tech\n```\nNow you have a basic RSS api written using Ruby and the Cramp framework, go read more about Cramp so you can extend on this app and turn it into something more useful.\n","source":"_posts/rubycramprssfeed.md","raw":"---\ntitle: Ruby Cramp tutorial build an RSS API with Ruby and Redis\ndate: 2012-10-28\ntags: [ruby, redis]\ncategories: [tutorial]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/rubycramprssfeed.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/rubycramprssfeed.JPG\ncomments: false\n---\nA while ago I had wanted to design an API for delivering realtime RSS news feeds from multiple sites organized by category so that I wouldn't have to navigate a reading list of tabs within my browser or simply run out of interesting stories to read whenever my favorites sites offered me nothing of interest.\n\n<!-- more -->\nIn this tutorial we're going to be building a small API for categorized RSS feeds.\nThe choice of technology for this tutorial will the Ruby programming language, Redis for data caching and Cramp an async framework written in Ruby.\n\n<a href=\"http://www.ruby-lang.org/en/\">Installation and instructions for Ruby</a>\n\n<a href=\"http://redis.io/\">Redis installation and info</a>\n\n<a href=\"http://cramp.in/\">Cramp framework instructions</a>\n\nOnce you get all of the three components installed on your development machine you should be ready to go.\nTo begin you'll want to open your desired terminal application on your machine whether it be PowerShell on Windows or Terminal on Linux or OSX, create a new directory called &quot;NewsPlus&quot; and move into said directory.\nWithin the directory we'll invoke the Ruby Cramp gem scaffolding command to write the skeleton code for our app.\n```\n#Terminal window \n$ cramp new newsplus\n```\nAfter the scaffolding has completed the first thing we'll need to do is setup the Gemfile for the application.\nThe Gemfile contains all the information needed by your application in order to install its dependencies.\n```ruby\n#NewsPlus/Gemfile\nsource :rubygems\n\n# Rails Support Lib Classes\ngem 'activesupport'\n\n# Rails Internationalization\ngem 'i18n'\n\n# Cramp Framework \ngem 'cramp'\n\n# Ruby Redis Driver\ngem 'redis'\n\n# JSON support\ngem 'json'\n\n# Async webserver for running a cramp application\ngem 'thin'\n\n# Rack based routing\ngem 'http_router'\n\n# Collection of async-proof rack middlewares - https://github.com/rkh/async-rack.git\ngem 'async-rack'\n```\nWith your Gemfile complete run the next command to instruct the bundle gem to install all of the needed dependencies.\n```\n#Terminal Window\n$ bundle install\n```\nIf you don't have the bundle gem installed just run the command to install it and then try again.\n```\n#Terminal Window\n$ gem install bundler\n```\nWith the Gemfile all setup we can begin editing the configuration for the project.\nWithin the configuration file config.ru we'll add all required gems for our project and leave everything else default.\n```ruby\n#NewsPlus/config.ru\n# Gems and libs\nrequire 'redis'\nrequire 'open-uri'\nrequire 'rss'\nrequire 'json'\nrequire 'active_support/core_ext'\n\n# Cramp Application\nrequire './application'\n\nNewPlus::Application.initialize!\n\n# Development middlewares\nif NewPlus::Application.env == 'development'\n  use AsyncRack::CommonLogger\n\n  # Enable code reloading on every request\n  use Rack::Reloader, 0\n\n  # Serve assets from /public\n  use Rack::Static, :urls => [\"/javascripts\"], :root => NewPlus::Application.root(:public)\nend\n\n# Running thin :\n#\n#   bundle exec thin --max-persistent-conns 1024 --timeout 0 -R config.ru start\n#\n# Vebose mode :\n#\n#   Very useful when you want to view all the data being sent/received by thin\n#\n#   bundle exec thin --max-persistent-conns 1024 --timeout 0 -V -R config.ru start\n#\nrun NewPlus::Application.routes\n```\nAnother bit of pre configuration that we'll need before we start actually coding our application will be the application.rb file.\nWithin the application file we're going to leave all of the previous defaults setup by the Cramp scaffolding except for the last line.\nOn the last line we have to tell Cramp to require the sub-folders within the app folder in a specific order.\nThe reason being so that our data models don't try to reference helper modules that haven't been loaded yet.\n```ruby\n#NewsPlus/application.rb\nrequire \"rubygems\"\nrequire \"bundler\"\n\nmodule NewPlus\n  class Application\n\n  def self.root(path = nil)\n    @_root ||= File.expand_path(File.dirname(__FILE__))\n    path ? File.join(@_root, path.to_s) : @_root\n  end\n\n  def self.env\n  @_env ||= ENV['RACK_ENV'] || 'development'\n  end\n\n  def self.routes\n  @_routes ||= eval(File.read('./config/routes.rb'))\n  end\n\n  # Initialize the application\n  def self.initialize!\n  end\n\n  end\nend\n\nBundler.require(:default, NewPlus::Application.env)\n\n# Preload application classes in the order specified\n(Dir['./app/helpers/*.rb'] + Dir['./app/models/*.rb'] + Dir['./app/actions/*.rb']).each {|f| require f}\n```\nLastly to wrap up the pre-configuration we need to setup the routing for the app.\nLuckly for us the Cramp framework uses the well known Rack HttpRouter for Ruby. \nBelow is the code for the routes.rb file which we'll handle our GET and POST requests from.\n```ruby\n#NewsPlus/config/routes.rb\n# Check out https://github.com/joshbuddy/http_router for more information on HttpRouter\nHttpRouter.new do\n  post('/prepare').to(PrepareAction)\n  post('/refresh').to(RefreshAction)\n  get('/pull').to(PullAction)\n  get('/info').to(InfoAction)\nend\n```\nWe're keeping our API very simple, it consists of just four commands prepare, refresh, pull and info.\nPrepare is the initial call and fetches all rss site content from as defined within our sites model which we'll get to shortly.\nRefresh will go out and fetch the sites within the desired category again assuming they have been initially loaded with prepare call.\nPull is exactly what you think it is... it pulls down the RSS feed info from the web and stores it within Redis.\nInfo returns the channel element from the RSS xml, this is the element within an RSS document which informs the user about the origin of the xml document.\n\nNow that all of the configuration code has been written the next step is to define our storage code.\nSince we're using Redis as our in memory data storage we're going to need some helper code to connect a new Redis session.\nWithin your application directory navigate to the app directory and create a new directory called helpers.\nOn a Linux/Unix machine just use mkdir to create the helpers directory\n```\n#Terminal\n$ cd app\n$ mkdir helpers\n```\nNow create the file moduleredis.rb.\nBeing a Ruby module we're going to use the module code as a mixin within other parts of our code to give them Redis connectivity.\nThis might be a bit unfamiliar to those of you comming from languages such as Java or C++ where one tends to rely on abstract classes and inheritance but as a Ruby developer you should always consider whether or not a mixin should be used in place of inheritance.\n```ruby\n#NewsPlus/app/helpers/moduleredis.rb\nmodule RedisHelper\n  def connect_to_redis\n    @redis = Redis.new\n    puts \"INFO: Redis Connection started\"\n    yield\n  end\n\n  def close_redis\n    @redis.quit\n    puts \"INFO: Redis client disconnected\"\n  end\nend\n```\nNow that we have Redis connectivity, we can start adding code to support our two data models, the first will be the sites model.\nThe sites model will contain the information needed to define what a site is and how its key is stored within our Redis cache.\nUse whatever text editor or IDE and create the following file, call it sites.rb and place it within the models folder.\n```\n#Terminal\n$ mkdir NewsPlus/app/models\n```\n```ruby\n#NewsPlus/app/models/sites.rb\nclass Sites\n  attr_reader :sites\n\n    def initialize()\n      @sites = {\n        'hackernews' => { \n          url: 'http://news.ycombinator.com/rss', \n          attributes: %w{ title link comments description }, \n          category: \"tech\",\n          name: \"hackernews\"\n        },\n        'redditprogramming' => {\n          url: 'http://www.reddit.com/r/programming.rss',\n          attributes: %w{ title link description },\n          category: \"tech\",\n          name: 'reddit/r/programming'\n        },\n        'wsjusbusiness' => {\n          url: 'http://online.wsj.com/xml/rss/3_7014.xml',\n          attributes: %w{ title link description pubDate },\n          category: \"business\",\n          name: 'WSJ.com US Business'\n        }\n      }\n    end\n\n    def all_sites(category = nil)\n      return @sites if category.nil?\n\n      sites_hash = {}\n\n      @sites.each do |name, vals|\n        sites_hash[name] = vals if vals[:category] == category\n      end\n\n      return sites_hash\n    end\n\n    def get_redis_key(name, attribute)\n      \"#{@sites[name][:category]}:#{@sites[name][:name]}:#{attribute}\"\n    end\nend\n```\nOur sites model is not that involved really; all we're doing is storing a collection of RSS feeds via the @sites hashmap and the all_sites method will either return a dump of the @sites attr_reader or just those from the category passed as a string argument.\nFor this demonstration we're gonna restrict ourselves to just tech and business but you can add more if you wish.\n\nWithin the same models directory of your application create the next model file, call it newsfeed.rb.\nThe newsfeed model takes a sites information as provided and handle all translation of the RSS's native xml format to json.\nBy placing our site's RSS information in the json format we can then possibly build a web based reader that can take the json and display it in an interesting way via CSS3/HTML5 or perhaps with some visual javascript library.\n```ruby\n#NewsPlus/app/models/newsfeed.rb\nclass NewsFeed\n  attr_reader :feed, :item_attributes_array, :news_category, :site_name\n\n  def initialize(site_name, site_url, item_attributes_array, news_category)\n    @feed = Hash.from_xml open(site_url)\n    @item_attributes_array = item_attributes_array\n    @news_category = news_category\n    @site_name = site_name\n  end\n\n  def self.refresh(url)\n    new_feed = Hash.from_xml open(url)\n    new_feed['rss']['channel']['item'].to_json\n  end\n\n  def send_info()\n    info = { \n      siteName: @site_name,\n      homepageUrl: @feed['rss']['channel']['link'],\n      about: @feed['rss']['channel']['description'],\n      feedElements: @item_attributes_array,\n      category: @news_category.downcase\n    }\n    info.to_json\n  end\n\n  def send_stories()\n    @feed['rss']['channel']['item'].to_json\n  end\nend\n```\nWith both the newsfeed and sites models completed the next step is to code the Cramp equivalent of controllers.\nDue to the fact that Cramp is a non MVC framework although one can easily turn it into one if you want, Cramp requires that \nall routed web request are handled via actions.\n\nIf you recall earlier in this tutorial where we defined the file NewsPlus/config/routes.rb we defined two GET and two POST methods.\nThe first one we'll tackle is the Prepare action which you can think off as the initialization step.\n\nOpen a new file within the NewsPlus/app/actions/ directory and call it \"prepare_action.rb\"\nOne of the things you'll notice is that for Cramp actions you have to pay attention to is the order in which you declare your functions.\nCramp handles each request by filtering it through a series of callbacks, these are listed in order below.\n\n- before_start\n- respond_with\n- on_start\n- on_finish\n\nBased on the callback order above you place your action functions into each of the four callback categories.\nFor a more in depth discussion of the Cramp frameworks callback structure refer to the official project's documentation available at the following link. \n\n<a href=\"http://cramp.in/documentation\">http://cramp.in/documentation</a>\n\nHowever, by studying this example code you can gain an intuitive feel for how the callbacks process your request.\nIn each of the actions we'll include in this app the before_start callback usually involves connecting to redis and checking for request parameters.\nAddtionally the on_finish callback is where you want to put any clean up code and close open database connections or cache connections as is the case with this example.\nOne thing I forgot to mention is the Cramp framework function \"render\", what render does is return the response to the client.\nYou'll see render sprinkled around a bit but make sure you pay attention to what data its rendering back to the client; for this application we'll commit ourselves to just JSON formatted data but you can return plaintext if you want and or any other type as well.\n```ruby\n#NewsPlus/app/actions/prepare_action.rb\nclass PrepareAction < Cramp::Action\n  include RedisHelper\n\n  before_start :connect_to_redis, :pull_news_feeds, :cache_news_feeds\n  on_start :handle_request\n  on_finish :close_redis\n\n  def pull_news_feeds\n    @sites = Sites.new\n    @news_feeds = []\n\n    @sites.all_sites().each do |site_name, site_vals|\n      @news_feeds << NewsFeed.new(site_name, site_vals[:url], site_vals[:attributes], site_vals[:category])\n    end\n\n    puts \"INFO: News feeds pulled\"\n    yield\n  end\n\n  def cache_news_feeds\n    @news_feeds.each do |feed|\n      @redis.set(@sites.get_redis_key(feed.site_name, 'stories'), feed.send_stories())\n      @redis.set(@sites.get_redis_key(feed.site_name, 'info'), feed.send_info())\n    end\n\n    puts \"INFO: News feeds cached\"\n    yield\n  end\n\n  def respond_with\n    [201, {'Content-Type' => 'application/json'}]\n  end\n\n  def handle_request \n    response = {ok: \"prepare success\"}.to_json\n    render response\n    finish\n  end\nend\n```\nAs you can probably guess the goal of the prepare action is to just create new newsfeed objects from our sites and foreach feed cache its data.\nAnother point of interest is the use of the RedisHelper module, on the line \"include RedisHelper\" the mixin allows use to share\naccess code for the Redis cache across each of our actions, you'll see this same mixin throughout all of our actions.\nThe next action will be what is called the info action, the info action returns the RSS feed's root information which describes the feed.\n```ruby\n#NewsPlus/app/actions/info_action.rb\nclass InfoAction < Cramp::Action\n  include RedisHelper\n\n  before_start :connect_to_redis, :get_params, :info_sites\n  on_start :handle_request\n  on_finish :close_redis\n\n  def get_params\n    if(params.has_key?(:category))\n      @category = params[:category]\n      yield\n    else\n      @category = nil\n      yield\n    end\n  end\n\n  def info_sites \n    @response_data = []\n\n    @sites = Sites.new\n\n    @sites.all_sites(@category).each do |site_name, site_vals|\n      temp = nil\n      temp = @redis.get(@sites.get_redis_key(site_name, 'info'))\n      @response_data << temp\n    end\n    yield\n  end\n\n  def respond_with\n    [200, {'Content-Type' => 'application/json'}]\n  end\n\n  def handle_request \n    response = @response_data.to_json\n    render response\n    finish\n  end\nend\n```\nWith both prepare and info done we now want the ability to pull the raw information from the RSS feed, this will be represented by the pull action.\nGo into the app/actions directory and create a new file using your text editor of choice and call it pull_action.rb\n```ruby\n#NewsPlus/app/action/pull_action.rb\nclass PullAction < Cramp::Action\n  include RedisHelper\n\n  before_start :connect_to_redis, :get_params, :pull_sites\n  on_start :handle_request\n  on_finish :close_redis\n\n  def get_params\n    if(params.has_key?(:category))\n      @category = params[:category]\n      yield\n    else\n      puts \"No category param passed\"\n      @category = nil\n      yield\n    end\n  end\n\n  def pull_sites\n    @response_data = []\n\n    @sites = Sites.new\n\n    @sites.all_sites(@category).each do |site_name, site_vals|\n      puts \"pulling data for #{site_name}\"\n      temp = @redis.get(@sites.get_redis_key(site_name, 'stories'))\n      @response_data << temp\n    end\n    yield\n  end\n\n  def respond_with\n    [200, {'Content-Type' => 'application/json'}]\n  end\n\n  def handle_request \n    response = @response_data.to_json\n    render response\n    finish\n  end\nend\n```\nThe pull_action is similar to the info action with the exception that it fetches the stories redis key as opposed to the info redis key we definied within the sites model a while back.\n\nNow that you kinda have a feel for how Cramp handles request via a sequence of callbacks, you should easily follow the logic of the next action, the \"refresh_action\".\nWhat refresh does is rather simple... refresh just re-caches the rss data from the web; if the client passes an optional category parameter only those feeds under the said category will be refreshed. \n```ruby\n#NewPlus/app/actions/refresh_action.rb\nclass RefreshAction < Cramp::Action\n  include RedisHelper\n\n  before_start :connect_to_redis, :get_params, :refresh_sites\n  on_start :handle_request\n  on_finish :close_redis\n\n  def get_params\n    if(params.has_key?(:category))\n      @category = params[:category]\n      yield\n    else\n      @category = nil\n      yield\n    end\n  end\n\n  def refresh_sites\n    @sites = Sites.new\n\n    @sites.all_sites(@category).each do |site_name, site_vals|\n      @redis.set(@sites.get_redis_key(site_name, 'stories'), NewsFeed.refresh(site_vals[:url]))\n    end\n    yield\n  end\n\n  def respond_with\n    [201, {'Content-Type' => 'application/json'}]\n  end\n\n  def handle_request \n    response = {ok: \"refresh success\"}.to_json\n    render response\n    finish\n  end\nend\n```\nSo far so good we have at this point completed all of the necessary Ruby code required to run this application.\nThe next step is to start our redis server, to create a new redis server on a Linux/Unix machine you just run the code below in your terminal.\n```\n#Terminal\n$ cd location_where_you_installed_redis\n$ ./redis-2.4.17/src/redis-server\n```\nThat command will create a new redis server on the default port with the default settings which will be enough for our development environment.\nIn addition you may want to verify that our changes are being cached as we run through a test run of the code.\nThis requires that you start a redis client \n```\n#Terminal\n$ cd location_where_you_installed_redis\n$ ./redis-2.4.17/src/redis-cli\n```\nNow that you have both the redis client and server before starting the application begin the redis server or if you already have it running let it continue.\n\nOpen a new terminal window and navigate the to the directory of your project.\nThe following command will allow you to run the cramp application; this command was taken from the documentation at the Cramp homepage.\n```\n#Terminal\n$ bundle exec thin --timeout 0 -R config.ru start\n```\nOnce running you shouldn't see any error messages if everything has been typed correctly. As with all Cramp applications the default port number will be 3000 and the host set to local. We'll start by calling the prepare function from our mock api, open a terminal and type the following. The terminal command we will be using is called Curl, its a command line tool data transfer across various protocols including HTTP.\n```\n#Terminal\n$ curl -X POST 127.0.0.1:3000/prepare\n```\nThe response sent back from the server will be JSON indicating that the request succeded, now if you view your redis server the debug information will show that there are now 6 keys cached.\n\nRemember that each of our 3 sites have two keys; info and server for a total of six.\nTo run some of the other commands we can use curl again...\n```\n#Terminal\n$ curl -X POST 127.0.0.1:3000/refresh\n$ curl -X GET 127.0.0.1:3000/pull\n$ curl -X GET 127.0.0.1:3000/info\n```\nIf this is your first time using curl you might be wondering how one passes parameters, well its just like any http request you include the question mark and begin passing your parameters delimeted by the ampersand.\n\nSay you wanted to pull only tech rss feeds.\n```\n$ curl -X GET 127.0.0.1:3000/pull?category=tech\n```\nNow you have a basic RSS api written using Ruby and the Cramp framework, go read more about Cramp so you can extend on this app and turn it into something more useful.\n","slug":"rubycramprssfeed","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3i30017yswvy0azhdo5","layout":"post","photos":[],"link":"","content":"<p>A while ago I had wanted to design an API for delivering realtime RSS news feeds from multiple sites organized by category so that I wouldn’t have to navigate a reading list of tabs within my browser or simply run out of interesting stories to read whenever my favorites sites offered me nothing of interest.</p>\n<a id=\"more\"></a>\n<p>In this tutorial we’re going to be building a small API for categorized RSS feeds.<br>The choice of technology for this tutorial will the Ruby programming language, Redis for data caching and Cramp an async framework written in Ruby.</p>\n<p><a href=\"http://www.ruby-lang.org/en/\" target=\"_blank\" rel=\"external\">Installation and instructions for Ruby</a></p>\n<p><a href=\"http://redis.io/\" target=\"_blank\" rel=\"external\">Redis installation and info</a></p>\n<p><a href=\"http://cramp.in/\" target=\"_blank\" rel=\"external\">Cramp framework instructions</a></p>\n<p>Once you get all of the three components installed on your development machine you should be ready to go.<br>To begin you’ll want to open your desired terminal application on your machine whether it be PowerShell on Windows or Terminal on Linux or OSX, create a new directory called &quot;NewsPlus&quot; and move into said directory.<br>Within the directory we’ll invoke the Ruby Cramp gem scaffolding command to write the skeleton code for our app.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal window </div><div class=\"line\">$ cramp new newsplus</div></pre></td></tr></table></figure></p>\n<p>After the scaffolding has completed the first thing we’ll need to do is setup the Gemfile for the application.<br>The Gemfile contains all the information needed by your application in order to install its dependencies.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/Gemfile</span></div><div class=\"line\">source <span class=\"symbol\">:rubygems</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Rails Support Lib Classes</span></div><div class=\"line\">gem <span class=\"string\">'activesupport'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Rails Internationalization</span></div><div class=\"line\">gem <span class=\"string\">'i18n'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Cramp Framework </span></div><div class=\"line\">gem <span class=\"string\">'cramp'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Ruby Redis Driver</span></div><div class=\"line\">gem <span class=\"string\">'redis'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># JSON support</span></div><div class=\"line\">gem <span class=\"string\">'json'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Async webserver for running a cramp application</span></div><div class=\"line\">gem <span class=\"string\">'thin'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Rack based routing</span></div><div class=\"line\">gem <span class=\"string\">'http_router'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Collection of async-proof rack middlewares - https://github.com/rkh/async-rack.git</span></div><div class=\"line\">gem <span class=\"string\">'async-rack'</span></div></pre></td></tr></table></figure></p>\n<p>With your Gemfile complete run the next command to instruct the bundle gem to install all of the needed dependencies.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal Window</div><div class=\"line\">$ bundle install</div></pre></td></tr></table></figure></p>\n<p>If you don’t have the bundle gem installed just run the command to install it and then try again.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal Window</div><div class=\"line\">$ gem install bundler</div></pre></td></tr></table></figure></p>\n<p>With the Gemfile all setup we can begin editing the configuration for the project.<br>Within the configuration file config.ru we’ll add all required gems for our project and leave everything else default.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/config.ru</span></div><div class=\"line\"><span class=\"comment\"># Gems and libs</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'redis'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'open-uri'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rss'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'json'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'active_support/core_ext'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Cramp Application</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'./application'</span></div><div class=\"line\"></div><div class=\"line\">NewPlus::Application.initialize!</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Development middlewares</span></div><div class=\"line\"><span class=\"keyword\">if</span> NewPlus::Application.env == <span class=\"string\">'development'</span></div><div class=\"line\">  use AsyncRack::CommonLogger</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># Enable code reloading on every request</span></div><div class=\"line\">  use Rack::Reloader, <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># Serve assets from /public</span></div><div class=\"line\">  use Rack::Static, <span class=\"symbol\">:urls</span> =&gt; [<span class=\"string\">\"/javascripts\"</span>], <span class=\"symbol\">:root</span> =&gt; NewPlus::Application.root(<span class=\"symbol\">:public</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Running thin :</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\">#   bundle exec thin --max-persistent-conns 1024 --timeout 0 -R config.ru start</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Vebose mode :</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\">#   Very useful when you want to view all the data being sent/received by thin</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\">#   bundle exec thin --max-persistent-conns 1024 --timeout 0 -V -R config.ru start</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">run NewPlus::Application.routes</div></pre></td></tr></table></figure></p>\n<p>Another bit of pre configuration that we’ll need before we start actually coding our application will be the application.rb file.<br>Within the application file we’re going to leave all of the previous defaults setup by the Cramp scaffolding except for the last line.<br>On the last line we have to tell Cramp to require the sub-folders within the app folder in a specific order.<br>The reason being so that our data models don’t try to reference helper modules that haven’t been loaded yet.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/application.rb</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">\"rubygems\"</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">\"bundler\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">NewPlus</span></span></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">root</span><span class=\"params\">(path = <span class=\"literal\">nil</span>)</span></span></div><div class=\"line\">    @_root <span class=\"params\">||</span>= File.expand_path(File.dirname(__FILE_<span class=\"number\">_</span>))</div><div class=\"line\">    path ? File.join(@_root, path.to_s) : @_root</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">env</span></span></div><div class=\"line\">  @_env <span class=\"params\">||</span>= ENV[<span class=\"string\">'RACK_ENV'</span>] <span class=\"params\">||</span> <span class=\"string\">'development'</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">routes</span></span></div><div class=\"line\">  @_routes <span class=\"params\">||</span>= eval(File.read(<span class=\"string\">'./config/routes.rb'</span>))</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># Initialize the application</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">initialize!</span></span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">Bundler.<span class=\"keyword\">require</span>(<span class=\"symbol\">:default</span>, NewPlus::Application.env)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Preload application classes in the order specified</span></div><div class=\"line\">(Dir[<span class=\"string\">'./app/helpers/*.rb'</span>] + Dir[<span class=\"string\">'./app/models/*.rb'</span>] + Dir[<span class=\"string\">'./app/actions/*.rb'</span>]).each &#123;<span class=\"params\">|f|</span> <span class=\"keyword\">require</span> f&#125;</div></pre></td></tr></table></figure></p>\n<p>Lastly to wrap up the pre-configuration we need to setup the routing for the app.<br>Luckly for us the Cramp framework uses the well known Rack HttpRouter for Ruby.<br>Below is the code for the routes.rb file which we’ll handle our GET and POST requests from.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/config/routes.rb</span></div><div class=\"line\"><span class=\"comment\"># Check out https://github.com/joshbuddy/http_router for more information on HttpRouter</span></div><div class=\"line\">HttpRouter.new <span class=\"keyword\">do</span></div><div class=\"line\">  post(<span class=\"string\">'/prepare'</span>).to(PrepareAction)</div><div class=\"line\">  post(<span class=\"string\">'/refresh'</span>).to(RefreshAction)</div><div class=\"line\">  get(<span class=\"string\">'/pull'</span>).to(PullAction)</div><div class=\"line\">  get(<span class=\"string\">'/info'</span>).to(InfoAction)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>We’re keeping our API very simple, it consists of just four commands prepare, refresh, pull and info.<br>Prepare is the initial call and fetches all rss site content from as defined within our sites model which we’ll get to shortly.<br>Refresh will go out and fetch the sites within the desired category again assuming they have been initially loaded with prepare call.<br>Pull is exactly what you think it is… it pulls down the RSS feed info from the web and stores it within Redis.<br>Info returns the channel element from the RSS xml, this is the element within an RSS document which informs the user about the origin of the xml document.</p>\n<p>Now that all of the configuration code has been written the next step is to define our storage code.<br>Since we’re using Redis as our in memory data storage we’re going to need some helper code to connect a new Redis session.<br>Within your application directory navigate to the app directory and create a new directory called helpers.<br>On a Linux/Unix machine just use mkdir to create the helpers directory<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ cd app</div><div class=\"line\">$ mkdir helpers</div></pre></td></tr></table></figure></p>\n<p>Now create the file moduleredis.rb.<br>Being a Ruby module we’re going to use the module code as a mixin within other parts of our code to give them Redis connectivity.<br>This might be a bit unfamiliar to those of you comming from languages such as Java or C++ where one tends to rely on abstract classes and inheritance but as a Ruby developer you should always consider whether or not a mixin should be used in place of inheritance.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/helpers/moduleredis.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">RedisHelper</span></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect_to_redis</span></span></div><div class=\"line\">    @redis = Redis.new</div><div class=\"line\">    puts <span class=\"string\">\"INFO: Redis Connection started\"</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_redis</span></span></div><div class=\"line\">    @redis.quit</div><div class=\"line\">    puts <span class=\"string\">\"INFO: Redis client disconnected\"</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>Now that we have Redis connectivity, we can start adding code to support our two data models, the first will be the sites model.<br>The sites model will contain the information needed to define what a site is and how its key is stored within our Redis cache.<br>Use whatever text editor or IDE and create the following file, call it sites.rb and place it within the models folder.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ mkdir NewsPlus/app/models</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/models/sites.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sites</span></span></div><div class=\"line\">  <span class=\"keyword\">attr_reader</span> <span class=\"symbol\">:sites</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">()</span></span></div><div class=\"line\">      @sites = &#123;</div><div class=\"line\">        <span class=\"string\">'hackernews'</span> =&gt; &#123; </div><div class=\"line\">          <span class=\"symbol\">url:</span> <span class=\"string\">'http://news.ycombinator.com/rss'</span>, </div><div class=\"line\">          <span class=\"symbol\">attributes:</span> <span class=\"string\">%w&#123; title link comments description &#125;</span>, </div><div class=\"line\">          <span class=\"symbol\">category:</span> <span class=\"string\">\"tech\"</span>,</div><div class=\"line\">          <span class=\"symbol\">name:</span> <span class=\"string\">\"hackernews\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'redditprogramming'</span> =&gt; &#123;</div><div class=\"line\">          <span class=\"symbol\">url:</span> <span class=\"string\">'http://www.reddit.com/r/programming.rss'</span>,</div><div class=\"line\">          <span class=\"symbol\">attributes:</span> <span class=\"string\">%w&#123; title link description &#125;</span>,</div><div class=\"line\">          <span class=\"symbol\">category:</span> <span class=\"string\">\"tech\"</span>,</div><div class=\"line\">          <span class=\"symbol\">name:</span> <span class=\"string\">'reddit/r/programming'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'wsjusbusiness'</span> =&gt; &#123;</div><div class=\"line\">          <span class=\"symbol\">url:</span> <span class=\"string\">'http://online.wsj.com/xml/rss/3_7014.xml'</span>,</div><div class=\"line\">          <span class=\"symbol\">attributes:</span> <span class=\"string\">%w&#123; title link description pubDate &#125;</span>,</div><div class=\"line\">          <span class=\"symbol\">category:</span> <span class=\"string\">\"business\"</span>,</div><div class=\"line\">          <span class=\"symbol\">name:</span> <span class=\"string\">'WSJ.com US Business'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">all_sites</span><span class=\"params\">(category = <span class=\"literal\">nil</span>)</span></span></div><div class=\"line\">      <span class=\"keyword\">return</span> @sites <span class=\"keyword\">if</span> category.<span class=\"literal\">nil</span>?</div><div class=\"line\"></div><div class=\"line\">      sites_hash = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">      @sites.each <span class=\"keyword\">do</span> <span class=\"params\">|name, vals|</span></div><div class=\"line\">        sites_hash[name] = vals <span class=\"keyword\">if</span> vals[<span class=\"symbol\">:category</span>] == category</div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> sites_hash</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_redis_key</span><span class=\"params\">(name, attribute)</span></span></div><div class=\"line\">      <span class=\"string\">\"<span class=\"subst\">#&#123;@sites[name][<span class=\"symbol\">:category</span>]&#125;</span>:<span class=\"subst\">#&#123;@sites[name][<span class=\"symbol\">:name</span>]&#125;</span>:<span class=\"subst\">#&#123;attribute&#125;</span>\"</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>Our sites model is not that involved really; all we’re doing is storing a collection of RSS feeds via the @sites hashmap and the all_sites method will either return a dump of the @sites attr_reader or just those from the category passed as a string argument.<br>For this demonstration we’re gonna restrict ourselves to just tech and business but you can add more if you wish.</p>\n<p>Within the same models directory of your application create the next model file, call it newsfeed.rb.<br>The newsfeed model takes a sites information as provided and handle all translation of the RSS’s native xml format to json.<br>By placing our site’s RSS information in the json format we can then possibly build a web based reader that can take the json and display it in an interesting way via CSS3/HTML5 or perhaps with some visual javascript library.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/models/newsfeed.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsFeed</span></span></div><div class=\"line\">  <span class=\"keyword\">attr_reader</span> <span class=\"symbol\">:feed</span>, <span class=\"symbol\">:item_attributes_array</span>, <span class=\"symbol\">:news_category</span>, <span class=\"symbol\">:site_name</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(site_name, site_url, item_attributes_array, news_category)</span></span></div><div class=\"line\">    @feed = Hash.from_xml open(site_url)</div><div class=\"line\">    @item_attributes_array = item_attributes_array</div><div class=\"line\">    @news_category = news_category</div><div class=\"line\">    @site_name = site_name</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">refresh</span><span class=\"params\">(url)</span></span></div><div class=\"line\">    new_feed = Hash.from_xml open(url)</div><div class=\"line\">    new_feed[<span class=\"string\">'rss'</span>][<span class=\"string\">'channel'</span>][<span class=\"string\">'item'</span>].to_json</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_info</span><span class=\"params\">()</span></span></div><div class=\"line\">    info = &#123; </div><div class=\"line\">      <span class=\"symbol\">siteName:</span> @site_name,</div><div class=\"line\">      <span class=\"symbol\">homepageUrl:</span> @feed[<span class=\"string\">'rss'</span>][<span class=\"string\">'channel'</span>][<span class=\"string\">'link'</span>],</div><div class=\"line\">      <span class=\"symbol\">about:</span> @feed[<span class=\"string\">'rss'</span>][<span class=\"string\">'channel'</span>][<span class=\"string\">'description'</span>],</div><div class=\"line\">      <span class=\"symbol\">feedElements:</span> @item_attributes_array,</div><div class=\"line\">      <span class=\"symbol\">category:</span> @news_category.downcase</div><div class=\"line\">    &#125;</div><div class=\"line\">    info.to_json</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_stories</span><span class=\"params\">()</span></span></div><div class=\"line\">    @feed[<span class=\"string\">'rss'</span>][<span class=\"string\">'channel'</span>][<span class=\"string\">'item'</span>].to_json</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>With both the newsfeed and sites models completed the next step is to code the Cramp equivalent of controllers.<br>Due to the fact that Cramp is a non MVC framework although one can easily turn it into one if you want, Cramp requires that<br>all routed web request are handled via actions.</p>\n<p>If you recall earlier in this tutorial where we defined the file NewsPlus/config/routes.rb we defined two GET and two POST methods.<br>The first one we’ll tackle is the Prepare action which you can think off as the initialization step.</p>\n<p>Open a new file within the NewsPlus/app/actions/ directory and call it “prepare_action.rb”<br>One of the things you’ll notice is that for Cramp actions you have to pay attention to is the order in which you declare your functions.<br>Cramp handles each request by filtering it through a series of callbacks, these are listed in order below.</p>\n<ul>\n<li>before_start</li>\n<li>respond_with</li>\n<li>on_start</li>\n<li>on_finish</li>\n</ul>\n<p>Based on the callback order above you place your action functions into each of the four callback categories.<br>For a more in depth discussion of the Cramp frameworks callback structure refer to the official project’s documentation available at the following link. </p>\n<p><a href=\"http://cramp.in/documentation\" target=\"_blank\" rel=\"external\">http://cramp.in/documentation</a></p>\n<p>However, by studying this example code you can gain an intuitive feel for how the callbacks process your request.<br>In each of the actions we’ll include in this app the before_start callback usually involves connecting to redis and checking for request parameters.<br>Addtionally the on_finish callback is where you want to put any clean up code and close open database connections or cache connections as is the case with this example.<br>One thing I forgot to mention is the Cramp framework function “render”, what render does is return the response to the client.<br>You’ll see render sprinkled around a bit but make sure you pay attention to what data its rendering back to the client; for this application we’ll commit ourselves to just JSON formatted data but you can return plaintext if you want and or any other type as well.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/actions/prepare_action.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrepareAction</span> &lt; Cramp::Action</span></div><div class=\"line\">  <span class=\"keyword\">include</span> RedisHelper</div><div class=\"line\"></div><div class=\"line\">  before_start <span class=\"symbol\">:connect_to_redis</span>, <span class=\"symbol\">:pull_news_feeds</span>, <span class=\"symbol\">:cache_news_feeds</span></div><div class=\"line\">  on_start <span class=\"symbol\">:handle_request</span></div><div class=\"line\">  on_finish <span class=\"symbol\">:close_redis</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pull_news_feeds</span></span></div><div class=\"line\">    @sites = Sites.new</div><div class=\"line\">    @news_feeds = []</div><div class=\"line\"></div><div class=\"line\">    @sites.all_sites().each <span class=\"keyword\">do</span> <span class=\"params\">|site_name, site_vals|</span></div><div class=\"line\">      @news_feeds &lt;&lt; NewsFeed.new(site_name, site_vals[<span class=\"symbol\">:url</span>], site_vals[<span class=\"symbol\">:attributes</span>], site_vals[<span class=\"symbol\">:category</span>])</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    puts <span class=\"string\">\"INFO: News feeds pulled\"</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_news_feeds</span></span></div><div class=\"line\">    @news_feeds.each <span class=\"keyword\">do</span> <span class=\"params\">|feed|</span></div><div class=\"line\">      @redis.set(@sites.get_redis_key(feed.site_name, <span class=\"string\">'stories'</span>), feed.send_stories())</div><div class=\"line\">      @redis.set(@sites.get_redis_key(feed.site_name, <span class=\"string\">'info'</span>), feed.send_info())</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    puts <span class=\"string\">\"INFO: News feeds cached\"</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">respond_with</span></span></div><div class=\"line\">    [<span class=\"number\">201</span>, &#123;<span class=\"string\">'Content-Type'</span> =&gt; <span class=\"string\">'application/json'</span>&#125;]</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_request</span> </span></div><div class=\"line\">    response = &#123;<span class=\"symbol\">ok:</span> <span class=\"string\">\"prepare success\"</span>&#125;.to_json</div><div class=\"line\">    render response</div><div class=\"line\">    finish</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>As you can probably guess the goal of the prepare action is to just create new newsfeed objects from our sites and foreach feed cache its data.<br>Another point of interest is the use of the RedisHelper module, on the line “include RedisHelper” the mixin allows use to share<br>access code for the Redis cache across each of our actions, you’ll see this same mixin throughout all of our actions.<br>The next action will be what is called the info action, the info action returns the RSS feed’s root information which describes the feed.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/actions/info_action.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InfoAction</span> &lt; Cramp::Action</span></div><div class=\"line\">  <span class=\"keyword\">include</span> RedisHelper</div><div class=\"line\"></div><div class=\"line\">  before_start <span class=\"symbol\">:connect_to_redis</span>, <span class=\"symbol\">:get_params</span>, <span class=\"symbol\">:info_sites</span></div><div class=\"line\">  on_start <span class=\"symbol\">:handle_request</span></div><div class=\"line\">  on_finish <span class=\"symbol\">:close_redis</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_params</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span>(params.has_key?(<span class=\"symbol\">:category</span>))</div><div class=\"line\">      @category = params[<span class=\"symbol\">:category</span>]</div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">      @category = <span class=\"literal\">nil</span></div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info_sites</span> </span></div><div class=\"line\">    @response_data = []</div><div class=\"line\"></div><div class=\"line\">    @sites = Sites.new</div><div class=\"line\"></div><div class=\"line\">    @sites.all_sites(@category).each <span class=\"keyword\">do</span> <span class=\"params\">|site_name, site_vals|</span></div><div class=\"line\">      temp = <span class=\"literal\">nil</span></div><div class=\"line\">      temp = @redis.get(@sites.get_redis_key(site_name, <span class=\"string\">'info'</span>))</div><div class=\"line\">      @response_data &lt;&lt; temp</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">respond_with</span></span></div><div class=\"line\">    [<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span> =&gt; <span class=\"string\">'application/json'</span>&#125;]</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_request</span> </span></div><div class=\"line\">    response = @response_data.to_json</div><div class=\"line\">    render response</div><div class=\"line\">    finish</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>With both prepare and info done we now want the ability to pull the raw information from the RSS feed, this will be represented by the pull action.<br>Go into the app/actions directory and create a new file using your text editor of choice and call it pull_action.rb<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/action/pull_action.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PullAction</span> &lt; Cramp::Action</span></div><div class=\"line\">  <span class=\"keyword\">include</span> RedisHelper</div><div class=\"line\"></div><div class=\"line\">  before_start <span class=\"symbol\">:connect_to_redis</span>, <span class=\"symbol\">:get_params</span>, <span class=\"symbol\">:pull_sites</span></div><div class=\"line\">  on_start <span class=\"symbol\">:handle_request</span></div><div class=\"line\">  on_finish <span class=\"symbol\">:close_redis</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_params</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span>(params.has_key?(<span class=\"symbol\">:category</span>))</div><div class=\"line\">      @category = params[<span class=\"symbol\">:category</span>]</div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">      puts <span class=\"string\">\"No category param passed\"</span></div><div class=\"line\">      @category = <span class=\"literal\">nil</span></div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pull_sites</span></span></div><div class=\"line\">    @response_data = []</div><div class=\"line\"></div><div class=\"line\">    @sites = Sites.new</div><div class=\"line\"></div><div class=\"line\">    @sites.all_sites(@category).each <span class=\"keyword\">do</span> <span class=\"params\">|site_name, site_vals|</span></div><div class=\"line\">      puts <span class=\"string\">\"pulling data for <span class=\"subst\">#&#123;site_name&#125;</span>\"</span></div><div class=\"line\">      temp = @redis.get(@sites.get_redis_key(site_name, <span class=\"string\">'stories'</span>))</div><div class=\"line\">      @response_data &lt;&lt; temp</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">respond_with</span></span></div><div class=\"line\">    [<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span> =&gt; <span class=\"string\">'application/json'</span>&#125;]</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_request</span> </span></div><div class=\"line\">    response = @response_data.to_json</div><div class=\"line\">    render response</div><div class=\"line\">    finish</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>The pull_action is similar to the info action with the exception that it fetches the stories redis key as opposed to the info redis key we definied within the sites model a while back.</p>\n<p>Now that you kinda have a feel for how Cramp handles request via a sequence of callbacks, you should easily follow the logic of the next action, the “refresh_action”.<br>What refresh does is rather simple… refresh just re-caches the rss data from the web; if the client passes an optional category parameter only those feeds under the said category will be refreshed.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewPlus/app/actions/refresh_action.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefreshAction</span> &lt; Cramp::Action</span></div><div class=\"line\">  <span class=\"keyword\">include</span> RedisHelper</div><div class=\"line\"></div><div class=\"line\">  before_start <span class=\"symbol\">:connect_to_redis</span>, <span class=\"symbol\">:get_params</span>, <span class=\"symbol\">:refresh_sites</span></div><div class=\"line\">  on_start <span class=\"symbol\">:handle_request</span></div><div class=\"line\">  on_finish <span class=\"symbol\">:close_redis</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_params</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span>(params.has_key?(<span class=\"symbol\">:category</span>))</div><div class=\"line\">      @category = params[<span class=\"symbol\">:category</span>]</div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">      @category = <span class=\"literal\">nil</span></div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">refresh_sites</span></span></div><div class=\"line\">    @sites = Sites.new</div><div class=\"line\"></div><div class=\"line\">    @sites.all_sites(@category).each <span class=\"keyword\">do</span> <span class=\"params\">|site_name, site_vals|</span></div><div class=\"line\">      @redis.set(@sites.get_redis_key(site_name, <span class=\"string\">'stories'</span>), NewsFeed.refresh(site_vals[<span class=\"symbol\">:url</span>]))</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">respond_with</span></span></div><div class=\"line\">    [<span class=\"number\">201</span>, &#123;<span class=\"string\">'Content-Type'</span> =&gt; <span class=\"string\">'application/json'</span>&#125;]</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_request</span> </span></div><div class=\"line\">    response = &#123;<span class=\"symbol\">ok:</span> <span class=\"string\">\"refresh success\"</span>&#125;.to_json</div><div class=\"line\">    render response</div><div class=\"line\">    finish</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>So far so good we have at this point completed all of the necessary Ruby code required to run this application.<br>The next step is to start our redis server, to create a new redis server on a Linux/Unix machine you just run the code below in your terminal.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ cd location_where_you_installed_redis</div><div class=\"line\">$ ./redis-2.4.17/src/redis-server</div></pre></td></tr></table></figure></p>\n<p>That command will create a new redis server on the default port with the default settings which will be enough for our development environment.<br>In addition you may want to verify that our changes are being cached as we run through a test run of the code.<br>This requires that you start a redis client<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ cd location_where_you_installed_redis</div><div class=\"line\">$ ./redis-2.4.17/src/redis-cli</div></pre></td></tr></table></figure></p>\n<p>Now that you have both the redis client and server before starting the application begin the redis server or if you already have it running let it continue.</p>\n<p>Open a new terminal window and navigate the to the directory of your project.<br>The following command will allow you to run the cramp application; this command was taken from the documentation at the Cramp homepage.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ bundle exec thin --timeout 0 -R config.ru start</div></pre></td></tr></table></figure></p>\n<p>Once running you shouldn’t see any error messages if everything has been typed correctly. As with all Cramp applications the default port number will be 3000 and the host set to local. We’ll start by calling the prepare function from our mock api, open a terminal and type the following. The terminal command we will be using is called Curl, its a command line tool data transfer across various protocols including HTTP.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ curl -X POST 127.0.0.1:3000/prepare</div></pre></td></tr></table></figure></p>\n<p>The response sent back from the server will be JSON indicating that the request succeded, now if you view your redis server the debug information will show that there are now 6 keys cached.</p>\n<p>Remember that each of our 3 sites have two keys; info and server for a total of six.<br>To run some of the other commands we can use curl again…<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ curl -X POST 127.0.0.1:3000/refresh</div><div class=\"line\">$ curl -X GET 127.0.0.1:3000/pull</div><div class=\"line\">$ curl -X GET 127.0.0.1:3000/info</div></pre></td></tr></table></figure></p>\n<p>If this is your first time using curl you might be wondering how one passes parameters, well its just like any http request you include the question mark and begin passing your parameters delimeted by the ampersand.</p>\n<p>Say you wanted to pull only tech rss feeds.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -X GET 127.0.0.1:3000/pull?category=tech</div></pre></td></tr></table></figure></p>\n<p>Now you have a basic RSS api written using Ruby and the Cramp framework, go read more about Cramp so you can extend on this app and turn it into something more useful.</p>\n","site":{"data":{}},"excerpt":"<p>A while ago I had wanted to design an API for delivering realtime RSS news feeds from multiple sites organized by category so that I wouldn’t have to navigate a reading list of tabs within my browser or simply run out of interesting stories to read whenever my favorites sites offered me nothing of interest.</p>","more":"<p>In this tutorial we’re going to be building a small API for categorized RSS feeds.<br>The choice of technology for this tutorial will the Ruby programming language, Redis for data caching and Cramp an async framework written in Ruby.</p>\n<p><a href=\"http://www.ruby-lang.org/en/\">Installation and instructions for Ruby</a></p>\n<p><a href=\"http://redis.io/\">Redis installation and info</a></p>\n<p><a href=\"http://cramp.in/\">Cramp framework instructions</a></p>\n<p>Once you get all of the three components installed on your development machine you should be ready to go.<br>To begin you’ll want to open your desired terminal application on your machine whether it be PowerShell on Windows or Terminal on Linux or OSX, create a new directory called &quot;NewsPlus&quot; and move into said directory.<br>Within the directory we’ll invoke the Ruby Cramp gem scaffolding command to write the skeleton code for our app.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal window </div><div class=\"line\">$ cramp new newsplus</div></pre></td></tr></table></figure></p>\n<p>After the scaffolding has completed the first thing we’ll need to do is setup the Gemfile for the application.<br>The Gemfile contains all the information needed by your application in order to install its dependencies.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/Gemfile</span></div><div class=\"line\">source <span class=\"symbol\">:rubygems</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Rails Support Lib Classes</span></div><div class=\"line\">gem <span class=\"string\">'activesupport'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Rails Internationalization</span></div><div class=\"line\">gem <span class=\"string\">'i18n'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Cramp Framework </span></div><div class=\"line\">gem <span class=\"string\">'cramp'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Ruby Redis Driver</span></div><div class=\"line\">gem <span class=\"string\">'redis'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># JSON support</span></div><div class=\"line\">gem <span class=\"string\">'json'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Async webserver for running a cramp application</span></div><div class=\"line\">gem <span class=\"string\">'thin'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Rack based routing</span></div><div class=\"line\">gem <span class=\"string\">'http_router'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Collection of async-proof rack middlewares - https://github.com/rkh/async-rack.git</span></div><div class=\"line\">gem <span class=\"string\">'async-rack'</span></div></pre></td></tr></table></figure></p>\n<p>With your Gemfile complete run the next command to instruct the bundle gem to install all of the needed dependencies.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal Window</div><div class=\"line\">$ bundle install</div></pre></td></tr></table></figure></p>\n<p>If you don’t have the bundle gem installed just run the command to install it and then try again.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal Window</div><div class=\"line\">$ gem install bundler</div></pre></td></tr></table></figure></p>\n<p>With the Gemfile all setup we can begin editing the configuration for the project.<br>Within the configuration file config.ru we’ll add all required gems for our project and leave everything else default.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/config.ru</span></div><div class=\"line\"><span class=\"comment\"># Gems and libs</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'redis'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'open-uri'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rss'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'json'</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'active_support/core_ext'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Cramp Application</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'./application'</span></div><div class=\"line\"></div><div class=\"line\">NewPlus::Application.initialize!</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Development middlewares</span></div><div class=\"line\"><span class=\"keyword\">if</span> NewPlus::Application.env == <span class=\"string\">'development'</span></div><div class=\"line\">  use AsyncRack::CommonLogger</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># Enable code reloading on every request</span></div><div class=\"line\">  use Rack::Reloader, <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># Serve assets from /public</span></div><div class=\"line\">  use Rack::Static, <span class=\"symbol\">:urls</span> =&gt; [<span class=\"string\">\"/javascripts\"</span>], <span class=\"symbol\">:root</span> =&gt; NewPlus::Application.root(<span class=\"symbol\">:public</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Running thin :</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\">#   bundle exec thin --max-persistent-conns 1024 --timeout 0 -R config.ru start</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Vebose mode :</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\">#   Very useful when you want to view all the data being sent/received by thin</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\">#   bundle exec thin --max-persistent-conns 1024 --timeout 0 -V -R config.ru start</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">run NewPlus::Application.routes</div></pre></td></tr></table></figure></p>\n<p>Another bit of pre configuration that we’ll need before we start actually coding our application will be the application.rb file.<br>Within the application file we’re going to leave all of the previous defaults setup by the Cramp scaffolding except for the last line.<br>On the last line we have to tell Cramp to require the sub-folders within the app folder in a specific order.<br>The reason being so that our data models don’t try to reference helper modules that haven’t been loaded yet.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/application.rb</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">\"rubygems\"</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">\"bundler\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">NewPlus</span></span></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">root</span><span class=\"params\">(path = <span class=\"literal\">nil</span>)</span></span></div><div class=\"line\">    @_root <span class=\"params\">||</span>= File.expand_path(File.dirname(__FILE_<span class=\"number\">_</span>))</div><div class=\"line\">    path ? File.join(@_root, path.to_s) : @_root</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">env</span></span></div><div class=\"line\">  @_env <span class=\"params\">||</span>= ENV[<span class=\"string\">'RACK_ENV'</span>] <span class=\"params\">||</span> <span class=\"string\">'development'</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">routes</span></span></div><div class=\"line\">  @_routes <span class=\"params\">||</span>= eval(File.read(<span class=\"string\">'./config/routes.rb'</span>))</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># Initialize the application</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">initialize!</span></span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">Bundler.<span class=\"keyword\">require</span>(<span class=\"symbol\">:default</span>, NewPlus::Application.env)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Preload application classes in the order specified</span></div><div class=\"line\">(Dir[<span class=\"string\">'./app/helpers/*.rb'</span>] + Dir[<span class=\"string\">'./app/models/*.rb'</span>] + Dir[<span class=\"string\">'./app/actions/*.rb'</span>]).each &#123;<span class=\"params\">|f|</span> <span class=\"keyword\">require</span> f&#125;</div></pre></td></tr></table></figure></p>\n<p>Lastly to wrap up the pre-configuration we need to setup the routing for the app.<br>Luckly for us the Cramp framework uses the well known Rack HttpRouter for Ruby.<br>Below is the code for the routes.rb file which we’ll handle our GET and POST requests from.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/config/routes.rb</span></div><div class=\"line\"><span class=\"comment\"># Check out https://github.com/joshbuddy/http_router for more information on HttpRouter</span></div><div class=\"line\">HttpRouter.new <span class=\"keyword\">do</span></div><div class=\"line\">  post(<span class=\"string\">'/prepare'</span>).to(PrepareAction)</div><div class=\"line\">  post(<span class=\"string\">'/refresh'</span>).to(RefreshAction)</div><div class=\"line\">  get(<span class=\"string\">'/pull'</span>).to(PullAction)</div><div class=\"line\">  get(<span class=\"string\">'/info'</span>).to(InfoAction)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>We’re keeping our API very simple, it consists of just four commands prepare, refresh, pull and info.<br>Prepare is the initial call and fetches all rss site content from as defined within our sites model which we’ll get to shortly.<br>Refresh will go out and fetch the sites within the desired category again assuming they have been initially loaded with prepare call.<br>Pull is exactly what you think it is… it pulls down the RSS feed info from the web and stores it within Redis.<br>Info returns the channel element from the RSS xml, this is the element within an RSS document which informs the user about the origin of the xml document.</p>\n<p>Now that all of the configuration code has been written the next step is to define our storage code.<br>Since we’re using Redis as our in memory data storage we’re going to need some helper code to connect a new Redis session.<br>Within your application directory navigate to the app directory and create a new directory called helpers.<br>On a Linux/Unix machine just use mkdir to create the helpers directory<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ cd app</div><div class=\"line\">$ mkdir helpers</div></pre></td></tr></table></figure></p>\n<p>Now create the file moduleredis.rb.<br>Being a Ruby module we’re going to use the module code as a mixin within other parts of our code to give them Redis connectivity.<br>This might be a bit unfamiliar to those of you comming from languages such as Java or C++ where one tends to rely on abstract classes and inheritance but as a Ruby developer you should always consider whether or not a mixin should be used in place of inheritance.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/helpers/moduleredis.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">RedisHelper</span></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect_to_redis</span></span></div><div class=\"line\">    @redis = Redis.new</div><div class=\"line\">    puts <span class=\"string\">\"INFO: Redis Connection started\"</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_redis</span></span></div><div class=\"line\">    @redis.quit</div><div class=\"line\">    puts <span class=\"string\">\"INFO: Redis client disconnected\"</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>Now that we have Redis connectivity, we can start adding code to support our two data models, the first will be the sites model.<br>The sites model will contain the information needed to define what a site is and how its key is stored within our Redis cache.<br>Use whatever text editor or IDE and create the following file, call it sites.rb and place it within the models folder.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ mkdir NewsPlus/app/models</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/models/sites.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sites</span></span></div><div class=\"line\">  <span class=\"keyword\">attr_reader</span> <span class=\"symbol\">:sites</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">()</span></span></div><div class=\"line\">      @sites = &#123;</div><div class=\"line\">        <span class=\"string\">'hackernews'</span> =&gt; &#123; </div><div class=\"line\">          <span class=\"symbol\">url:</span> <span class=\"string\">'http://news.ycombinator.com/rss'</span>, </div><div class=\"line\">          <span class=\"symbol\">attributes:</span> <span class=\"string\">%w&#123; title link comments description &#125;</span>, </div><div class=\"line\">          <span class=\"symbol\">category:</span> <span class=\"string\">\"tech\"</span>,</div><div class=\"line\">          <span class=\"symbol\">name:</span> <span class=\"string\">\"hackernews\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'redditprogramming'</span> =&gt; &#123;</div><div class=\"line\">          <span class=\"symbol\">url:</span> <span class=\"string\">'http://www.reddit.com/r/programming.rss'</span>,</div><div class=\"line\">          <span class=\"symbol\">attributes:</span> <span class=\"string\">%w&#123; title link description &#125;</span>,</div><div class=\"line\">          <span class=\"symbol\">category:</span> <span class=\"string\">\"tech\"</span>,</div><div class=\"line\">          <span class=\"symbol\">name:</span> <span class=\"string\">'reddit/r/programming'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'wsjusbusiness'</span> =&gt; &#123;</div><div class=\"line\">          <span class=\"symbol\">url:</span> <span class=\"string\">'http://online.wsj.com/xml/rss/3_7014.xml'</span>,</div><div class=\"line\">          <span class=\"symbol\">attributes:</span> <span class=\"string\">%w&#123; title link description pubDate &#125;</span>,</div><div class=\"line\">          <span class=\"symbol\">category:</span> <span class=\"string\">\"business\"</span>,</div><div class=\"line\">          <span class=\"symbol\">name:</span> <span class=\"string\">'WSJ.com US Business'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">all_sites</span><span class=\"params\">(category = <span class=\"literal\">nil</span>)</span></span></div><div class=\"line\">      <span class=\"keyword\">return</span> @sites <span class=\"keyword\">if</span> category.<span class=\"literal\">nil</span>?</div><div class=\"line\"></div><div class=\"line\">      sites_hash = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">      @sites.each <span class=\"keyword\">do</span> <span class=\"params\">|name, vals|</span></div><div class=\"line\">        sites_hash[name] = vals <span class=\"keyword\">if</span> vals[<span class=\"symbol\">:category</span>] == category</div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> sites_hash</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_redis_key</span><span class=\"params\">(name, attribute)</span></span></div><div class=\"line\">      <span class=\"string\">\"<span class=\"subst\">#&#123;@sites[name][<span class=\"symbol\">:category</span>]&#125;</span>:<span class=\"subst\">#&#123;@sites[name][<span class=\"symbol\">:name</span>]&#125;</span>:<span class=\"subst\">#&#123;attribute&#125;</span>\"</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>Our sites model is not that involved really; all we’re doing is storing a collection of RSS feeds via the @sites hashmap and the all_sites method will either return a dump of the @sites attr_reader or just those from the category passed as a string argument.<br>For this demonstration we’re gonna restrict ourselves to just tech and business but you can add more if you wish.</p>\n<p>Within the same models directory of your application create the next model file, call it newsfeed.rb.<br>The newsfeed model takes a sites information as provided and handle all translation of the RSS’s native xml format to json.<br>By placing our site’s RSS information in the json format we can then possibly build a web based reader that can take the json and display it in an interesting way via CSS3/HTML5 or perhaps with some visual javascript library.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/models/newsfeed.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsFeed</span></span></div><div class=\"line\">  <span class=\"keyword\">attr_reader</span> <span class=\"symbol\">:feed</span>, <span class=\"symbol\">:item_attributes_array</span>, <span class=\"symbol\">:news_category</span>, <span class=\"symbol\">:site_name</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(site_name, site_url, item_attributes_array, news_category)</span></span></div><div class=\"line\">    @feed = Hash.from_xml open(site_url)</div><div class=\"line\">    @item_attributes_array = item_attributes_array</div><div class=\"line\">    @news_category = news_category</div><div class=\"line\">    @site_name = site_name</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">refresh</span><span class=\"params\">(url)</span></span></div><div class=\"line\">    new_feed = Hash.from_xml open(url)</div><div class=\"line\">    new_feed[<span class=\"string\">'rss'</span>][<span class=\"string\">'channel'</span>][<span class=\"string\">'item'</span>].to_json</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_info</span><span class=\"params\">()</span></span></div><div class=\"line\">    info = &#123; </div><div class=\"line\">      <span class=\"symbol\">siteName:</span> @site_name,</div><div class=\"line\">      <span class=\"symbol\">homepageUrl:</span> @feed[<span class=\"string\">'rss'</span>][<span class=\"string\">'channel'</span>][<span class=\"string\">'link'</span>],</div><div class=\"line\">      <span class=\"symbol\">about:</span> @feed[<span class=\"string\">'rss'</span>][<span class=\"string\">'channel'</span>][<span class=\"string\">'description'</span>],</div><div class=\"line\">      <span class=\"symbol\">feedElements:</span> @item_attributes_array,</div><div class=\"line\">      <span class=\"symbol\">category:</span> @news_category.downcase</div><div class=\"line\">    &#125;</div><div class=\"line\">    info.to_json</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_stories</span><span class=\"params\">()</span></span></div><div class=\"line\">    @feed[<span class=\"string\">'rss'</span>][<span class=\"string\">'channel'</span>][<span class=\"string\">'item'</span>].to_json</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>With both the newsfeed and sites models completed the next step is to code the Cramp equivalent of controllers.<br>Due to the fact that Cramp is a non MVC framework although one can easily turn it into one if you want, Cramp requires that<br>all routed web request are handled via actions.</p>\n<p>If you recall earlier in this tutorial where we defined the file NewsPlus/config/routes.rb we defined two GET and two POST methods.<br>The first one we’ll tackle is the Prepare action which you can think off as the initialization step.</p>\n<p>Open a new file within the NewsPlus/app/actions/ directory and call it “prepare_action.rb”<br>One of the things you’ll notice is that for Cramp actions you have to pay attention to is the order in which you declare your functions.<br>Cramp handles each request by filtering it through a series of callbacks, these are listed in order below.</p>\n<ul>\n<li>before_start</li>\n<li>respond_with</li>\n<li>on_start</li>\n<li>on_finish</li>\n</ul>\n<p>Based on the callback order above you place your action functions into each of the four callback categories.<br>For a more in depth discussion of the Cramp frameworks callback structure refer to the official project’s documentation available at the following link. </p>\n<p><a href=\"http://cramp.in/documentation\">http://cramp.in/documentation</a></p>\n<p>However, by studying this example code you can gain an intuitive feel for how the callbacks process your request.<br>In each of the actions we’ll include in this app the before_start callback usually involves connecting to redis and checking for request parameters.<br>Addtionally the on_finish callback is where you want to put any clean up code and close open database connections or cache connections as is the case with this example.<br>One thing I forgot to mention is the Cramp framework function “render”, what render does is return the response to the client.<br>You’ll see render sprinkled around a bit but make sure you pay attention to what data its rendering back to the client; for this application we’ll commit ourselves to just JSON formatted data but you can return plaintext if you want and or any other type as well.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/actions/prepare_action.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrepareAction</span> &lt; Cramp::Action</span></div><div class=\"line\">  <span class=\"keyword\">include</span> RedisHelper</div><div class=\"line\"></div><div class=\"line\">  before_start <span class=\"symbol\">:connect_to_redis</span>, <span class=\"symbol\">:pull_news_feeds</span>, <span class=\"symbol\">:cache_news_feeds</span></div><div class=\"line\">  on_start <span class=\"symbol\">:handle_request</span></div><div class=\"line\">  on_finish <span class=\"symbol\">:close_redis</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pull_news_feeds</span></span></div><div class=\"line\">    @sites = Sites.new</div><div class=\"line\">    @news_feeds = []</div><div class=\"line\"></div><div class=\"line\">    @sites.all_sites().each <span class=\"keyword\">do</span> <span class=\"params\">|site_name, site_vals|</span></div><div class=\"line\">      @news_feeds &lt;&lt; NewsFeed.new(site_name, site_vals[<span class=\"symbol\">:url</span>], site_vals[<span class=\"symbol\">:attributes</span>], site_vals[<span class=\"symbol\">:category</span>])</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    puts <span class=\"string\">\"INFO: News feeds pulled\"</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_news_feeds</span></span></div><div class=\"line\">    @news_feeds.each <span class=\"keyword\">do</span> <span class=\"params\">|feed|</span></div><div class=\"line\">      @redis.set(@sites.get_redis_key(feed.site_name, <span class=\"string\">'stories'</span>), feed.send_stories())</div><div class=\"line\">      @redis.set(@sites.get_redis_key(feed.site_name, <span class=\"string\">'info'</span>), feed.send_info())</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    puts <span class=\"string\">\"INFO: News feeds cached\"</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">respond_with</span></span></div><div class=\"line\">    [<span class=\"number\">201</span>, &#123;<span class=\"string\">'Content-Type'</span> =&gt; <span class=\"string\">'application/json'</span>&#125;]</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_request</span> </span></div><div class=\"line\">    response = &#123;<span class=\"symbol\">ok:</span> <span class=\"string\">\"prepare success\"</span>&#125;.to_json</div><div class=\"line\">    render response</div><div class=\"line\">    finish</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>As you can probably guess the goal of the prepare action is to just create new newsfeed objects from our sites and foreach feed cache its data.<br>Another point of interest is the use of the RedisHelper module, on the line “include RedisHelper” the mixin allows use to share<br>access code for the Redis cache across each of our actions, you’ll see this same mixin throughout all of our actions.<br>The next action will be what is called the info action, the info action returns the RSS feed’s root information which describes the feed.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/actions/info_action.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InfoAction</span> &lt; Cramp::Action</span></div><div class=\"line\">  <span class=\"keyword\">include</span> RedisHelper</div><div class=\"line\"></div><div class=\"line\">  before_start <span class=\"symbol\">:connect_to_redis</span>, <span class=\"symbol\">:get_params</span>, <span class=\"symbol\">:info_sites</span></div><div class=\"line\">  on_start <span class=\"symbol\">:handle_request</span></div><div class=\"line\">  on_finish <span class=\"symbol\">:close_redis</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_params</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span>(params.has_key?(<span class=\"symbol\">:category</span>))</div><div class=\"line\">      @category = params[<span class=\"symbol\">:category</span>]</div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">      @category = <span class=\"literal\">nil</span></div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info_sites</span> </span></div><div class=\"line\">    @response_data = []</div><div class=\"line\"></div><div class=\"line\">    @sites = Sites.new</div><div class=\"line\"></div><div class=\"line\">    @sites.all_sites(@category).each <span class=\"keyword\">do</span> <span class=\"params\">|site_name, site_vals|</span></div><div class=\"line\">      temp = <span class=\"literal\">nil</span></div><div class=\"line\">      temp = @redis.get(@sites.get_redis_key(site_name, <span class=\"string\">'info'</span>))</div><div class=\"line\">      @response_data &lt;&lt; temp</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">respond_with</span></span></div><div class=\"line\">    [<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span> =&gt; <span class=\"string\">'application/json'</span>&#125;]</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_request</span> </span></div><div class=\"line\">    response = @response_data.to_json</div><div class=\"line\">    render response</div><div class=\"line\">    finish</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>With both prepare and info done we now want the ability to pull the raw information from the RSS feed, this will be represented by the pull action.<br>Go into the app/actions directory and create a new file using your text editor of choice and call it pull_action.rb<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewsPlus/app/action/pull_action.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PullAction</span> &lt; Cramp::Action</span></div><div class=\"line\">  <span class=\"keyword\">include</span> RedisHelper</div><div class=\"line\"></div><div class=\"line\">  before_start <span class=\"symbol\">:connect_to_redis</span>, <span class=\"symbol\">:get_params</span>, <span class=\"symbol\">:pull_sites</span></div><div class=\"line\">  on_start <span class=\"symbol\">:handle_request</span></div><div class=\"line\">  on_finish <span class=\"symbol\">:close_redis</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_params</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span>(params.has_key?(<span class=\"symbol\">:category</span>))</div><div class=\"line\">      @category = params[<span class=\"symbol\">:category</span>]</div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">      puts <span class=\"string\">\"No category param passed\"</span></div><div class=\"line\">      @category = <span class=\"literal\">nil</span></div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pull_sites</span></span></div><div class=\"line\">    @response_data = []</div><div class=\"line\"></div><div class=\"line\">    @sites = Sites.new</div><div class=\"line\"></div><div class=\"line\">    @sites.all_sites(@category).each <span class=\"keyword\">do</span> <span class=\"params\">|site_name, site_vals|</span></div><div class=\"line\">      puts <span class=\"string\">\"pulling data for <span class=\"subst\">#&#123;site_name&#125;</span>\"</span></div><div class=\"line\">      temp = @redis.get(@sites.get_redis_key(site_name, <span class=\"string\">'stories'</span>))</div><div class=\"line\">      @response_data &lt;&lt; temp</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">respond_with</span></span></div><div class=\"line\">    [<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span> =&gt; <span class=\"string\">'application/json'</span>&#125;]</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_request</span> </span></div><div class=\"line\">    response = @response_data.to_json</div><div class=\"line\">    render response</div><div class=\"line\">    finish</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>The pull_action is similar to the info action with the exception that it fetches the stories redis key as opposed to the info redis key we definied within the sites model a while back.</p>\n<p>Now that you kinda have a feel for how Cramp handles request via a sequence of callbacks, you should easily follow the logic of the next action, the “refresh_action”.<br>What refresh does is rather simple… refresh just re-caches the rss data from the web; if the client passes an optional category parameter only those feeds under the said category will be refreshed.<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#NewPlus/app/actions/refresh_action.rb</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefreshAction</span> &lt; Cramp::Action</span></div><div class=\"line\">  <span class=\"keyword\">include</span> RedisHelper</div><div class=\"line\"></div><div class=\"line\">  before_start <span class=\"symbol\">:connect_to_redis</span>, <span class=\"symbol\">:get_params</span>, <span class=\"symbol\">:refresh_sites</span></div><div class=\"line\">  on_start <span class=\"symbol\">:handle_request</span></div><div class=\"line\">  on_finish <span class=\"symbol\">:close_redis</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_params</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span>(params.has_key?(<span class=\"symbol\">:category</span>))</div><div class=\"line\">      @category = params[<span class=\"symbol\">:category</span>]</div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">      @category = <span class=\"literal\">nil</span></div><div class=\"line\">      <span class=\"keyword\">yield</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">refresh_sites</span></span></div><div class=\"line\">    @sites = Sites.new</div><div class=\"line\"></div><div class=\"line\">    @sites.all_sites(@category).each <span class=\"keyword\">do</span> <span class=\"params\">|site_name, site_vals|</span></div><div class=\"line\">      @redis.set(@sites.get_redis_key(site_name, <span class=\"string\">'stories'</span>), NewsFeed.refresh(site_vals[<span class=\"symbol\">:url</span>]))</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">yield</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">respond_with</span></span></div><div class=\"line\">    [<span class=\"number\">201</span>, &#123;<span class=\"string\">'Content-Type'</span> =&gt; <span class=\"string\">'application/json'</span>&#125;]</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_request</span> </span></div><div class=\"line\">    response = &#123;<span class=\"symbol\">ok:</span> <span class=\"string\">\"refresh success\"</span>&#125;.to_json</div><div class=\"line\">    render response</div><div class=\"line\">    finish</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>So far so good we have at this point completed all of the necessary Ruby code required to run this application.<br>The next step is to start our redis server, to create a new redis server on a Linux/Unix machine you just run the code below in your terminal.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ cd location_where_you_installed_redis</div><div class=\"line\">$ ./redis-2.4.17/src/redis-server</div></pre></td></tr></table></figure></p>\n<p>That command will create a new redis server on the default port with the default settings which will be enough for our development environment.<br>In addition you may want to verify that our changes are being cached as we run through a test run of the code.<br>This requires that you start a redis client<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ cd location_where_you_installed_redis</div><div class=\"line\">$ ./redis-2.4.17/src/redis-cli</div></pre></td></tr></table></figure></p>\n<p>Now that you have both the redis client and server before starting the application begin the redis server or if you already have it running let it continue.</p>\n<p>Open a new terminal window and navigate the to the directory of your project.<br>The following command will allow you to run the cramp application; this command was taken from the documentation at the Cramp homepage.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ bundle exec thin --timeout 0 -R config.ru start</div></pre></td></tr></table></figure></p>\n<p>Once running you shouldn’t see any error messages if everything has been typed correctly. As with all Cramp applications the default port number will be 3000 and the host set to local. We’ll start by calling the prepare function from our mock api, open a terminal and type the following. The terminal command we will be using is called Curl, its a command line tool data transfer across various protocols including HTTP.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ curl -X POST 127.0.0.1:3000/prepare</div></pre></td></tr></table></figure></p>\n<p>The response sent back from the server will be JSON indicating that the request succeded, now if you view your redis server the debug information will show that there are now 6 keys cached.</p>\n<p>Remember that each of our 3 sites have two keys; info and server for a total of six.<br>To run some of the other commands we can use curl again…<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Terminal</div><div class=\"line\">$ curl -X POST 127.0.0.1:3000/refresh</div><div class=\"line\">$ curl -X GET 127.0.0.1:3000/pull</div><div class=\"line\">$ curl -X GET 127.0.0.1:3000/info</div></pre></td></tr></table></figure></p>\n<p>If this is your first time using curl you might be wondering how one passes parameters, well its just like any http request you include the question mark and begin passing your parameters delimeted by the ampersand.</p>\n<p>Say you wanted to pull only tech rss feeds.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -X GET 127.0.0.1:3000/pull?category=tech</div></pre></td></tr></table></figure></p>\n<p>Now you have a basic RSS api written using Ruby and the Cramp framework, go read more about Cramp so you can extend on this app and turn it into something more useful.</p>"},{"title":"Ruby On Rails Blog Project Live Demo","date":"2011-06-10T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/rubyonrailsblogdemo.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/rubyonrailsblogdemo.JPG","comments":0,"_content":"A while ago I decided to get my feet wet with the awesome Ruby On Rails MVC framework for developing dynamic databased backed web applications. In this article you can see a short project I developed that highlights a typical blog you can create using the Ruby On Rails framework.\n\n<!-- more -->\n<p>Last winter I began playing around with the Ruby programming language and seeing whether or not I would like to begin building software in it as opposed to Python or PHP. Well after going through various online tutorials and a spending about 2 months(while I was still in college) reading through a well <a href=\"http://www.amazon.com/Beginning-Ruby-Novice-Professional-Experts/dp/1590597664\">rounded intro book on the Ruby</a> language I decided that it would be best to start learning about the Rails web development framework. So I headed over to the Rails homepage <a href=\"http://rubyonrails.org/\">rubyonrails.org</a> and began going through some more tutorials and finally decided to try out a demo project just to get a more well rounded feeling of the framework that goes beyond simple Rails scaffolds and or 30 minute View-Controller applications that don’t require databases. So without boring you to death the link below is the demo application I built using the Ruby on Rails framework over the course of about eight weeks or so(during my senior year of college and mostly on weekends) at the link below.</p> <p>Click here to see my Rails demo. <b>No longer available</b></a></p> <p><strong><u>The Ruby On Rails Blog is hosted on a server running Apache; so how the heck did I embed a Rails application on an Apache server?</u></strong></p> <p>The answer to this question is <a href=\"http://www.modrails.com/\">a well known Ruby gem called passenger a.k.a mod_rails</a> developed by <a href=\"http://www.phusion.nl/\">Phusion</a>. In short it allows you to deploy a Rails application onto an Apache server with very little additional configuration(only a single file needs to be added along with a symbolic link to the rails/public directory).</p>\n","source":"_posts/rubyonrailsblogdemo.md","raw":"---\ntitle: Ruby On Rails Blog Project Live Demo\ndate: 2011-06-10\ncategories: [ruby-on-rails]\ntags: [ruby, javascript]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/rubyonrailsblogdemo.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/rubyonrailsblogdemo.JPG\ncomments: false\n---\nA while ago I decided to get my feet wet with the awesome Ruby On Rails MVC framework for developing dynamic databased backed web applications. In this article you can see a short project I developed that highlights a typical blog you can create using the Ruby On Rails framework.\n\n<!-- more -->\n<p>Last winter I began playing around with the Ruby programming language and seeing whether or not I would like to begin building software in it as opposed to Python or PHP. Well after going through various online tutorials and a spending about 2 months(while I was still in college) reading through a well <a href=\"http://www.amazon.com/Beginning-Ruby-Novice-Professional-Experts/dp/1590597664\">rounded intro book on the Ruby</a> language I decided that it would be best to start learning about the Rails web development framework. So I headed over to the Rails homepage <a href=\"http://rubyonrails.org/\">rubyonrails.org</a> and began going through some more tutorials and finally decided to try out a demo project just to get a more well rounded feeling of the framework that goes beyond simple Rails scaffolds and or 30 minute View-Controller applications that don’t require databases. So without boring you to death the link below is the demo application I built using the Ruby on Rails framework over the course of about eight weeks or so(during my senior year of college and mostly on weekends) at the link below.</p> <p>Click here to see my Rails demo. <b>No longer available</b></a></p> <p><strong><u>The Ruby On Rails Blog is hosted on a server running Apache; so how the heck did I embed a Rails application on an Apache server?</u></strong></p> <p>The answer to this question is <a href=\"http://www.modrails.com/\">a well known Ruby gem called passenger a.k.a mod_rails</a> developed by <a href=\"http://www.phusion.nl/\">Phusion</a>. In short it allows you to deploy a Rails application onto an Apache server with very little additional configuration(only a single file needs to be added along with a symbolic link to the rails/public directory).</p>\n","slug":"rubyonrailsblogdemo","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3i7001cyswve0t44ex8","layout":"post","photos":[],"link":"","content":"<p>A while ago I decided to get my feet wet with the awesome Ruby On Rails MVC framework for developing dynamic databased backed web applications. In this article you can see a short project I developed that highlights a typical blog you can create using the Ruby On Rails framework.</p>\n<a id=\"more\"></a>\n<p>Last winter I began playing around with the Ruby programming language and seeing whether or not I would like to begin building software in it as opposed to Python or PHP. Well after going through various online tutorials and a spending about 2 months(while I was still in college) reading through a well <a href=\"http://www.amazon.com/Beginning-Ruby-Novice-Professional-Experts/dp/1590597664\" target=\"_blank\" rel=\"external\">rounded intro book on the Ruby</a> language I decided that it would be best to start learning about the Rails web development framework. So I headed over to the Rails homepage <a href=\"http://rubyonrails.org/\" target=\"_blank\" rel=\"external\">rubyonrails.org</a> and began going through some more tutorials and finally decided to try out a demo project just to get a more well rounded feeling of the framework that goes beyond simple Rails scaffolds and or 30 minute View-Controller applications that don’t require databases. So without boring you to death the link below is the demo application I built using the Ruby on Rails framework over the course of about eight weeks or so(during my senior year of college and mostly on weekends) at the link below.</p> <p>Click here to see my Rails demo. <b>No longer available</b></p> <p><strong><u>The Ruby On Rails Blog is hosted on a server running Apache; so how the heck did I embed a Rails application on an Apache server?</u></strong></p> <p>The answer to this question is <a href=\"http://www.modrails.com/\" target=\"_blank\" rel=\"external\">a well known Ruby gem called passenger a.k.a mod_rails</a> developed by <a href=\"http://www.phusion.nl/\" target=\"_blank\" rel=\"external\">Phusion</a>. In short it allows you to deploy a Rails application onto an Apache server with very little additional configuration(only a single file needs to be added along with a symbolic link to the rails/public directory).</p>\n","site":{"data":{}},"excerpt":"<p>A while ago I decided to get my feet wet with the awesome Ruby On Rails MVC framework for developing dynamic databased backed web applications. In this article you can see a short project I developed that highlights a typical blog you can create using the Ruby On Rails framework.</p>","more":"<p>Last winter I began playing around with the Ruby programming language and seeing whether or not I would like to begin building software in it as opposed to Python or PHP. Well after going through various online tutorials and a spending about 2 months(while I was still in college) reading through a well <a href=\"http://www.amazon.com/Beginning-Ruby-Novice-Professional-Experts/dp/1590597664\">rounded intro book on the Ruby</a> language I decided that it would be best to start learning about the Rails web development framework. So I headed over to the Rails homepage <a href=\"http://rubyonrails.org/\">rubyonrails.org</a> and began going through some more tutorials and finally decided to try out a demo project just to get a more well rounded feeling of the framework that goes beyond simple Rails scaffolds and or 30 minute View-Controller applications that don’t require databases. So without boring you to death the link below is the demo application I built using the Ruby on Rails framework over the course of about eight weeks or so(during my senior year of college and mostly on weekends) at the link below.</p> <p>Click here to see my Rails demo. <b>No longer available</b></a></p> <p><strong><u>The Ruby On Rails Blog is hosted on a server running Apache; so how the heck did I embed a Rails application on an Apache server?</u></strong></p> <p>The answer to this question is <a href=\"http://www.modrails.com/\">a well known Ruby gem called passenger a.k.a mod_rails</a> developed by <a href=\"http://www.phusion.nl/\">Phusion</a>. In short it allows you to deploy a Rails application onto an Apache server with very little additional configuration(only a single file needs to be added along with a symbolic link to the rails/public directory).</p>"},{"title":"Build A Text Based Multiplayer RPG Part I","date":"2011-06-05T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart1.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart1.JPG","comments":0,"_content":"This is the first article in a multi-part series on how to develop a console based multiplayer MUD style RPG game. By the end of this series you will have a fully working console app that will run a typical client server model desktop application on Windows. This tutorial requires the Microsoft Visual C++ Compiler.\n\n<!-- more -->\n\n[Click here for part II][link_part_2]\n\n## Review Material\n\n<a href=\"http://cslibrary.stanford.edu/102/\">Click here for a review on pointers if you need to brush up.</a>\n<a href=\"http://www.cprogramming.com/tutorial/stl/iterators.html\">Click here for a review on C++ iterators, if you can’t follow it then read the pointer review first.</a>\n\n## Background\n\nIf you happen to be curious as to what exactly a “text based role playing game(rpg)” is in my own words a text based rpg is simply a game in which the player or players input commands into a terminal and are fed back a description of the actions which took place within the game world. <a href=\"http://en.wikipedia.org/wiki/Online_text-based_role-playing_game\">For more info see the Wikipedia entry on it</a>.\n\nOk, now that we’re all familiar with the concept, lets first review why anyone would even want to build a text-based rpg in todays world of fancy <a href=\"http://us.battle.net/wow/en/\">3D graphics, special effects and semi-realistic computer rendered player models</a>. I believe text based rpgs are a great start for programmers who want to build more serious/professional grade rpgs for several reasons. First, text based rpgs allow programmers to focus purely on the game engine itself without the overhead of graphics and or animation.\n\nSecond, the core of any role playing game relies on the sophistication of its <a href=\"http://en.wikipedia.org/wiki/Role-playing_game_system\">role playing system</a>; or the game mechanics. Without a unique and interesting core system, gamers will quickly dismiss your rpg as a rehash or just another D&D clone.\n\nLastly, from a programming perspective it’s a great excuse to practice data structures, socket programming and object oriented design. In this first part of series we’re going to begin by writing out the code base for the header class which will hold all the definitions for the objects which will appear within our game. However before we even write a single line of code lets first think about how we want all the game objects to fit together. Take a look at the picture below, and take note of all the objects that are identified. We have the <em>player</em>, <em>monster</em>, <em>items</em>, <em>dungeon</em> and <em>terminal </em>objects which are all clearly identified within our simple mock up. Although those won’t be our exact classes that we’ll code in a moment, the rough picture just lets us better understand the model.\n\n<div class=\"justifiedgallery\">\n  <img class=\"aligncenter\" src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\" alt=\"Game Sketch\" width=\"150\" height=\"150\" />\n</div>\n\n## Initial Code\n\nNow lets start coding; call this file <strong>database.h,</strong> why we chose to name it database will be important in the future once we get to the multiplayer aspects of the game but enough talk.\n\n```c\n#include<iostream>\n#include<string>\n#include<list>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<iterator>\n#include<locale>\n#include<sstream>\n\nusing namespace std ;\n\nnamespace MUD\n{\n  class Player ;\n  class Item ;\n  class Room ;\n  class Dungeon ;\n  class Monster ;\n  class Dispatch ;\n  class Filter ;\n```\n\nOk so now we have our libraries all included and the forward declarations for our classes planned out. Don’t worry about the inclusion of the not so common libraries such as locale, and sstream yet as we’ll introduce them in the future.\n\n\n## Item and Monster Classes\n\nTo start off we begin with the Item class. The item class as you can guess will represent items within our rpg game. Due to this being a simple rpg game we will restrict ourselves to just three types; weapons, armor and health. At this moment you might be wondering why don’t we just make three different classes, one for each item. However, as you can see below, we’ll just stick with this one class and generalize it.\n\n```c\n    class Item\n    {\n      public:\n        enum TYPE { WEAPON, ARMOR, HEALTH } ;\n\n        Item( string name, Item::TYPE type, int power, int vitality, int health ) ;\n        Item operator=( Item& newItem ) ;\n        Item( void ) ;\n        //~Item()\n\n        void setPower( int value ) ;\n        int getPower( void ) ;\n\n        void setVitality( int value ) ;\n        int getVitality( void ) ;\n\n        void setHealth( int value ) ;\n        int getHealth( void ) ;\n\n        void setName( string name ) ;\n        string getName( void ) ;\n\n        void setType( TYPE newType ) ;\n        TYPE getType( void ) ;\n\n        string mName ;\n        int mPower ;\n        int mVitality ;\n        int mHealth ;\n        TYPE mType ;\n        bool mAvailiable ;\n    } ;\n```\n\nThe item class as you can look at above uses six different attributes, name, power, vitality, health, type and availability. We’ll discuss each of those further when we get to writing the actual methods for the class but for now try and think about how each of those attributes relate to the three different enum types or weapon, armor and health. Next, we are going to look at the monster class. This class being as its represents the monsters in our game should meet the following requirements. Monsters should have some measurement of life or hit points, a strength or attack power, a defense rating, a unique name and of course an indicator of whether or not they are currently in combat.\n\n```c\n    class Monster\n    {\n      public:\n        Monster( string name, int maxHp, int strength, int defence ) ;\n        //~Monster() \n\n        void setHp( int newHp ) ;\n        int getHp( void ) ;\n\n        void setStrength( int newStrength ) ;\n        int getStrength( void ) ;\n\n        void setDefence( int newDefence ) ;\n        int getDefence( void ) ;\n\n        void setName( string newName ) ;\n        string getName( void ) ;\n\n        void setMaxHp( int newMaxHp ) ;\n\n        int mMaxHp ;\n        int mHp ;\n        int mStrength ;\n        int mDefence ;\n        string mName ;\n        bool inCombat ;\n    } ;\n```\n\n## The Room Class and Player Classes\n\nFor more sophisticated games our monster class would probably have attributes for magic, speed, steal-able items and experience points rewarded if your into the experience points style of rpgs. But for this simple game; strength, hp and defense will do. Moving along we are ready to begin sketching out the code for the room class. The room class is a class which will represent a single room within our dungeon and will also contain items, monsters and allow players to traverse them. In order to best represent the interconnected nature of the rooms as they would appear in our game setting the data structure of choice will be a simple 4-way(technically 8-way since each rooms allows backtracking) linked list with each direction being the familiar north, south, east and west. When I first designed this application several months ago the room class was by far the most difficult class conceptually since most of the game revolves around traversing the rooms, finding items(within rooms), slaying monsters(again within rooms), updating the state of the player(moving about rooms) and keeping the state of the dungeon intact(managing the rooms). As you can tell the room class is key to this simple game we’re making.\n\n```c\n    class Room\n    {\n      public:\n        Room( string name, string description, Item* item = NULL ) ;\n        //Room( void ) ;\n        //~Room()\n\n        typedef bool success ;\n\n        void addMonster( Monster* newMonster ) ;\n        Monster& getMonsterRef( string monsterName ) ;\n        success killMonster( string monsterName ) ;\n        void itemTaken( void ) ;\n        string searchResponse( void ) ;\n        success link( char direction, Room& room ) ;\n        Room& north( void ) ;\n        Room& south( void ) ;\n        Room& east( void ) ;\n        Room& west( void ) ;\n\n        void setName( string newName ) ;\n\n        void setDescription( string newDescription ) ;\n        string getDescription( void ) ;\n\n        void setItem( Item* newItem ) ;\n\n        Item* mItem ;\n        Room* mNorth ;\n        Room* mSouth ;\n        Room* mEast ;\n        Room* mWest ;\n        list< Monster* > mMonsters ;\n        string mName ;\n        string mDescription ;\n    } ;\n```\n\nNext up is the player class, although for this simple game the player class resembles the monster class to an exceedingly high degree and you might be thinking “why are we not using inheritance from a general base class that has hp, str, def and such”. The answer to that question was due to me having originally planned out the player class to have multiple sub classes representing jobs such wizard, knight, archer, monk, ninja and such and to have different weapons and movement bonuses and so on until I realized that it was getting too large. So I cut all that stuff out and decided to keep things simple.\n\n```c\n    class Player\n    {\n      public:\n        Player( string name, Room* start = NULL ) ;\n        //~Player()\n\n        typedef bool dead ;\n\n        void setHp( int newHp ) ;\n        int getHp( void ) ;\n\n        void setStrength( int newStrength ) ;\n        int getStrength( void ) ;\n\n        void setDefence( int newDefence ) ;\n        int getDefence( void ) ;\n\n        string getLocation( void ) ;\n\n        void setName( string newName ) ;\n        string getName( void ) const ;\n\n        string equip( string itemName ) ;\n        string attack( string monsterName ) ;\n        string move( char direction ) ;\n        string search( void ) ;\n        dead death( void ) ;\n\n        int mMaxHp ;\n        int mHp ;\n        int mStrength ;\n        int mDefence ;\n        Room* mLocation ;\n        string mName ;\n        Item* mWeapon ;\n        Item* mArmor ;\n        dead mLife ;\n    } ;\n```\n\n## The Dungeon Class\n\nNow here is where the class design gets a little tricky. The dungeon class, the class we’re coding next will make use of two std::vector<> objects to hold both the current players and the references to the various rooms within the game. Also an interesting method within the dungeon class which we’ll describe in detail later on in this tutorial series is the combatLoop() method. If you recall from earlier, the player class already has an attack() method so why does the entire dungeon need to be aware of which players are in combat? Remember that the goal of this tutorial is a multiplayer game so important aspects of the dungeon such as which players are alive and which monsters have been slain should be propagated to each player. Ok, so here is the code.\n\n```c\nclass Dungeon\n{\n  public:\n    Dungeon( int maxPlayers, int maxRooms ) ;\n    //~Dungeon()\n\n    bool isComplete( void ) ;\n    string addPlayer( Player* newPlayer ) ;\n    string addRoom( Room* newRoom ) ;\n    string removePlayer( string playerName ) ;\n    void generatePlayerStats( Player* newPlayer ) ;\n    void combatLoop( Player& hero, Monster& villain ) ;\n    string* playerStatus( Player& player ) ;\n    void displayHelp( void ) ;\n\n    int mMaxRooms ;\n    int mMaxPlayers ;\n    vector< Room* > mRooms ;\n    vector< Player* > mPlayers ;\n} ;\n```\n\n## Utility helpers, \"Filter\" and \"Dispatch\"\n\nLastly there are two utility classes I wrote to help facilitate the ever important parsing of the user inputs into the game terminal. Being that this game is text based, players will undoubtedly type in all sorts of crazy commands and awkward inputs. So the design of the two utility classes dispatch and filter were put in place to basically filter all incoming messages to ensure validity and to dispatch valid messages based on a simple protocol I crafted to handle commands. In other words, in order to avoid players attempting to cheat the game say by equipping from rooms which they currently don’t occupy or grabbing all the health items from other players the filter class serves to clean up dirty commands before they even reach the dungeon class.\n\n```c\nclass Filter\n{\n  public:\n    typedef bool valid ;\n\n    valid validateMessage( string message ) ;\n    string chat( string message ) ;\n} ;\n\nclass Dispatch\n{\n  public:\n    char extractCommand( string fromFilter ) ;\n    string extractValue( string fromFilter ) ;\n} ;\n```\n\nOk folks that’s about all for now; just remember to stay tuned for the next parts of this tutorial which I’ll roll out when I get the time.\n\n-Thanks-\n\nOh and here is the whole code if you're in a hurry\n\n```c\n// database.h\n#include<iostream>\n#include<string>\n#include<list>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<iterator>\n#include<locale>\n#include<sstream>\n\nusing namespace std ;\n\nnamespace MUD\n{\n  class Player ;\n  class Item ;\n  class Room ;\n  class Dungeon ;\n  class Monster ;\n  class Dispatch ;\n  class Filter ;\n\n  class Item\n  {\n    public:\n      enum TYPE { WEAPON, ARMOR, HEALTH } ;\n\n      Item( string name, Item::TYPE type, int power, int vitality, int health ) ;\n      Item operator=( Item& newItem ) ;\n      Item( void ) ;\n      //~Item()\n\n      void setPower( int value ) ;\n      int getPower( void ) ;\n\n      void setVitality( int value ) ;\n      int getVitality( void ) ;\n\n      void setHealth( int value ) ;\n      int getHealth( void ) ;\n\n      void setName( string name ) ;\n      string getName( void ) ;\n\n      void setType( TYPE newType ) ;\n      TYPE getType( void ) ;\n\n      string mName ;\n      int mPower ;\n      int mVitality ;\n      int mHealth ;\n      TYPE mType ;\n      bool mAvailiable ;\n  } ;\n\n  class Monster\n  {\n    public:\n      Monster( string name, int maxHp, int strength, int defence ) ;\n      //~Monster() \n\n      void setHp( int newHp ) ;\n      int getHp( void ) ;\n\n      void setStrength( int newStrength ) ;\n      int getStrength( void ) ;\n\n      void setDefence( int newDefence ) ;\n      int getDefence( void ) ;\n\n      void setName( string newName ) ;\n      string getName( void ) ;\n\n      void setMaxHp( int newMaxHp ) ;\n\n      int mMaxHp ;\n      int mHp ;\n      int mStrength ;\n      int mDefence ;\n      string mName ;\n      bool inCombat ;\n  } ;\n\n  class Room \n  {\n    public:\n      Room( string name, string description, Item* item = NULL ) ;\n      //Room( void ) ;\n      //~Room()\n\n      typedef bool success ;\n\n      void addMonster( Monster* newMonster ) ;\n      Monster& getMonsterRef( string monsterName ) ;\n      success killMonster( string monsterName ) ;\n      void itemTaken( void ) ;\n      string searchResponse( void ) ;\n      success link( char direction, Room& room ) ;\n      Room& north( void ) ;\n      Room& south( void ) ;\n      Room& east( void ) ;\n      Room& west( void ) ;\n\n      void setName( string newName ) ;\n\n      void setDescription( string newDescription ) ;\n      string getDescription( void ) ;\n\n      void setItem( Item* newItem ) ;\n\n      Item* mItem ;\n      Room* mNorth ;\n      Room* mSouth ;\n      Room* mEast ;\n      Room* mWest ;\n      list< Monster* > mMonsters ;\n      string mName ;\n      string mDescription ;\n  } ;\n\n  class Player\n  {\n    public:\n      Player( string name, Room* start = NULL ) ;\n      //~Player()\n\n      typedef bool dead ;\n\n      void setHp( int newHp ) ;\n      int getHp( void ) ;\n\n      void setStrength( int newStrength ) ;\n      int getStrength( void ) ;\n\n      void setDefence( int newDefence ) ;\n      int getDefence( void ) ;\n\n      string getLocation( void ) ;\n\n      void setName( string newName ) ;\n      string getName( void ) const ;\n\n      string equip( string itemName ) ;\n      string attack( string monsterName ) ;\n      string move( char direction ) ;\n      string search( void ) ;\n      dead death( void ) ;\n\n      int mMaxHp ;\n      int mHp ;\n      int mStrength ;\n      int mDefence ;\n      Room* mLocation ;\n      string mName ;\n      Item* mWeapon ;\n      Item* mArmor ;\n      dead mLife ;\n  } ;\n\n  class Dungeon\n  {\n    public:\n      Dungeon( int maxPlayers, int maxRooms ) ;\n      //~Dungeon()\n\n      bool isComplete( void ) ;\n      string addPlayer( Player* newPlayer ) ;\n      string addRoom( Room* newRoom ) ;\n      string removePlayer( string playerName ) ;\n      void generatePlayerStats( Player* newPlayer ) ;\n      void combatLoop( Player& hero, Monster& villain ) ;\n      string* playerStatus( Player& player ) ;\n      void displayHelp( void ) ;\n\n      int mMaxRooms ;\n      int mMaxPlayers ;\n      vector< Room* > mRooms ;\n      vector< Player* > mPlayers ;\n  } ;\n\n  class Filter\n  {\n    public:\n      typedef bool valid ;\n\n      valid validateMessage( string message ) ;\n      string chat( string message ) ;\n  } ;\n\n  class Dispatch\n  {\n    public:\n      char extractCommand( string fromFilter ) ;\n      string extractValue( string fromFilter ) ;\n  } ;\n}\n```\n\n[Click here for part II][link_part_2]\n\n[link_part_2]: /2011/06/08/textbasedrpgpart2\n","source":"_posts/textbasedrpgpart1.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part I\ndate: 2011-06-05\ncategories: [tutorial]\ntags: [cpp]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart1.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart1.JPG\ncomments: false\n---\nThis is the first article in a multi-part series on how to develop a console based multiplayer MUD style RPG game. By the end of this series you will have a fully working console app that will run a typical client server model desktop application on Windows. This tutorial requires the Microsoft Visual C++ Compiler.\n\n<!-- more -->\n\n[Click here for part II][link_part_2]\n\n## Review Material\n\n<a href=\"http://cslibrary.stanford.edu/102/\">Click here for a review on pointers if you need to brush up.</a>\n<a href=\"http://www.cprogramming.com/tutorial/stl/iterators.html\">Click here for a review on C++ iterators, if you can’t follow it then read the pointer review first.</a>\n\n## Background\n\nIf you happen to be curious as to what exactly a “text based role playing game(rpg)” is in my own words a text based rpg is simply a game in which the player or players input commands into a terminal and are fed back a description of the actions which took place within the game world. <a href=\"http://en.wikipedia.org/wiki/Online_text-based_role-playing_game\">For more info see the Wikipedia entry on it</a>.\n\nOk, now that we’re all familiar with the concept, lets first review why anyone would even want to build a text-based rpg in todays world of fancy <a href=\"http://us.battle.net/wow/en/\">3D graphics, special effects and semi-realistic computer rendered player models</a>. I believe text based rpgs are a great start for programmers who want to build more serious/professional grade rpgs for several reasons. First, text based rpgs allow programmers to focus purely on the game engine itself without the overhead of graphics and or animation.\n\nSecond, the core of any role playing game relies on the sophistication of its <a href=\"http://en.wikipedia.org/wiki/Role-playing_game_system\">role playing system</a>; or the game mechanics. Without a unique and interesting core system, gamers will quickly dismiss your rpg as a rehash or just another D&D clone.\n\nLastly, from a programming perspective it’s a great excuse to practice data structures, socket programming and object oriented design. In this first part of series we’re going to begin by writing out the code base for the header class which will hold all the definitions for the objects which will appear within our game. However before we even write a single line of code lets first think about how we want all the game objects to fit together. Take a look at the picture below, and take note of all the objects that are identified. We have the <em>player</em>, <em>monster</em>, <em>items</em>, <em>dungeon</em> and <em>terminal </em>objects which are all clearly identified within our simple mock up. Although those won’t be our exact classes that we’ll code in a moment, the rough picture just lets us better understand the model.\n\n<div class=\"justifiedgallery\">\n  <img class=\"aligncenter\" src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\" alt=\"Game Sketch\" width=\"150\" height=\"150\" />\n</div>\n\n## Initial Code\n\nNow lets start coding; call this file <strong>database.h,</strong> why we chose to name it database will be important in the future once we get to the multiplayer aspects of the game but enough talk.\n\n```c\n#include<iostream>\n#include<string>\n#include<list>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<iterator>\n#include<locale>\n#include<sstream>\n\nusing namespace std ;\n\nnamespace MUD\n{\n  class Player ;\n  class Item ;\n  class Room ;\n  class Dungeon ;\n  class Monster ;\n  class Dispatch ;\n  class Filter ;\n```\n\nOk so now we have our libraries all included and the forward declarations for our classes planned out. Don’t worry about the inclusion of the not so common libraries such as locale, and sstream yet as we’ll introduce them in the future.\n\n\n## Item and Monster Classes\n\nTo start off we begin with the Item class. The item class as you can guess will represent items within our rpg game. Due to this being a simple rpg game we will restrict ourselves to just three types; weapons, armor and health. At this moment you might be wondering why don’t we just make three different classes, one for each item. However, as you can see below, we’ll just stick with this one class and generalize it.\n\n```c\n    class Item\n    {\n      public:\n        enum TYPE { WEAPON, ARMOR, HEALTH } ;\n\n        Item( string name, Item::TYPE type, int power, int vitality, int health ) ;\n        Item operator=( Item& newItem ) ;\n        Item( void ) ;\n        //~Item()\n\n        void setPower( int value ) ;\n        int getPower( void ) ;\n\n        void setVitality( int value ) ;\n        int getVitality( void ) ;\n\n        void setHealth( int value ) ;\n        int getHealth( void ) ;\n\n        void setName( string name ) ;\n        string getName( void ) ;\n\n        void setType( TYPE newType ) ;\n        TYPE getType( void ) ;\n\n        string mName ;\n        int mPower ;\n        int mVitality ;\n        int mHealth ;\n        TYPE mType ;\n        bool mAvailiable ;\n    } ;\n```\n\nThe item class as you can look at above uses six different attributes, name, power, vitality, health, type and availability. We’ll discuss each of those further when we get to writing the actual methods for the class but for now try and think about how each of those attributes relate to the three different enum types or weapon, armor and health. Next, we are going to look at the monster class. This class being as its represents the monsters in our game should meet the following requirements. Monsters should have some measurement of life or hit points, a strength or attack power, a defense rating, a unique name and of course an indicator of whether or not they are currently in combat.\n\n```c\n    class Monster\n    {\n      public:\n        Monster( string name, int maxHp, int strength, int defence ) ;\n        //~Monster() \n\n        void setHp( int newHp ) ;\n        int getHp( void ) ;\n\n        void setStrength( int newStrength ) ;\n        int getStrength( void ) ;\n\n        void setDefence( int newDefence ) ;\n        int getDefence( void ) ;\n\n        void setName( string newName ) ;\n        string getName( void ) ;\n\n        void setMaxHp( int newMaxHp ) ;\n\n        int mMaxHp ;\n        int mHp ;\n        int mStrength ;\n        int mDefence ;\n        string mName ;\n        bool inCombat ;\n    } ;\n```\n\n## The Room Class and Player Classes\n\nFor more sophisticated games our monster class would probably have attributes for magic, speed, steal-able items and experience points rewarded if your into the experience points style of rpgs. But for this simple game; strength, hp and defense will do. Moving along we are ready to begin sketching out the code for the room class. The room class is a class which will represent a single room within our dungeon and will also contain items, monsters and allow players to traverse them. In order to best represent the interconnected nature of the rooms as they would appear in our game setting the data structure of choice will be a simple 4-way(technically 8-way since each rooms allows backtracking) linked list with each direction being the familiar north, south, east and west. When I first designed this application several months ago the room class was by far the most difficult class conceptually since most of the game revolves around traversing the rooms, finding items(within rooms), slaying monsters(again within rooms), updating the state of the player(moving about rooms) and keeping the state of the dungeon intact(managing the rooms). As you can tell the room class is key to this simple game we’re making.\n\n```c\n    class Room\n    {\n      public:\n        Room( string name, string description, Item* item = NULL ) ;\n        //Room( void ) ;\n        //~Room()\n\n        typedef bool success ;\n\n        void addMonster( Monster* newMonster ) ;\n        Monster& getMonsterRef( string monsterName ) ;\n        success killMonster( string monsterName ) ;\n        void itemTaken( void ) ;\n        string searchResponse( void ) ;\n        success link( char direction, Room& room ) ;\n        Room& north( void ) ;\n        Room& south( void ) ;\n        Room& east( void ) ;\n        Room& west( void ) ;\n\n        void setName( string newName ) ;\n\n        void setDescription( string newDescription ) ;\n        string getDescription( void ) ;\n\n        void setItem( Item* newItem ) ;\n\n        Item* mItem ;\n        Room* mNorth ;\n        Room* mSouth ;\n        Room* mEast ;\n        Room* mWest ;\n        list< Monster* > mMonsters ;\n        string mName ;\n        string mDescription ;\n    } ;\n```\n\nNext up is the player class, although for this simple game the player class resembles the monster class to an exceedingly high degree and you might be thinking “why are we not using inheritance from a general base class that has hp, str, def and such”. The answer to that question was due to me having originally planned out the player class to have multiple sub classes representing jobs such wizard, knight, archer, monk, ninja and such and to have different weapons and movement bonuses and so on until I realized that it was getting too large. So I cut all that stuff out and decided to keep things simple.\n\n```c\n    class Player\n    {\n      public:\n        Player( string name, Room* start = NULL ) ;\n        //~Player()\n\n        typedef bool dead ;\n\n        void setHp( int newHp ) ;\n        int getHp( void ) ;\n\n        void setStrength( int newStrength ) ;\n        int getStrength( void ) ;\n\n        void setDefence( int newDefence ) ;\n        int getDefence( void ) ;\n\n        string getLocation( void ) ;\n\n        void setName( string newName ) ;\n        string getName( void ) const ;\n\n        string equip( string itemName ) ;\n        string attack( string monsterName ) ;\n        string move( char direction ) ;\n        string search( void ) ;\n        dead death( void ) ;\n\n        int mMaxHp ;\n        int mHp ;\n        int mStrength ;\n        int mDefence ;\n        Room* mLocation ;\n        string mName ;\n        Item* mWeapon ;\n        Item* mArmor ;\n        dead mLife ;\n    } ;\n```\n\n## The Dungeon Class\n\nNow here is where the class design gets a little tricky. The dungeon class, the class we’re coding next will make use of two std::vector<> objects to hold both the current players and the references to the various rooms within the game. Also an interesting method within the dungeon class which we’ll describe in detail later on in this tutorial series is the combatLoop() method. If you recall from earlier, the player class already has an attack() method so why does the entire dungeon need to be aware of which players are in combat? Remember that the goal of this tutorial is a multiplayer game so important aspects of the dungeon such as which players are alive and which monsters have been slain should be propagated to each player. Ok, so here is the code.\n\n```c\nclass Dungeon\n{\n  public:\n    Dungeon( int maxPlayers, int maxRooms ) ;\n    //~Dungeon()\n\n    bool isComplete( void ) ;\n    string addPlayer( Player* newPlayer ) ;\n    string addRoom( Room* newRoom ) ;\n    string removePlayer( string playerName ) ;\n    void generatePlayerStats( Player* newPlayer ) ;\n    void combatLoop( Player& hero, Monster& villain ) ;\n    string* playerStatus( Player& player ) ;\n    void displayHelp( void ) ;\n\n    int mMaxRooms ;\n    int mMaxPlayers ;\n    vector< Room* > mRooms ;\n    vector< Player* > mPlayers ;\n} ;\n```\n\n## Utility helpers, \"Filter\" and \"Dispatch\"\n\nLastly there are two utility classes I wrote to help facilitate the ever important parsing of the user inputs into the game terminal. Being that this game is text based, players will undoubtedly type in all sorts of crazy commands and awkward inputs. So the design of the two utility classes dispatch and filter were put in place to basically filter all incoming messages to ensure validity and to dispatch valid messages based on a simple protocol I crafted to handle commands. In other words, in order to avoid players attempting to cheat the game say by equipping from rooms which they currently don’t occupy or grabbing all the health items from other players the filter class serves to clean up dirty commands before they even reach the dungeon class.\n\n```c\nclass Filter\n{\n  public:\n    typedef bool valid ;\n\n    valid validateMessage( string message ) ;\n    string chat( string message ) ;\n} ;\n\nclass Dispatch\n{\n  public:\n    char extractCommand( string fromFilter ) ;\n    string extractValue( string fromFilter ) ;\n} ;\n```\n\nOk folks that’s about all for now; just remember to stay tuned for the next parts of this tutorial which I’ll roll out when I get the time.\n\n-Thanks-\n\nOh and here is the whole code if you're in a hurry\n\n```c\n// database.h\n#include<iostream>\n#include<string>\n#include<list>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<iterator>\n#include<locale>\n#include<sstream>\n\nusing namespace std ;\n\nnamespace MUD\n{\n  class Player ;\n  class Item ;\n  class Room ;\n  class Dungeon ;\n  class Monster ;\n  class Dispatch ;\n  class Filter ;\n\n  class Item\n  {\n    public:\n      enum TYPE { WEAPON, ARMOR, HEALTH } ;\n\n      Item( string name, Item::TYPE type, int power, int vitality, int health ) ;\n      Item operator=( Item& newItem ) ;\n      Item( void ) ;\n      //~Item()\n\n      void setPower( int value ) ;\n      int getPower( void ) ;\n\n      void setVitality( int value ) ;\n      int getVitality( void ) ;\n\n      void setHealth( int value ) ;\n      int getHealth( void ) ;\n\n      void setName( string name ) ;\n      string getName( void ) ;\n\n      void setType( TYPE newType ) ;\n      TYPE getType( void ) ;\n\n      string mName ;\n      int mPower ;\n      int mVitality ;\n      int mHealth ;\n      TYPE mType ;\n      bool mAvailiable ;\n  } ;\n\n  class Monster\n  {\n    public:\n      Monster( string name, int maxHp, int strength, int defence ) ;\n      //~Monster() \n\n      void setHp( int newHp ) ;\n      int getHp( void ) ;\n\n      void setStrength( int newStrength ) ;\n      int getStrength( void ) ;\n\n      void setDefence( int newDefence ) ;\n      int getDefence( void ) ;\n\n      void setName( string newName ) ;\n      string getName( void ) ;\n\n      void setMaxHp( int newMaxHp ) ;\n\n      int mMaxHp ;\n      int mHp ;\n      int mStrength ;\n      int mDefence ;\n      string mName ;\n      bool inCombat ;\n  } ;\n\n  class Room \n  {\n    public:\n      Room( string name, string description, Item* item = NULL ) ;\n      //Room( void ) ;\n      //~Room()\n\n      typedef bool success ;\n\n      void addMonster( Monster* newMonster ) ;\n      Monster& getMonsterRef( string monsterName ) ;\n      success killMonster( string monsterName ) ;\n      void itemTaken( void ) ;\n      string searchResponse( void ) ;\n      success link( char direction, Room& room ) ;\n      Room& north( void ) ;\n      Room& south( void ) ;\n      Room& east( void ) ;\n      Room& west( void ) ;\n\n      void setName( string newName ) ;\n\n      void setDescription( string newDescription ) ;\n      string getDescription( void ) ;\n\n      void setItem( Item* newItem ) ;\n\n      Item* mItem ;\n      Room* mNorth ;\n      Room* mSouth ;\n      Room* mEast ;\n      Room* mWest ;\n      list< Monster* > mMonsters ;\n      string mName ;\n      string mDescription ;\n  } ;\n\n  class Player\n  {\n    public:\n      Player( string name, Room* start = NULL ) ;\n      //~Player()\n\n      typedef bool dead ;\n\n      void setHp( int newHp ) ;\n      int getHp( void ) ;\n\n      void setStrength( int newStrength ) ;\n      int getStrength( void ) ;\n\n      void setDefence( int newDefence ) ;\n      int getDefence( void ) ;\n\n      string getLocation( void ) ;\n\n      void setName( string newName ) ;\n      string getName( void ) const ;\n\n      string equip( string itemName ) ;\n      string attack( string monsterName ) ;\n      string move( char direction ) ;\n      string search( void ) ;\n      dead death( void ) ;\n\n      int mMaxHp ;\n      int mHp ;\n      int mStrength ;\n      int mDefence ;\n      Room* mLocation ;\n      string mName ;\n      Item* mWeapon ;\n      Item* mArmor ;\n      dead mLife ;\n  } ;\n\n  class Dungeon\n  {\n    public:\n      Dungeon( int maxPlayers, int maxRooms ) ;\n      //~Dungeon()\n\n      bool isComplete( void ) ;\n      string addPlayer( Player* newPlayer ) ;\n      string addRoom( Room* newRoom ) ;\n      string removePlayer( string playerName ) ;\n      void generatePlayerStats( Player* newPlayer ) ;\n      void combatLoop( Player& hero, Monster& villain ) ;\n      string* playerStatus( Player& player ) ;\n      void displayHelp( void ) ;\n\n      int mMaxRooms ;\n      int mMaxPlayers ;\n      vector< Room* > mRooms ;\n      vector< Player* > mPlayers ;\n  } ;\n\n  class Filter\n  {\n    public:\n      typedef bool valid ;\n\n      valid validateMessage( string message ) ;\n      string chat( string message ) ;\n  } ;\n\n  class Dispatch\n  {\n    public:\n      char extractCommand( string fromFilter ) ;\n      string extractValue( string fromFilter ) ;\n  } ;\n}\n```\n\n[Click here for part II][link_part_2]\n\n[link_part_2]: /2011/06/08/textbasedrpgpart2\n","slug":"textbasedrpgpart1","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3ia001eyswvrfzffi7a","layout":"post","photos":[],"link":"","content":"<p>This is the first article in a multi-part series on how to develop a console based multiplayer MUD style RPG game. By the end of this series you will have a fully working console app that will run a typical client server model desktop application on Windows. This tutorial requires the Microsoft Visual C++ Compiler.</p>\n<a id=\"more\"></a>\n<p><a href=\"/2011/06/08/textbasedrpgpart2\">Click here for part II</a></p>\n<h2 id=\"Review-Material\"><a href=\"#Review-Material\" class=\"headerlink\" title=\"Review Material\"></a>Review Material</h2><p><a href=\"http://cslibrary.stanford.edu/102/\" target=\"_blank\" rel=\"external\">Click here for a review on pointers if you need to brush up.</a><br><a href=\"http://www.cprogramming.com/tutorial/stl/iterators.html\" target=\"_blank\" rel=\"external\">Click here for a review on C++ iterators, if you can’t follow it then read the pointer review first.</a></p>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>If you happen to be curious as to what exactly a “text based role playing game(rpg)” is in my own words a text based rpg is simply a game in which the player or players input commands into a terminal and are fed back a description of the actions which took place within the game world. <a href=\"http://en.wikipedia.org/wiki/Online_text-based_role-playing_game\" target=\"_blank\" rel=\"external\">For more info see the Wikipedia entry on it</a>.</p>\n<p>Ok, now that we’re all familiar with the concept, lets first review why anyone would even want to build a text-based rpg in todays world of fancy <a href=\"http://us.battle.net/wow/en/\" target=\"_blank\" rel=\"external\">3D graphics, special effects and semi-realistic computer rendered player models</a>. I believe text based rpgs are a great start for programmers who want to build more serious/professional grade rpgs for several reasons. First, text based rpgs allow programmers to focus purely on the game engine itself without the overhead of graphics and or animation.</p>\n<p>Second, the core of any role playing game relies on the sophistication of its <a href=\"http://en.wikipedia.org/wiki/Role-playing_game_system\" target=\"_blank\" rel=\"external\">role playing system</a>; or the game mechanics. Without a unique and interesting core system, gamers will quickly dismiss your rpg as a rehash or just another D&amp;D clone.</p>\n<p>Lastly, from a programming perspective it’s a great excuse to practice data structures, socket programming and object oriented design. In this first part of series we’re going to begin by writing out the code base for the header class which will hold all the definitions for the objects which will appear within our game. However before we even write a single line of code lets first think about how we want all the game objects to fit together. Take a look at the picture below, and take note of all the objects that are identified. We have the <em>player</em>, <em>monster</em>, <em>items</em>, <em>dungeon</em> and <em>terminal </em>objects which are all clearly identified within our simple mock up. Although those won’t be our exact classes that we’ll code in a moment, the rough picture just lets us better understand the model.</p>\n<div class=\"justifiedgallery\"><br>  <img class=\"aligncenter\" src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\" alt=\"Game Sketch\" width=\"150\" height=\"150\"><br></div>\n\n<h2 id=\"Initial-Code\"><a href=\"#Initial-Code\" class=\"headerlink\" title=\"Initial Code\"></a>Initial Code</h2><p>Now lets start coding; call this file <strong>database.h,</strong> why we chose to name it database will be important in the future once we get to the multiplayer aspects of the game but enough talk.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iterator&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;locale&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> MUD</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">class</span> Player ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Item ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Room ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Monster ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Filter ;</div></pre></td></tr></table></figure>\n<p>Ok so now we have our libraries all included and the forward declarations for our classes planned out. Don’t worry about the inclusion of the not so common libraries such as locale, and sstream yet as we’ll introduce them in the future.</p>\n<h2 id=\"Item-and-Monster-Classes\"><a href=\"#Item-and-Monster-Classes\" class=\"headerlink\" title=\"Item and Monster Classes\"></a>Item and Monster Classes</h2><p>To start off we begin with the Item class. The item class as you can guess will represent items within our rpg game. Due to this being a simple rpg game we will restrict ourselves to just three types; weapons, armor and health. At this moment you might be wondering why don’t we just make three different classes, one for each item. However, as you can see below, we’ll just stick with this one class and generalize it.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Item</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span> TYPE &#123; WEAPON, ARMOR, HEALTH &#125; ;</div><div class=\"line\"></div><div class=\"line\">    Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) ;</div><div class=\"line\">    Item <span class=\"keyword\">operator</span>=( Item&amp; newItem ) ;</div><div class=\"line\">    Item( <span class=\"keyword\">void</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//~Item()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPower</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPower</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setVitality</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVitality</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHealth</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHealth</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> name )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">( TYPE newType )</span> </span>;</div><div class=\"line\">    <span class=\"function\">TYPE <span class=\"title\">getType</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mPower ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mVitality ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHealth ;</div><div class=\"line\">    TYPE mType ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> mAvailiable ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>The item class as you can look at above uses six different attributes, name, power, vitality, health, type and availability. We’ll discuss each of those further when we get to writing the actual methods for the class but for now try and think about how each of those attributes relate to the three different enum types or weapon, armor and health. Next, we are going to look at the monster class. This class being as its represents the monsters in our game should meet the following requirements. Monsters should have some measurement of life or hit points, a strength or attack power, a defense rating, a unique name and of course an indicator of whether or not they are currently in combat.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Monster</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence ) ;</div><div class=\"line\">    <span class=\"comment\">//~Monster() </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMaxHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newMaxHp )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> inCombat ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"The-Room-Class-and-Player-Classes\"><a href=\"#The-Room-Class-and-Player-Classes\" class=\"headerlink\" title=\"The Room Class and Player Classes\"></a>The Room Class and Player Classes</h2><p>For more sophisticated games our monster class would probably have attributes for magic, speed, steal-able items and experience points rewarded if your into the experience points style of rpgs. But for this simple game; strength, hp and defense will do. Moving along we are ready to begin sketching out the code for the room class. The room class is a class which will represent a single room within our dungeon and will also contain items, monsters and allow players to traverse them. In order to best represent the interconnected nature of the rooms as they would appear in our game setting the data structure of choice will be a simple 4-way(technically 8-way since each rooms allows backtracking) linked list with each direction being the familiar north, south, east and west. When I first designed this application several months ago the room class was by far the most difficult class conceptually since most of the game revolves around traversing the rooms, finding items(within rooms), slaying monsters(again within rooms), updating the state of the player(moving about rooms) and keeping the state of the dungeon intact(managing the rooms). As you can tell the room class is key to this simple game we’re making.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Room</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//Room( void ) ;</span></div><div class=\"line\">    <span class=\"comment\">//~Room()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> success ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addMonster</span><span class=\"params\">( Monster* newMonster )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Monster&amp; <span class=\"title\">getMonsterRef</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">killMonster</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">itemTaken</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">searchResponse</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">link</span><span class=\"params\">( <span class=\"keyword\">char</span> direction, Room&amp; room )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">north</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">south</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">east</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">west</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">( <span class=\"built_in\">string</span> newDescription )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getDescription</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setItem</span><span class=\"params\">( Item* newItem )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    Item* mItem ;</div><div class=\"line\">    Room* mNorth ;</div><div class=\"line\">    Room* mSouth ;</div><div class=\"line\">    Room* mEast ;</div><div class=\"line\">    Room* mWest ;</div><div class=\"line\">    <span class=\"built_in\">list</span>&lt; Monster* &gt; mMonsters ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mDescription ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>Next up is the player class, although for this simple game the player class resembles the monster class to an exceedingly high degree and you might be thinking “why are we not using inheritance from a general base class that has hp, str, def and such”. The answer to that question was due to me having originally planned out the player class to have multiple sub classes representing jobs such wizard, knight, archer, monk, ninja and such and to have different weapons and movement bonuses and so on until I realized that it was getting too large. So I cut all that stuff out and decided to keep things simple.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Player</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Player( <span class=\"built_in\">string</span> name, Room* start = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//~Player()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> dead ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getLocation</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">equip</span><span class=\"params\">( <span class=\"built_in\">string</span> itemName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">attack</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">move</span><span class=\"params\">( <span class=\"keyword\">char</span> direction )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">search</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">dead <span class=\"title\">death</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">    Room* mLocation ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    Item* mWeapon ;</div><div class=\"line\">    Item* mArmor ;</div><div class=\"line\">    dead mLife ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"The-Dungeon-Class\"><a href=\"#The-Dungeon-Class\" class=\"headerlink\" title=\"The Dungeon Class\"></a>The Dungeon Class</h2><p>Now here is where the class design gets a little tricky. The dungeon class, the class we’re coding next will make use of two std::vector&lt;&gt; objects to hold both the current players and the references to the various rooms within the game. Also an interesting method within the dungeon class which we’ll describe in detail later on in this tutorial series is the combatLoop() method. If you recall from earlier, the player class already has an attack() method so why does the entire dungeon need to be aware of which players are in combat? Remember that the goal of this tutorial is a multiplayer game so important aspects of the dungeon such as which players are alive and which monsters have been slain should be propagated to each player. Ok, so here is the code.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Dungeon</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Dungeon( <span class=\"keyword\">int</span> maxPlayers, <span class=\"keyword\">int</span> maxRooms ) ;</div><div class=\"line\">    <span class=\"comment\">//~Dungeon()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isComplete</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addPlayer</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addRoom</span><span class=\"params\">( Room* newRoom )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">removePlayer</span><span class=\"params\">( <span class=\"built_in\">string</span> playerName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePlayerStats</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">combatLoop</span><span class=\"params\">( Player&amp; hero, Monster&amp; villain )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">playerStatus</span><span class=\"params\">( Player&amp; player )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayHelp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxRooms ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxPlayers ;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt; Room* &gt; mRooms ;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt; Player* &gt; mPlayers ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"Utility-helpers-“Filter”-and-“Dispatch”\"><a href=\"#Utility-helpers-“Filter”-and-“Dispatch”\" class=\"headerlink\" title=\"Utility helpers, “Filter” and “Dispatch”\"></a>Utility helpers, “Filter” and “Dispatch”</h2><p>Lastly there are two utility classes I wrote to help facilitate the ever important parsing of the user inputs into the game terminal. Being that this game is text based, players will undoubtedly type in all sorts of crazy commands and awkward inputs. So the design of the two utility classes dispatch and filter were put in place to basically filter all incoming messages to ensure validity and to dispatch valid messages based on a simple protocol I crafted to handle commands. In other words, in order to avoid players attempting to cheat the game say by equipping from rooms which they currently don’t occupy or grabbing all the health items from other players the filter class serves to clean up dirty commands before they even reach the dungeon class.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Filter</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> valid ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">valid <span class=\"title\">validateMessage</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">chat</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Dispatch</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">extractCommand</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">extractValue</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>Ok folks that’s about all for now; just remember to stay tuned for the next parts of this tutorial which I’ll roll out when I get the time.</p>\n<p>-Thanks-</p>\n<p>Oh and here is the whole code if you’re in a hurry</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// database.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iterator&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;locale&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> MUD</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">class</span> Player ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Item ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Room ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Monster ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Filter ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Item</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"keyword\">enum</span> TYPE &#123; WEAPON, ARMOR, HEALTH &#125; ;</div><div class=\"line\"></div><div class=\"line\">      Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) ;</div><div class=\"line\">      Item <span class=\"keyword\">operator</span>=( Item&amp; newItem ) ;</div><div class=\"line\">      Item( <span class=\"keyword\">void</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//~Item()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPower</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPower</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setVitality</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVitality</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHealth</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHealth</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> name )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">( TYPE newType )</span> </span>;</div><div class=\"line\">      <span class=\"function\">TYPE <span class=\"title\">getType</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mPower ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mVitality ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHealth ;</div><div class=\"line\">      TYPE mType ;</div><div class=\"line\">      <span class=\"keyword\">bool</span> mAvailiable ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Monster</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence ) ;</div><div class=\"line\">      <span class=\"comment\">//~Monster() </span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMaxHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newMaxHp )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"keyword\">bool</span> inCombat ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Room </div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//Room( void ) ;</span></div><div class=\"line\">      <span class=\"comment\">//~Room()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> success ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addMonster</span><span class=\"params\">( Monster* newMonster )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Monster&amp; <span class=\"title\">getMonsterRef</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\">success <span class=\"title\">killMonster</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">itemTaken</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">searchResponse</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">success <span class=\"title\">link</span><span class=\"params\">( <span class=\"keyword\">char</span> direction, Room&amp; room )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">north</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">south</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">east</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">west</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">( <span class=\"built_in\">string</span> newDescription )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getDescription</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setItem</span><span class=\"params\">( Item* newItem )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      Item* mItem ;</div><div class=\"line\">      Room* mNorth ;</div><div class=\"line\">      Room* mSouth ;</div><div class=\"line\">      Room* mEast ;</div><div class=\"line\">      Room* mWest ;</div><div class=\"line\">      <span class=\"built_in\">list</span>&lt; Monster* &gt; mMonsters ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mDescription ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Player</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Player( <span class=\"built_in\">string</span> name, Room* start = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//~Player()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> dead ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getLocation</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">equip</span><span class=\"params\">( <span class=\"built_in\">string</span> itemName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">attack</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">move</span><span class=\"params\">( <span class=\"keyword\">char</span> direction )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">search</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">dead <span class=\"title\">death</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">      Room* mLocation ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      Item* mWeapon ;</div><div class=\"line\">      Item* mArmor ;</div><div class=\"line\">      dead mLife ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Dungeon( <span class=\"keyword\">int</span> maxPlayers, <span class=\"keyword\">int</span> maxRooms ) ;</div><div class=\"line\">      <span class=\"comment\">//~Dungeon()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isComplete</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addPlayer</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addRoom</span><span class=\"params\">( Room* newRoom )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">removePlayer</span><span class=\"params\">( <span class=\"built_in\">string</span> playerName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePlayerStats</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">combatLoop</span><span class=\"params\">( Player&amp; hero, Monster&amp; villain )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">playerStatus</span><span class=\"params\">( Player&amp; player )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayHelp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxRooms ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxPlayers ;</div><div class=\"line\">      <span class=\"built_in\">vector</span>&lt; Room* &gt; mRooms ;</div><div class=\"line\">      <span class=\"built_in\">vector</span>&lt; Player* &gt; mPlayers ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Filter</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> valid ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\">valid <span class=\"title\">validateMessage</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">chat</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">extractCommand</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">extractValue</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">  &#125; ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"/2011/06/08/textbasedrpgpart2\">Click here for part II</a></p>\n","site":{"data":{}},"excerpt":"<p>This is the first article in a multi-part series on how to develop a console based multiplayer MUD style RPG game. By the end of this series you will have a fully working console app that will run a typical client server model desktop application on Windows. This tutorial requires the Microsoft Visual C++ Compiler.</p>","more":"<p><a href=\"/2011/06/08/textbasedrpgpart2\">Click here for part II</a></p>\n<h2 id=\"Review-Material\"><a href=\"#Review-Material\" class=\"headerlink\" title=\"Review Material\"></a>Review Material</h2><p><a href=\"http://cslibrary.stanford.edu/102/\">Click here for a review on pointers if you need to brush up.</a><br><a href=\"http://www.cprogramming.com/tutorial/stl/iterators.html\">Click here for a review on C++ iterators, if you can’t follow it then read the pointer review first.</a></p>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>If you happen to be curious as to what exactly a “text based role playing game(rpg)” is in my own words a text based rpg is simply a game in which the player or players input commands into a terminal and are fed back a description of the actions which took place within the game world. <a href=\"http://en.wikipedia.org/wiki/Online_text-based_role-playing_game\">For more info see the Wikipedia entry on it</a>.</p>\n<p>Ok, now that we’re all familiar with the concept, lets first review why anyone would even want to build a text-based rpg in todays world of fancy <a href=\"http://us.battle.net/wow/en/\">3D graphics, special effects and semi-realistic computer rendered player models</a>. I believe text based rpgs are a great start for programmers who want to build more serious/professional grade rpgs for several reasons. First, text based rpgs allow programmers to focus purely on the game engine itself without the overhead of graphics and or animation.</p>\n<p>Second, the core of any role playing game relies on the sophistication of its <a href=\"http://en.wikipedia.org/wiki/Role-playing_game_system\">role playing system</a>; or the game mechanics. Without a unique and interesting core system, gamers will quickly dismiss your rpg as a rehash or just another D&amp;D clone.</p>\n<p>Lastly, from a programming perspective it’s a great excuse to practice data structures, socket programming and object oriented design. In this first part of series we’re going to begin by writing out the code base for the header class which will hold all the definitions for the objects which will appear within our game. However before we even write a single line of code lets first think about how we want all the game objects to fit together. Take a look at the picture below, and take note of all the objects that are identified. We have the <em>player</em>, <em>monster</em>, <em>items</em>, <em>dungeon</em> and <em>terminal </em>objects which are all clearly identified within our simple mock up. Although those won’t be our exact classes that we’ll code in a moment, the rough picture just lets us better understand the model.</p>\n<div class=\"justifiedgallery\"><br>  <img class=\"aligncenter\" src=\"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/Simple_C%2B%2B_Part_1_2.png\" alt=\"Game Sketch\" width=\"150\" height=\"150\" /><br></div>\n\n<h2 id=\"Initial-Code\"><a href=\"#Initial-Code\" class=\"headerlink\" title=\"Initial Code\"></a>Initial Code</h2><p>Now lets start coding; call this file <strong>database.h,</strong> why we chose to name it database will be important in the future once we get to the multiplayer aspects of the game but enough talk.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iterator&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;locale&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> MUD</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">class</span> Player ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Item ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Room ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Monster ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Filter ;</div></pre></td></tr></table></figure>\n<p>Ok so now we have our libraries all included and the forward declarations for our classes planned out. Don’t worry about the inclusion of the not so common libraries such as locale, and sstream yet as we’ll introduce them in the future.</p>\n<h2 id=\"Item-and-Monster-Classes\"><a href=\"#Item-and-Monster-Classes\" class=\"headerlink\" title=\"Item and Monster Classes\"></a>Item and Monster Classes</h2><p>To start off we begin with the Item class. The item class as you can guess will represent items within our rpg game. Due to this being a simple rpg game we will restrict ourselves to just three types; weapons, armor and health. At this moment you might be wondering why don’t we just make three different classes, one for each item. However, as you can see below, we’ll just stick with this one class and generalize it.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Item</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span> TYPE &#123; WEAPON, ARMOR, HEALTH &#125; ;</div><div class=\"line\"></div><div class=\"line\">    Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) ;</div><div class=\"line\">    Item <span class=\"keyword\">operator</span>=( Item&amp; newItem ) ;</div><div class=\"line\">    Item( <span class=\"keyword\">void</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//~Item()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPower</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPower</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setVitality</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVitality</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHealth</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHealth</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> name )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">( TYPE newType )</span> </span>;</div><div class=\"line\">    <span class=\"function\">TYPE <span class=\"title\">getType</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mPower ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mVitality ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHealth ;</div><div class=\"line\">    TYPE mType ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> mAvailiable ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>The item class as you can look at above uses six different attributes, name, power, vitality, health, type and availability. We’ll discuss each of those further when we get to writing the actual methods for the class but for now try and think about how each of those attributes relate to the three different enum types or weapon, armor and health. Next, we are going to look at the monster class. This class being as its represents the monsters in our game should meet the following requirements. Monsters should have some measurement of life or hit points, a strength or attack power, a defense rating, a unique name and of course an indicator of whether or not they are currently in combat.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Monster</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence ) ;</div><div class=\"line\">    <span class=\"comment\">//~Monster() </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMaxHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newMaxHp )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> inCombat ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"The-Room-Class-and-Player-Classes\"><a href=\"#The-Room-Class-and-Player-Classes\" class=\"headerlink\" title=\"The Room Class and Player Classes\"></a>The Room Class and Player Classes</h2><p>For more sophisticated games our monster class would probably have attributes for magic, speed, steal-able items and experience points rewarded if your into the experience points style of rpgs. But for this simple game; strength, hp and defense will do. Moving along we are ready to begin sketching out the code for the room class. The room class is a class which will represent a single room within our dungeon and will also contain items, monsters and allow players to traverse them. In order to best represent the interconnected nature of the rooms as they would appear in our game setting the data structure of choice will be a simple 4-way(technically 8-way since each rooms allows backtracking) linked list with each direction being the familiar north, south, east and west. When I first designed this application several months ago the room class was by far the most difficult class conceptually since most of the game revolves around traversing the rooms, finding items(within rooms), slaying monsters(again within rooms), updating the state of the player(moving about rooms) and keeping the state of the dungeon intact(managing the rooms). As you can tell the room class is key to this simple game we’re making.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Room</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//Room( void ) ;</span></div><div class=\"line\">    <span class=\"comment\">//~Room()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> success ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addMonster</span><span class=\"params\">( Monster* newMonster )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Monster&amp; <span class=\"title\">getMonsterRef</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">killMonster</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">itemTaken</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">searchResponse</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">link</span><span class=\"params\">( <span class=\"keyword\">char</span> direction, Room&amp; room )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">north</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">south</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">east</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">west</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">( <span class=\"built_in\">string</span> newDescription )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getDescription</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setItem</span><span class=\"params\">( Item* newItem )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    Item* mItem ;</div><div class=\"line\">    Room* mNorth ;</div><div class=\"line\">    Room* mSouth ;</div><div class=\"line\">    Room* mEast ;</div><div class=\"line\">    Room* mWest ;</div><div class=\"line\">    <span class=\"built_in\">list</span>&lt; Monster* &gt; mMonsters ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mDescription ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>Next up is the player class, although for this simple game the player class resembles the monster class to an exceedingly high degree and you might be thinking “why are we not using inheritance from a general base class that has hp, str, def and such”. The answer to that question was due to me having originally planned out the player class to have multiple sub classes representing jobs such wizard, knight, archer, monk, ninja and such and to have different weapons and movement bonuses and so on until I realized that it was getting too large. So I cut all that stuff out and decided to keep things simple.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Player</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Player( <span class=\"built_in\">string</span> name, Room* start = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//~Player()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> dead ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getLocation</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">equip</span><span class=\"params\">( <span class=\"built_in\">string</span> itemName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">attack</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">move</span><span class=\"params\">( <span class=\"keyword\">char</span> direction )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">search</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">dead <span class=\"title\">death</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">    Room* mLocation ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    Item* mWeapon ;</div><div class=\"line\">    Item* mArmor ;</div><div class=\"line\">    dead mLife ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"The-Dungeon-Class\"><a href=\"#The-Dungeon-Class\" class=\"headerlink\" title=\"The Dungeon Class\"></a>The Dungeon Class</h2><p>Now here is where the class design gets a little tricky. The dungeon class, the class we’re coding next will make use of two std::vector&lt;&gt; objects to hold both the current players and the references to the various rooms within the game. Also an interesting method within the dungeon class which we’ll describe in detail later on in this tutorial series is the combatLoop() method. If you recall from earlier, the player class already has an attack() method so why does the entire dungeon need to be aware of which players are in combat? Remember that the goal of this tutorial is a multiplayer game so important aspects of the dungeon such as which players are alive and which monsters have been slain should be propagated to each player. Ok, so here is the code.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Dungeon</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Dungeon( <span class=\"keyword\">int</span> maxPlayers, <span class=\"keyword\">int</span> maxRooms ) ;</div><div class=\"line\">    <span class=\"comment\">//~Dungeon()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isComplete</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addPlayer</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addRoom</span><span class=\"params\">( Room* newRoom )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">removePlayer</span><span class=\"params\">( <span class=\"built_in\">string</span> playerName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePlayerStats</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">combatLoop</span><span class=\"params\">( Player&amp; hero, Monster&amp; villain )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">playerStatus</span><span class=\"params\">( Player&amp; player )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayHelp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxRooms ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxPlayers ;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt; Room* &gt; mRooms ;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt; Player* &gt; mPlayers ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h2 id=\"Utility-helpers-“Filter”-and-“Dispatch”\"><a href=\"#Utility-helpers-“Filter”-and-“Dispatch”\" class=\"headerlink\" title=\"Utility helpers, “Filter” and “Dispatch”\"></a>Utility helpers, “Filter” and “Dispatch”</h2><p>Lastly there are two utility classes I wrote to help facilitate the ever important parsing of the user inputs into the game terminal. Being that this game is text based, players will undoubtedly type in all sorts of crazy commands and awkward inputs. So the design of the two utility classes dispatch and filter were put in place to basically filter all incoming messages to ensure validity and to dispatch valid messages based on a simple protocol I crafted to handle commands. In other words, in order to avoid players attempting to cheat the game say by equipping from rooms which they currently don’t occupy or grabbing all the health items from other players the filter class serves to clean up dirty commands before they even reach the dungeon class.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Filter</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> valid ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">valid <span class=\"title\">validateMessage</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">chat</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Dispatch</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">extractCommand</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">extractValue</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>Ok folks that’s about all for now; just remember to stay tuned for the next parts of this tutorial which I’ll roll out when I get the time.</p>\n<p>-Thanks-</p>\n<p>Oh and here is the whole code if you’re in a hurry</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// database.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;list&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iterator&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;locale&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span> ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> MUD</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">class</span> Player ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Item ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Room ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Monster ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch ;</div><div class=\"line\">  <span class=\"keyword\">class</span> Filter ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Item</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"keyword\">enum</span> TYPE &#123; WEAPON, ARMOR, HEALTH &#125; ;</div><div class=\"line\"></div><div class=\"line\">      Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) ;</div><div class=\"line\">      Item <span class=\"keyword\">operator</span>=( Item&amp; newItem ) ;</div><div class=\"line\">      Item( <span class=\"keyword\">void</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//~Item()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPower</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPower</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setVitality</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVitality</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHealth</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHealth</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> name )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">( TYPE newType )</span> </span>;</div><div class=\"line\">      <span class=\"function\">TYPE <span class=\"title\">getType</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mPower ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mVitality ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHealth ;</div><div class=\"line\">      TYPE mType ;</div><div class=\"line\">      <span class=\"keyword\">bool</span> mAvailiable ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Monster</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence ) ;</div><div class=\"line\">      <span class=\"comment\">//~Monster() </span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMaxHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newMaxHp )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"keyword\">bool</span> inCombat ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Room </div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//Room( void ) ;</span></div><div class=\"line\">      <span class=\"comment\">//~Room()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> success ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addMonster</span><span class=\"params\">( Monster* newMonster )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Monster&amp; <span class=\"title\">getMonsterRef</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\">success <span class=\"title\">killMonster</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">itemTaken</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">searchResponse</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">success <span class=\"title\">link</span><span class=\"params\">( <span class=\"keyword\">char</span> direction, Room&amp; room )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">north</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">south</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">east</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">Room&amp; <span class=\"title\">west</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">( <span class=\"built_in\">string</span> newDescription )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getDescription</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setItem</span><span class=\"params\">( Item* newItem )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      Item* mItem ;</div><div class=\"line\">      Room* mNorth ;</div><div class=\"line\">      Room* mSouth ;</div><div class=\"line\">      Room* mEast ;</div><div class=\"line\">      Room* mWest ;</div><div class=\"line\">      <span class=\"built_in\">list</span>&lt; Monster* &gt; mMonsters ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mDescription ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Player</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Player( <span class=\"built_in\">string</span> name, Room* start = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">      <span class=\"comment\">//~Player()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> dead ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getLocation</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">equip</span><span class=\"params\">( <span class=\"built_in\">string</span> itemName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">attack</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">move</span><span class=\"params\">( <span class=\"keyword\">char</span> direction )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">search</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\">dead <span class=\"title\">death</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">      Room* mLocation ;</div><div class=\"line\">      <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">      Item* mWeapon ;</div><div class=\"line\">      Item* mArmor ;</div><div class=\"line\">      dead mLife ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Dungeon</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Dungeon( <span class=\"keyword\">int</span> maxPlayers, <span class=\"keyword\">int</span> maxRooms ) ;</div><div class=\"line\">      <span class=\"comment\">//~Dungeon()</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isComplete</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addPlayer</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">addRoom</span><span class=\"params\">( Room* newRoom )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">removePlayer</span><span class=\"params\">( <span class=\"built_in\">string</span> playerName )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">generatePlayerStats</span><span class=\"params\">( Player* newPlayer )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">combatLoop</span><span class=\"params\">( Player&amp; hero, Monster&amp; villain )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span>* <span class=\"title\">playerStatus</span><span class=\"params\">( Player&amp; player )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayHelp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxRooms ;</div><div class=\"line\">      <span class=\"keyword\">int</span> mMaxPlayers ;</div><div class=\"line\">      <span class=\"built_in\">vector</span>&lt; Room* &gt; mRooms ;</div><div class=\"line\">      <span class=\"built_in\">vector</span>&lt; Player* &gt; mPlayers ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Filter</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> valid ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\">valid <span class=\"title\">validateMessage</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">chat</span><span class=\"params\">( <span class=\"built_in\">string</span> message )</span> </span>;</div><div class=\"line\">  &#125; ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">class</span> Dispatch</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">extractCommand</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">extractValue</span><span class=\"params\">( <span class=\"built_in\">string</span> fromFilter )</span> </span>;</div><div class=\"line\">  &#125; ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"/2011/06/08/textbasedrpgpart2\">Click here for part II</a></p>"},{"title":"Build A Text Based Multiplayer RPG Part II","date":"2011-06-08T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart2.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart2.JPG","comments":0,"_content":"In the second part of the series on building a multiplayer console based RPG we look at the unit test structure and create code to test the methods and properties of our Item class as was introduced in the first part.\n\n<!-- more -->\n[Click here for part I][link_part_1]\n[Click here for part III][link_part_3]\n\n# Intro\n\nIn this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.\n\nUsing a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.\n\n## The Test Singleton\n\nSo create a new C++ header file for your project and title it “Test.h” and type the following.\n\nIn this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.\n\nUsing a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.\n\nSo create a new C++ header file for your project and title it “Test.h” and type the following.\n```c\n// Filename Test.h\n#pragma once\n\n#include\"database.h\"\n\n#include<cassert>\n\nusing namespace MUD;\n```\n\nFor the test class we will implement it as a singleton. Singleton in short means that only a single reference to the class can be accessed at any given time during the program’s execution. However, there are some pitfalls to watch out for when using singleton for objects which clearly should not have a single instance, but in this case we only need to run our test cases once so having multiple test objects each running separate tests will only add confusion to our codebase. \n\n```c\n/*\n   The Test class uses the singleton design pattern in order to insure \n   that only one Test object will be availiable during program execution.\n */\nclass Test\n{\n  public:\n    // To call Test methods you have to get the Test instance reference.\n    static Test* get_instance();\n\n    // Place additional test methods here.\n    void test_item_class(void);\n\n  private:\n    // In singleton we have to keep the constuctor private\n    // to prevent accidental creation of more than one object.\n    Test(void){};\n    // Same deal with the copy constructor and the assignment operator,\n    // to prevent making duplicates.\n    Test(const Test& test_object){}; \n    Test& operator=(const Test& test_object){};\n\n    // This pointer will be the only instance of the Test class.\n    static Test* instance;\n};\n```\nNext, create a new C++ file and title it “Test.cpp”, now add the following lines of code.\n```c\n// Filename Test.cpp\n#include\"Test.h\"\n```\nIn order to utilize singleton we have to rely on a global reference to our Test instance which will only be initialized once as you can see below.\n```c\n// The only instance of the Test class we allow.\nTest* Test::instance = NULL; \n\n// Must be called in order to use the Test methods.\nTest* Test::get_instance()\n{\n  if(Test::instance == NULL)\n  {\n    instance = new Test;\n  }\n\n  return instance;\n}\n```\n\n<p>Therefore, whenever we want to run a method from our Test class we have to first get the reference and then call the proper test method.</p> <p>Enter the following code.</p> \n\n```c\nvoid Test::test_item_class(void)\n{\n```\n\n<p>If you recall from part 1 of this tutorial, the Item class represents things players can pick up and use to their advantage during the game. Thus we want to make sure that items can be named, have their effects set, their type set and lastly whether or not they are currently available within the dungeon for use. </p> <p>We’ll begin by testing the Item constructor, so enter the code below.</p> \n\n```c\n  // Item constructor test\n  Item test_sword(\"sword\", Item::WEAPON, 10, 0, 0);\n\n  assert(\"sword\" == test_sword.getName());\n  assert(Item::WEAPON == test_sword.getType());\n  assert(10 == test_sword.getPower());\n  assert(0 == test_sword.getVitality());\n  assert(0 == test_sword.getHealth());\n  assert(true == test_sword.mAvailiable);\n```\n<p>The idea with unit testing is that we check assertions or in other words we test our assumptions about how we believe the code should function. </p><p>There are many other types of testing such as functional testing and integration testing but all we need for this simple game is unit testing so don’t worry about testing becoming overkill we will get back to the game design soon enough.</p> <p>Next we test the assignment operator for the item class. Type the following,</p>\n\n```c\n// Item operator= test\nItem another_sword = test_sword;\n\nassert(\"sword\" == another_sword.getName());\nassert(Item::WEAPON == another_sword.getType());\nassert(10 == another_sword.getPower());\nassert(0 == another_sword.getVitality());\nassert(0 == another_sword.getHealth());\nassert(true == another_sword.mAvailiable);\n// The weapons shouldn't share the same memory address.\nassert(&another_sword != &test_sword);\n```\n\n<strong>Pay special attention to the last test.</strong>\n\n```c\n// The weapons shouldn't share the same memory address.\nassert(&another_sword != &test_sword);\n```\nOne of the reasons why C++ is considered a tough language to learn is that many programmers just want to avoid learning how pointers and references impact the use of C++’s object model. So lets check this out right quick with a short example.\n\nLets imagine the following scenario<strong><em>(don’t type these in yet since we haven’t implemented the actual methods in database.cpp)</em></strong>\n\n ```c\nItem woodsword = Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem barksword = woodsword;\n\ncout << \"barksword memory address = \" << &barksword << endl;\ncout << \"woodsword memory address = \" << &woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword.getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword.setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword.getName() << endl;\n```\n\nNote the different memory addresses of the two items. After changing the name of the “barksword” item, the “woodsword” remained intact. However, consider the next example...\n\n ```c\nItem* woodsword = new Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem* barksword = woodsword;\n\ncout << \"barksword memory address = \" << barksword << endl;\ncout << \"woodsword memory address = \" << woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword->setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\n```\n\nDid you notice that changing the name of the “barksword” also changed the name of the “woodsword” to “happysword”. In addition look again at the memory address’, they are exactly the same. Here the C++ compiler did exactly what we told it to do and nothing more but we were unaware that the assignment of pointers meant that the bark and wood swords now reference the same item in memory. Here is what we meant to say to the compiler.\n\n ```c\nItem* woodsword = new Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem* barksword = new Item(woodsword->getName(), woodsword->getType(),\nwoodsword->getPower(), woodsword->getVitality(),\nwoodsword->getHealth());\n\ncout << \"barksword memory address = \" << barksword << endl;\ncout << \"woodsword memory address = \" << woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword->setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\n```\n\nThus we meant for the attributes of the “woodsword” to be assigned to the “barksword” and for the “barksword” to have its own memory address. Now that we have demonstrated the reasoning behind the reference assertion in the unit test you can finally finish up the Item class test cases for the getter and setter methods.\n\n ```c\n  // Item void constructor test\n  Item void_sword;\n\n  assert(\"\" == void_sword.getName());\n  assert(Item::WEAPON == void_sword.getType());\n  assert(0 == void_sword.getPower());\n  assert(0 == void_sword.getVitality());\n  assert(0 == void_sword.getHealth());\n  assert(true == void_sword.mAvailiable);\n\n  // Item setters and getters test\n  void_sword.setPower(99);\n  void_sword.setName(\"steel sword\");\n  void_sword.setVitality(100);\n  void_sword.setType(Item::ARMOR);\n  void_sword.setHealth(36);\n  void_sword.mAvailiable = false;\n\n  assert(\"steel sword\" == void_sword.getName());\n  assert(Item::ARMOR == void_sword.getType());\n  assert(99 == void_sword.getPower());\n  assert(100 == void_sword.getVitality());\n  assert(36 == void_sword.getHealth());\n  assert(false == void_sword.mAvailiable);\n}\n```\n\nThat’s it for now. Oh wait, here is the whole source for Test.h and Test.cpp for reference.\n\n```c\n// Filename Test.h\n#pragma once\n\n#include\"database.h\"\n\n#include<cassert>\n\nusing namespace MUD;\n\n/*\n  The Test class uses the singleton design pattern in order to insure \n  that only one Test object will be availiable during program execution.\n*/\nclass Test\n{\n  public:\n    // To call Test methods you have to get the Test instance reference.\n    static Test* get_instance();\n\n    // Place additional test methods here.\n    void test_item_class(void);\n\n  private:\n    // In singleton we have to keep the constuctor private\n    // to prevent accidental creation of more than one object.\n    Test(void){};\n    // Same deal with the copy constructor and the assignment operator,\n    // to prevent making duplicates.\n    Test(const Test& test_object){}; \n    Test& operator=(const Test& test_object){};\n\n    // This pointer will be the only instance of the Test class.\n    static Test* instance;\n};\n```\n\n## Code Listing\n\n```c\n// Filename Test.cpp\n#include\"Test.h\"\n\n// The only instance of the Test class we allow.\nTest* Test::instance = NULL; \n\n// Must be called in order to use the Test methods.\nTest* Test::get_instance()\n{\n  if(Test::instance == NULL)\n  {\n    instance = new Test;\n  }\n\n  return instance;\n}\n\nvoid Test::test_item_class(void)\n{\n  // Item constructor test\n  Item test_sword(\"sword\", Item::WEAPON, 10, 0, 0);\n\n  assert(\"sword\" == test_sword.getName());\n  assert(Item::WEAPON == test_sword.getType());\n  assert(10 == test_sword.getPower());\n  assert(0 == test_sword.getVitality());\n  assert(0 == test_sword.getHealth());\n  assert(true == test_sword.mAvailiable);\n\n  // Item operator= test\n  Item another_sword = test_sword;\n\n  assert(\"sword\" == another_sword.getName());\n  assert(Item::WEAPON == another_sword.getType());\n  assert(10 == another_sword.getPower());\n  assert(0 == another_sword.getVitality());\n  assert(0 == another_sword.getHealth());\n  assert(true == another_sword.mAvailiable);\n  // The weapons shouldn't share the same memory address.\n  assert(&another_sword != &test_sword);\n\n  // Item void constructor test\n  Item void_sword;\n\n  assert(\"\" == void_sword.getName());\n  assert(Item::WEAPON == void_sword.getType());\n  assert(0 == void_sword.getPower());\n  assert(0 == void_sword.getVitality());\n  assert(0 == void_sword.getHealth());\n  assert(true == void_sword.mAvailiable);\n\n  // Item setters and getters test\n  void_sword.setPower(99);\n  void_sword.setName(\"steel sword\");\n  void_sword.setVitality(100);\n  void_sword.setType(Item::ARMOR);\n  void_sword.setHealth(36);\n  void_sword.mAvailiable = false;\n\n  assert(\"steel sword\" == void_sword.getName());\n  assert(Item::ARMOR == void_sword.getType());\n  assert(99 == void_sword.getPower());\n  assert(100 == void_sword.getVitality());\n  assert(36 == void_sword.getHealth());\n  assert(false == void_sword.mAvailiable);\n}\n```\n \n[Click here for part III][link_part_3]\n\n[link_part_1]: /2011/06/05/textbasedrpgpart1\n[link_part_3]: /2011/06/09/textbasedrpgpart3\n","source":"_posts/textbasedrpgpart2.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part II\ndate: 2011-06-08\ncategories: [tutorial]\ntags: [cpp]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart2.JPG \nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart2.JPG\ncomments: false\n---\nIn the second part of the series on building a multiplayer console based RPG we look at the unit test structure and create code to test the methods and properties of our Item class as was introduced in the first part.\n\n<!-- more -->\n[Click here for part I][link_part_1]\n[Click here for part III][link_part_3]\n\n# Intro\n\nIn this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.\n\nUsing a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.\n\n## The Test Singleton\n\nSo create a new C++ header file for your project and title it “Test.h” and type the following.\n\nIn this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.\n\nUsing a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.\n\nSo create a new C++ header file for your project and title it “Test.h” and type the following.\n```c\n// Filename Test.h\n#pragma once\n\n#include\"database.h\"\n\n#include<cassert>\n\nusing namespace MUD;\n```\n\nFor the test class we will implement it as a singleton. Singleton in short means that only a single reference to the class can be accessed at any given time during the program’s execution. However, there are some pitfalls to watch out for when using singleton for objects which clearly should not have a single instance, but in this case we only need to run our test cases once so having multiple test objects each running separate tests will only add confusion to our codebase. \n\n```c\n/*\n   The Test class uses the singleton design pattern in order to insure \n   that only one Test object will be availiable during program execution.\n */\nclass Test\n{\n  public:\n    // To call Test methods you have to get the Test instance reference.\n    static Test* get_instance();\n\n    // Place additional test methods here.\n    void test_item_class(void);\n\n  private:\n    // In singleton we have to keep the constuctor private\n    // to prevent accidental creation of more than one object.\n    Test(void){};\n    // Same deal with the copy constructor and the assignment operator,\n    // to prevent making duplicates.\n    Test(const Test& test_object){}; \n    Test& operator=(const Test& test_object){};\n\n    // This pointer will be the only instance of the Test class.\n    static Test* instance;\n};\n```\nNext, create a new C++ file and title it “Test.cpp”, now add the following lines of code.\n```c\n// Filename Test.cpp\n#include\"Test.h\"\n```\nIn order to utilize singleton we have to rely on a global reference to our Test instance which will only be initialized once as you can see below.\n```c\n// The only instance of the Test class we allow.\nTest* Test::instance = NULL; \n\n// Must be called in order to use the Test methods.\nTest* Test::get_instance()\n{\n  if(Test::instance == NULL)\n  {\n    instance = new Test;\n  }\n\n  return instance;\n}\n```\n\n<p>Therefore, whenever we want to run a method from our Test class we have to first get the reference and then call the proper test method.</p> <p>Enter the following code.</p> \n\n```c\nvoid Test::test_item_class(void)\n{\n```\n\n<p>If you recall from part 1 of this tutorial, the Item class represents things players can pick up and use to their advantage during the game. Thus we want to make sure that items can be named, have their effects set, their type set and lastly whether or not they are currently available within the dungeon for use. </p> <p>We’ll begin by testing the Item constructor, so enter the code below.</p> \n\n```c\n  // Item constructor test\n  Item test_sword(\"sword\", Item::WEAPON, 10, 0, 0);\n\n  assert(\"sword\" == test_sword.getName());\n  assert(Item::WEAPON == test_sword.getType());\n  assert(10 == test_sword.getPower());\n  assert(0 == test_sword.getVitality());\n  assert(0 == test_sword.getHealth());\n  assert(true == test_sword.mAvailiable);\n```\n<p>The idea with unit testing is that we check assertions or in other words we test our assumptions about how we believe the code should function. </p><p>There are many other types of testing such as functional testing and integration testing but all we need for this simple game is unit testing so don’t worry about testing becoming overkill we will get back to the game design soon enough.</p> <p>Next we test the assignment operator for the item class. Type the following,</p>\n\n```c\n// Item operator= test\nItem another_sword = test_sword;\n\nassert(\"sword\" == another_sword.getName());\nassert(Item::WEAPON == another_sword.getType());\nassert(10 == another_sword.getPower());\nassert(0 == another_sword.getVitality());\nassert(0 == another_sword.getHealth());\nassert(true == another_sword.mAvailiable);\n// The weapons shouldn't share the same memory address.\nassert(&another_sword != &test_sword);\n```\n\n<strong>Pay special attention to the last test.</strong>\n\n```c\n// The weapons shouldn't share the same memory address.\nassert(&another_sword != &test_sword);\n```\nOne of the reasons why C++ is considered a tough language to learn is that many programmers just want to avoid learning how pointers and references impact the use of C++’s object model. So lets check this out right quick with a short example.\n\nLets imagine the following scenario<strong><em>(don’t type these in yet since we haven’t implemented the actual methods in database.cpp)</em></strong>\n\n ```c\nItem woodsword = Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem barksword = woodsword;\n\ncout << \"barksword memory address = \" << &barksword << endl;\ncout << \"woodsword memory address = \" << &woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword.getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword.setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword.getName() << endl;\n```\n\nNote the different memory addresses of the two items. After changing the name of the “barksword” item, the “woodsword” remained intact. However, consider the next example...\n\n ```c\nItem* woodsword = new Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem* barksword = woodsword;\n\ncout << \"barksword memory address = \" << barksword << endl;\ncout << \"woodsword memory address = \" << woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword->setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\n```\n\nDid you notice that changing the name of the “barksword” also changed the name of the “woodsword” to “happysword”. In addition look again at the memory address’, they are exactly the same. Here the C++ compiler did exactly what we told it to do and nothing more but we were unaware that the assignment of pointers meant that the bark and wood swords now reference the same item in memory. Here is what we meant to say to the compiler.\n\n ```c\nItem* woodsword = new Item(\"woodsword\", Item::WEAPON, 9, 0, 0);\nItem* barksword = new Item(woodsword->getName(), woodsword->getType(),\nwoodsword->getPower(), woodsword->getVitality(),\nwoodsword->getHealth());\n\ncout << \"barksword memory address = \" << barksword << endl;\ncout << \"woodsword memory address = \" << woodsword << endl;\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\ncout << \"call barksword->setName(\\\"happysword\\\")\" << endl; \nbarksword->setName(\"happysword\");\ncout << \"woodsword->getName() == \" << woodsword->getName() << endl;\n```\n\nThus we meant for the attributes of the “woodsword” to be assigned to the “barksword” and for the “barksword” to have its own memory address. Now that we have demonstrated the reasoning behind the reference assertion in the unit test you can finally finish up the Item class test cases for the getter and setter methods.\n\n ```c\n  // Item void constructor test\n  Item void_sword;\n\n  assert(\"\" == void_sword.getName());\n  assert(Item::WEAPON == void_sword.getType());\n  assert(0 == void_sword.getPower());\n  assert(0 == void_sword.getVitality());\n  assert(0 == void_sword.getHealth());\n  assert(true == void_sword.mAvailiable);\n\n  // Item setters and getters test\n  void_sword.setPower(99);\n  void_sword.setName(\"steel sword\");\n  void_sword.setVitality(100);\n  void_sword.setType(Item::ARMOR);\n  void_sword.setHealth(36);\n  void_sword.mAvailiable = false;\n\n  assert(\"steel sword\" == void_sword.getName());\n  assert(Item::ARMOR == void_sword.getType());\n  assert(99 == void_sword.getPower());\n  assert(100 == void_sword.getVitality());\n  assert(36 == void_sword.getHealth());\n  assert(false == void_sword.mAvailiable);\n}\n```\n\nThat’s it for now. Oh wait, here is the whole source for Test.h and Test.cpp for reference.\n\n```c\n// Filename Test.h\n#pragma once\n\n#include\"database.h\"\n\n#include<cassert>\n\nusing namespace MUD;\n\n/*\n  The Test class uses the singleton design pattern in order to insure \n  that only one Test object will be availiable during program execution.\n*/\nclass Test\n{\n  public:\n    // To call Test methods you have to get the Test instance reference.\n    static Test* get_instance();\n\n    // Place additional test methods here.\n    void test_item_class(void);\n\n  private:\n    // In singleton we have to keep the constuctor private\n    // to prevent accidental creation of more than one object.\n    Test(void){};\n    // Same deal with the copy constructor and the assignment operator,\n    // to prevent making duplicates.\n    Test(const Test& test_object){}; \n    Test& operator=(const Test& test_object){};\n\n    // This pointer will be the only instance of the Test class.\n    static Test* instance;\n};\n```\n\n## Code Listing\n\n```c\n// Filename Test.cpp\n#include\"Test.h\"\n\n// The only instance of the Test class we allow.\nTest* Test::instance = NULL; \n\n// Must be called in order to use the Test methods.\nTest* Test::get_instance()\n{\n  if(Test::instance == NULL)\n  {\n    instance = new Test;\n  }\n\n  return instance;\n}\n\nvoid Test::test_item_class(void)\n{\n  // Item constructor test\n  Item test_sword(\"sword\", Item::WEAPON, 10, 0, 0);\n\n  assert(\"sword\" == test_sword.getName());\n  assert(Item::WEAPON == test_sword.getType());\n  assert(10 == test_sword.getPower());\n  assert(0 == test_sword.getVitality());\n  assert(0 == test_sword.getHealth());\n  assert(true == test_sword.mAvailiable);\n\n  // Item operator= test\n  Item another_sword = test_sword;\n\n  assert(\"sword\" == another_sword.getName());\n  assert(Item::WEAPON == another_sword.getType());\n  assert(10 == another_sword.getPower());\n  assert(0 == another_sword.getVitality());\n  assert(0 == another_sword.getHealth());\n  assert(true == another_sword.mAvailiable);\n  // The weapons shouldn't share the same memory address.\n  assert(&another_sword != &test_sword);\n\n  // Item void constructor test\n  Item void_sword;\n\n  assert(\"\" == void_sword.getName());\n  assert(Item::WEAPON == void_sword.getType());\n  assert(0 == void_sword.getPower());\n  assert(0 == void_sword.getVitality());\n  assert(0 == void_sword.getHealth());\n  assert(true == void_sword.mAvailiable);\n\n  // Item setters and getters test\n  void_sword.setPower(99);\n  void_sword.setName(\"steel sword\");\n  void_sword.setVitality(100);\n  void_sword.setType(Item::ARMOR);\n  void_sword.setHealth(36);\n  void_sword.mAvailiable = false;\n\n  assert(\"steel sword\" == void_sword.getName());\n  assert(Item::ARMOR == void_sword.getType());\n  assert(99 == void_sword.getPower());\n  assert(100 == void_sword.getVitality());\n  assert(36 == void_sword.getHealth());\n  assert(false == void_sword.mAvailiable);\n}\n```\n \n[Click here for part III][link_part_3]\n\n[link_part_1]: /2011/06/05/textbasedrpgpart1\n[link_part_3]: /2011/06/09/textbasedrpgpart3\n","slug":"textbasedrpgpart2","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3ie001hyswv2edvj98s","layout":"post","photos":[],"link":"","content":"<p>In the second part of the series on building a multiplayer console based RPG we look at the unit test structure and create code to test the methods and properties of our Item class as was introduced in the first part.</p>\n<a id=\"more\"></a>\n<p><a href=\"/2011/06/05/textbasedrpgpart1\">Click here for part I</a><br><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a></p>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>In this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.</p>\n<p>Using a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.</p>\n<h2 id=\"The-Test-Singleton\"><a href=\"#The-Test-Singleton\" class=\"headerlink\" title=\"The Test Singleton\"></a>The Test Singleton</h2><p>So create a new C++ header file for your project and title it “Test.h” and type the following.</p>\n<p>In this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.</p>\n<p>Using a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.</p>\n<p>So create a new C++ header file for your project and title it “Test.h” and type the following.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"database.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cassert&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD;</div></pre></td></tr></table></figure></p>\n<p>For the test class we will implement it as a singleton. Singleton in short means that only a single reference to the class can be accessed at any given time during the program’s execution. However, there are some pitfalls to watch out for when using singleton for objects which clearly should not have a single instance, but in this case we only need to run our test cases once so having multiple test objects each running separate tests will only add confusion to our codebase. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">   The Test class uses the singleton design pattern in order to insure </div><div class=\"line\">   that only one Test object will be availiable during program execution.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">class</span> Test</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"comment\">// To call Test methods you have to get the Test instance reference.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Test* <span class=\"title\">get_instance</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Place additional test methods here.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_item_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">// In singleton we have to keep the constuctor private</span></div><div class=\"line\">    <span class=\"comment\">// to prevent accidental creation of more than one object.</span></div><div class=\"line\">    Test(<span class=\"keyword\">void</span>)&#123;&#125;;</div><div class=\"line\">    <span class=\"comment\">// Same deal with the copy constructor and the assignment operator,</span></div><div class=\"line\">    <span class=\"comment\">// to prevent making duplicates.</span></div><div class=\"line\">    Test(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;; </div><div class=\"line\">    Test&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This pointer will be the only instance of the Test class.</span></div><div class=\"line\">    <span class=\"keyword\">static</span> Test* instance;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Next, create a new C++ file and title it “Test.cpp”, now add the following lines of code.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div></pre></td></tr></table></figure></p>\n<p>In order to utilize singleton we have to rely on a global reference to our Test instance which will only be initialized once as you can see below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The only instance of the Test class we allow.</span></div><div class=\"line\">Test* Test::instance = <span class=\"literal\">NULL</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Must be called in order to use the Test methods.</span></div><div class=\"line\">Test* Test::get_instance()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(Test::instance == <span class=\"literal\">NULL</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    instance = <span class=\"keyword\">new</span> Test;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Therefore, whenever we want to run a method from our Test class we have to first get the reference and then call the proper test method.</p> <p>Enter the following code.</p> \n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_item_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div></pre></td></tr></table></figure>\n<p>If you recall from part 1 of this tutorial, the Item class represents things players can pick up and use to their advantage during the game. Thus we want to make sure that items can be named, have their effects set, their type set and lastly whether or not they are currently available within the dungeon for use. </p> <p>We’ll begin by testing the Item constructor, so enter the code below.</p> \n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Item constructor test</span></div><div class=\"line\"><span class=\"function\">Item <span class=\"title\">test_sword</span><span class=\"params\">(<span class=\"string\">\"sword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">assert(<span class=\"string\">\"sword\"</span> == test_sword.getName());</div><div class=\"line\">assert(Item::WEAPON == test_sword.getType());</div><div class=\"line\">assert(<span class=\"number\">10</span> == test_sword.getPower());</div><div class=\"line\">assert(<span class=\"number\">0</span> == test_sword.getVitality());</div><div class=\"line\">assert(<span class=\"number\">0</span> == test_sword.getHealth());</div><div class=\"line\">assert(<span class=\"literal\">true</span> == test_sword.mAvailiable);</div></pre></td></tr></table></figure>\n<p>The idea with unit testing is that we check assertions or in other words we test our assumptions about how we believe the code should function. </p><p>There are many other types of testing such as functional testing and integration testing but all we need for this simple game is unit testing so don’t worry about testing becoming overkill we will get back to the game design soon enough.</p> <p>Next we test the assignment operator for the item class. Type the following,</p>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Item operator= test</span></div><div class=\"line\">Item another_sword = test_sword;</div><div class=\"line\"></div><div class=\"line\">assert(<span class=\"string\">\"sword\"</span> == another_sword.getName());</div><div class=\"line\">assert(Item::WEAPON == another_sword.getType());</div><div class=\"line\">assert(<span class=\"number\">10</span> == another_sword.getPower());</div><div class=\"line\">assert(<span class=\"number\">0</span> == another_sword.getVitality());</div><div class=\"line\">assert(<span class=\"number\">0</span> == another_sword.getHealth());</div><div class=\"line\">assert(<span class=\"literal\">true</span> == another_sword.mAvailiable);</div><div class=\"line\"><span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">assert(&amp;another_sword != &amp;test_sword);</div></pre></td></tr></table></figure>\n<p><strong>Pay special attention to the last test.</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">assert(&amp;another_sword != &amp;test_sword);</div></pre></td></tr></table></figure>\n<p>One of the reasons why C++ is considered a tough language to learn is that many programmers just want to avoid learning how pointers and references impact the use of C++’s object model. So lets check this out right quick with a short example.</p>\n<p>Lets imagine the following scenario<strong><em>(don’t type these in yet since we haven’t implemented the actual methods in database.cpp)</em></strong></p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item woodsword = Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item barksword = woodsword;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; &amp;barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; &amp;woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword.setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Note the different memory addresses of the two items. After changing the name of the “barksword” item, the “woodsword” remained intact. However, consider the next example…</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item* woodsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item* barksword = woodsword;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword-&gt;setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Did you notice that changing the name of the “barksword” also changed the name of the “woodsword” to “happysword”. In addition look again at the memory address’, they are exactly the same. Here the C++ compiler did exactly what we told it to do and nothing more but we were unaware that the assignment of pointers meant that the bark and wood swords now reference the same item in memory. Here is what we meant to say to the compiler.</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item* woodsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item* barksword = <span class=\"keyword\">new</span> Item(woodsword-&gt;getName(), woodsword-&gt;getType(),</div><div class=\"line\">woodsword-&gt;getPower(), woodsword-&gt;getVitality(),</div><div class=\"line\">woodsword-&gt;getHealth());</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword-&gt;setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Thus we meant for the attributes of the “woodsword” to be assigned to the “barksword” and for the “barksword” to have its own memory address. Now that we have demonstrated the reasoning behind the reference assertion in the unit test you can finally finish up the Item class test cases for the getter and setter methods.</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Item void constructor test</span></div><div class=\"line\">  Item void_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == void_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item setters and getters test</span></div><div class=\"line\">  void_sword.setPower(<span class=\"number\">99</span>);</div><div class=\"line\">  void_sword.setName(<span class=\"string\">\"steel sword\"</span>);</div><div class=\"line\">  void_sword.setVitality(<span class=\"number\">100</span>);</div><div class=\"line\">  void_sword.setType(Item::ARMOR);</div><div class=\"line\">  void_sword.setHealth(<span class=\"number\">36</span>);</div><div class=\"line\">  void_sword.mAvailiable = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"steel sword\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::ARMOR == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">99</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">100</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">36</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == void_sword.mAvailiable);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>That’s it for now. Oh wait, here is the whole source for Test.h and Test.cpp for reference.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"database.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cassert&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  The Test class uses the singleton design pattern in order to insure </div><div class=\"line\">  that only one Test object will be availiable during program execution.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">class</span> Test</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"comment\">// To call Test methods you have to get the Test instance reference.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Test* <span class=\"title\">get_instance</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Place additional test methods here.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_item_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">// In singleton we have to keep the constuctor private</span></div><div class=\"line\">    <span class=\"comment\">// to prevent accidental creation of more than one object.</span></div><div class=\"line\">    Test(<span class=\"keyword\">void</span>)&#123;&#125;;</div><div class=\"line\">    <span class=\"comment\">// Same deal with the copy constructor and the assignment operator,</span></div><div class=\"line\">    <span class=\"comment\">// to prevent making duplicates.</span></div><div class=\"line\">    Test(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;; </div><div class=\"line\">    Test&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This pointer will be the only instance of the Test class.</span></div><div class=\"line\">    <span class=\"keyword\">static</span> Test* instance;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"Code-Listing\"><a href=\"#Code-Listing\" class=\"headerlink\" title=\"Code Listing\"></a>Code Listing</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The only instance of the Test class we allow.</span></div><div class=\"line\">Test* Test::instance = <span class=\"literal\">NULL</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Must be called in order to use the Test methods.</span></div><div class=\"line\">Test* Test::get_instance()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(Test::instance == <span class=\"literal\">NULL</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    instance = <span class=\"keyword\">new</span> Test;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Test::test_item_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Item constructor test</span></div><div class=\"line\">  <span class=\"function\">Item <span class=\"title\">test_sword</span><span class=\"params\">(<span class=\"string\">\"sword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"sword\"</span> == test_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == test_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">10</span> == test_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == test_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == test_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == test_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item operator= test</span></div><div class=\"line\">  Item another_sword = test_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"sword\"</span> == another_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == another_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">10</span> == another_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == another_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == another_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == another_sword.mAvailiable);</div><div class=\"line\">  <span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">  assert(&amp;another_sword != &amp;test_sword);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item void constructor test</span></div><div class=\"line\">  Item void_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == void_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item setters and getters test</span></div><div class=\"line\">  void_sword.setPower(<span class=\"number\">99</span>);</div><div class=\"line\">  void_sword.setName(<span class=\"string\">\"steel sword\"</span>);</div><div class=\"line\">  void_sword.setVitality(<span class=\"number\">100</span>);</div><div class=\"line\">  void_sword.setType(Item::ARMOR);</div><div class=\"line\">  void_sword.setHealth(<span class=\"number\">36</span>);</div><div class=\"line\">  void_sword.mAvailiable = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"steel sword\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::ARMOR == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">99</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">100</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">36</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == void_sword.mAvailiable);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a></p>\n","site":{"data":{}},"excerpt":"<p>In the second part of the series on building a multiplayer console based RPG we look at the unit test structure and create code to test the methods and properties of our Item class as was introduced in the first part.</p>","more":"<p><a href=\"/2011/06/05/textbasedrpgpart1\">Click here for part I</a><br><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a></p>\n<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>In this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.</p>\n<p>Using a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.</p>\n<h2 id=\"The-Test-Singleton\"><a href=\"#The-Test-Singleton\" class=\"headerlink\" title=\"The Test Singleton\"></a>The Test Singleton</h2><p>So create a new C++ header file for your project and title it “Test.h” and type the following.</p>\n<p>In this part of the tutorial we are going to write the methods and implement unit testing for the Item class introduced in part 1.</p>\n<p>Using a test driven development style means that we have to think of the class design first as a set of tests which we want it to meet before we begin writing any of the code. However, before any of that we have to first design our test class.</p>\n<p>So create a new C++ header file for your project and title it “Test.h” and type the following.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"database.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cassert&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD;</div></pre></td></tr></table></figure></p>\n<p>For the test class we will implement it as a singleton. Singleton in short means that only a single reference to the class can be accessed at any given time during the program’s execution. However, there are some pitfalls to watch out for when using singleton for objects which clearly should not have a single instance, but in this case we only need to run our test cases once so having multiple test objects each running separate tests will only add confusion to our codebase. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">   The Test class uses the singleton design pattern in order to insure </div><div class=\"line\">   that only one Test object will be availiable during program execution.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">class</span> Test</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"comment\">// To call Test methods you have to get the Test instance reference.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Test* <span class=\"title\">get_instance</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Place additional test methods here.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_item_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">// In singleton we have to keep the constuctor private</span></div><div class=\"line\">    <span class=\"comment\">// to prevent accidental creation of more than one object.</span></div><div class=\"line\">    Test(<span class=\"keyword\">void</span>)&#123;&#125;;</div><div class=\"line\">    <span class=\"comment\">// Same deal with the copy constructor and the assignment operator,</span></div><div class=\"line\">    <span class=\"comment\">// to prevent making duplicates.</span></div><div class=\"line\">    Test(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;; </div><div class=\"line\">    Test&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This pointer will be the only instance of the Test class.</span></div><div class=\"line\">    <span class=\"keyword\">static</span> Test* instance;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Next, create a new C++ file and title it “Test.cpp”, now add the following lines of code.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div></pre></td></tr></table></figure></p>\n<p>In order to utilize singleton we have to rely on a global reference to our Test instance which will only be initialized once as you can see below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The only instance of the Test class we allow.</span></div><div class=\"line\">Test* Test::instance = <span class=\"literal\">NULL</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Must be called in order to use the Test methods.</span></div><div class=\"line\">Test* Test::get_instance()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(Test::instance == <span class=\"literal\">NULL</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    instance = <span class=\"keyword\">new</span> Test;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Therefore, whenever we want to run a method from our Test class we have to first get the reference and then call the proper test method.</p> <p>Enter the following code.</p> \n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_item_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div></pre></td></tr></table></figure>\n<p>If you recall from part 1 of this tutorial, the Item class represents things players can pick up and use to their advantage during the game. Thus we want to make sure that items can be named, have their effects set, their type set and lastly whether or not they are currently available within the dungeon for use. </p> <p>We’ll begin by testing the Item constructor, so enter the code below.</p> \n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Item constructor test</span></div><div class=\"line\"><span class=\"function\">Item <span class=\"title\">test_sword</span><span class=\"params\">(<span class=\"string\">\"sword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">assert(<span class=\"string\">\"sword\"</span> == test_sword.getName());</div><div class=\"line\">assert(Item::WEAPON == test_sword.getType());</div><div class=\"line\">assert(<span class=\"number\">10</span> == test_sword.getPower());</div><div class=\"line\">assert(<span class=\"number\">0</span> == test_sword.getVitality());</div><div class=\"line\">assert(<span class=\"number\">0</span> == test_sword.getHealth());</div><div class=\"line\">assert(<span class=\"literal\">true</span> == test_sword.mAvailiable);</div></pre></td></tr></table></figure>\n<p>The idea with unit testing is that we check assertions or in other words we test our assumptions about how we believe the code should function. </p><p>There are many other types of testing such as functional testing and integration testing but all we need for this simple game is unit testing so don’t worry about testing becoming overkill we will get back to the game design soon enough.</p> <p>Next we test the assignment operator for the item class. Type the following,</p>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Item operator= test</span></div><div class=\"line\">Item another_sword = test_sword;</div><div class=\"line\"></div><div class=\"line\">assert(<span class=\"string\">\"sword\"</span> == another_sword.getName());</div><div class=\"line\">assert(Item::WEAPON == another_sword.getType());</div><div class=\"line\">assert(<span class=\"number\">10</span> == another_sword.getPower());</div><div class=\"line\">assert(<span class=\"number\">0</span> == another_sword.getVitality());</div><div class=\"line\">assert(<span class=\"number\">0</span> == another_sword.getHealth());</div><div class=\"line\">assert(<span class=\"literal\">true</span> == another_sword.mAvailiable);</div><div class=\"line\"><span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">assert(&amp;another_sword != &amp;test_sword);</div></pre></td></tr></table></figure>\n<p><strong>Pay special attention to the last test.</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">assert(&amp;another_sword != &amp;test_sword);</div></pre></td></tr></table></figure>\n<p>One of the reasons why C++ is considered a tough language to learn is that many programmers just want to avoid learning how pointers and references impact the use of C++’s object model. So lets check this out right quick with a short example.</p>\n<p>Lets imagine the following scenario<strong><em>(don’t type these in yet since we haven’t implemented the actual methods in database.cpp)</em></strong></p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item woodsword = Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item barksword = woodsword;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; &amp;barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; &amp;woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword.setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Note the different memory addresses of the two items. After changing the name of the “barksword” item, the “woodsword” remained intact. However, consider the next example…</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item* woodsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item* barksword = woodsword;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword-&gt;setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Did you notice that changing the name of the “barksword” also changed the name of the “woodsword” to “happysword”. In addition look again at the memory address’, they are exactly the same. Here the C++ compiler did exactly what we told it to do and nothing more but we were unaware that the assignment of pointers meant that the bark and wood swords now reference the same item in memory. Here is what we meant to say to the compiler.</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item* woodsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">Item* barksword = <span class=\"keyword\">new</span> Item(woodsword-&gt;getName(), woodsword-&gt;getType(),</div><div class=\"line\">woodsword-&gt;getPower(), woodsword-&gt;getVitality(),</div><div class=\"line\">woodsword-&gt;getHealth());</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"barksword memory address = \"</span> &lt;&lt; barksword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword memory address = \"</span> &lt;&lt; woodsword &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"call barksword-&gt;setName(\\\"happysword\\\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">barksword-&gt;setName(<span class=\"string\">\"happysword\"</span>);</div><div class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"woodsword-&gt;getName() == \"</span> &lt;&lt; woodsword-&gt;getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div></pre></td></tr></table></figure>\n<p>Thus we meant for the attributes of the “woodsword” to be assigned to the “barksword” and for the “barksword” to have its own memory address. Now that we have demonstrated the reasoning behind the reference assertion in the unit test you can finally finish up the Item class test cases for the getter and setter methods.</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Item void constructor test</span></div><div class=\"line\">  Item void_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == void_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item setters and getters test</span></div><div class=\"line\">  void_sword.setPower(<span class=\"number\">99</span>);</div><div class=\"line\">  void_sword.setName(<span class=\"string\">\"steel sword\"</span>);</div><div class=\"line\">  void_sword.setVitality(<span class=\"number\">100</span>);</div><div class=\"line\">  void_sword.setType(Item::ARMOR);</div><div class=\"line\">  void_sword.setHealth(<span class=\"number\">36</span>);</div><div class=\"line\">  void_sword.mAvailiable = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"steel sword\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::ARMOR == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">99</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">100</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">36</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == void_sword.mAvailiable);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>That’s it for now. Oh wait, here is the whole source for Test.h and Test.cpp for reference.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.h</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"database.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cassert&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  The Test class uses the singleton design pattern in order to insure </div><div class=\"line\">  that only one Test object will be availiable during program execution.</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">class</span> Test</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"comment\">// To call Test methods you have to get the Test instance reference.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Test* <span class=\"title\">get_instance</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Place additional test methods here.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_item_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">// In singleton we have to keep the constuctor private</span></div><div class=\"line\">    <span class=\"comment\">// to prevent accidental creation of more than one object.</span></div><div class=\"line\">    Test(<span class=\"keyword\">void</span>)&#123;&#125;;</div><div class=\"line\">    <span class=\"comment\">// Same deal with the copy constructor and the assignment operator,</span></div><div class=\"line\">    <span class=\"comment\">// to prevent making duplicates.</span></div><div class=\"line\">    Test(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;; </div><div class=\"line\">    Test&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Test&amp; test_object)&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// This pointer will be the only instance of the Test class.</span></div><div class=\"line\">    <span class=\"keyword\">static</span> Test* instance;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"Code-Listing\"><a href=\"#Code-Listing\" class=\"headerlink\" title=\"Code Listing\"></a>Code Listing</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename Test.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The only instance of the Test class we allow.</span></div><div class=\"line\">Test* Test::instance = <span class=\"literal\">NULL</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Must be called in order to use the Test methods.</span></div><div class=\"line\">Test* Test::get_instance()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(Test::instance == <span class=\"literal\">NULL</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    instance = <span class=\"keyword\">new</span> Test;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> instance;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Test::test_item_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Item constructor test</span></div><div class=\"line\">  <span class=\"function\">Item <span class=\"title\">test_sword</span><span class=\"params\">(<span class=\"string\">\"sword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"sword\"</span> == test_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == test_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">10</span> == test_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == test_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == test_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == test_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item operator= test</span></div><div class=\"line\">  Item another_sword = test_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"sword\"</span> == another_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == another_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">10</span> == another_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == another_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == another_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == another_sword.mAvailiable);</div><div class=\"line\">  <span class=\"comment\">// The weapons shouldn't share the same memory address.</span></div><div class=\"line\">  assert(&amp;another_sword != &amp;test_sword);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item void constructor test</span></div><div class=\"line\">  Item void_sword;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::WEAPON == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">0</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == void_sword.mAvailiable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Item setters and getters test</span></div><div class=\"line\">  void_sword.setPower(<span class=\"number\">99</span>);</div><div class=\"line\">  void_sword.setName(<span class=\"string\">\"steel sword\"</span>);</div><div class=\"line\">  void_sword.setVitality(<span class=\"number\">100</span>);</div><div class=\"line\">  void_sword.setType(Item::ARMOR);</div><div class=\"line\">  void_sword.setHealth(<span class=\"number\">36</span>);</div><div class=\"line\">  void_sword.mAvailiable = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"steel sword\"</span> == void_sword.getName());</div><div class=\"line\">  assert(Item::ARMOR == void_sword.getType());</div><div class=\"line\">  assert(<span class=\"number\">99</span> == void_sword.getPower());</div><div class=\"line\">  assert(<span class=\"number\">100</span> == void_sword.getVitality());</div><div class=\"line\">  assert(<span class=\"number\">36</span> == void_sword.getHealth());</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == void_sword.mAvailiable);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a></p>"},{"title":"Build A Text Based Multiplayer RPG Part III","date":"2011-06-09T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart3.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart3.JPG","comments":0,"_content":"After writing the code to support the unit test in part II, beginning in this part we'll look at the code behind the test to verify that our test are sound and correct.\nWhere we left off we had just implemented the unit test for the Item class. However, before we can even run the test we have to first write out the methods. So create a new C++ file, title it “database.cpp” and add it to your project’s directory. Now go ahead and type in the following.\n\n<!-- more -->\n[Click here for part II][link_part_2]\n[Click here for part IV][link_part_4]\n\n```c\n// Filename database.cpp\n#include \"Database.h\"\n\nusing namespace MUD ;\n```\nFor the first method of the Item class we’ll define the method for the Item’s constructor. The Item constructor will just take a single argument for each of its attributes as we defined in the “database.h” file. Here is the Item class definition in the header file again as a refresher.\n```c\nclass Item\n{\n  public:\n    enum TYPE { WEAPON, ARMOR, HEALTH } ;\n\n    Item( string name, Item::TYPE type, int power, int vitality, int health ) ;\n    Item operator=( Item& newItem ) ;\n    Item( void ) ;\n    //~Item()\n\n    void setPower( int value ) ;\n    int getPower( void ) ;\n\n    void setVitality( int value ) ;\n    int getVitality( void ) ;\n\n    void setHealth( int value ) ;\n    int getHealth( void ) ;\n\n    void setName( string name ) ;\n    string getName( void ) ;\n\n    void setType( TYPE newType ) ;\n    TYPE getType( void ) ;\n\n    string mName ;\n    int mPower ;\n    int mVitality ;\n    int mHealth ;\n    TYPE mType ;\n    bool mAvailiable ;\n} ;\n```\nAs you’ll notice there are five attributes which have getter and setter methods while the sixth attribute of the Item class “mAvailiable” will not require getter and setter methods. Thus the constructor should allow a new Item to be created given some initial values for each of the five attributes we mentioned.\n```c\n  Item::Item( string name, Item::TYPE type, int power, int vitality, int health ) \n: mName(name), mType(type), mPower(power), mVitality(vitality), \n  mHealth(health)\n{\n  mAvailiable = true ;\n}\n```\nNext we’ll overload the assignment operator for the Item class. For this operator overload we just want to the copy one Item’s attributes to another Item’s.  \n```c\nItem Item::operator=( Item& newItem )\n{\n  setName( newItem.getName() ) ;\n  setType( newItem.getType() ) ;\n  setPower( newItem.getPower() ) ;\n  setVitality( newItem.getVitality() ) ;\n  setHealth( newItem.getHealth() ) ;\n  mAvailiable = newItem.mAvailiable ;\n\n  return *this ;\n}\n```\nAfterwards we turn our attention to the Item class’ default constructor. The default constructor for the Item should just create a blank Item that will be completely useless but still available for pickup. In addition since the item will not have a name, we can always check for the condition when a Item was accidently created in our game by seeing if the Item’s name is the empty string.\n```c\n// The default Item::TYPE doesn't have to be Item::TYPE::WEAPON\n// as long as its not NULL its fine.\nItem::Item( void )\n{\n  setName( \"\" ) ;\n  setType( Item::WEAPON ) ;\n  setPower( 0 ) ;\n  setVitality( 0 ) ;\n  setHealth( 0 ) ;\n  mAvailiable = true ;\n}\n```\nThe remaining methods are the getters and setters for the attributes power, vitality, health, name and type. Getters and setters in general for the C++ language are a pair of methods that allow you to write a value to an attribute or read the current value from an attribute. Anyways here they are below. \n```c\nvoid Item::setPower( int value )\n{\n  mPower = value ;\n}\n\nint Item::getPower( void )\n{\n  return mPower ;\n}\n\nvoid Item::setVitality( int value )\n{\n  mVitality = value ;\n}\n\nint Item::getVitality( void )\n{\n  return mVitality ;\n}\n\nvoid Item::setHealth( int value )\n{\n  mHealth = value ;\n}\n\nint Item::getHealth( void )\n{\n  return mHealth ;\n}\n\nvoid Item::setName( string name )\n{\n  mName = name ;\n}\n\nstring Item::getName( void )\n{\n  return mName ;\n}\n\nvoid Item::setType( Item::TYPE newType )\n{\n  mType = newType ;\n}\n\nItem::TYPE Item::getType( void )\n{\n  return mType ;\n}\n```\nLastly we’ll run the test for our Item class; to begin create a new C++ file and title it “main.cpp”. Add the the code below to “main.cpp”. Remember that to use our Test object we have to call the “get_instance()” method since we created Test as a singleton. \n```c\n//Filename main.cpp\n#include \"Database.h\"\n#include\"Test.h\"\n\nusing namespace MUD ;\n\nint main(void)\n{\n  Test::get_instance()->test_item_class();\n}\n```\nOk, that’s it for today.\n\n[link_part_2]: /2011/06/08/textbasedrpgpart2\n[link_part_4]: /2011/06/11/textbasedrpgpart4\n","source":"_posts/textbasedrpgpart3.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part III\ndate: 2011-06-09\ncategories: [tutorial]\ntags: [cpp]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart3.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart3.JPG\ncomments: false\n---\nAfter writing the code to support the unit test in part II, beginning in this part we'll look at the code behind the test to verify that our test are sound and correct.\nWhere we left off we had just implemented the unit test for the Item class. However, before we can even run the test we have to first write out the methods. So create a new C++ file, title it “database.cpp” and add it to your project’s directory. Now go ahead and type in the following.\n\n<!-- more -->\n[Click here for part II][link_part_2]\n[Click here for part IV][link_part_4]\n\n```c\n// Filename database.cpp\n#include \"Database.h\"\n\nusing namespace MUD ;\n```\nFor the first method of the Item class we’ll define the method for the Item’s constructor. The Item constructor will just take a single argument for each of its attributes as we defined in the “database.h” file. Here is the Item class definition in the header file again as a refresher.\n```c\nclass Item\n{\n  public:\n    enum TYPE { WEAPON, ARMOR, HEALTH } ;\n\n    Item( string name, Item::TYPE type, int power, int vitality, int health ) ;\n    Item operator=( Item& newItem ) ;\n    Item( void ) ;\n    //~Item()\n\n    void setPower( int value ) ;\n    int getPower( void ) ;\n\n    void setVitality( int value ) ;\n    int getVitality( void ) ;\n\n    void setHealth( int value ) ;\n    int getHealth( void ) ;\n\n    void setName( string name ) ;\n    string getName( void ) ;\n\n    void setType( TYPE newType ) ;\n    TYPE getType( void ) ;\n\n    string mName ;\n    int mPower ;\n    int mVitality ;\n    int mHealth ;\n    TYPE mType ;\n    bool mAvailiable ;\n} ;\n```\nAs you’ll notice there are five attributes which have getter and setter methods while the sixth attribute of the Item class “mAvailiable” will not require getter and setter methods. Thus the constructor should allow a new Item to be created given some initial values for each of the five attributes we mentioned.\n```c\n  Item::Item( string name, Item::TYPE type, int power, int vitality, int health ) \n: mName(name), mType(type), mPower(power), mVitality(vitality), \n  mHealth(health)\n{\n  mAvailiable = true ;\n}\n```\nNext we’ll overload the assignment operator for the Item class. For this operator overload we just want to the copy one Item’s attributes to another Item’s.  \n```c\nItem Item::operator=( Item& newItem )\n{\n  setName( newItem.getName() ) ;\n  setType( newItem.getType() ) ;\n  setPower( newItem.getPower() ) ;\n  setVitality( newItem.getVitality() ) ;\n  setHealth( newItem.getHealth() ) ;\n  mAvailiable = newItem.mAvailiable ;\n\n  return *this ;\n}\n```\nAfterwards we turn our attention to the Item class’ default constructor. The default constructor for the Item should just create a blank Item that will be completely useless but still available for pickup. In addition since the item will not have a name, we can always check for the condition when a Item was accidently created in our game by seeing if the Item’s name is the empty string.\n```c\n// The default Item::TYPE doesn't have to be Item::TYPE::WEAPON\n// as long as its not NULL its fine.\nItem::Item( void )\n{\n  setName( \"\" ) ;\n  setType( Item::WEAPON ) ;\n  setPower( 0 ) ;\n  setVitality( 0 ) ;\n  setHealth( 0 ) ;\n  mAvailiable = true ;\n}\n```\nThe remaining methods are the getters and setters for the attributes power, vitality, health, name and type. Getters and setters in general for the C++ language are a pair of methods that allow you to write a value to an attribute or read the current value from an attribute. Anyways here they are below. \n```c\nvoid Item::setPower( int value )\n{\n  mPower = value ;\n}\n\nint Item::getPower( void )\n{\n  return mPower ;\n}\n\nvoid Item::setVitality( int value )\n{\n  mVitality = value ;\n}\n\nint Item::getVitality( void )\n{\n  return mVitality ;\n}\n\nvoid Item::setHealth( int value )\n{\n  mHealth = value ;\n}\n\nint Item::getHealth( void )\n{\n  return mHealth ;\n}\n\nvoid Item::setName( string name )\n{\n  mName = name ;\n}\n\nstring Item::getName( void )\n{\n  return mName ;\n}\n\nvoid Item::setType( Item::TYPE newType )\n{\n  mType = newType ;\n}\n\nItem::TYPE Item::getType( void )\n{\n  return mType ;\n}\n```\nLastly we’ll run the test for our Item class; to begin create a new C++ file and title it “main.cpp”. Add the the code below to “main.cpp”. Remember that to use our Test object we have to call the “get_instance()” method since we created Test as a singleton. \n```c\n//Filename main.cpp\n#include \"Database.h\"\n#include\"Test.h\"\n\nusing namespace MUD ;\n\nint main(void)\n{\n  Test::get_instance()->test_item_class();\n}\n```\nOk, that’s it for today.\n\n[link_part_2]: /2011/06/08/textbasedrpgpart2\n[link_part_4]: /2011/06/11/textbasedrpgpart4\n","slug":"textbasedrpgpart3","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3ig001lyswvpxru4c1t","layout":"post","photos":[],"link":"","content":"<p>After writing the code to support the unit test in part II, beginning in this part we’ll look at the code behind the test to verify that our test are sound and correct.<br>Where we left off we had just implemented the unit test for the Item class. However, before we can even run the test we have to first write out the methods. So create a new C++ file, title it “database.cpp” and add it to your project’s directory. Now go ahead and type in the following.</p>\n<a id=\"more\"></a>\n<p><a href=\"/2011/06/08/textbasedrpgpart2\">Click here for part II</a><br><a href=\"/2011/06/11/textbasedrpgpart4\">Click here for part IV</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename database.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Database.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD ;</div></pre></td></tr></table></figure>\n<p>For the first method of the Item class we’ll define the method for the Item’s constructor. The Item constructor will just take a single argument for each of its attributes as we defined in the “database.h” file. Here is the Item class definition in the header file again as a refresher.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Item</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span> TYPE &#123; WEAPON, ARMOR, HEALTH &#125; ;</div><div class=\"line\"></div><div class=\"line\">    Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) ;</div><div class=\"line\">    Item <span class=\"keyword\">operator</span>=( Item&amp; newItem ) ;</div><div class=\"line\">    Item( <span class=\"keyword\">void</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//~Item()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPower</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPower</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setVitality</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVitality</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHealth</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHealth</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> name )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">( TYPE newType )</span> </span>;</div><div class=\"line\">    <span class=\"function\">TYPE <span class=\"title\">getType</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mPower ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mVitality ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHealth ;</div><div class=\"line\">    TYPE mType ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> mAvailiable ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure></p>\n<p>As you’ll notice there are five attributes which have getter and setter methods while the sixth attribute of the Item class “mAvailiable” will not require getter and setter methods. Thus the constructor should allow a new Item to be created given some initial values for each of the five attributes we mentioned.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Item::Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) </div><div class=\"line\">: mName(name), mType(type), mPower(power), mVitality(vitality), </div><div class=\"line\">  mHealth(health)</div><div class=\"line\">&#123;</div><div class=\"line\">  mAvailiable = <span class=\"literal\">true</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Next we’ll overload the assignment operator for the Item class. For this operator overload we just want to the copy one Item’s attributes to another Item’s.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item Item::<span class=\"keyword\">operator</span>=( Item&amp; newItem )</div><div class=\"line\">&#123;</div><div class=\"line\">  setName( newItem.getName() ) ;</div><div class=\"line\">  setType( newItem.getType() ) ;</div><div class=\"line\">  setPower( newItem.getPower() ) ;</div><div class=\"line\">  setVitality( newItem.getVitality() ) ;</div><div class=\"line\">  setHealth( newItem.getHealth() ) ;</div><div class=\"line\">  mAvailiable = newItem.mAvailiable ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Afterwards we turn our attention to the Item class’ default constructor. The default constructor for the Item should just create a blank Item that will be completely useless but still available for pickup. In addition since the item will not have a name, we can always check for the condition when a Item was accidently created in our game by seeing if the Item’s name is the empty string.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The default Item::TYPE doesn't have to be Item::TYPE::WEAPON</span></div><div class=\"line\"><span class=\"comment\">// as long as its not NULL its fine.</span></div><div class=\"line\">Item::Item( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  setName( <span class=\"string\">\"\"</span> ) ;</div><div class=\"line\">  setType( Item::WEAPON ) ;</div><div class=\"line\">  setPower( <span class=\"number\">0</span> ) ;</div><div class=\"line\">  setVitality( <span class=\"number\">0</span> ) ;</div><div class=\"line\">  setHealth( <span class=\"number\">0</span> ) ;</div><div class=\"line\">  mAvailiable = <span class=\"literal\">true</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The remaining methods are the getters and setters for the attributes power, vitality, health, name and type. Getters and setters in general for the C++ language are a pair of methods that allow you to write a value to an attribute or read the current value from an attribute. Anyways here they are below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Item::setPower( <span class=\"keyword\">int</span> value )</div><div class=\"line\">&#123;</div><div class=\"line\">  mPower = value ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Item::getPower( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mPower ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Item::setVitality( <span class=\"keyword\">int</span> value )</div><div class=\"line\">&#123;</div><div class=\"line\">  mVitality = value ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Item::getVitality( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mVitality ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Item::setHealth( <span class=\"keyword\">int</span> value )</div><div class=\"line\">&#123;</div><div class=\"line\">  mHealth = value ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Item::getHealth( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mHealth ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Item::setName( <span class=\"built_in\">string</span> name )</div><div class=\"line\">&#123;</div><div class=\"line\">  mName = name ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Item::getName( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Item::setType( Item::TYPE newType )</div><div class=\"line\">&#123;</div><div class=\"line\">  mType = newType ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Item::TYPE Item::getType( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mType ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Lastly we’ll run the test for our Item class; to begin create a new C++ file and title it “main.cpp”. Add the the code below to “main.cpp”. Remember that to use our Test object we have to call the “get_instance()” method since we created Test as a singleton.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Filename main.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Database.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  Test::get_instance()-&gt;test_item_class();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Ok, that’s it for today.</p>\n","site":{"data":{}},"excerpt":"<p>After writing the code to support the unit test in part II, beginning in this part we’ll look at the code behind the test to verify that our test are sound and correct.<br>Where we left off we had just implemented the unit test for the Item class. However, before we can even run the test we have to first write out the methods. So create a new C++ file, title it “database.cpp” and add it to your project’s directory. Now go ahead and type in the following.</p>","more":"<p><a href=\"/2011/06/08/textbasedrpgpart2\">Click here for part II</a><br><a href=\"/2011/06/11/textbasedrpgpart4\">Click here for part IV</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Filename database.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Database.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD ;</div></pre></td></tr></table></figure>\n<p>For the first method of the Item class we’ll define the method for the Item’s constructor. The Item constructor will just take a single argument for each of its attributes as we defined in the “database.h” file. Here is the Item class definition in the header file again as a refresher.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Item</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span> TYPE &#123; WEAPON, ARMOR, HEALTH &#125; ;</div><div class=\"line\"></div><div class=\"line\">    Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) ;</div><div class=\"line\">    Item <span class=\"keyword\">operator</span>=( Item&amp; newItem ) ;</div><div class=\"line\">    Item( <span class=\"keyword\">void</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//~Item()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPower</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPower</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setVitality</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getVitality</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHealth</span><span class=\"params\">( <span class=\"keyword\">int</span> value )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHealth</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> name )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">( TYPE newType )</span> </span>;</div><div class=\"line\">    <span class=\"function\">TYPE <span class=\"title\">getType</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mPower ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mVitality ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHealth ;</div><div class=\"line\">    TYPE mType ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> mAvailiable ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure></p>\n<p>As you’ll notice there are five attributes which have getter and setter methods while the sixth attribute of the Item class “mAvailiable” will not require getter and setter methods. Thus the constructor should allow a new Item to be created given some initial values for each of the five attributes we mentioned.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Item::Item( <span class=\"built_in\">string</span> name, Item::TYPE type, <span class=\"keyword\">int</span> power, <span class=\"keyword\">int</span> vitality, <span class=\"keyword\">int</span> health ) </div><div class=\"line\">: mName(name), mType(type), mPower(power), mVitality(vitality), </div><div class=\"line\">  mHealth(health)</div><div class=\"line\">&#123;</div><div class=\"line\">  mAvailiable = <span class=\"literal\">true</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Next we’ll overload the assignment operator for the Item class. For this operator overload we just want to the copy one Item’s attributes to another Item’s.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item Item::<span class=\"keyword\">operator</span>=( Item&amp; newItem )</div><div class=\"line\">&#123;</div><div class=\"line\">  setName( newItem.getName() ) ;</div><div class=\"line\">  setType( newItem.getType() ) ;</div><div class=\"line\">  setPower( newItem.getPower() ) ;</div><div class=\"line\">  setVitality( newItem.getVitality() ) ;</div><div class=\"line\">  setHealth( newItem.getHealth() ) ;</div><div class=\"line\">  mAvailiable = newItem.mAvailiable ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Afterwards we turn our attention to the Item class’ default constructor. The default constructor for the Item should just create a blank Item that will be completely useless but still available for pickup. In addition since the item will not have a name, we can always check for the condition when a Item was accidently created in our game by seeing if the Item’s name is the empty string.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The default Item::TYPE doesn't have to be Item::TYPE::WEAPON</span></div><div class=\"line\"><span class=\"comment\">// as long as its not NULL its fine.</span></div><div class=\"line\">Item::Item( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  setName( <span class=\"string\">\"\"</span> ) ;</div><div class=\"line\">  setType( Item::WEAPON ) ;</div><div class=\"line\">  setPower( <span class=\"number\">0</span> ) ;</div><div class=\"line\">  setVitality( <span class=\"number\">0</span> ) ;</div><div class=\"line\">  setHealth( <span class=\"number\">0</span> ) ;</div><div class=\"line\">  mAvailiable = <span class=\"literal\">true</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The remaining methods are the getters and setters for the attributes power, vitality, health, name and type. Getters and setters in general for the C++ language are a pair of methods that allow you to write a value to an attribute or read the current value from an attribute. Anyways here they are below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Item::setPower( <span class=\"keyword\">int</span> value )</div><div class=\"line\">&#123;</div><div class=\"line\">  mPower = value ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Item::getPower( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mPower ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Item::setVitality( <span class=\"keyword\">int</span> value )</div><div class=\"line\">&#123;</div><div class=\"line\">  mVitality = value ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Item::getVitality( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mVitality ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Item::setHealth( <span class=\"keyword\">int</span> value )</div><div class=\"line\">&#123;</div><div class=\"line\">  mHealth = value ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Item::getHealth( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mHealth ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Item::setName( <span class=\"built_in\">string</span> name )</div><div class=\"line\">&#123;</div><div class=\"line\">  mName = name ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Item::getName( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Item::setType( Item::TYPE newType )</div><div class=\"line\">&#123;</div><div class=\"line\">  mType = newType ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Item::TYPE Item::getType( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mType ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Lastly we’ll run the test for our Item class; to begin create a new C++ file and title it “main.cpp”. Add the the code below to “main.cpp”. Remember that to use our Test object we have to call the “get_instance()” method since we created Test as a singleton.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Filename main.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Database.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  Test::get_instance()-&gt;test_item_class();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Ok, that’s it for today.</p>"},{"title":"Build A Text Based Multiplayer RPG Part IV","date":"2011-06-11T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart4.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart4.JPG","comments":0,"_content":"We continue our quest to design a console based multiplayer RPG game in this article we'll implement the code for the Monster and Room classes. Both of these classes are critical to our application so pay close attention to the instructions.\n\n<!-- more -->\n\n[Click here for part III][link_part_3]\n[Click here for part V][link_part_5]\n\nIn part 4 we’re going to implement the methods for two classes, the Monster class and the Room class. Due to its overall small code base we’ll look at the Monster class first. To jog your memory, below are the declarations for the Monster class from “database.h”. \n```c\nclass Monster\n{\n  public:\n    Monster( string name, int maxHp, int strength, int defence ) ;\n    //~Monster() \n\n    void setHp( int newHp ) ;\n    int getHp( void ) const ;\n\n    void setStrength( int newStrength ) ;\n    int getStrength( void ) const ;\n\n    void setDefence( int newDefence ) ;\n    int getDefence( void ) const ;\n\n    void setName( string newName ) ;\n    string getName( void ) const ;\n\n    void setMaxHp( int newMaxHp ) ;\n\n    int mMaxHp ;\n    int mHp ;\n    int mStrength ;\n    int mDefence ;\n    string mName ;\n    bool inCombat ;\n} ;\n```\nMuch like in previous parts we’ll write out the test cases prior to writing any of the methods. Go ahead and add this line to your “Test.h” file. \n```c\nvoid test_monster_class(void);\n```\nNext open up “Test.cpp”, the Monster class is very basic and just involves a constructor along with four getter/setter pairs. Again with the constructor test we just assert that each attribute is the same as the values we pass into it. \n```c\nvoid Test::test_monster_class(void)\n{\n  // Monster constuctor test\n  Monster test_monster(\"test\", 20, 10, 11);\n\n  assert(\"test\" == test_monster.mName);\n  assert(20 == test_monster.mHp);\n  assert(10 == test_monster.mStrength);\n  assert(11 == test_monster.mDefence);\n  assert(false == test_monster.inCombat);\n  assert(test_monster.mHp == test_monster.mMaxHp);\n```\nLastly for the monster test the getters/setters are pretty basic as well, just type in the code below. \n```c\n  // Monster getters and setters test\n  Monster monster(\"gettersetter\", 1, 2, 3);\n\n  monster.setName(\"dragon\");\n  monster.setHp(100);\n  monster.setMaxHp(999);\n  monster.setStrength(50);\n  monster.setDefence(200);\n\n  assert(\"dragon\" == monster.getName());\n  assert(100 == monster.getHp());\n  assert(50 == monster.getStrength());\n  assert(200 == monster.getDefence());\n  assert(999 == monster.mMaxHp);\n  assert(monster.getHp() != monster.mMaxHp);\n}\n```\nNow that the test have been defined we can now code up the methods for the monster class; so open up the “database.cpp” file and add the lines below. \n```c\n  Monster::Monster( string name, int maxHp, int strength, int defence )\n: mName(name), mMaxHp(maxHp), mStrength(strength), mDefence(defence)\n{\n  setHp(maxHp);\n  inCombat = false ;\n}\n\nvoid Monster::setHp( int newHp )\n{\n  mHp = newHp ;\n}\n\nint Monster::getHp( void ) const\n{\n  return mHp ;\n}\n\nvoid Monster::setStrength( int newStrength )\n{\n  mStrength = newStrength ;\n}\n\nint Monster::getStrength( void ) const\n{\n  return mStrength ;\n}\n\nvoid Monster::setDefence( int newDefence )\n{\n  mDefence = newDefence ;\n}\n\nint Monster::getDefence( void ) const\n{\n  return mDefence ;\n}\n\nvoid Monster::setName( string newName ) \n{\n  mName = newName ;\n}\n\nstring Monster::getName( void ) const\n{\n  return mName ;\n}\n\nvoid Monster::setMaxHp( const int newMaxHp ) \n{\n  mMaxHp = newMaxHp ;\n}\n```\nNow that the Monster class is complete we are now going to finish the Room class, for reference here it is again from the “database.h” file. \n```c\nclass Room \n{\n  public:\n    Room( string name, string description, Item* item = NULL ) ;\n    //Room( void ) ;\n    //~Room()\n\n    typedef bool success ;\n\n    void addMonster( Monster* newMonster ) ;\n    Monster& getMonsterRef( string monsterName ) ;\n    success killMonster( string monsterName ) ;\n    void itemTaken( void ) ;\n    string searchResponse( void ) ;\n    success link( char direction, Room& room ) ;\n    Room& north( void ) ;\n    Room& south( void ) ;\n    Room& east( void ) ;\n    Room& west( void ) ;\n\n    void setName( string newName ) ;\n\n    void setDescription( string newDescription ) ;\n    string getDescription( void ) const ;\n\n    void setItem( Item* newItem ) ;\n\n    Item* mItem ;\n    Room* mNorth ;\n    Room* mSouth ;\n    Room* mEast ;\n    Room* mWest ;\n    list< Monster* > mMonsters ;\n    string mName ;\n    string mDescription ;\n} ;\n```\nTo define the unit test lets open the “Test.cpp” file and begin with the Room class constructor. Based on our class declarations the Room constructor must be tested for the case where we initialize with and without a starting Item. \n```c\nvoid Test::test_room_class(void)\n{\n  // Room constructor test\n  Room room_no_item(\"Cave\", \"A dark cave\");\n\n  assert(\"Cave\" == room_no_item.mName);\n  assert(\"A dark cave\" == room_no_item.mDescription);\n  assert(NULL == room_no_item.mItem);\n  assert(NULL == room_no_item.mNorth);\n  assert(NULL == room_no_item.mSouth);\n  assert(NULL == room_no_item.mEast);\n  assert(NULL == room_no_item.mWest);\n\n  // Room constructor test\n  Room room_with_item(\"Pit\", \"A deep pit\", new Item);\n\n  assert(\"Pit\" == room_with_item.mName);\n  assert(\"A deep pit\" == room_with_item.mDescription);\n  assert(NULL != room_with_item.mItem);\n  assert(\"\" == room_with_item.mItem->getName());\n  assert(true == room_with_item.mItem->mAvailiable);\n```\n  Next we’re going to add a monster to a new room and successfully find the same monster within the room. Note that due to the choice of a List data structure to hold the Monsters we have two options for finding the Monster; either by checking the back of the list for the most recently added monster or by passing the monster’s name as a parameter to our “getMonsterRef()” method which gets the monster’s reference from our List. \n```c\n    // Room addMonster test\n    Monster monster(\"monster\", 1, 2, 3);\n  Room room_monster(\"House\", \"A haunted mansion\");\n\n  room_monster.addMonster(&monster);\n\n  assert(&monster == room_monster.mMonsters.back());\n\n  // Room getMonsterRef test\n  assert(&monster == &(room_monster.getMonsterRef(\n          monster.getName())));\n  assert(NULL == &(room_monster.getMonsterRef(\"sheep\")));\n  ```\n  Then we should test the ability for a monster to be removed from a room, if a monster is present we expect the kill monster method to return true else it should return false. In addition if the name of the monster we are trying to kill is not found then kill monster should also return false. \n  ```c\n    // Room killMonster test\n    assert(false == room_monster.killMonster(\"Invalid monster name\"));\n  assert(true == room_monster.killMonster(monster.getName()));\n  assert(false == room_monster.killMonster(monster.getName()));\n ```\n If the Room’s item is taken then the item itself should no longer be available.\n ```c\n    // Room itemTaken test\n    room_with_item.itemTaken();\n\n  assert(false == room_with_item.mItem->mAvailiable);\n```\nNext we have the ability to search the room for either monsters and or items. Thinking about this you might be wondering how many different responses are possible. Well the solution is rather simple. <blockquote>A room can hold monsters and a single item. So the item is either present or not present within the room. For the monsters they are also either present or all dead. So we have two possible outcomes for the items and two possible outcomes for the monsters</blockquote> \n\n```c\n// Room searchResponse\n// Possible game responses without monsters in the room\n// a) \"There is a Item.mName in this room.\"\n// b) \"After searching, you found nothing of value\"\nRoom room_a(\"Forest\", \"Many trees\", new Item(\"Suit\", Item::ARMOR, 0, \n      20, 0));\nstring response_a(\"There is a Suit in this room.\");\n\nassert(response_a == room_a.searchResponse());\n\nRoom room_b(\"Desert\", \"Sandy plains\");\nstring response_b(\"After searching, you found nothing of value\");\n\nassert(response_b == room_b.searchResponse());\n\n// Possible game responses with monsters\n// c) \"There is a Item.mName in this room.\\nThere is a monster nearby...\n//    Attack the Monster.mName\"\n// d) \"After searching, you found nothing of value\\nThere is a \n//    monster nearby... Attack the Monster.mName\"\nRoom room_c(\"Sea\", \"Water\", new Item(\"Blade\", Item::WEAPON, 5, 0, 0));\nMonster goblin(\"Goblin\", 1, 2, 3);\nroom_c.addMonster(&goblin);\nstring response_c(\"There is a Blade in this room.\\nThere is a monster nearby...\\nAttack the Goblin\");\n\nassert(response_c == room_c.searchResponse());\n\nRoom room_d(\"Space\", \"Outer space\");\nMonster alien(\"Alien\", 4, 5, 6);\nroom_d.addMonster(&alien);\nstring response_d(\"After searching, you found nothing of value\\nThere is a monster nearby...\\nAttack the Alien\");\n\nassert(response_d == room_d.searchResponse());\n```\nGiven that we want the players to be able to move freely about, every room has four possible directions leading from it; the usual north, south, east and west. By chance if we accidently tried to invent a new direction the Room linking method should return false.  \n```c\n  // Room link test\n  // The possible directions are 'n', 'e', 'w' or 's'\n  Room home_room(\"House\", \"A large building\");\n  Room north(\"Pool\", \"A swimming poool\");\n  Room south(\"Yard\", \"Front lawn\");\n  Room east(\"Garage\", \"Empty garage\");\n  Room west(\"Balcony\", \"Wooden balcony\");\n\n  // Bad direction\n  assert(false == home_room.link('z', north));\n  // Good directions\n  assert(true == home_room.link('n', north));\n  assert(true == home_room.link('s', south));\n  assert(true == home_room.link('e', east));\n  assert(true == home_room.link('w', west));\n  // Verify links\n  assert(&north == &(home_room.north()));\n  assert(&south == &(home_room.south()));\n  assert(&west == &(home_room.west()));\n  assert(&east == &(home_room.east()));\n```\nLastly you can just add the Room getters/setters into the “Test.cpp” file.\n```c\n  // Room getters and setters\n  home_room.setName(\"new room\");\n  assert(\"new room\" == home_room.mName);\n\n  home_room.setDescription(\"Your new room\");\n  assert(\"Your new room\" == home_room.getDescription());\n\n  Item* sword = new Item(\"sword\", Item::WEAPON, 10, 0, 0);\n  home_room.setItem(sword);\n  assert(sword == home_room.mItem);\n}\n```\nWhat we want to do next is to define the methods for the Room class. So open up the “database.cpp” file and lets get started, we’ll begin with the constructor for the Room so just pay attention to the use of the initialization list for the Room’s attributes. \n```c\n  Room::Room( string name, string description, Item* item )\n: mName(name), mDescription(description), mItem(item)\n{\n  mNorth = NULL ;\n  mSouth = NULL ;\n  mEast = NULL ;\n  mWest = NULL ;\n}\n```\nThe next method we define will be the “Room::Link()” method. Given that the input is a single char we just have to check whether it is valid or not and then connect the room to the appropriate link. So a switch case block will be sufficient. \n```c\nbool Room::link( char direction, MUD::Room& room )\n{\n  bool flag = false ;\n\n  switch( direction )\n  {\n    case 'n':\n    case 'N':\n      mNorth = &room ;\n      flag = true ;\n      break ;\n\n    case 's':\n    case 'S':\n      mSouth = &room ;\n      flag = true ;\n      break ;\n\n    case 'e':\n    case 'E':\n      mEast = &room ;\n      flag = true ;\n      break ;\n\n    case 'w':\n    case 'W':\n      mWest = &room ;\n      flag = true ;\n      break ;\n  }\n\n  return flag ;\n}\n```\nNow that we can link rooms together the next methods will consist of returning the room for a defined direction.\n```c\nRoom& Room::north( void ) \n{\n  return *mNorth ;\n}\n\nRoom& Room::south( void )\n{\n  return *mSouth ;\n}\n\nRoom& Room::east( void )\n{\n  return *mEast ;\n}\n\nRoom& Room::west( void )\n{\n  return *mWest ;\n}\n```\nWe define the setter for the name attribute. \n```c\nvoid Room::setName( string newName )\n{\n  mName = newName ;\n}\n```\nNext we have to define how the room should interact with monsters or rather adding, finding and or removing monsters. The first idea is simple, given that we are storing the Monster’s within a List data structure, to add a monster we simply append it to the back of the list.\n```c\nvoid Room::addMonster( Monster* newMonster )\n{\n  mMonsters.push_back( newMonster ) ;\n}\n```\nIn order to find a monster within our list of monsters we just iterate over the monster list until we match the name with the name of the monster we’re searching for; if no monster matched then we just return null.  \n```c\nMonster& Room::getMonsterRef( string monsterName ) \n{\n  list< Monster* >::iterator iter ;\n  Monster* monsterRef = NULL ;\n\n  for( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )\n  {\n    if( (*iter)->getName() == monsterName )\n    {\n      monsterRef = *iter ;\n      break ;\n    }\n  }\n\n  return *monsterRef ;\n}\n```\nFor removing i.e killing a monster the idea is the same as finding it but we then remove it from the list of monsters as opposed to returning its reference. When the monster is not found we return false to indicate that no removal occurred. \n```c\nRoom::success Room::killMonster( string monsterName )\n{\n  list< Monster* >::iterator iter ;\n  bool flag = false ;\n\n  for( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )\n  {\n    if( (*iter)->getName() == monsterName )\n    {\n      mMonsters.erase( iter ) ;\n      flag = true ;\n\n      break ;\n    }\n  }\n\n  return flag ;\n}\n```\nMoving on, when an Item is taken from the room we just mark that the Item is unavailable.\n```c\nvoid Room::itemTaken( void )\n{\n  mItem->mAvailiable = false ;\n}\n\nvoid Room::setItem( Item* newItem )\n{\n  mItem = newItem ;\n}\n```\nThe Room’s description is another getter/setter pair.\n```c\nvoid Room::setDescription( string newDescription )\n{\n  mDescription = newDescription ;\n}\n\nstring Room::getDescription( void ) const\n{\n  return mDescription ;\n}\n```\nFinally we have to define the “Room::searchResponse()” method. The objective is to return a string object with all the information gathered about the current Room’s monsters and items. So lets start out with just the lines below, \n```c\nstring Room::searchResponse( void )\n{\n  string response ;\n```\nFirst we’re going to check if an item is currently in the room. An item exist within a room if its both not NULL and is currently available, else there is no item in the room. \n```c\n    if( mItem != NULL && true == mItem->mAvailiable )\n    {\n      response = \"There is a \" + mItem->getName() + \" in this room.\" ;\n    }\n    else\n    {\n      response = \"After searching, you found nothing of value\" ;\n    }\n```\nThen, if there are monsters present(the monster list is non empty) and for the monsters who are not currently in combat with another player we should present the player with the option to attack it; finally adding this information to the response string.  \n```c\n    if( !mMonsters.empty() )\n    {\n      response = response + \"\\nThere is a monster nearby...\" ;\n\n      list< Monster* >::iterator iter ;\n\n      for( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )\n      {\n        if( false == (*iter)->inCombat )\n        {\n          response = response + \"\\nAttack the \" + (*iter)->getName() ;\n        }\n      }\n    }\n\n  return response ;\n}\n```\nLets run the test by changing our “main.cpp” file to look like the one below.\n```c\n//Filename main.cpp\n#include \"Database.h\"\n#include\"Test.h\"\n\nusing namespace MUD ;\n\nint main(void)\n{\n  Test::get_instance()->test_item_class();\n  Test::get_instance()->test_monster_class();\n  Test::get_instance()->test_room_class();\n}\n```\n\n[Click here for part V][link_part_5]\n\n[link_part_3]: /2011/06/09/textbasedrpgpart3\n[link_part_5]: /2011/06/15/textbasedrpgpart5\n","source":"_posts/textbasedrpgpart4.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part IV\ndate: 2011-06-11\ncategories: [tutorial]\ntags: [cpp]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart4.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart4.JPG\ncomments: false\n---\nWe continue our quest to design a console based multiplayer RPG game in this article we'll implement the code for the Monster and Room classes. Both of these classes are critical to our application so pay close attention to the instructions.\n\n<!-- more -->\n\n[Click here for part III][link_part_3]\n[Click here for part V][link_part_5]\n\nIn part 4 we’re going to implement the methods for two classes, the Monster class and the Room class. Due to its overall small code base we’ll look at the Monster class first. To jog your memory, below are the declarations for the Monster class from “database.h”. \n```c\nclass Monster\n{\n  public:\n    Monster( string name, int maxHp, int strength, int defence ) ;\n    //~Monster() \n\n    void setHp( int newHp ) ;\n    int getHp( void ) const ;\n\n    void setStrength( int newStrength ) ;\n    int getStrength( void ) const ;\n\n    void setDefence( int newDefence ) ;\n    int getDefence( void ) const ;\n\n    void setName( string newName ) ;\n    string getName( void ) const ;\n\n    void setMaxHp( int newMaxHp ) ;\n\n    int mMaxHp ;\n    int mHp ;\n    int mStrength ;\n    int mDefence ;\n    string mName ;\n    bool inCombat ;\n} ;\n```\nMuch like in previous parts we’ll write out the test cases prior to writing any of the methods. Go ahead and add this line to your “Test.h” file. \n```c\nvoid test_monster_class(void);\n```\nNext open up “Test.cpp”, the Monster class is very basic and just involves a constructor along with four getter/setter pairs. Again with the constructor test we just assert that each attribute is the same as the values we pass into it. \n```c\nvoid Test::test_monster_class(void)\n{\n  // Monster constuctor test\n  Monster test_monster(\"test\", 20, 10, 11);\n\n  assert(\"test\" == test_monster.mName);\n  assert(20 == test_monster.mHp);\n  assert(10 == test_monster.mStrength);\n  assert(11 == test_monster.mDefence);\n  assert(false == test_monster.inCombat);\n  assert(test_monster.mHp == test_monster.mMaxHp);\n```\nLastly for the monster test the getters/setters are pretty basic as well, just type in the code below. \n```c\n  // Monster getters and setters test\n  Monster monster(\"gettersetter\", 1, 2, 3);\n\n  monster.setName(\"dragon\");\n  monster.setHp(100);\n  monster.setMaxHp(999);\n  monster.setStrength(50);\n  monster.setDefence(200);\n\n  assert(\"dragon\" == monster.getName());\n  assert(100 == monster.getHp());\n  assert(50 == monster.getStrength());\n  assert(200 == monster.getDefence());\n  assert(999 == monster.mMaxHp);\n  assert(monster.getHp() != monster.mMaxHp);\n}\n```\nNow that the test have been defined we can now code up the methods for the monster class; so open up the “database.cpp” file and add the lines below. \n```c\n  Monster::Monster( string name, int maxHp, int strength, int defence )\n: mName(name), mMaxHp(maxHp), mStrength(strength), mDefence(defence)\n{\n  setHp(maxHp);\n  inCombat = false ;\n}\n\nvoid Monster::setHp( int newHp )\n{\n  mHp = newHp ;\n}\n\nint Monster::getHp( void ) const\n{\n  return mHp ;\n}\n\nvoid Monster::setStrength( int newStrength )\n{\n  mStrength = newStrength ;\n}\n\nint Monster::getStrength( void ) const\n{\n  return mStrength ;\n}\n\nvoid Monster::setDefence( int newDefence )\n{\n  mDefence = newDefence ;\n}\n\nint Monster::getDefence( void ) const\n{\n  return mDefence ;\n}\n\nvoid Monster::setName( string newName ) \n{\n  mName = newName ;\n}\n\nstring Monster::getName( void ) const\n{\n  return mName ;\n}\n\nvoid Monster::setMaxHp( const int newMaxHp ) \n{\n  mMaxHp = newMaxHp ;\n}\n```\nNow that the Monster class is complete we are now going to finish the Room class, for reference here it is again from the “database.h” file. \n```c\nclass Room \n{\n  public:\n    Room( string name, string description, Item* item = NULL ) ;\n    //Room( void ) ;\n    //~Room()\n\n    typedef bool success ;\n\n    void addMonster( Monster* newMonster ) ;\n    Monster& getMonsterRef( string monsterName ) ;\n    success killMonster( string monsterName ) ;\n    void itemTaken( void ) ;\n    string searchResponse( void ) ;\n    success link( char direction, Room& room ) ;\n    Room& north( void ) ;\n    Room& south( void ) ;\n    Room& east( void ) ;\n    Room& west( void ) ;\n\n    void setName( string newName ) ;\n\n    void setDescription( string newDescription ) ;\n    string getDescription( void ) const ;\n\n    void setItem( Item* newItem ) ;\n\n    Item* mItem ;\n    Room* mNorth ;\n    Room* mSouth ;\n    Room* mEast ;\n    Room* mWest ;\n    list< Monster* > mMonsters ;\n    string mName ;\n    string mDescription ;\n} ;\n```\nTo define the unit test lets open the “Test.cpp” file and begin with the Room class constructor. Based on our class declarations the Room constructor must be tested for the case where we initialize with and without a starting Item. \n```c\nvoid Test::test_room_class(void)\n{\n  // Room constructor test\n  Room room_no_item(\"Cave\", \"A dark cave\");\n\n  assert(\"Cave\" == room_no_item.mName);\n  assert(\"A dark cave\" == room_no_item.mDescription);\n  assert(NULL == room_no_item.mItem);\n  assert(NULL == room_no_item.mNorth);\n  assert(NULL == room_no_item.mSouth);\n  assert(NULL == room_no_item.mEast);\n  assert(NULL == room_no_item.mWest);\n\n  // Room constructor test\n  Room room_with_item(\"Pit\", \"A deep pit\", new Item);\n\n  assert(\"Pit\" == room_with_item.mName);\n  assert(\"A deep pit\" == room_with_item.mDescription);\n  assert(NULL != room_with_item.mItem);\n  assert(\"\" == room_with_item.mItem->getName());\n  assert(true == room_with_item.mItem->mAvailiable);\n```\n  Next we’re going to add a monster to a new room and successfully find the same monster within the room. Note that due to the choice of a List data structure to hold the Monsters we have two options for finding the Monster; either by checking the back of the list for the most recently added monster or by passing the monster’s name as a parameter to our “getMonsterRef()” method which gets the monster’s reference from our List. \n```c\n    // Room addMonster test\n    Monster monster(\"monster\", 1, 2, 3);\n  Room room_monster(\"House\", \"A haunted mansion\");\n\n  room_monster.addMonster(&monster);\n\n  assert(&monster == room_monster.mMonsters.back());\n\n  // Room getMonsterRef test\n  assert(&monster == &(room_monster.getMonsterRef(\n          monster.getName())));\n  assert(NULL == &(room_monster.getMonsterRef(\"sheep\")));\n  ```\n  Then we should test the ability for a monster to be removed from a room, if a monster is present we expect the kill monster method to return true else it should return false. In addition if the name of the monster we are trying to kill is not found then kill monster should also return false. \n  ```c\n    // Room killMonster test\n    assert(false == room_monster.killMonster(\"Invalid monster name\"));\n  assert(true == room_monster.killMonster(monster.getName()));\n  assert(false == room_monster.killMonster(monster.getName()));\n ```\n If the Room’s item is taken then the item itself should no longer be available.\n ```c\n    // Room itemTaken test\n    room_with_item.itemTaken();\n\n  assert(false == room_with_item.mItem->mAvailiable);\n```\nNext we have the ability to search the room for either monsters and or items. Thinking about this you might be wondering how many different responses are possible. Well the solution is rather simple. <blockquote>A room can hold monsters and a single item. So the item is either present or not present within the room. For the monsters they are also either present or all dead. So we have two possible outcomes for the items and two possible outcomes for the monsters</blockquote> \n\n```c\n// Room searchResponse\n// Possible game responses without monsters in the room\n// a) \"There is a Item.mName in this room.\"\n// b) \"After searching, you found nothing of value\"\nRoom room_a(\"Forest\", \"Many trees\", new Item(\"Suit\", Item::ARMOR, 0, \n      20, 0));\nstring response_a(\"There is a Suit in this room.\");\n\nassert(response_a == room_a.searchResponse());\n\nRoom room_b(\"Desert\", \"Sandy plains\");\nstring response_b(\"After searching, you found nothing of value\");\n\nassert(response_b == room_b.searchResponse());\n\n// Possible game responses with monsters\n// c) \"There is a Item.mName in this room.\\nThere is a monster nearby...\n//    Attack the Monster.mName\"\n// d) \"After searching, you found nothing of value\\nThere is a \n//    monster nearby... Attack the Monster.mName\"\nRoom room_c(\"Sea\", \"Water\", new Item(\"Blade\", Item::WEAPON, 5, 0, 0));\nMonster goblin(\"Goblin\", 1, 2, 3);\nroom_c.addMonster(&goblin);\nstring response_c(\"There is a Blade in this room.\\nThere is a monster nearby...\\nAttack the Goblin\");\n\nassert(response_c == room_c.searchResponse());\n\nRoom room_d(\"Space\", \"Outer space\");\nMonster alien(\"Alien\", 4, 5, 6);\nroom_d.addMonster(&alien);\nstring response_d(\"After searching, you found nothing of value\\nThere is a monster nearby...\\nAttack the Alien\");\n\nassert(response_d == room_d.searchResponse());\n```\nGiven that we want the players to be able to move freely about, every room has four possible directions leading from it; the usual north, south, east and west. By chance if we accidently tried to invent a new direction the Room linking method should return false.  \n```c\n  // Room link test\n  // The possible directions are 'n', 'e', 'w' or 's'\n  Room home_room(\"House\", \"A large building\");\n  Room north(\"Pool\", \"A swimming poool\");\n  Room south(\"Yard\", \"Front lawn\");\n  Room east(\"Garage\", \"Empty garage\");\n  Room west(\"Balcony\", \"Wooden balcony\");\n\n  // Bad direction\n  assert(false == home_room.link('z', north));\n  // Good directions\n  assert(true == home_room.link('n', north));\n  assert(true == home_room.link('s', south));\n  assert(true == home_room.link('e', east));\n  assert(true == home_room.link('w', west));\n  // Verify links\n  assert(&north == &(home_room.north()));\n  assert(&south == &(home_room.south()));\n  assert(&west == &(home_room.west()));\n  assert(&east == &(home_room.east()));\n```\nLastly you can just add the Room getters/setters into the “Test.cpp” file.\n```c\n  // Room getters and setters\n  home_room.setName(\"new room\");\n  assert(\"new room\" == home_room.mName);\n\n  home_room.setDescription(\"Your new room\");\n  assert(\"Your new room\" == home_room.getDescription());\n\n  Item* sword = new Item(\"sword\", Item::WEAPON, 10, 0, 0);\n  home_room.setItem(sword);\n  assert(sword == home_room.mItem);\n}\n```\nWhat we want to do next is to define the methods for the Room class. So open up the “database.cpp” file and lets get started, we’ll begin with the constructor for the Room so just pay attention to the use of the initialization list for the Room’s attributes. \n```c\n  Room::Room( string name, string description, Item* item )\n: mName(name), mDescription(description), mItem(item)\n{\n  mNorth = NULL ;\n  mSouth = NULL ;\n  mEast = NULL ;\n  mWest = NULL ;\n}\n```\nThe next method we define will be the “Room::Link()” method. Given that the input is a single char we just have to check whether it is valid or not and then connect the room to the appropriate link. So a switch case block will be sufficient. \n```c\nbool Room::link( char direction, MUD::Room& room )\n{\n  bool flag = false ;\n\n  switch( direction )\n  {\n    case 'n':\n    case 'N':\n      mNorth = &room ;\n      flag = true ;\n      break ;\n\n    case 's':\n    case 'S':\n      mSouth = &room ;\n      flag = true ;\n      break ;\n\n    case 'e':\n    case 'E':\n      mEast = &room ;\n      flag = true ;\n      break ;\n\n    case 'w':\n    case 'W':\n      mWest = &room ;\n      flag = true ;\n      break ;\n  }\n\n  return flag ;\n}\n```\nNow that we can link rooms together the next methods will consist of returning the room for a defined direction.\n```c\nRoom& Room::north( void ) \n{\n  return *mNorth ;\n}\n\nRoom& Room::south( void )\n{\n  return *mSouth ;\n}\n\nRoom& Room::east( void )\n{\n  return *mEast ;\n}\n\nRoom& Room::west( void )\n{\n  return *mWest ;\n}\n```\nWe define the setter for the name attribute. \n```c\nvoid Room::setName( string newName )\n{\n  mName = newName ;\n}\n```\nNext we have to define how the room should interact with monsters or rather adding, finding and or removing monsters. The first idea is simple, given that we are storing the Monster’s within a List data structure, to add a monster we simply append it to the back of the list.\n```c\nvoid Room::addMonster( Monster* newMonster )\n{\n  mMonsters.push_back( newMonster ) ;\n}\n```\nIn order to find a monster within our list of monsters we just iterate over the monster list until we match the name with the name of the monster we’re searching for; if no monster matched then we just return null.  \n```c\nMonster& Room::getMonsterRef( string monsterName ) \n{\n  list< Monster* >::iterator iter ;\n  Monster* monsterRef = NULL ;\n\n  for( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )\n  {\n    if( (*iter)->getName() == monsterName )\n    {\n      monsterRef = *iter ;\n      break ;\n    }\n  }\n\n  return *monsterRef ;\n}\n```\nFor removing i.e killing a monster the idea is the same as finding it but we then remove it from the list of monsters as opposed to returning its reference. When the monster is not found we return false to indicate that no removal occurred. \n```c\nRoom::success Room::killMonster( string monsterName )\n{\n  list< Monster* >::iterator iter ;\n  bool flag = false ;\n\n  for( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )\n  {\n    if( (*iter)->getName() == monsterName )\n    {\n      mMonsters.erase( iter ) ;\n      flag = true ;\n\n      break ;\n    }\n  }\n\n  return flag ;\n}\n```\nMoving on, when an Item is taken from the room we just mark that the Item is unavailable.\n```c\nvoid Room::itemTaken( void )\n{\n  mItem->mAvailiable = false ;\n}\n\nvoid Room::setItem( Item* newItem )\n{\n  mItem = newItem ;\n}\n```\nThe Room’s description is another getter/setter pair.\n```c\nvoid Room::setDescription( string newDescription )\n{\n  mDescription = newDescription ;\n}\n\nstring Room::getDescription( void ) const\n{\n  return mDescription ;\n}\n```\nFinally we have to define the “Room::searchResponse()” method. The objective is to return a string object with all the information gathered about the current Room’s monsters and items. So lets start out with just the lines below, \n```c\nstring Room::searchResponse( void )\n{\n  string response ;\n```\nFirst we’re going to check if an item is currently in the room. An item exist within a room if its both not NULL and is currently available, else there is no item in the room. \n```c\n    if( mItem != NULL && true == mItem->mAvailiable )\n    {\n      response = \"There is a \" + mItem->getName() + \" in this room.\" ;\n    }\n    else\n    {\n      response = \"After searching, you found nothing of value\" ;\n    }\n```\nThen, if there are monsters present(the monster list is non empty) and for the monsters who are not currently in combat with another player we should present the player with the option to attack it; finally adding this information to the response string.  \n```c\n    if( !mMonsters.empty() )\n    {\n      response = response + \"\\nThere is a monster nearby...\" ;\n\n      list< Monster* >::iterator iter ;\n\n      for( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )\n      {\n        if( false == (*iter)->inCombat )\n        {\n          response = response + \"\\nAttack the \" + (*iter)->getName() ;\n        }\n      }\n    }\n\n  return response ;\n}\n```\nLets run the test by changing our “main.cpp” file to look like the one below.\n```c\n//Filename main.cpp\n#include \"Database.h\"\n#include\"Test.h\"\n\nusing namespace MUD ;\n\nint main(void)\n{\n  Test::get_instance()->test_item_class();\n  Test::get_instance()->test_monster_class();\n  Test::get_instance()->test_room_class();\n}\n```\n\n[Click here for part V][link_part_5]\n\n[link_part_3]: /2011/06/09/textbasedrpgpart3\n[link_part_5]: /2011/06/15/textbasedrpgpart5\n","slug":"textbasedrpgpart4","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3im001oyswvyo7tl0on","layout":"post","photos":[],"link":"","content":"<p>We continue our quest to design a console based multiplayer RPG game in this article we’ll implement the code for the Monster and Room classes. Both of these classes are critical to our application so pay close attention to the instructions.</p>\n<a id=\"more\"></a>\n<p><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a><br><a href=\"/2011/06/15/textbasedrpgpart5\">Click here for part V</a></p>\n<p>In part 4 we’re going to implement the methods for two classes, the Monster class and the Room class. Due to its overall small code base we’ll look at the Monster class first. To jog your memory, below are the declarations for the Monster class from “database.h”.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Monster</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence ) ;</div><div class=\"line\">    <span class=\"comment\">//~Monster() </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMaxHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newMaxHp )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> inCombat ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure></p>\n<p>Much like in previous parts we’ll write out the test cases prior to writing any of the methods. Go ahead and add this line to your “Test.h” file.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_monster_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>Next open up “Test.cpp”, the Monster class is very basic and just involves a constructor along with four getter/setter pairs. Again with the constructor test we just assert that each attribute is the same as the values we pass into it.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_monster_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Monster constuctor test</span></div><div class=\"line\">  <span class=\"function\">Monster <span class=\"title\">test_monster</span><span class=\"params\">(<span class=\"string\">\"test\"</span>, <span class=\"number\">20</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"test\"</span> == test_monster.mName);</div><div class=\"line\">  assert(<span class=\"number\">20</span> == test_monster.mHp);</div><div class=\"line\">  assert(<span class=\"number\">10</span> == test_monster.mStrength);</div><div class=\"line\">  assert(<span class=\"number\">11</span> == test_monster.mDefence);</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == test_monster.inCombat);</div><div class=\"line\">  assert(test_monster.mHp == test_monster.mMaxHp);</div></pre></td></tr></table></figure></p>\n<p>Lastly for the monster test the getters/setters are pretty basic as well, just type in the code below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Monster getters and setters test</span></div><div class=\"line\">  <span class=\"function\">Monster <span class=\"title\">monster</span><span class=\"params\">(<span class=\"string\">\"gettersetter\"</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  monster.setName(<span class=\"string\">\"dragon\"</span>);</div><div class=\"line\">  monster.setHp(<span class=\"number\">100</span>);</div><div class=\"line\">  monster.setMaxHp(<span class=\"number\">999</span>);</div><div class=\"line\">  monster.setStrength(<span class=\"number\">50</span>);</div><div class=\"line\">  monster.setDefence(<span class=\"number\">200</span>);</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"dragon\"</span> == monster.getName());</div><div class=\"line\">  assert(<span class=\"number\">100</span> == monster.getHp());</div><div class=\"line\">  assert(<span class=\"number\">50</span> == monster.getStrength());</div><div class=\"line\">  assert(<span class=\"number\">200</span> == monster.getDefence());</div><div class=\"line\">  assert(<span class=\"number\">999</span> == monster.mMaxHp);</div><div class=\"line\">  assert(monster.getHp() != monster.mMaxHp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now that the test have been defined we can now code up the methods for the monster class; so open up the “database.cpp” file and add the lines below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Monster::Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence )</div><div class=\"line\">: mName(name), mMaxHp(maxHp), mStrength(strength), mDefence(defence)</div><div class=\"line\">&#123;</div><div class=\"line\">  setHp(maxHp);</div><div class=\"line\">  inCombat = <span class=\"literal\">false</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Monster::setHp( <span class=\"keyword\">int</span> newHp )</div><div class=\"line\">&#123;</div><div class=\"line\">  mHp = newHp ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Monster::getHp( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mHp ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Monster::setStrength( <span class=\"keyword\">int</span> newStrength )</div><div class=\"line\">&#123;</div><div class=\"line\">  mStrength = newStrength ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Monster::getStrength( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mStrength ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Monster::setDefence( <span class=\"keyword\">int</span> newDefence )</div><div class=\"line\">&#123;</div><div class=\"line\">  mDefence = newDefence ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Monster::getDefence( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mDefence ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Monster::setName( <span class=\"built_in\">string</span> newName ) </div><div class=\"line\">&#123;</div><div class=\"line\">  mName = newName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Monster::getName( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Monster::setMaxHp( <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> newMaxHp ) </div><div class=\"line\">&#123;</div><div class=\"line\">  mMaxHp = newMaxHp ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now that the Monster class is complete we are now going to finish the Room class, for reference here it is again from the “database.h” file.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Room </div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//Room( void ) ;</span></div><div class=\"line\">    <span class=\"comment\">//~Room()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> success ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addMonster</span><span class=\"params\">( Monster* newMonster )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Monster&amp; <span class=\"title\">getMonsterRef</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">killMonster</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">itemTaken</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">searchResponse</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">link</span><span class=\"params\">( <span class=\"keyword\">char</span> direction, Room&amp; room )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">north</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">south</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">east</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">west</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">( <span class=\"built_in\">string</span> newDescription )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getDescription</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setItem</span><span class=\"params\">( Item* newItem )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    Item* mItem ;</div><div class=\"line\">    Room* mNorth ;</div><div class=\"line\">    Room* mSouth ;</div><div class=\"line\">    Room* mEast ;</div><div class=\"line\">    Room* mWest ;</div><div class=\"line\">    <span class=\"built_in\">list</span>&lt; Monster* &gt; mMonsters ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mDescription ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure></p>\n<p>To define the unit test lets open the “Test.cpp” file and begin with the Room class constructor. Based on our class declarations the Room constructor must be tested for the case where we initialize with and without a starting Item.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_room_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Room constructor test</span></div><div class=\"line\">  <span class=\"function\">Room <span class=\"title\">room_no_item</span><span class=\"params\">(<span class=\"string\">\"Cave\"</span>, <span class=\"string\">\"A dark cave\"</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"Cave\"</span> == room_no_item.mName);</div><div class=\"line\">  assert(<span class=\"string\">\"A dark cave\"</span> == room_no_item.mDescription);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> == room_no_item.mItem);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> == room_no_item.mNorth);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> == room_no_item.mSouth);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> == room_no_item.mEast);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> == room_no_item.mWest);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Room constructor test</span></div><div class=\"line\">  <span class=\"function\">Room <span class=\"title\">room_with_item</span><span class=\"params\">(<span class=\"string\">\"Pit\"</span>, <span class=\"string\">\"A deep pit\"</span>, <span class=\"keyword\">new</span> Item)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"Pit\"</span> == room_with_item.mName);</div><div class=\"line\">  assert(<span class=\"string\">\"A deep pit\"</span> == room_with_item.mDescription);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> != room_with_item.mItem);</div><div class=\"line\">  assert(<span class=\"string\">\"\"</span> == room_with_item.mItem-&gt;getName());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == room_with_item.mItem-&gt;mAvailiable);</div></pre></td></tr></table></figure></p>\n<p>  Next we’re going to add a monster to a new room and successfully find the same monster within the room. Note that due to the choice of a List data structure to hold the Monsters we have two options for finding the Monster; either by checking the back of the list for the most recently added monster or by passing the monster’s name as a parameter to our “getMonsterRef()” method which gets the monster’s reference from our List.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Room addMonster test</span></div><div class=\"line\">  <span class=\"function\">Monster <span class=\"title\">monster</span><span class=\"params\">(<span class=\"string\">\"monster\"</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">room_monster</span><span class=\"params\">(<span class=\"string\">\"House\"</span>, <span class=\"string\">\"A haunted mansion\"</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">room_monster.addMonster(&amp;monster);</div><div class=\"line\"></div><div class=\"line\">assert(&amp;monster == room_monster.mMonsters.back());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Room getMonsterRef test</span></div><div class=\"line\">assert(&amp;monster == &amp;(room_monster.getMonsterRef(</div><div class=\"line\">        monster.getName())));</div><div class=\"line\">assert(<span class=\"literal\">NULL</span> == &amp;(room_monster.getMonsterRef(<span class=\"string\">\"sheep\"</span>)));</div></pre></td></tr></table></figure></p>\n<p>  Then we should test the ability for a monster to be removed from a room, if a monster is present we expect the kill monster method to return true else it should return false. In addition if the name of the monster we are trying to kill is not found then kill monster should also return false.<br>  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Room killMonster test</span></div><div class=\"line\">  assert(<span class=\"literal\">false</span> == room_monster.killMonster(<span class=\"string\">\"Invalid monster name\"</span>));</div><div class=\"line\">assert(<span class=\"literal\">true</span> == room_monster.killMonster(monster.getName()));</div><div class=\"line\">assert(<span class=\"literal\">false</span> == room_monster.killMonster(monster.getName()));</div></pre></td></tr></table></figure></p>\n<p> If the Room’s item is taken then the item itself should no longer be available.<br> <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Room itemTaken test</span></div><div class=\"line\">  room_with_item.itemTaken();</div><div class=\"line\"></div><div class=\"line\">assert(<span class=\"literal\">false</span> == room_with_item.mItem-&gt;mAvailiable);</div></pre></td></tr></table></figure></p>\n<p>Next we have the ability to search the room for either monsters and or items. Thinking about this you might be wondering how many different responses are possible. Well the solution is rather simple. <blockquote>A room can hold monsters and a single item. So the item is either present or not present within the room. For the monsters they are also either present or all dead. So we have two possible outcomes for the items and two possible outcomes for the monsters</blockquote> </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Room searchResponse</div><div class=\"line\">// Possible game responses without monsters in the room</div><div class=\"line\">// a) \"There is a Item.mName in this room.\"</div><div class=\"line\">// b) \"After searching, you found nothing of value\"</div><div class=\"line\">Room room_a(\"Forest\", \"Many trees\", new Item(\"Suit\", Item::ARMOR, 0, </div><div class=\"line\">      20, 0));</div><div class=\"line\">string response_a(\"There is a Suit in this room.\");</div><div class=\"line\"></div><div class=\"line\">assert(response_a == room_a.searchResponse());</div><div class=\"line\"></div><div class=\"line\">Room room_b(\"Desert\", \"Sandy plains\");</div><div class=\"line\">string response_b(\"After searching, you found nothing of value\");</div><div class=\"line\"></div><div class=\"line\">assert(response_b == room_b.searchResponse());</div><div class=\"line\"></div><div class=\"line\">// Possible game responses with monsters</div><div class=\"line\">// c) \"There is a Item.mName in this room.\\nThere is a monster nearby...</div><div class=\"line\">//    Attack the Monster.mName\"</div><div class=\"line\">// d) \"After searching, you found nothing of value\\nThere is a </div><div class=\"line\">//    monster nearby... Attack the Monster.mName\"</div><div class=\"line\">Room room_c(\"Sea\", \"Water\", new Item(\"Blade\", Item::WEAPON, 5, 0, 0));</div><div class=\"line\">Monster goblin(\"Goblin\", 1, 2, 3);</div><div class=\"line\">room_c.addMonster(&amp;goblin);</div><div class=\"line\">string response_c(\"There is a Blade in this room.\\nThere is a monster nearby...\\nAttack the Goblin\");</div><div class=\"line\"></div><div class=\"line\">assert(response_c == room_c.searchResponse());</div><div class=\"line\"></div><div class=\"line\">Room room_d(\"Space\", \"Outer space\");</div><div class=\"line\">Monster alien(\"Alien\", 4, 5, 6);</div><div class=\"line\">room_d.addMonster(&amp;alien);</div><div class=\"line\">string response_d(\"After searching, you found nothing of value\\nThere is a monster nearby...\\nAttack the Alien\");</div><div class=\"line\"></div><div class=\"line\">assert(response_d == room_d.searchResponse());</div></pre></td></tr></table></figure>\n<p>Given that we want the players to be able to move freely about, every room has four possible directions leading from it; the usual north, south, east and west. By chance if we accidently tried to invent a new direction the Room linking method should return false.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Room link test</span></div><div class=\"line\"><span class=\"comment\">// The possible directions are 'n', 'e', 'w' or 's'</span></div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">home_room</span><span class=\"params\">(<span class=\"string\">\"House\"</span>, <span class=\"string\">\"A large building\"</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">north</span><span class=\"params\">(<span class=\"string\">\"Pool\"</span>, <span class=\"string\">\"A swimming poool\"</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">south</span><span class=\"params\">(<span class=\"string\">\"Yard\"</span>, <span class=\"string\">\"Front lawn\"</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">east</span><span class=\"params\">(<span class=\"string\">\"Garage\"</span>, <span class=\"string\">\"Empty garage\"</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">west</span><span class=\"params\">(<span class=\"string\">\"Balcony\"</span>, <span class=\"string\">\"Wooden balcony\"</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Bad direction</span></div><div class=\"line\">assert(<span class=\"literal\">false</span> == home_room.link(<span class=\"string\">'z'</span>, north));</div><div class=\"line\"><span class=\"comment\">// Good directions</span></div><div class=\"line\">assert(<span class=\"literal\">true</span> == home_room.link(<span class=\"string\">'n'</span>, north));</div><div class=\"line\">assert(<span class=\"literal\">true</span> == home_room.link(<span class=\"string\">'s'</span>, south));</div><div class=\"line\">assert(<span class=\"literal\">true</span> == home_room.link(<span class=\"string\">'e'</span>, east));</div><div class=\"line\">assert(<span class=\"literal\">true</span> == home_room.link(<span class=\"string\">'w'</span>, west));</div><div class=\"line\"><span class=\"comment\">// Verify links</span></div><div class=\"line\">assert(&amp;north == &amp;(home_room.north()));</div><div class=\"line\">assert(&amp;south == &amp;(home_room.south()));</div><div class=\"line\">assert(&amp;west == &amp;(home_room.west()));</div><div class=\"line\">assert(&amp;east == &amp;(home_room.east()));</div></pre></td></tr></table></figure></p>\n<p>Lastly you can just add the Room getters/setters into the “Test.cpp” file.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Room getters and setters</span></div><div class=\"line\">  home_room.setName(<span class=\"string\">\"new room\"</span>);</div><div class=\"line\">  assert(<span class=\"string\">\"new room\"</span> == home_room.mName);</div><div class=\"line\"></div><div class=\"line\">  home_room.setDescription(<span class=\"string\">\"Your new room\"</span>);</div><div class=\"line\">  assert(<span class=\"string\">\"Your new room\"</span> == home_room.getDescription());</div><div class=\"line\"></div><div class=\"line\">  Item* sword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"sword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  home_room.setItem(sword);</div><div class=\"line\">  assert(sword == home_room.mItem);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>What we want to do next is to define the methods for the Room class. So open up the “database.cpp” file and lets get started, we’ll begin with the constructor for the Room so just pay attention to the use of the initialization list for the Room’s attributes.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Room::Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item )</div><div class=\"line\">: mName(name), mDescription(description), mItem(item)</div><div class=\"line\">&#123;</div><div class=\"line\">  mNorth = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">  mSouth = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">  mEast = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">  mWest = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The next method we define will be the “Room::Link()” method. Given that the input is a single char we just have to check whether it is valid or not and then connect the room to the appropriate link. So a switch case block will be sufficient.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bool</span> Room::link( <span class=\"keyword\">char</span> direction, MUD::Room&amp; room )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">switch</span>( direction )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'n'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'N'</span>:</div><div class=\"line\">      mNorth = &amp;room ;</div><div class=\"line\">      flag = <span class=\"literal\">true</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'S'</span>:</div><div class=\"line\">      mSouth = &amp;room ;</div><div class=\"line\">      flag = <span class=\"literal\">true</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'E'</span>:</div><div class=\"line\">      mEast = &amp;room ;</div><div class=\"line\">      flag = <span class=\"literal\">true</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'w'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'W'</span>:</div><div class=\"line\">      mWest = &amp;room ;</div><div class=\"line\">      flag = <span class=\"literal\">true</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> flag ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now that we can link rooms together the next methods will consist of returning the room for a defined direction.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Room&amp; Room::north( <span class=\"keyword\">void</span> ) </div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> *mNorth ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Room&amp; Room::south( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> *mSouth ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Room&amp; Room::east( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> *mEast ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Room&amp; Room::west( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> *mWest ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We define the setter for the name attribute.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Room::setName( <span class=\"built_in\">string</span> newName )</div><div class=\"line\">&#123;</div><div class=\"line\">  mName = newName ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Next we have to define how the room should interact with monsters or rather adding, finding and or removing monsters. The first idea is simple, given that we are storing the Monster’s within a List data structure, to add a monster we simply append it to the back of the list.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Room::addMonster( Monster* newMonster )</div><div class=\"line\">&#123;</div><div class=\"line\">  mMonsters.push_back( newMonster ) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>In order to find a monster within our list of monsters we just iterate over the monster list until we match the name with the name of the monster we’re searching for; if no monster matched then we just return null.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Monster&amp; Room::getMonsterRef( <span class=\"built_in\">string</span> monsterName ) </div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">list</span>&lt; Monster* &gt;::iterator iter ;</div><div class=\"line\">  Monster* monsterRef = <span class=\"literal\">NULL</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( (*iter)-&gt;getName() == monsterName )</div><div class=\"line\">    &#123;</div><div class=\"line\">      monsterRef = *iter ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> *monsterRef ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>For removing i.e killing a monster the idea is the same as finding it but we then remove it from the list of monsters as opposed to returning its reference. When the monster is not found we return false to indicate that no removal occurred.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Room::success Room::killMonster( <span class=\"built_in\">string</span> monsterName )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">list</span>&lt; Monster* &gt;::iterator iter ;</div><div class=\"line\">  <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( (*iter)-&gt;getName() == monsterName )</div><div class=\"line\">    &#123;</div><div class=\"line\">      mMonsters.erase( iter ) ;</div><div class=\"line\">      flag = <span class=\"literal\">true</span> ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> flag ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Moving on, when an Item is taken from the room we just mark that the Item is unavailable.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Room::itemTaken( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  mItem-&gt;mAvailiable = <span class=\"literal\">false</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Room::setItem( Item* newItem )</div><div class=\"line\">&#123;</div><div class=\"line\">  mItem = newItem ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The Room’s description is another getter/setter pair.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Room::setDescription( <span class=\"built_in\">string</span> newDescription )</div><div class=\"line\">&#123;</div><div class=\"line\">  mDescription = newDescription ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Room::getDescription( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mDescription ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Finally we have to define the “Room::searchResponse()” method. The objective is to return a string object with all the information gathered about the current Room’s monsters and items. So lets start out with just the lines below,<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">string</span> Room::searchResponse( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">string</span> response ;</div></pre></td></tr></table></figure></p>\n<p>First we’re going to check if an item is currently in the room. An item exist within a room if its both not NULL and is currently available, else there is no item in the room.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>( mItem != <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"literal\">true</span> == mItem-&gt;mAvailiable )</div><div class=\"line\">&#123;</div><div class=\"line\">  response = <span class=\"string\">\"There is a \"</span> + mItem-&gt;getName() + <span class=\"string\">\" in this room.\"</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">  response = <span class=\"string\">\"After searching, you found nothing of value\"</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Then, if there are monsters present(the monster list is non empty) and for the monsters who are not currently in combat with another player we should present the player with the option to attack it; finally adding this information to the response string.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">if</span>( !mMonsters.empty() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      response = response + <span class=\"string\">\"\\nThere is a monster nearby...\"</span> ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">list</span>&lt; Monster* &gt;::iterator iter ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( <span class=\"literal\">false</span> == (*iter)-&gt;inCombat )</div><div class=\"line\">        &#123;</div><div class=\"line\">          response = response + <span class=\"string\">\"\\nAttack the \"</span> + (*iter)-&gt;getName() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Lets run the test by changing our “main.cpp” file to look like the one below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Filename main.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Database.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  Test::get_instance()-&gt;test_item_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_monster_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_room_class();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"/2011/06/15/textbasedrpgpart5\">Click here for part V</a></p>\n","site":{"data":{}},"excerpt":"<p>We continue our quest to design a console based multiplayer RPG game in this article we’ll implement the code for the Monster and Room classes. Both of these classes are critical to our application so pay close attention to the instructions.</p>","more":"<p><a href=\"/2011/06/09/textbasedrpgpart3\">Click here for part III</a><br><a href=\"/2011/06/15/textbasedrpgpart5\">Click here for part V</a></p>\n<p>In part 4 we’re going to implement the methods for two classes, the Monster class and the Room class. Due to its overall small code base we’ll look at the Monster class first. To jog your memory, below are the declarations for the Monster class from “database.h”.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Monster</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence ) ;</div><div class=\"line\">    <span class=\"comment\">//~Monster() </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newHp )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getHp</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStrength</span><span class=\"params\">( <span class=\"keyword\">int</span> newStrength )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStrength</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDefence</span><span class=\"params\">( <span class=\"keyword\">int</span> newDefence )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDefence</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMaxHp</span><span class=\"params\">( <span class=\"keyword\">int</span> newMaxHp )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> mMaxHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mHp ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mStrength ;</div><div class=\"line\">    <span class=\"keyword\">int</span> mDefence ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"keyword\">bool</span> inCombat ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure></p>\n<p>Much like in previous parts we’ll write out the test cases prior to writing any of the methods. Go ahead and add this line to your “Test.h” file.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_monster_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>Next open up “Test.cpp”, the Monster class is very basic and just involves a constructor along with four getter/setter pairs. Again with the constructor test we just assert that each attribute is the same as the values we pass into it.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_monster_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Monster constuctor test</span></div><div class=\"line\">  <span class=\"function\">Monster <span class=\"title\">test_monster</span><span class=\"params\">(<span class=\"string\">\"test\"</span>, <span class=\"number\">20</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"test\"</span> == test_monster.mName);</div><div class=\"line\">  assert(<span class=\"number\">20</span> == test_monster.mHp);</div><div class=\"line\">  assert(<span class=\"number\">10</span> == test_monster.mStrength);</div><div class=\"line\">  assert(<span class=\"number\">11</span> == test_monster.mDefence);</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == test_monster.inCombat);</div><div class=\"line\">  assert(test_monster.mHp == test_monster.mMaxHp);</div></pre></td></tr></table></figure></p>\n<p>Lastly for the monster test the getters/setters are pretty basic as well, just type in the code below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Monster getters and setters test</span></div><div class=\"line\">  <span class=\"function\">Monster <span class=\"title\">monster</span><span class=\"params\">(<span class=\"string\">\"gettersetter\"</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  monster.setName(<span class=\"string\">\"dragon\"</span>);</div><div class=\"line\">  monster.setHp(<span class=\"number\">100</span>);</div><div class=\"line\">  monster.setMaxHp(<span class=\"number\">999</span>);</div><div class=\"line\">  monster.setStrength(<span class=\"number\">50</span>);</div><div class=\"line\">  monster.setDefence(<span class=\"number\">200</span>);</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"dragon\"</span> == monster.getName());</div><div class=\"line\">  assert(<span class=\"number\">100</span> == monster.getHp());</div><div class=\"line\">  assert(<span class=\"number\">50</span> == monster.getStrength());</div><div class=\"line\">  assert(<span class=\"number\">200</span> == monster.getDefence());</div><div class=\"line\">  assert(<span class=\"number\">999</span> == monster.mMaxHp);</div><div class=\"line\">  assert(monster.getHp() != monster.mMaxHp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now that the test have been defined we can now code up the methods for the monster class; so open up the “database.cpp” file and add the lines below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Monster::Monster( <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> maxHp, <span class=\"keyword\">int</span> strength, <span class=\"keyword\">int</span> defence )</div><div class=\"line\">: mName(name), mMaxHp(maxHp), mStrength(strength), mDefence(defence)</div><div class=\"line\">&#123;</div><div class=\"line\">  setHp(maxHp);</div><div class=\"line\">  inCombat = <span class=\"literal\">false</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Monster::setHp( <span class=\"keyword\">int</span> newHp )</div><div class=\"line\">&#123;</div><div class=\"line\">  mHp = newHp ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Monster::getHp( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mHp ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Monster::setStrength( <span class=\"keyword\">int</span> newStrength )</div><div class=\"line\">&#123;</div><div class=\"line\">  mStrength = newStrength ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Monster::getStrength( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mStrength ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Monster::setDefence( <span class=\"keyword\">int</span> newDefence )</div><div class=\"line\">&#123;</div><div class=\"line\">  mDefence = newDefence ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Monster::getDefence( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mDefence ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Monster::setName( <span class=\"built_in\">string</span> newName ) </div><div class=\"line\">&#123;</div><div class=\"line\">  mName = newName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Monster::getName( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Monster::setMaxHp( <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> newMaxHp ) </div><div class=\"line\">&#123;</div><div class=\"line\">  mMaxHp = newMaxHp ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now that the Monster class is complete we are now going to finish the Room class, for reference here it is again from the “database.h” file.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Room </div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item = <span class=\"literal\">NULL</span> ) ;</div><div class=\"line\">    <span class=\"comment\">//Room( void ) ;</span></div><div class=\"line\">    <span class=\"comment\">//~Room()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">bool</span> success ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addMonster</span><span class=\"params\">( Monster* newMonster )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Monster&amp; <span class=\"title\">getMonsterRef</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">killMonster</span><span class=\"params\">( <span class=\"built_in\">string</span> monsterName )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">itemTaken</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">searchResponse</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">success <span class=\"title\">link</span><span class=\"params\">( <span class=\"keyword\">char</span> direction, Room&amp; room )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">north</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">south</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">east</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\">    <span class=\"function\">Room&amp; <span class=\"title\">west</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">( <span class=\"built_in\">string</span> newName )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">( <span class=\"built_in\">string</span> newDescription )</span> </span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getDescription</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> <span class=\"keyword\">const</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setItem</span><span class=\"params\">( Item* newItem )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">    Item* mItem ;</div><div class=\"line\">    Room* mNorth ;</div><div class=\"line\">    Room* mSouth ;</div><div class=\"line\">    Room* mEast ;</div><div class=\"line\">    Room* mWest ;</div><div class=\"line\">    <span class=\"built_in\">list</span>&lt; Monster* &gt; mMonsters ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mName ;</div><div class=\"line\">    <span class=\"built_in\">string</span> mDescription ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure></p>\n<p>To define the unit test lets open the “Test.cpp” file and begin with the Room class constructor. Based on our class declarations the Room constructor must be tested for the case where we initialize with and without a starting Item.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_room_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Room constructor test</span></div><div class=\"line\">  <span class=\"function\">Room <span class=\"title\">room_no_item</span><span class=\"params\">(<span class=\"string\">\"Cave\"</span>, <span class=\"string\">\"A dark cave\"</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"Cave\"</span> == room_no_item.mName);</div><div class=\"line\">  assert(<span class=\"string\">\"A dark cave\"</span> == room_no_item.mDescription);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> == room_no_item.mItem);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> == room_no_item.mNorth);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> == room_no_item.mSouth);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> == room_no_item.mEast);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> == room_no_item.mWest);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Room constructor test</span></div><div class=\"line\">  <span class=\"function\">Room <span class=\"title\">room_with_item</span><span class=\"params\">(<span class=\"string\">\"Pit\"</span>, <span class=\"string\">\"A deep pit\"</span>, <span class=\"keyword\">new</span> Item)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">\"Pit\"</span> == room_with_item.mName);</div><div class=\"line\">  assert(<span class=\"string\">\"A deep pit\"</span> == room_with_item.mDescription);</div><div class=\"line\">  assert(<span class=\"literal\">NULL</span> != room_with_item.mItem);</div><div class=\"line\">  assert(<span class=\"string\">\"\"</span> == room_with_item.mItem-&gt;getName());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == room_with_item.mItem-&gt;mAvailiable);</div></pre></td></tr></table></figure></p>\n<p>  Next we’re going to add a monster to a new room and successfully find the same monster within the room. Note that due to the choice of a List data structure to hold the Monsters we have two options for finding the Monster; either by checking the back of the list for the most recently added monster or by passing the monster’s name as a parameter to our “getMonsterRef()” method which gets the monster’s reference from our List.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Room addMonster test</span></div><div class=\"line\">  <span class=\"function\">Monster <span class=\"title\">monster</span><span class=\"params\">(<span class=\"string\">\"monster\"</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">room_monster</span><span class=\"params\">(<span class=\"string\">\"House\"</span>, <span class=\"string\">\"A haunted mansion\"</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">room_monster.addMonster(&amp;monster);</div><div class=\"line\"></div><div class=\"line\">assert(&amp;monster == room_monster.mMonsters.back());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Room getMonsterRef test</span></div><div class=\"line\">assert(&amp;monster == &amp;(room_monster.getMonsterRef(</div><div class=\"line\">        monster.getName())));</div><div class=\"line\">assert(<span class=\"literal\">NULL</span> == &amp;(room_monster.getMonsterRef(<span class=\"string\">\"sheep\"</span>)));</div></pre></td></tr></table></figure></p>\n<p>  Then we should test the ability for a monster to be removed from a room, if a monster is present we expect the kill monster method to return true else it should return false. In addition if the name of the monster we are trying to kill is not found then kill monster should also return false.<br>  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Room killMonster test</span></div><div class=\"line\">  assert(<span class=\"literal\">false</span> == room_monster.killMonster(<span class=\"string\">\"Invalid monster name\"</span>));</div><div class=\"line\">assert(<span class=\"literal\">true</span> == room_monster.killMonster(monster.getName()));</div><div class=\"line\">assert(<span class=\"literal\">false</span> == room_monster.killMonster(monster.getName()));</div></pre></td></tr></table></figure></p>\n<p> If the Room’s item is taken then the item itself should no longer be available.<br> <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Room itemTaken test</span></div><div class=\"line\">  room_with_item.itemTaken();</div><div class=\"line\"></div><div class=\"line\">assert(<span class=\"literal\">false</span> == room_with_item.mItem-&gt;mAvailiable);</div></pre></td></tr></table></figure></p>\n<p>Next we have the ability to search the room for either monsters and or items. Thinking about this you might be wondering how many different responses are possible. Well the solution is rather simple. <blockquote>A room can hold monsters and a single item. So the item is either present or not present within the room. For the monsters they are also either present or all dead. So we have two possible outcomes for the items and two possible outcomes for the monsters</blockquote> </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Room searchResponse</div><div class=\"line\">// Possible game responses without monsters in the room</div><div class=\"line\">// a) \"There is a Item.mName in this room.\"</div><div class=\"line\">// b) \"After searching, you found nothing of value\"</div><div class=\"line\">Room room_a(\"Forest\", \"Many trees\", new Item(\"Suit\", Item::ARMOR, 0, </div><div class=\"line\">      20, 0));</div><div class=\"line\">string response_a(\"There is a Suit in this room.\");</div><div class=\"line\"></div><div class=\"line\">assert(response_a == room_a.searchResponse());</div><div class=\"line\"></div><div class=\"line\">Room room_b(\"Desert\", \"Sandy plains\");</div><div class=\"line\">string response_b(\"After searching, you found nothing of value\");</div><div class=\"line\"></div><div class=\"line\">assert(response_b == room_b.searchResponse());</div><div class=\"line\"></div><div class=\"line\">// Possible game responses with monsters</div><div class=\"line\">// c) \"There is a Item.mName in this room.\\nThere is a monster nearby...</div><div class=\"line\">//    Attack the Monster.mName\"</div><div class=\"line\">// d) \"After searching, you found nothing of value\\nThere is a </div><div class=\"line\">//    monster nearby... Attack the Monster.mName\"</div><div class=\"line\">Room room_c(\"Sea\", \"Water\", new Item(\"Blade\", Item::WEAPON, 5, 0, 0));</div><div class=\"line\">Monster goblin(\"Goblin\", 1, 2, 3);</div><div class=\"line\">room_c.addMonster(&amp;goblin);</div><div class=\"line\">string response_c(\"There is a Blade in this room.\\nThere is a monster nearby...\\nAttack the Goblin\");</div><div class=\"line\"></div><div class=\"line\">assert(response_c == room_c.searchResponse());</div><div class=\"line\"></div><div class=\"line\">Room room_d(\"Space\", \"Outer space\");</div><div class=\"line\">Monster alien(\"Alien\", 4, 5, 6);</div><div class=\"line\">room_d.addMonster(&amp;alien);</div><div class=\"line\">string response_d(\"After searching, you found nothing of value\\nThere is a monster nearby...\\nAttack the Alien\");</div><div class=\"line\"></div><div class=\"line\">assert(response_d == room_d.searchResponse());</div></pre></td></tr></table></figure>\n<p>Given that we want the players to be able to move freely about, every room has four possible directions leading from it; the usual north, south, east and west. By chance if we accidently tried to invent a new direction the Room linking method should return false.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Room link test</span></div><div class=\"line\"><span class=\"comment\">// The possible directions are 'n', 'e', 'w' or 's'</span></div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">home_room</span><span class=\"params\">(<span class=\"string\">\"House\"</span>, <span class=\"string\">\"A large building\"</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">north</span><span class=\"params\">(<span class=\"string\">\"Pool\"</span>, <span class=\"string\">\"A swimming poool\"</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">south</span><span class=\"params\">(<span class=\"string\">\"Yard\"</span>, <span class=\"string\">\"Front lawn\"</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">east</span><span class=\"params\">(<span class=\"string\">\"Garage\"</span>, <span class=\"string\">\"Empty garage\"</span>)</span></span>;</div><div class=\"line\"><span class=\"function\">Room <span class=\"title\">west</span><span class=\"params\">(<span class=\"string\">\"Balcony\"</span>, <span class=\"string\">\"Wooden balcony\"</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Bad direction</span></div><div class=\"line\">assert(<span class=\"literal\">false</span> == home_room.link(<span class=\"string\">'z'</span>, north));</div><div class=\"line\"><span class=\"comment\">// Good directions</span></div><div class=\"line\">assert(<span class=\"literal\">true</span> == home_room.link(<span class=\"string\">'n'</span>, north));</div><div class=\"line\">assert(<span class=\"literal\">true</span> == home_room.link(<span class=\"string\">'s'</span>, south));</div><div class=\"line\">assert(<span class=\"literal\">true</span> == home_room.link(<span class=\"string\">'e'</span>, east));</div><div class=\"line\">assert(<span class=\"literal\">true</span> == home_room.link(<span class=\"string\">'w'</span>, west));</div><div class=\"line\"><span class=\"comment\">// Verify links</span></div><div class=\"line\">assert(&amp;north == &amp;(home_room.north()));</div><div class=\"line\">assert(&amp;south == &amp;(home_room.south()));</div><div class=\"line\">assert(&amp;west == &amp;(home_room.west()));</div><div class=\"line\">assert(&amp;east == &amp;(home_room.east()));</div></pre></td></tr></table></figure></p>\n<p>Lastly you can just add the Room getters/setters into the “Test.cpp” file.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// Room getters and setters</span></div><div class=\"line\">  home_room.setName(<span class=\"string\">\"new room\"</span>);</div><div class=\"line\">  assert(<span class=\"string\">\"new room\"</span> == home_room.mName);</div><div class=\"line\"></div><div class=\"line\">  home_room.setDescription(<span class=\"string\">\"Your new room\"</span>);</div><div class=\"line\">  assert(<span class=\"string\">\"Your new room\"</span> == home_room.getDescription());</div><div class=\"line\"></div><div class=\"line\">  Item* sword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"sword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  home_room.setItem(sword);</div><div class=\"line\">  assert(sword == home_room.mItem);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>What we want to do next is to define the methods for the Room class. So open up the “database.cpp” file and lets get started, we’ll begin with the constructor for the Room so just pay attention to the use of the initialization list for the Room’s attributes.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Room::Room( <span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> description, Item* item )</div><div class=\"line\">: mName(name), mDescription(description), mItem(item)</div><div class=\"line\">&#123;</div><div class=\"line\">  mNorth = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">  mSouth = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">  mEast = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">  mWest = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The next method we define will be the “Room::Link()” method. Given that the input is a single char we just have to check whether it is valid or not and then connect the room to the appropriate link. So a switch case block will be sufficient.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bool</span> Room::link( <span class=\"keyword\">char</span> direction, MUD::Room&amp; room )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">switch</span>( direction )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'n'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'N'</span>:</div><div class=\"line\">      mNorth = &amp;room ;</div><div class=\"line\">      flag = <span class=\"literal\">true</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'S'</span>:</div><div class=\"line\">      mSouth = &amp;room ;</div><div class=\"line\">      flag = <span class=\"literal\">true</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'E'</span>:</div><div class=\"line\">      mEast = &amp;room ;</div><div class=\"line\">      flag = <span class=\"literal\">true</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'w'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'W'</span>:</div><div class=\"line\">      mWest = &amp;room ;</div><div class=\"line\">      flag = <span class=\"literal\">true</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> flag ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now that we can link rooms together the next methods will consist of returning the room for a defined direction.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Room&amp; Room::north( <span class=\"keyword\">void</span> ) </div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> *mNorth ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Room&amp; Room::south( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> *mSouth ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Room&amp; Room::east( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> *mEast ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Room&amp; Room::west( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> *mWest ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We define the setter for the name attribute.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Room::setName( <span class=\"built_in\">string</span> newName )</div><div class=\"line\">&#123;</div><div class=\"line\">  mName = newName ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Next we have to define how the room should interact with monsters or rather adding, finding and or removing monsters. The first idea is simple, given that we are storing the Monster’s within a List data structure, to add a monster we simply append it to the back of the list.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Room::addMonster( Monster* newMonster )</div><div class=\"line\">&#123;</div><div class=\"line\">  mMonsters.push_back( newMonster ) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>In order to find a monster within our list of monsters we just iterate over the monster list until we match the name with the name of the monster we’re searching for; if no monster matched then we just return null.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Monster&amp; Room::getMonsterRef( <span class=\"built_in\">string</span> monsterName ) </div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">list</span>&lt; Monster* &gt;::iterator iter ;</div><div class=\"line\">  Monster* monsterRef = <span class=\"literal\">NULL</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( (*iter)-&gt;getName() == monsterName )</div><div class=\"line\">    &#123;</div><div class=\"line\">      monsterRef = *iter ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> *monsterRef ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>For removing i.e killing a monster the idea is the same as finding it but we then remove it from the list of monsters as opposed to returning its reference. When the monster is not found we return false to indicate that no removal occurred.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Room::success Room::killMonster( <span class=\"built_in\">string</span> monsterName )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">list</span>&lt; Monster* &gt;::iterator iter ;</div><div class=\"line\">  <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( (*iter)-&gt;getName() == monsterName )</div><div class=\"line\">    &#123;</div><div class=\"line\">      mMonsters.erase( iter ) ;</div><div class=\"line\">      flag = <span class=\"literal\">true</span> ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> flag ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Moving on, when an Item is taken from the room we just mark that the Item is unavailable.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Room::itemTaken( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  mItem-&gt;mAvailiable = <span class=\"literal\">false</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Room::setItem( Item* newItem )</div><div class=\"line\">&#123;</div><div class=\"line\">  mItem = newItem ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The Room’s description is another getter/setter pair.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Room::setDescription( <span class=\"built_in\">string</span> newDescription )</div><div class=\"line\">&#123;</div><div class=\"line\">  mDescription = newDescription ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Room::getDescription( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mDescription ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Finally we have to define the “Room::searchResponse()” method. The objective is to return a string object with all the information gathered about the current Room’s monsters and items. So lets start out with just the lines below,<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">string</span> Room::searchResponse( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">string</span> response ;</div></pre></td></tr></table></figure></p>\n<p>First we’re going to check if an item is currently in the room. An item exist within a room if its both not NULL and is currently available, else there is no item in the room.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>( mItem != <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"literal\">true</span> == mItem-&gt;mAvailiable )</div><div class=\"line\">&#123;</div><div class=\"line\">  response = <span class=\"string\">\"There is a \"</span> + mItem-&gt;getName() + <span class=\"string\">\" in this room.\"</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">  response = <span class=\"string\">\"After searching, you found nothing of value\"</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Then, if there are monsters present(the monster list is non empty) and for the monsters who are not currently in combat with another player we should present the player with the option to attack it; finally adding this information to the response string.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">if</span>( !mMonsters.empty() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      response = response + <span class=\"string\">\"\\nThere is a monster nearby...\"</span> ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">list</span>&lt; Monster* &gt;::iterator iter ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span>( iter = mMonsters.begin() ; iter != mMonsters.end() ; ++iter )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( <span class=\"literal\">false</span> == (*iter)-&gt;inCombat )</div><div class=\"line\">        &#123;</div><div class=\"line\">          response = response + <span class=\"string\">\"\\nAttack the \"</span> + (*iter)-&gt;getName() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Lets run the test by changing our “main.cpp” file to look like the one below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Filename main.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Database.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  Test::get_instance()-&gt;test_item_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_monster_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_room_class();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"/2011/06/15/textbasedrpgpart5\">Click here for part V</a></p>"},{"title":"Build A Text Based Multiplayer RPG Part V","date":"2011-06-15T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart5.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart5.JPG","comments":0,"_content":"The fifth part of the tutorial on creating a text based multiplayer RPG game will see us creating the last part of the testing and game mechanics before the next section where we'll launch the client and server code to actually test our game in action.\n\n<!-- more -->\n- [Click here for part IV][link_part_4]\n- [Click here for part VI][link_part_6]\n\nIn this part of the tutorial we will complete the test and methods necessary to get the full functionality for the stand alone single player version. In the next part of the tutorial part 6, we will begin to develop both the client and server code that allows other users to connect and play our game over a local area network. So lets continue with the testing and move onto the player class. Go ahead and open up the “test.h\" file and add line below.\n\n```c\nvoid test_player_class();\n```\n\nThen open up the file “test.cpp\" and add the methods for the player test class beginning at the line indicated.\n\n```c\nvoid Test::test_player_class(void)\n{\n  // Player constructor w/o initial room\n  Player no_room_player(\"hero\");\n\n  assert(10 == no_room_player.mMaxHp);\n  assert(10 == no_room_player.mHp);\n  assert(1 == no_room_player.mStrength);\n  assert(0 == no_room_player.mDefence);\n  assert(NULL == no_room_player.mLocation);\n  assert(\"hero\" == no_room_player.mName);\n  assert(NULL == no_room_player.mWeapon);\n  assert(NULL == no_room_player.mArmor);\n\n  // Player constructor w/room\n  Player room_player(\"dude\", new Room(\"Home\", \"A big house\"));\n\n  assert(NULL != room_player.mLocation);\n\n  // Player getters/setters\n  Player get_set(\"setter\", new Room(\"Lake\", \"A clean lake\"));\n\n  get_set.setDefence(1);\n  get_set.setHp(10);\n  get_set.setName(\"getter\");\n  get_set.setStrength(2);\n\n  assert(1 == get_set.getDefence());\n  assert(10 == get_set.getHp());\n  assert(\"getter\" == get_set.getName());\n  assert(2 == get_set.getStrength());\n  assert(\"Lake\" == get_set.getLocation());\n\n  // Player equip test\n  // The Item is not found\n  // - There is no item within the room \"There is no item to equip in this rooom\"\n  // - The player misspelled the item name \"To equip an item you must type its full name correctly\"\n  Room no_item_room(\"Itemless\", \"There is no item here\");\n  Player no_item_player(\"Hi\");\n  no_item_player.mLocation = &no_item_room;\n  string response(\"There is no item to equip in this room\");\n\n  assert(response == no_item_player.equip(\"Bad Item name\"));\n\n  Room with_item(\"Item room\", \"Item filled room\", new Item(\"dagger\", Item::WEAPON, 10, 0, 0));\n  no_item_player.mLocation = &with_item;\n  response = \"To equip an item you must type its full name correctly\";\n\n  assert(response == no_item_player.equip(\"daggers\"));\n\n  // Weapon is found\n  // - The weapon becomes unavailable\n  // - The players strength is set equal to the weapons power value\n  // - The response returned is \"You equipped the Item.mName\"      Player item_player(\"Bye\", &with_item);\n  response = \"You equipped the dagger\";\n\n  assert(response == item_player.equip(\"dagger\"));\n  assert(false == with_item.mItem->mAvailiable);\n  assert(with_item.mItem->getPower() == item_player.getStrength());\n\n  // Armor is found\n  // - The armor becomes unavailable\n  // - The players vitality is set equal to the armor's defence  // - The response returned is \"You equipped the Item.mName\"\n  // - The armor's health value is added to the players max hp\n  Item* steel_plate = new Item(\"steelplate\", Item::ARMOR, 0, 10, 20);\n  with_item.setItem(steel_plate);\n  response = \"You equipped the steelplate\";\n\n  assert(response == item_player.equip(\"steelplate\"));\n  assert(with_item.mItem->mAvailiable == false);\n  assert(steel_plate->getHealth() + item_player.getHp()\n      == item_player.mMaxHp);\n  assert(with_item.mItem->getVitality() == item_player.getDefence());\n\n  // Health is found\n  // - The health item becomes unavailable\n  // - The player's hp is fully restored\n  // - The response is \"You were healed\"\n  Item* herb = new Item(\"herbs\", Item::HEALTH, 0, 0, 0);\n  with_item.setItem(herb);\n  response = \"You were healed\";\n\n  assert(response == item_player.equip(\"herbs\"));\n  assert(with_item.mItem->mAvailiable == false);\n  assert(item_player.getHp() == item_player.mMaxHp);\n\n  // Player attack test\n  // a- There are no monsters within the Room then the method should  //methodreturn \"There are no monsters in this room to fight\"\n  // b- The player mis-typed the monster name then\n  //name\"The Monster.mName is not here\"\n  // c- If damage was dealt to the monster then the message should say\n  //should\"Monster.mName was dealt X damage\"  // d- If no damage was dealt to the monster then the message should say\n  //should\"Monster.mName dodged the attack\"\n  string response_a(\"There are no monsters in this room to fight\");\n  string response_b(\"The roll is not here\");\n  string response_c(\"troll was dealt 30 damage\");\n  string response_d(\"supertroll dodged the attack\");\n\n  Item* great_sword = new Item(\"greatsword\", Item::WEAPON, 30, 0, 0);\n  Room* arena = new Room(\"arena\", \"A large crowd gathers\", great_sword);\n  Monster* troll = new Monster(\"troll\", 50, 0, 0);\n\n  arena->setItem(great_sword);\n  Player* attacker = new Player(\"Fighter\", arena);\n  attacker->equip(\"greatsword\");\n\n  assert(response_a == attacker->attack(\"troll\"));\n\n  arena->addMonster(troll);\n\n  assert(response_b == attacker->attack(\"roll\"));\n  assert(response_c == attacker->attack(\"troll\"));\n\n  Monster* super_troll = new Monster(\"supertroll\", 8, 0, 999);\n  arena->addMonster(super_troll);\n  assert(response_d == attacker->attack(\"supertroll\"));\n\n  // Player move test\n  // - If the player moves in an invalid direction then  //direction\"You traveled nowhere\" should be returned\n  // - If the direction is valid but no room is connected\n  //is\"There is nothing in that direction\"\n  // - If the direction is valid and a room exist\n  //room\"You traveled directionname\\nmLocation->getDescription()\"\n  Room* moving_room = new Room(\"Moving room\", \"You can move from here\");\n  Room* moving_north = new Room(\"Moving north\",  \"North of the moving room\");\n  Room* moving_south = new Room(\"Moving south\",  \"South of the moving room\");\n  Room* moving_west = new Room(\"Moving west\",\n      \"West of the moving room\");\n  Room* moving_east = new Room(\"Moving east\",\n      \"East of the moving room\");\n\n  Player* moving_player = new Player(\"Jill\", moving_room);\n  response = \"You traveled nowhere\";\n\n  assert(response == moving_player->move('p'));\n\n  response = \"There is nothing in that direction\";\n\n  assert(response == moving_player->move('n'));\n  assert(response == moving_player->move('e'));\n  assert(response == moving_player->move('w'));\n  assert(response == moving_player->move('s'));\n\n  moving_player->mLocation = moving_room;\n  response = \"You traveled North\\n\" + moving_north->getDescription();\n  moving_room->link('n', *moving_north);\n  assert(response == moving_player->move('n'));\n\n  moving_player->mLocation = moving_room;\n  response = \"You traveled South\\n\" + moving_south->getDescription();\n  moving_room->link('s', *moving_south);\n  assert(response == moving_player->move('s'));\n\n  moving_player->mLocation = moving_room;\n  response = \"You traveled West\\n\" + moving_west->getDescription();\n  moving_room->link('w', *moving_west);\n  assert(response == moving_player->move('w'));\n\n  moving_player->mLocation = moving_room;\n  response = \"You traveled East\\n\" + moving_east->getDescription();\n  moving_room->link('e', *moving_east);\n  assert(response == moving_player->move('e'));\n\n  // Player search test\n  // Exact same as the string Room::searchResponse( void )  // method so it has already been tested\n\n  // Player death test\n  // -Returns true when the player's hp is less than zero\n  // -Returns false when the player's hp is greater than zero\n  Player* death_test = new Player(\"Dead guy\");\n\n  assert(false == death_test->death());\n\n  death_test->setHp(-1);\n  assert(true == death_test->death());\n}\n```\n\nNow that we have the methods for the player class all set the next thing we have to do is to write out the methods for the player class. To do so open up the file “database.cpp\" and add the methods for the player class below.\n\n```c\nPlayer::Player( string name, Room* start )  : mName(name), mLocation(start), mWeapon(NULL), mArmor(NULL),\n  mHp(10), mMaxHp(10), mStrength(1), mDefence(0)\n{\n}\n\nvoid Player::setHp( int newHp )\n{\n  mHp = newHp ;\n}\n\nint Player::getHp( void ) const\n{\n  return mHp ;\n}\n\nvoid Player::setStrength( int newStrength )\n{\n  mStrength = newStrength ;\n}\n\nint Player::getStrength( void ) const\n{\n  return mStrength ;\n}\n\nvoid Player::setDefence( int newDefence )\n{\n  mDefence = newDefence ;\n}\n\nint Player::getDefence( void ) const\n{\n  return mDefence ;\n}\n\nstring Player::getLocation( void )\n{\n  return mLocation->mName ;\n}\n\nvoid Player::setName( string newName )\n{\n  mName = newName ;\n}\n\nstring Player::getName( void ) const  {\n  return mName ;\n}\n\nstring Player::attack( string monsterName )\n{\n  list< Monster* >::iterator iter ;\n  int damage = 0 ;\n  string response( \"The \" + monsterName + \" is not here\" ) ;  stringstream ss ;\n  string strDamage ;\n\n  if( mLocation->mMonsters.empty() )\n  {\n    return \"There are no monsters in this room to fight\" ;\n  }\n\n  for( iter = mLocation->mMonsters.begin() ; iter != mLocation->mMonsters.end() ; ++iter )\n  {\n    if( (*iter)->getName() == monsterName )\n    {\n      damage = getStrength() - (*iter)->getDefence() ;\n      ss << damage ;\n      ss >> strDamage ;\n      ss.clear() ;\n\n      if( damage > 0 )\n      {\n        (*iter)->setHp( (*iter)->getHp() - damage ) ;\n        response = (*iter)->getName() + \" was dealt \" + strDamage + \" damage\" ;\n      }\n      else\n      {\n        response = (*iter)->getName() + \" dodged the attack\" ;\n      }\n\n      break ;\n    }\n  }\n\n  return response ;\n}\n\nstring Player::equip( string itemName )\n{\n  string response ;\n\n  if( mLocation->mItem != NULL && mLocation->mItem->getName() == itemName )\n  {\n    if( Item::WEAPON == mLocation->mItem->getType() && true == mLocation->mItem->mAvailiable )\n    {\n      mWeapon = mLocation->mItem ;\n      mLocation->itemTaken() ;\n      setStrength( mWeapon->getPower() ) ;\n      response = \"You equipped the \" + mWeapon->getName() ;\n      return response ;\n    }\n    else if( Item::ARMOR == mLocation->mItem->getType() && true == mLocation->mItem->mAvailiable )\n    {\n      mArmor = mLocation->mItem ;\n      mLocation->itemTaken() ;\n      setDefence( mArmor->getVitality() ) ;\n      mMaxHp += mArmor->getHealth() ;\n      response = \"You equipped the \" + mArmor->getName() ;\n      return response ;\n    }\n    else\n    {\n      setHp( mMaxHp ) ;\n      mLocation->itemTaken() ;\n      response = \"You were healed\" ;\n      return response ;\n    }\n  }\n  else\n  {\n    if( mLocation->mItem == NULL )\n    {\n      return \"There is no item to equip in this room\" ;\n    }\n    response = \"To equip an item you must type its full name correctly\" ;\n\n    return response ;\n  }\n}\n\nstring Player::move( char direction )\n{\n  string response = \"You traveled \" ;\n  switch( direction )\n  {\n    case 'n':\n    case 'N':\n      if( NULL == mLocation->mNorth )\n      {\n        response = \"There is nothing in that direction\" ;\n        break ;\n      }\n      mLocation = &(mLocation->north()) ;\n      response = response + \"North\\n\" + mLocation->getDescription() ;\n      break ;\n\n    case 's':\n    case 'S':\n      if( NULL == mLocation->mSouth )\n      {\n        response = \"There is nothing in that direction\" ;\n        break ;\n      }\n      mLocation = &(mLocation->south()) ;\n      response = response + \"South\\n\" + mLocation->getDescription() ;\n      break ;\n\n    case 'e':\n    case 'E':\n      if( NULL == mLocation->mEast )\n      {\n        response = \"There is nothing in that direction\" ;\n        break ;\n      }\n      mLocation = &(mLocation->east()) ;\n      response = response + \"East\\n\" + mLocation->getDescription() ;\n      break ;\n\n    case 'w':\n    case 'W':\n      if( NULL == mLocation->mWest )\n      {\n        response = \"There is nothing in that direction\" ;\n        break ;\n      }\n      mLocation = &(mLocation->west()) ;\n      response = response + \"West\\n\" + mLocation->getDescription() ;\n      break ;\n\n    default:\n      response = response + \"nowhere\" ;\n  }\n\n  return response ;\n}\n\nstring Player::search( void )\n{\n  return mLocation->searchResponse() ;\n}\n\nPlayer::dead Player::death( void )\n{\n  if( getHp() <= 0 )\n  {\n    return true ;\n  }\n\n  return false ;\n}\n```\nAfterwards you can begin to test the Dungeon class, so open up the file “test.h\" file and add the following line.\n\n```c\nvoid test_dungeon_class(void);\n```\n\nHere are the methods for the dungeon test, it is quite long so you can copy it if you want to but I suggest typing it out and reading through the comments in order to better understand the codebase; the file for the code below is “test.cpp\"\n\n```c\nvoid Test::test_dungeon_class(void)\n{\n  // Dungeon constructor test\n  Dungeon* test_dungeon = new Dungeon(1, 1);\n\n  assert(1 == test_dungeon->mMaxPlayers);\n  assert(1 == test_dungeon->mMaxRooms);\n  assert(true == test_dungeon->mPlayers.empty());\n  assert(true == test_dungeon->mRooms.empty());\n  // - A dungeon without monsters is considered complete\n  assert(true == test_dungeon->isComplete());\n\n  // Dungeon addPlayer test\n  // - Successful addition of a new player should display the following\n  //the\"The player named newPlayer->getName() entered the Dungeon\"\n  Player* newbie = new Player(\"Noob\");\n  string response(\"The player named Noob entered the Dungeon\");\n\n  assert(response == test_dungeon->addPlayer(newbie));\n  assert(false == test_dungeon->mPlayers.empty());\n\n  // Dungeon addRoom test\n  // - \"The room: newRoom->mName was added\" will be displayed\n  //beif the addition was successful\n  Room* main_room = new Room(\"Main hall\", \"The main hall\");\n  response = \"The room: Main hall was added\";\n\n  assert(response == test_dungeon->addRoom(main_room));\n  assert(false == test_dungeon->mRooms.empty());\n\n  // Dungeon removePlayer test\n  response = \"Noob has left the dungeon\";\n  assert(response == test_dungeon->removePlayer(newbie->getName()));\n\n  // Dungeon generatePlayerStats test\n  // -Sets the players max hp to 10, strength and defence to 2\n  test_dungeon->generatePlayerStats(newbie);\n\n  assert(10 == newbie->getHp());\n  assert(2 == newbie->getStrength());\n  assert(2 == newbie->getDefence());\n\n  // Dungeon combatLoop test\n  // - If the hero is stronger than the monster then the monster  //theshould die else the hero should die\n  Dungeon* combat_test = new Dungeon(1, 1);\n  Room* combat_room = new Room(\"Battle\", \"Fight here\");\n  Item* longsword = new Item(\"longsword\", Item::WEAPON, 100, 0, 0);\n  Player* brawler = new Player(\"brawler\", combat_room);\n  Monster* ogre = new Monster(\"ogre\", 10, 0, 0);  Monster* superogre = new Monster(\"superogre\", 100, 100, 100);  combat_room->setItem(longsword);\n  combat_room->addMonster(ogre);\n  combat_room->addMonster(superogre);\n  combat_test->addRoom(combat_room);\n  combat_test->addPlayer(brawler);\n  combat_test->generatePlayerStats(brawler);\n  brawler->mLocation = combat_room;\n  brawler->equip(\"longsword\");\n\n  combat_test->combatLoop(*brawler, *ogre);\n  assert(combat_room->mMonsters.empty() == false);\n  assert(combat_test->isComplete() == false);\n\n  Item* badsword = new Item(\"badsword\", Item::WEAPON, 0, 0, 0);\n  combat_room->setItem(badsword);\n  brawler->equip(\"badsword\");\n\n  combat_test->combatLoop(*brawler, *superogre);\n  assert(true == brawler->death());\n\n  // Dungeon playerStatus test\n  Dungeon* status_test = new Dungeon(1, 2);\n  Room* start_room = new Room(\"Starting room\", \"Start here\");\n  Room* end_room = new Room(\"Ending room\", \"End here\");\n  Player* stats_hero = new Player(\"Mike\", start_room);\n  Item* weapon_x = new Item(\"weaponx\", Item::WEAPON, 20, 0, 0);\n  Item* armor_x = new Item(\"armorx\", Item::ARMOR, 0, 20, 10);\n\n  start_room->link('e', *end_room);\n  end_room->link('w', *start_room);\n  start_room->setItem(weapon_x);\n  end_room->setItem(armor_x);\n  status_test->addRoom(start_room);\n  status_test->addRoom(end_room);\n  status_test->addPlayer(stats_hero);\n\n  // The stats reported are the following\n  /*\n     1. Hp\n     2. Strength\n     3. Defence\n     4. Location\n     5. Name\n     6. Weapon\n     7. Armor\n   */\n  const int stat_total = 7;\n  string* status_before_weapon = new string[stat_total];\n  string* status_with_weapon = new string[stat_total];\n  string* status_with_armor = new string[stat_total];\n\n  status_before_weapon[0] = \"Current HP: 10 out of 10\";\n  status_before_weapon[1] = \"Current Strength: 2\";\n  status_before_weapon[2] = \"Current Defence: 2\";\n  status_before_weapon[3] = \"Current Location: Starting room\";\n  status_before_weapon[4] = \"Current Name: Mike\";\n  status_before_weapon[5] = \"Current Weapon: none equipped\";\n  status_before_weapon[6] = \"Current Armor: none equipped\";\n\n  assert(status_before_weapon = status_test->playerStatus(*stats_hero));\n\n  stats_hero->equip(\"weaponx\");\n\n  status_with_weapon[0] = \"Current HP: 10 out of 10\";\n  status_with_weapon[1] = \"Current Strength: 20\";\n  status_with_weapon[2] = \"Current Defence: 2\";\n  status_with_weapon[3] = \"Current Location: Starting room\";\n  status_with_weapon[4] = \"Current Name: Mike\";\n  status_with_weapon[5] = \"Current Weapon: weaponx\";\n  status_with_weapon[6] = \"Current Armor: none equipped\";\n\n  assert(status_with_weapon = status_test->playerStatus(*stats_hero));\n\n  stats_hero->move('e');\n  stats_hero->equip(\"armorx\");\n\n  status_with_armor[0] = \"Current HP: 10 out of 20\";\n  status_with_armor[1] = \"Current Strength: 20\";\n  status_with_armor[2] = \"Current Defence: 20\";\n  status_with_armor[3] = \"Current Location: Ending room\";\n  status_with_armor[4] = \"Current Name: Mike\";\n  status_with_armor[5] = \"Current Weapon: weaponx\";\n  status_with_armor[6] = \"Current Armor: armorx\";\n\n  assert(status_with_armor = status_test->playerStatus(*stats_hero));\n}\n```\nNow we can write out the methods for the dungeon class itself. Go open up the file “database.cpp\" and add the lines below to the file, remember to start at the line of code indicated in the margins.\n\n```c\nDungeon::Dungeon( int maxPlayers, int maxRooms )  : mMaxPlayers(maxPlayers), mMaxRooms(maxRooms)\n{\n  mRooms.reserve( maxRooms ) ;\n  mPlayers.reserve( maxPlayers ) ;\n}\n\nbool Dungeon::isComplete( void )\n{\n  bool flag = true ;\n\n  for( unsigned int i = 0 ; i < mRooms.size() ; ++i )\n  {\n    if( mRooms[i]->mMonsters.empty() )\n    {\n      continue ;\n    }\n    else\n    {\n      flag = false ;\n      break ;\n    }\n  }\n\n  return flag ;\n}\n\nstring Dungeon::addPlayer( Player *newPlayer )\n{\n  mPlayers.push_back( newPlayer ) ;\n  string response = \"The player named \" + newPlayer->getName() + \" entered the Dungeon\" ;\n\n  generatePlayerStats( newPlayer ) ;\n\n  return response ;\n}\n\nvoid Dungeon::generatePlayerStats( Player* newPlayer )\n{\n  newPlayer->mMaxHp = 10 ;\n  newPlayer->setHp( newPlayer->mMaxHp ) ;\n  newPlayer->setStrength( 2 ) ;\n  newPlayer->setDefence( 2 ) ;\n}\n\nstring Dungeon::addRoom( Room *newRoom )\n{\n  mRooms.push_back( newRoom ) ;\n  string response = \"The room: \" + newRoom->mName + \" was added\" ;\n\n  return response ;\n}\n\nstring Dungeon::removePlayer( std::string playerName )\n{\n  string response = playerName + \" has left the dungeon\" ;\n\n  for( unsigned int i = 0 ; i < mPlayers.size() ; ++i )\n  {\n    if( playerName == mPlayers[i]->getName() )\n    {\n      mPlayers.erase( mPlayers.begin() + i ) ;\n      break ;\n    }\n  }\n\n  return response ;\n}\n\n//Should change this to have the monstersName as an argument\nvoid Dungeon::combatLoop( Player& hero, Monster& villain )\n{\n  villain.inCombat = true ;\n\n  while( true )\n  {\n    cout << hero.attack( villain.getName() ) << endl ;\n    if( villain.getHp() <= 0 )\n    {\n      cout << villain.getName() + \" was slain by the valiant \" << hero.getName() << endl;\n      hero.mLocation->killMonster( villain.getName() ) ;\n      return ;\n    }\n    else\n    {\n      int damage = 0 ;\n      damage = villain.getStrength() - hero.getDefence() ;\n\n      if( damage > 0 )\n      {\n        hero.setHp( hero.getHp() - damage ) ;\n        cout << hero.getName() + \" was dealt \" << damage << \" damage\" << endl ;\n      }\n      else\n      {\n        cout << hero.getName() + \" dodged the attack\" << endl ;\n      }\n\n      if( hero.death() )\n      {\n        cout << hero.getName() + \" was slain by the horrible \" + villain.getName() << endl;\n        return ;\n      }\n    }\n  }\n}\n\nstring* Dungeon::playerStatus( Player& player )\n{\n  stringstream ss ;\n  string temp ;\n  const int statusCount = 7 ;\n  string* response = new string[statusCount] ;\n\n  ss << player.getHp() ;\n  ss >> temp ;\n  response[0] = \"Current HP: \" + temp ;\n  ss.clear() ;\n  temp.clear() ;\n  ss << player.mMaxHp ;\n  ss >> temp ;\n  response[0] = response[0] + \" out of \" + temp ;\n  temp.clear() ;\n  ss.clear() ;\n\n  ss << player.getStrength() ;\n  ss >> temp ;\n  response[1] = \"Current Strength: \" + temp ;\n  ss.clear() ;\n  temp.clear() ;\n\n  ss << player.getDefence() ;\n  ss >> temp ;\n  response[2] = \"Current Defence: \" + temp ;\n  ss.clear() ;\n  temp.clear() ;\n\n  if( NULL == player.mLocation )\n  {\n    response[3] = \"Error: BAD LOCATION\" ;\n  }\n  else\n  {\n    response[3] = \"Current Location: \" + player.getLocation() ;\n  }\n\n  response[4] = \"Current Name: \" + player.getName() ;\n\n  if( NULL == player.mWeapon )\n  {\n    response[5] = \"Current Weapon: none equipped\" ;\n  }\n  else\n  {\n    response[5] = \"Current Weapon: \" + player.mWeapon->getName() ;\n  }\n\n  if( NULL == player.mArmor )\n  {\n    response[6] = \"Current Armor: none equipped\" ;\n  }\n  else\n  {\n    response[6] = \"Current Armor: \" + player.mArmor->getName() ;\n  }\n\n  return response ;\n}\n\nvoid Dungeon::displayHelp( void )\n{\n  cout << \"////////////////\" << endl ;\n  cout << \"Help menu\" << endl ;\n  cout << \"////////////////\" << endl ;\n  cout << \"Attack a monster type -> a:monster_name_here\" << endl ;\n  cout << \"Move to a new location type -> mv:location_name_here\" << endl ;\n  cout << \"Look for items type -> find:\" << endl ;\n  cout << \"Search the room for exits and monsters type -> loc:\" << endl ;\n  cout << \"Equip new items type -> eq:weapon_or_armor_name\" << endl;\n  cout << \"See your current status type -> you:\" << endl;\n}\n```\n\nThe next class we have to test is the filter class, if you recall from previous parts, the filter class’ job is to validate user input to check if it is safe to “dispatch\" to the database. You can think of the filter as a sanitizer for bad commands just like you can image a filter swearing words on message boards. Now go open up “test.h\" and add the following line.\n\n```c\nvoid test_filter_class(void);\n```\n\nYou know the drill, create the test methods within the file “test.cpp\" for the filter class(don’t worry this class is short).\n\n```c\nvoid Test::test_filter_class(void)\n{\n  // Filter chat test\n  // string Filter::chat() just truncates the command from the  //fromchat message if it was t:message  Filter filter;\n  string input(\"t:Hello world\");\n  string response(\"Hello world\");\n\n  assert(response == filter.chat(input));\n\n  // Filter validateMessage test\n  /*\n     The valid commands are the following\n    a:\n    mv:\n    find:\n    loc:\n    eq:\n    you:\n    help:\n   */\n  assert(true == filter.validateMessage(\"mv:n\"));\n  assert(true == filter.validateMessage(\"a:goblin\"));\n  assert(true == filter.validateMessage(\"find:\"));\n  assert(true == filter.validateMessage(\"loc:\"));\n  assert(true == filter.validateMessage(\"eq:weapon\"));\n  assert(true == filter.validateMessage(\"you:\"));\n  assert(true == filter.validateMessage(\"help:\"));\n\n  assert(false == filter.validateMessage(\"move:north\"));\n  assert(false == filter.validateMessage(\"move:south\"));\n  assert(false == filter.validateMessage(\"move:east\"));\n  assert(false == filter.validateMessage(\"move:west\"));\n  assert(false == filter.validateMessage(\"attack:goblin\"));\n  assert(false == filter.validateMessage(\"fid:\"));\n  assert(false == filter.validateMessage(\"location:\"));\n  assert(false == filter.validateMessage(\"eqip:weapon\"));\n  assert(false == filter.validateMessage(\"me:\"));\n  assert(false == filter.validateMessage(\"zelpeafaf:\"));\n  assert(false == filter.validateMessage(\"gg:\"));\n  assert(false == filter.validateMessage(\"Pi:affg\"));\n  assert(false == filter.validateMessage(\"Eqip:weapon\"));\n  assert(false == filter.validateMessage(\"Ye:\"));\n  assert(false == filter.validateMessage(\"no command input\"));\n}\n```\nThere are only two methods for the filter class, chat and validate message. As you can probably guess, chat just sends out the text following the chat command “t:\". However validate message a bit more involved. Validate message works by running three distinct test, the “keywordtest\" the “commandtest\" and the movecommandtest\". Keyword just makes sure that the user entered a keyword such as “a:\" for attack, “you:\" for player status or any of the others. The “commandtest\" just checks after the keyword has been validated that the fullname of the command matches the possible command inputs. Lastly the “movecommandtest\" ensures that the direction of travel for the move command is north, south, east or west. So go open up “database.cpp\" and add the lines below paying attention to which line the code begins on as shown in the margin.\n```c\nFilter::valid Filter::validateMessage( std::string message )\n{\n  //Necessary for the std::tolower() method\n  locale loc ;\n\n  for( unsigned int i = 0 ; i < message.length() ; ++i )\n  {\n    message [ i ] = tolower( message[ i ], loc ) ;\n  }\n\n  bool keywordTest = false ;  bool commandTest = false ;  bool moveCommandTest = true ; // Checks for a valid direction\n  unsigned int inputIndex = 0;\n\n  switch( message[ 0 ] )\n  {\n    case 'a': //Attack  case 'm': //Move\n    case 'f': //Find\n    case 'l': //Location\n    case 'e': //Equip\n    case 'y': //You\n    case 't': //Talk\n    case 'h': //Help Menu\n      keywordTest = true ;\n      break ;break\n\n    default:\n        keywordTest = false ;\n  }\n\n  if( false == keywordTest )\n  {\n    return false ;\n  }\n\n  string subMessage ;\n\n  for( unsigned int i = 0 ; i < message.size() ; ++i )\n  {\n    if( message[ i ] == ':' )\n    {\n      inputIndex = i;\n      subMessage += message[ i ] ;\n      break ;\n    }\n    else\n    {\n      subMessage += message[ i ] ;\n      continue ;\n    }\n  }\n\n  if( subMessage == \"a:\" ||\n      subMessage == \"mv:\" ||\n      subMessage == \"find:\" ||\n      subMessage == \"loc:\" ||\n      subMessage == \"eq:\" ||\n      subMessage == \"you:\" ||\n      subMessage == \"t:\" ||\n      subMessage == \"help:\" )\n  {\n    commandTest = true ;\n  }\n  else\n  {\n    return false;\n  }\n\n  if( subMessage == \"mv:\" )\n  {\n    //Checks if a direction was entered by the player,\n    // accomplishes this by seeing if the mv: command\n    // is followed by at most a single character representing\n    // the directions 'n' or 'e' or 'w' or 's'\n    if( inputIndex + 1 == message.size() )\n    {\n      moveCommandTest = false;\n    }\n\n    while( inputIndex < message.size() )\n    {\n      if( false == moveCommandTest )\n      {\n        break ;\n      }\n\n      if(message[ inputIndex ] == ' ')\n      {\n        moveCommandTest = false;\n        break ;\n      }\n\n      ++inputIndex ;\n    }inputIndex\n  }\n\n  if( true == commandTest && true == keywordTest && true == moveCommandTest )\n  {\n    return true ;\n  }\n  else\n  {\n    return false ;\n  }\n}\n\nstring Filter::chat( string message )\n{\n  return message.substr( 2, message.length() ) ;\n} \n```\nThe dispatch class is the last class we need for thesingle player version of the game. Being the dispatchits sole purpose is to separate the value and command fromthe filtered user input and “dispatch\" it to the database.Now lets open up “test.h\" and add the line below. \n```c\nvoid test_dispatch_class(void);\n```\nNext we’ll write out the test for the dispatch class within \"test.cpp\", so go open that file and insert the code below.\n```c\nvoid Test::test_dispatch_class()\n{\n  // Dispatch extractCommand test\n  //a Attack  //m Move\n  //f Find\n  //l Location\n  //e Equip\n  //y You\n  //t Talk\n  //h Help Menu\n  Dispatch dispatch;\n\n  assert('a' == dispatch.extractCommand(\"a:\"));\n  assert('m' == dispatch.extractCommand(\"mv:\"));\n  assert('f' == dispatch.extractCommand(\"find:\"));\n  assert('l' == dispatch.extractCommand(\"loc:\"));\n  assert('e' == dispatch.extractCommand(\"eq:\"));\n  assert('y' == dispatch.extractCommand(\"you:\"));\n  assert('t' == dispatch.extractCommand(\"t:\"));\n  assert('h' == dispatch.extractCommand(\"help:\"));\n\n  // Dispatch extractValue test\n  /*\n     The only commands that take values.\n\n     attack  move  equip\n     talk  */\n  assert(\"goblin\" == dispatch.extractValue(\"a:goblin\"));\n  assert(\"north\" == dispatch.extractValue(\"mv:north\"));\n  assert(\"armor\" == dispatch.extractValue(\"eq:armor\"));\n  assert(\"hello world\" == dispatch.extractValue(\"t:hello world\"));\n  assert(\"  s p a c  e  s  \" == dispatch.extractValue(\n        \"t:  s p a c  e  s  \"));\n} \n```\nNow we can add the methods for the dispatch class to our “database.cpp\"file. Open up the file “database.cpp\" and add the lines below.\n```c\nchar Dispatch::extractCommand(std::string fromFilter)\n{\n  //a Attack  //m Move\n  //f Find\n  //l Location\n  //e Equip\n  //y You\n  //t Talk\n  //h Help Menu\n\n  return fromFilter[ 0 ] ;\n}\n\nstring Dispatch::extractValue(std::string fromFilter)\n{\n  /*\n     The value of the string from the filter is all of the text\n     that follows the command.\n\n     -Example-\na:goblin\n\nThe command is a:\nThe value is goblin\n   */\n\n  // For single character commands such as t:\n  if( fromFilter[ 1 ] == ':' )\n  {\n    return fromFilter.substr( 2, fromFilter.length() ) ;\n  }\n\n  return fromFilter.substr( 3, fromFilter.length() ) ;\n} \n```\nThe last thing we have to do before we can call our single player version of the game complete is to make sure all the test pass with flying colors. Beingthat we only implemented unit test, you will be notified when a test failsby the console giving you a “assertion failed at line:XYZ\" where XYZ is the line number. So open up “main.cpp\" and make sure it looks like the code below. \n```c\n//Filename main.cpp\n#include \"Database.h\"\n#include\"Test.h\"\n\nusing namespace MUD ;\n\nvoid run_test(void)\n{\n  cout << \"Ignore the combat printouts from the\\n\";\n  cout << \"test_dungeon_class() method\\n\" << endl;\n\n  Test::get_instance()->test_item_class();\n  Test::get_instance()->test_monster_class();\n  Test::get_instance()->test_room_class();\n  Test::get_instance()->test_player_class();\n  Test::get_instance()->test_dungeon_class();\n  Test::get_instance()->test_filter_class();\n  Test::get_instance()->test_dispatch_class();\n}\n\nvoid run_sample_game(void);\n\nint main(void)\n{\n  run_test();\n  //run_sample_game();\n  return 0;\n}\n\nvoid run_sample_game(void)\n{\n  //Construct Dungeon\n  Dungeon caves( 2, 21 ) ;\n\n  //Items power vitality health\n  Item* herb_a = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_b = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_c = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_d = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_e = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_f = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_g = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n\n  Item* woodsword = new Item( \"woodsword\", Item::WEAPON, 10, 0, 0 ) ;\n  Item* steelblade = new Item( \"steelblade\", Item::WEAPON, 20, 0, 0 ) ;\n  Item* crystalsword = new Item( \"crystalsword\", Item::WEAPON, 35, 0, 0 ) ;\n  Item* genjiblade = new Item( \"genjiblade\", Item::WEAPON, 60, 0, 0 ) ;\n  Item* angelicsword = new Item( \"angelicsword\", Item::WEAPON, 80, 0, 0 ) ;\n  Item* finalweapon = new Item( \"dragonslayer\", Item::WEAPON, 2000, 0, 0 ) ;\n\n  Item* woodarmor = new Item( \"woodarmor\", Item::ARMOR, 0, 5, 15 ) ;\n  Item* steelarmor = new Item( \"steelarmor\", Item::ARMOR, 0, 7, 20 ) ;\n  Item* diamondarmor = new Item( \"diamondarmor\", Item::ARMOR, 0, 12, 30 ) ;\n  Item* crystalarmor = new Item( \"crystalarmor\", Item::ARMOR, 0, 15, 35 ) ;\n  Item* dragonarmor = new Item( \"dragonarmor\", Item::ARMOR, 0, 20, 100 ) ;\n  Item* ultimatearmor = new Item( \"ultimatearmor\", Item::ARMOR, 0, 1000, 1000 ) ;\n\n  //Monsters hp str def\n  Monster* bear = new Monster( \"bear\", 15, 2, 3 ) ;\n  Monster* goblin = new Monster( \"goblin\", 5, 3, 1 ) ;\n  Monster* imp = new Monster( \"imp\", 5, 5, 2 ) ;\n  Monster* redgoblin = new Monster( \"redgoblin\", 5, 5, 5 ) ;\n  Monster* demon = new Monster( \"demon\", 6, 3, 7 ) ;\n  Monster* zergling = new Monster( \"zergling\", 10, 10, 9 ) ;\n  Monster* bats = new Monster( \"bats\", 20, 15, 3 ) ;\n  Monster* morebats = new Monster( \"morebats\", 25, 20, 15 ) ;\n  Monster* golem = new Monster( \"golem\", 50, 21, 9 ) ;\n  Monster* goatdemon = new Monster( \"goatdemon\", 100, 10, 10 ) ;\n  Monster* cyclops = new Monster( \"cyclops\", 150, 90, 0 ) ;\n  Monster* behemoth = new Monster( \"behemoth\", 250, 30, 40 ) ;\n  Monster* alien = new Monster( \"alien\", 50, 21, 4 ) ;\n  Monster* giantrat = new Monster( \"giantrat\", 55, 40, 1 ) ;\n  Monster* fallenangel = new Monster( \"fallenangel\", 300, 100, 100 ) ;\n  Monster* greatdragon = new Monster( \"greatdragon\", 500, 300, 1 ) ;\n  Monster* invincibledragon = new Monster( \"invincibledragon\", 999, 999, 999 ) ;\n\n  //Rooms name description item\n  Room* mainHall = new Room( \"The main cavern\", \"A murkey swamp cavern\", woodsword ) ;\n  Room* river = new Room( \"The black river\", \"A river with dark water\", woodarmor ) ;\n  Room* greencave = new Room( \"The greencave\", \"A moss covered cave\", herb_a ) ;\n  Room* bluecave = new Room( \"The bluecave\", \"A frosty cave\", steelblade ) ;\n  Room* darkpit = new Room( \"The darkpit\", \"An endless hole lies before you\", steelarmor ) ;\n  Room* morbidfield = new Room( \"The morbidfield\", \"Pitch black grass surrounds you\", herb_b ) ;\n  Room* graveyard = new Room( \"The graveyard\", \"Tombstones abound\", diamondarmor ) ;\n  Room* crypt = new Room( \"The crypt\", \"A nasty rotten crypt\", crystalsword ) ;\n  Room* evilpassage = new Room( \"The evil passage\", \"An evil pasage\", crystalarmor ) ;\n  Room* darklair = new Room( \"The dark lair\", \"A dark lair\", herb_c ) ;\n  Room* firepit = new Room( \"The firey pits\", \"Fire is every where\", herb_d ) ;\n  Room* greenpasture = new Room( \"The greenpastures\", \"A meadow is before you\", genjiblade ) ;\n  Room* icecave = new Room( \"The icy caves\", \"Ice everywhere you look\", herb_e ) ;\n  Room* livingroom = new Room( \"The living room\", \"The room is alive\", dragonarmor ) ;\n  Room* cellar = new Room( \"The cellar\", \"A dirty cellar filled with rats\", angelicsword ) ;\n  Room* lifespring = new Room( \"The lifespring\", \"A beautiful fountain stands\", herb_f ) ;\n  Room* waterfall = new Room( \"The waterfall\", \"Clear blue water falls\", herb_g ) ;\n  Room* hellsgate = new Room( \"The gates of hell\", \"Large rusty doors lead to hell\", ultimatearmor ) ;\n  Room* dragoncave = new Room( \"The dragon's cave\", \"An ancient cave...\" ) ;\n  Room* dragonsden = new Room( \"The dragon's den\", \"A powerful monster awaits\" ) ;\n  Room* lostforest = new Room( \"The secret forest\", \"The strongest sword lies hidden here\", finalweapon ) ;\n\n  //Link Rooms\n  mainHall->link( 'e', *river ) ;\n  river->link( 's', *greencave ) ;\n  river->link( 'e', *bluecave ) ;\n  river->link( 'w', *mainHall ) ;\n  greencave->link( 'n', *river ) ;\n  bluecave->link( 'w', *river ) ;\n  bluecave->link( 'n', *darkpit ) ;\n  darkpit->link( 's', *bluecave ) ;\n  darkpit->link( 'n', *morbidfield ) ;\n  morbidfield->link( 's', *darkpit ) ;\n  morbidfield->link( 'e', *graveyard ) ;\n  graveyard->link( 'w', *morbidfield ) ;\n  graveyard->link( 'n', *crypt ) ;\n  graveyard->link( 'e', *evilpassage ) ;\n  crypt->link( 's', *graveyard ) ;\n  evilpassage->link( 'w', *graveyard ) ;\n  evilpassage->link( 's', *darklair ) ;\n  darklair->link( 'n', *evilpassage ) ;\n  darklair->link( 's', *firepit ) ;\n  firepit->link( 'n', *darklair ) ;\n  firepit->link( 'e', *greenpasture ) ;\n  greenpasture->link( 'w', *firepit ) ;\n  greenpasture->link( 's', *icecave ) ;\n  greenpasture->link( 'e', *livingroom ) ;\n  icecave->link( 'n', *greenpasture ) ;\n  livingroom->link( 'w', *greenpasture ) ;\n  livingroom->link( 'e', *cellar ) ;\n  cellar->link( 'w', *livingroom ) ;\n  cellar->link( 'n', *lifespring ) ;\n  cellar->link( 'e', *hellsgate ) ;\n  lifespring->link( 's', *cellar ) ;\n  lifespring->link( 'n', *waterfall ) ;\n  waterfall->link( 's', *lifespring ) ;\n  hellsgate->link( 'w', *cellar ) ;\n  hellsgate->link( 'e', *dragoncave ) ;\n  dragoncave->link( 'w', *hellsgate ) ;\n  dragoncave->link( 'e', *dragonsden ) ;\n  dragonsden->link( 'w', *dragoncave ) ;\n  dragonsden->link( 'e', *lostforest ) ;\n  lostforest->link( 'w', *dragonsden ) ;\n\n  //Add monsters to rooms\n  mainHall->addMonster( goblin ) ;\n  mainHall->addMonster( imp ) ;\n  river->addMonster( bear ) ;\n  river->addMonster( redgoblin ) ;\n  bluecave->addMonster( demon ) ;\n  bluecave->addMonster( zergling ) ;\n  morbidfield->addMonster( bats ) ;\n  morbidfield->addMonster( morebats ) ;\n  graveyard->addMonster( golem ) ;\n  evilpassage->addMonster( goatdemon ) ;\n  firepit->addMonster( cyclops ) ;\n  greenpasture->addMonster( behemoth ) ;\n  livingroom->addMonster( alien ) ;\n  cellar->addMonster( giantrat ) ;\n  hellsgate->addMonster( fallenangel ) ;\n  dragoncave->addMonster( greatdragon ) ;\n  dragonsden->addMonster( invincibledragon ) ;\n\n  //Add the rooms to the dungeon\n  caves.addRoom( mainHall ) ;\n  caves.addRoom( river ) ;\n  caves.addRoom( greencave ) ;\n  caves.addRoom( bluecave ) ;\n  caves.addRoom( darkpit ) ;\n  caves.addRoom( morbidfield ) ;\n  caves.addRoom( graveyard ) ;\n  caves.addRoom( crypt ) ;\n  caves.addRoom( evilpassage ) ;\n  caves.addRoom( darklair ) ;\n  caves.addRoom( firepit ) ;\n  caves.addRoom( greenpasture ) ;\n  caves.addRoom( icecave ) ;\n  caves.addRoom( livingroom ) ;\n  caves.addRoom( cellar ) ;\n  caves.addRoom( lifespring ) ;\n  caves.addRoom( waterfall ) ;\n  caves.addRoom( hellsgate ) ;\n  caves.addRoom( dragoncave ) ;\n  caves.addRoom( dragonsden ) ;\n  caves.addRoom( lostforest ) ;\n\n  //Create a filter  Filter filter ;\n\n  //Create a dispatch object with a command char and a value string\n  Dispatch dispatch ;\n  char command ;\n  string value ;\n\n  //Simulate a new game\n  //Create a new player and add to the dungeon\n  string input ;\n  cout << \"Welcome to the game\\nEnter in a new name: \" ;\n  getline(cin, input, '\\n');\n\n  Player* one = new Player( input, mainHall ) ;\n  cout << caves.addPlayer( one ) << endl ;\n\n  //Display needed info for the players\n  cout << \"The objective is to clear the dungeon of all monsters. Good Luck\" << endl ;\n  cout << \"Enter in a new command to start, to display help type the following command\" << endl ;\n  cout << \"help:\" << endl ;\n  cout << \"To quit simply enter \\\"quit\\\" without the quotes as a new command\" << endl ;\n  cout << \"New Command\" << endl ;\n  getline(cin, input, '\\n');\n\n  //Start the game loop\n  while( input != \"quit\" )\n  {\n    //Pass the users message through the filter\n    if( filter.validateMessage( input ) )\n    {\n      //Split the users message into a command and value pair\n      command = dispatch.extractCommand( input ) ;\n      value = dispatch.extractValue( input ) ;\n\n      //Match the command and forward the value\n      switch( command )\n      {\n\n        case 'a': //Attack\n          //If the monster does not exist or the name was mispelled\n          if( &(one->mLocation->getMonsterRef( value )) == NULL )\n          {\n            cout << \"There is no \" + value + \" at this location\" << endl ;\n            break ;\n          }\n          //If the monster is there but in combat the player cannot fight it\n          if( one->mLocation->getMonsterRef( value ).inCombat == true )\n          {\n            cout << \"The \" + value + \" is currently fighting\" << endl ;\n            break ;\n          }\n\n          caves.combatLoop( *one, one->mLocation->getMonsterRef( value ) ) ;\n          break ;\n\n        case 'm': //Move\n          cout << one->move( value[ 0 ] ) ;\n          break ;\n\n        case 'f': //Find\n          cout << one->search() ;\n          break ;\n\n        case 'l': //Location\n          cout << one->getLocation() ;\n          break ;\n\n        case 'e': //Equip\n          cout << one->equip( value ) ;\n          break ;\n\n        case 'y': //You\n          {\n            string* playerStats = new string ;\n            playerStats = caves.playerStatus( *one ) ;\n\n            for( int i = 0 ; i < 7 ; ++i )\n            {\n              cout << playerStats[i] << endl ;\n            }endl\n          }\n          break ;\n\n          //case 't': //Talk\n\n        case 'h': //Help Menu\n          caves.displayHelp();\n          break ;\n      }\n    }\n    else\n    {\n      cout << \"Invalid command please refer to the help menu.\\nhelp:\" << endl ;\n      cout << \"Or type \\\"quit\\\" to quit the game\" << endl ;\n    }\n\n    if( caves.isComplete() )\n    {\n      cout << \"Dungeon Cleared, YOU WIN!\" << endl ;\n      break ;\n    }\n\n    if( one->death() )\n    {\n      cout << one->getName() + \" was slain by the \" + one->mLocation->getMonsterRef( value ).getName() << endl ;\n      one->mLocation->getMonsterRef( value ).inCombat = false ;\n      cout << \"*Hint* Secret rooms hidden abound; find them and victory shall be yours\" << endl ;\n      input = \"quit\" ;\n    }\n    else\n    {\n      //Get the next command\n      cout << \"\\n\\nNew Command\" << endl ;\n      getline(cin, input, '\\n');\n    }\n  }\n\n  caves.removePlayer( one->getName() ) ;\n}\n```\nFor reference here are all the files for the project below.If none of the dropbox links are working then mention it in the comments section and I’ll re-upload the files. \n<p>\n<a  href=\"http://dl.dropbox.com/u/22280460/database.cpp\">http://dl.dropbox.com/u/22280460/database.cpp</a>\n<br />\n<a href=\"http://dl.dropbox.com/u/22280460/database.h\">http://dl.dropbox.com/u/22280460/database.h</a>\n<br />\n<a href=\"http://dl.dropbox.com/u/22280460/main.cpp\">http://dl.dropbox.com/u/22280460/main.cpp</a>\n<br />\n<a href=\"http://dl.dropbox.com/u/22280460/Test.cpp\">http://dl.dropbox.com/u/22280460/Test.cpp</a>\n<br />\n<a href=\"http://dl.dropbox.com/u/22280460/Test.h\">http://dl.dropbox.com/u/22280460/Test.h</a>\n</p>\n\n[Click here for part VI][link_part_6]\n\n[link_part_4]: /2011/06/11/textbasedrpgpart4\n[link_part_6]: /2011/06/16/textbasedrpgpart6\n","source":"_posts/textbasedrpgpart5.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part V\ndate: 2011-06-15\ncategories: [tutorial]\ntags: [cpp]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart5.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart5.JPG\ncomments: false\n---\nThe fifth part of the tutorial on creating a text based multiplayer RPG game will see us creating the last part of the testing and game mechanics before the next section where we'll launch the client and server code to actually test our game in action.\n\n<!-- more -->\n- [Click here for part IV][link_part_4]\n- [Click here for part VI][link_part_6]\n\nIn this part of the tutorial we will complete the test and methods necessary to get the full functionality for the stand alone single player version. In the next part of the tutorial part 6, we will begin to develop both the client and server code that allows other users to connect and play our game over a local area network. So lets continue with the testing and move onto the player class. Go ahead and open up the “test.h\" file and add line below.\n\n```c\nvoid test_player_class();\n```\n\nThen open up the file “test.cpp\" and add the methods for the player test class beginning at the line indicated.\n\n```c\nvoid Test::test_player_class(void)\n{\n  // Player constructor w/o initial room\n  Player no_room_player(\"hero\");\n\n  assert(10 == no_room_player.mMaxHp);\n  assert(10 == no_room_player.mHp);\n  assert(1 == no_room_player.mStrength);\n  assert(0 == no_room_player.mDefence);\n  assert(NULL == no_room_player.mLocation);\n  assert(\"hero\" == no_room_player.mName);\n  assert(NULL == no_room_player.mWeapon);\n  assert(NULL == no_room_player.mArmor);\n\n  // Player constructor w/room\n  Player room_player(\"dude\", new Room(\"Home\", \"A big house\"));\n\n  assert(NULL != room_player.mLocation);\n\n  // Player getters/setters\n  Player get_set(\"setter\", new Room(\"Lake\", \"A clean lake\"));\n\n  get_set.setDefence(1);\n  get_set.setHp(10);\n  get_set.setName(\"getter\");\n  get_set.setStrength(2);\n\n  assert(1 == get_set.getDefence());\n  assert(10 == get_set.getHp());\n  assert(\"getter\" == get_set.getName());\n  assert(2 == get_set.getStrength());\n  assert(\"Lake\" == get_set.getLocation());\n\n  // Player equip test\n  // The Item is not found\n  // - There is no item within the room \"There is no item to equip in this rooom\"\n  // - The player misspelled the item name \"To equip an item you must type its full name correctly\"\n  Room no_item_room(\"Itemless\", \"There is no item here\");\n  Player no_item_player(\"Hi\");\n  no_item_player.mLocation = &no_item_room;\n  string response(\"There is no item to equip in this room\");\n\n  assert(response == no_item_player.equip(\"Bad Item name\"));\n\n  Room with_item(\"Item room\", \"Item filled room\", new Item(\"dagger\", Item::WEAPON, 10, 0, 0));\n  no_item_player.mLocation = &with_item;\n  response = \"To equip an item you must type its full name correctly\";\n\n  assert(response == no_item_player.equip(\"daggers\"));\n\n  // Weapon is found\n  // - The weapon becomes unavailable\n  // - The players strength is set equal to the weapons power value\n  // - The response returned is \"You equipped the Item.mName\"      Player item_player(\"Bye\", &with_item);\n  response = \"You equipped the dagger\";\n\n  assert(response == item_player.equip(\"dagger\"));\n  assert(false == with_item.mItem->mAvailiable);\n  assert(with_item.mItem->getPower() == item_player.getStrength());\n\n  // Armor is found\n  // - The armor becomes unavailable\n  // - The players vitality is set equal to the armor's defence  // - The response returned is \"You equipped the Item.mName\"\n  // - The armor's health value is added to the players max hp\n  Item* steel_plate = new Item(\"steelplate\", Item::ARMOR, 0, 10, 20);\n  with_item.setItem(steel_plate);\n  response = \"You equipped the steelplate\";\n\n  assert(response == item_player.equip(\"steelplate\"));\n  assert(with_item.mItem->mAvailiable == false);\n  assert(steel_plate->getHealth() + item_player.getHp()\n      == item_player.mMaxHp);\n  assert(with_item.mItem->getVitality() == item_player.getDefence());\n\n  // Health is found\n  // - The health item becomes unavailable\n  // - The player's hp is fully restored\n  // - The response is \"You were healed\"\n  Item* herb = new Item(\"herbs\", Item::HEALTH, 0, 0, 0);\n  with_item.setItem(herb);\n  response = \"You were healed\";\n\n  assert(response == item_player.equip(\"herbs\"));\n  assert(with_item.mItem->mAvailiable == false);\n  assert(item_player.getHp() == item_player.mMaxHp);\n\n  // Player attack test\n  // a- There are no monsters within the Room then the method should  //methodreturn \"There are no monsters in this room to fight\"\n  // b- The player mis-typed the monster name then\n  //name\"The Monster.mName is not here\"\n  // c- If damage was dealt to the monster then the message should say\n  //should\"Monster.mName was dealt X damage\"  // d- If no damage was dealt to the monster then the message should say\n  //should\"Monster.mName dodged the attack\"\n  string response_a(\"There are no monsters in this room to fight\");\n  string response_b(\"The roll is not here\");\n  string response_c(\"troll was dealt 30 damage\");\n  string response_d(\"supertroll dodged the attack\");\n\n  Item* great_sword = new Item(\"greatsword\", Item::WEAPON, 30, 0, 0);\n  Room* arena = new Room(\"arena\", \"A large crowd gathers\", great_sword);\n  Monster* troll = new Monster(\"troll\", 50, 0, 0);\n\n  arena->setItem(great_sword);\n  Player* attacker = new Player(\"Fighter\", arena);\n  attacker->equip(\"greatsword\");\n\n  assert(response_a == attacker->attack(\"troll\"));\n\n  arena->addMonster(troll);\n\n  assert(response_b == attacker->attack(\"roll\"));\n  assert(response_c == attacker->attack(\"troll\"));\n\n  Monster* super_troll = new Monster(\"supertroll\", 8, 0, 999);\n  arena->addMonster(super_troll);\n  assert(response_d == attacker->attack(\"supertroll\"));\n\n  // Player move test\n  // - If the player moves in an invalid direction then  //direction\"You traveled nowhere\" should be returned\n  // - If the direction is valid but no room is connected\n  //is\"There is nothing in that direction\"\n  // - If the direction is valid and a room exist\n  //room\"You traveled directionname\\nmLocation->getDescription()\"\n  Room* moving_room = new Room(\"Moving room\", \"You can move from here\");\n  Room* moving_north = new Room(\"Moving north\",  \"North of the moving room\");\n  Room* moving_south = new Room(\"Moving south\",  \"South of the moving room\");\n  Room* moving_west = new Room(\"Moving west\",\n      \"West of the moving room\");\n  Room* moving_east = new Room(\"Moving east\",\n      \"East of the moving room\");\n\n  Player* moving_player = new Player(\"Jill\", moving_room);\n  response = \"You traveled nowhere\";\n\n  assert(response == moving_player->move('p'));\n\n  response = \"There is nothing in that direction\";\n\n  assert(response == moving_player->move('n'));\n  assert(response == moving_player->move('e'));\n  assert(response == moving_player->move('w'));\n  assert(response == moving_player->move('s'));\n\n  moving_player->mLocation = moving_room;\n  response = \"You traveled North\\n\" + moving_north->getDescription();\n  moving_room->link('n', *moving_north);\n  assert(response == moving_player->move('n'));\n\n  moving_player->mLocation = moving_room;\n  response = \"You traveled South\\n\" + moving_south->getDescription();\n  moving_room->link('s', *moving_south);\n  assert(response == moving_player->move('s'));\n\n  moving_player->mLocation = moving_room;\n  response = \"You traveled West\\n\" + moving_west->getDescription();\n  moving_room->link('w', *moving_west);\n  assert(response == moving_player->move('w'));\n\n  moving_player->mLocation = moving_room;\n  response = \"You traveled East\\n\" + moving_east->getDescription();\n  moving_room->link('e', *moving_east);\n  assert(response == moving_player->move('e'));\n\n  // Player search test\n  // Exact same as the string Room::searchResponse( void )  // method so it has already been tested\n\n  // Player death test\n  // -Returns true when the player's hp is less than zero\n  // -Returns false when the player's hp is greater than zero\n  Player* death_test = new Player(\"Dead guy\");\n\n  assert(false == death_test->death());\n\n  death_test->setHp(-1);\n  assert(true == death_test->death());\n}\n```\n\nNow that we have the methods for the player class all set the next thing we have to do is to write out the methods for the player class. To do so open up the file “database.cpp\" and add the methods for the player class below.\n\n```c\nPlayer::Player( string name, Room* start )  : mName(name), mLocation(start), mWeapon(NULL), mArmor(NULL),\n  mHp(10), mMaxHp(10), mStrength(1), mDefence(0)\n{\n}\n\nvoid Player::setHp( int newHp )\n{\n  mHp = newHp ;\n}\n\nint Player::getHp( void ) const\n{\n  return mHp ;\n}\n\nvoid Player::setStrength( int newStrength )\n{\n  mStrength = newStrength ;\n}\n\nint Player::getStrength( void ) const\n{\n  return mStrength ;\n}\n\nvoid Player::setDefence( int newDefence )\n{\n  mDefence = newDefence ;\n}\n\nint Player::getDefence( void ) const\n{\n  return mDefence ;\n}\n\nstring Player::getLocation( void )\n{\n  return mLocation->mName ;\n}\n\nvoid Player::setName( string newName )\n{\n  mName = newName ;\n}\n\nstring Player::getName( void ) const  {\n  return mName ;\n}\n\nstring Player::attack( string monsterName )\n{\n  list< Monster* >::iterator iter ;\n  int damage = 0 ;\n  string response( \"The \" + monsterName + \" is not here\" ) ;  stringstream ss ;\n  string strDamage ;\n\n  if( mLocation->mMonsters.empty() )\n  {\n    return \"There are no monsters in this room to fight\" ;\n  }\n\n  for( iter = mLocation->mMonsters.begin() ; iter != mLocation->mMonsters.end() ; ++iter )\n  {\n    if( (*iter)->getName() == monsterName )\n    {\n      damage = getStrength() - (*iter)->getDefence() ;\n      ss << damage ;\n      ss >> strDamage ;\n      ss.clear() ;\n\n      if( damage > 0 )\n      {\n        (*iter)->setHp( (*iter)->getHp() - damage ) ;\n        response = (*iter)->getName() + \" was dealt \" + strDamage + \" damage\" ;\n      }\n      else\n      {\n        response = (*iter)->getName() + \" dodged the attack\" ;\n      }\n\n      break ;\n    }\n  }\n\n  return response ;\n}\n\nstring Player::equip( string itemName )\n{\n  string response ;\n\n  if( mLocation->mItem != NULL && mLocation->mItem->getName() == itemName )\n  {\n    if( Item::WEAPON == mLocation->mItem->getType() && true == mLocation->mItem->mAvailiable )\n    {\n      mWeapon = mLocation->mItem ;\n      mLocation->itemTaken() ;\n      setStrength( mWeapon->getPower() ) ;\n      response = \"You equipped the \" + mWeapon->getName() ;\n      return response ;\n    }\n    else if( Item::ARMOR == mLocation->mItem->getType() && true == mLocation->mItem->mAvailiable )\n    {\n      mArmor = mLocation->mItem ;\n      mLocation->itemTaken() ;\n      setDefence( mArmor->getVitality() ) ;\n      mMaxHp += mArmor->getHealth() ;\n      response = \"You equipped the \" + mArmor->getName() ;\n      return response ;\n    }\n    else\n    {\n      setHp( mMaxHp ) ;\n      mLocation->itemTaken() ;\n      response = \"You were healed\" ;\n      return response ;\n    }\n  }\n  else\n  {\n    if( mLocation->mItem == NULL )\n    {\n      return \"There is no item to equip in this room\" ;\n    }\n    response = \"To equip an item you must type its full name correctly\" ;\n\n    return response ;\n  }\n}\n\nstring Player::move( char direction )\n{\n  string response = \"You traveled \" ;\n  switch( direction )\n  {\n    case 'n':\n    case 'N':\n      if( NULL == mLocation->mNorth )\n      {\n        response = \"There is nothing in that direction\" ;\n        break ;\n      }\n      mLocation = &(mLocation->north()) ;\n      response = response + \"North\\n\" + mLocation->getDescription() ;\n      break ;\n\n    case 's':\n    case 'S':\n      if( NULL == mLocation->mSouth )\n      {\n        response = \"There is nothing in that direction\" ;\n        break ;\n      }\n      mLocation = &(mLocation->south()) ;\n      response = response + \"South\\n\" + mLocation->getDescription() ;\n      break ;\n\n    case 'e':\n    case 'E':\n      if( NULL == mLocation->mEast )\n      {\n        response = \"There is nothing in that direction\" ;\n        break ;\n      }\n      mLocation = &(mLocation->east()) ;\n      response = response + \"East\\n\" + mLocation->getDescription() ;\n      break ;\n\n    case 'w':\n    case 'W':\n      if( NULL == mLocation->mWest )\n      {\n        response = \"There is nothing in that direction\" ;\n        break ;\n      }\n      mLocation = &(mLocation->west()) ;\n      response = response + \"West\\n\" + mLocation->getDescription() ;\n      break ;\n\n    default:\n      response = response + \"nowhere\" ;\n  }\n\n  return response ;\n}\n\nstring Player::search( void )\n{\n  return mLocation->searchResponse() ;\n}\n\nPlayer::dead Player::death( void )\n{\n  if( getHp() <= 0 )\n  {\n    return true ;\n  }\n\n  return false ;\n}\n```\nAfterwards you can begin to test the Dungeon class, so open up the file “test.h\" file and add the following line.\n\n```c\nvoid test_dungeon_class(void);\n```\n\nHere are the methods for the dungeon test, it is quite long so you can copy it if you want to but I suggest typing it out and reading through the comments in order to better understand the codebase; the file for the code below is “test.cpp\"\n\n```c\nvoid Test::test_dungeon_class(void)\n{\n  // Dungeon constructor test\n  Dungeon* test_dungeon = new Dungeon(1, 1);\n\n  assert(1 == test_dungeon->mMaxPlayers);\n  assert(1 == test_dungeon->mMaxRooms);\n  assert(true == test_dungeon->mPlayers.empty());\n  assert(true == test_dungeon->mRooms.empty());\n  // - A dungeon without monsters is considered complete\n  assert(true == test_dungeon->isComplete());\n\n  // Dungeon addPlayer test\n  // - Successful addition of a new player should display the following\n  //the\"The player named newPlayer->getName() entered the Dungeon\"\n  Player* newbie = new Player(\"Noob\");\n  string response(\"The player named Noob entered the Dungeon\");\n\n  assert(response == test_dungeon->addPlayer(newbie));\n  assert(false == test_dungeon->mPlayers.empty());\n\n  // Dungeon addRoom test\n  // - \"The room: newRoom->mName was added\" will be displayed\n  //beif the addition was successful\n  Room* main_room = new Room(\"Main hall\", \"The main hall\");\n  response = \"The room: Main hall was added\";\n\n  assert(response == test_dungeon->addRoom(main_room));\n  assert(false == test_dungeon->mRooms.empty());\n\n  // Dungeon removePlayer test\n  response = \"Noob has left the dungeon\";\n  assert(response == test_dungeon->removePlayer(newbie->getName()));\n\n  // Dungeon generatePlayerStats test\n  // -Sets the players max hp to 10, strength and defence to 2\n  test_dungeon->generatePlayerStats(newbie);\n\n  assert(10 == newbie->getHp());\n  assert(2 == newbie->getStrength());\n  assert(2 == newbie->getDefence());\n\n  // Dungeon combatLoop test\n  // - If the hero is stronger than the monster then the monster  //theshould die else the hero should die\n  Dungeon* combat_test = new Dungeon(1, 1);\n  Room* combat_room = new Room(\"Battle\", \"Fight here\");\n  Item* longsword = new Item(\"longsword\", Item::WEAPON, 100, 0, 0);\n  Player* brawler = new Player(\"brawler\", combat_room);\n  Monster* ogre = new Monster(\"ogre\", 10, 0, 0);  Monster* superogre = new Monster(\"superogre\", 100, 100, 100);  combat_room->setItem(longsword);\n  combat_room->addMonster(ogre);\n  combat_room->addMonster(superogre);\n  combat_test->addRoom(combat_room);\n  combat_test->addPlayer(brawler);\n  combat_test->generatePlayerStats(brawler);\n  brawler->mLocation = combat_room;\n  brawler->equip(\"longsword\");\n\n  combat_test->combatLoop(*brawler, *ogre);\n  assert(combat_room->mMonsters.empty() == false);\n  assert(combat_test->isComplete() == false);\n\n  Item* badsword = new Item(\"badsword\", Item::WEAPON, 0, 0, 0);\n  combat_room->setItem(badsword);\n  brawler->equip(\"badsword\");\n\n  combat_test->combatLoop(*brawler, *superogre);\n  assert(true == brawler->death());\n\n  // Dungeon playerStatus test\n  Dungeon* status_test = new Dungeon(1, 2);\n  Room* start_room = new Room(\"Starting room\", \"Start here\");\n  Room* end_room = new Room(\"Ending room\", \"End here\");\n  Player* stats_hero = new Player(\"Mike\", start_room);\n  Item* weapon_x = new Item(\"weaponx\", Item::WEAPON, 20, 0, 0);\n  Item* armor_x = new Item(\"armorx\", Item::ARMOR, 0, 20, 10);\n\n  start_room->link('e', *end_room);\n  end_room->link('w', *start_room);\n  start_room->setItem(weapon_x);\n  end_room->setItem(armor_x);\n  status_test->addRoom(start_room);\n  status_test->addRoom(end_room);\n  status_test->addPlayer(stats_hero);\n\n  // The stats reported are the following\n  /*\n     1. Hp\n     2. Strength\n     3. Defence\n     4. Location\n     5. Name\n     6. Weapon\n     7. Armor\n   */\n  const int stat_total = 7;\n  string* status_before_weapon = new string[stat_total];\n  string* status_with_weapon = new string[stat_total];\n  string* status_with_armor = new string[stat_total];\n\n  status_before_weapon[0] = \"Current HP: 10 out of 10\";\n  status_before_weapon[1] = \"Current Strength: 2\";\n  status_before_weapon[2] = \"Current Defence: 2\";\n  status_before_weapon[3] = \"Current Location: Starting room\";\n  status_before_weapon[4] = \"Current Name: Mike\";\n  status_before_weapon[5] = \"Current Weapon: none equipped\";\n  status_before_weapon[6] = \"Current Armor: none equipped\";\n\n  assert(status_before_weapon = status_test->playerStatus(*stats_hero));\n\n  stats_hero->equip(\"weaponx\");\n\n  status_with_weapon[0] = \"Current HP: 10 out of 10\";\n  status_with_weapon[1] = \"Current Strength: 20\";\n  status_with_weapon[2] = \"Current Defence: 2\";\n  status_with_weapon[3] = \"Current Location: Starting room\";\n  status_with_weapon[4] = \"Current Name: Mike\";\n  status_with_weapon[5] = \"Current Weapon: weaponx\";\n  status_with_weapon[6] = \"Current Armor: none equipped\";\n\n  assert(status_with_weapon = status_test->playerStatus(*stats_hero));\n\n  stats_hero->move('e');\n  stats_hero->equip(\"armorx\");\n\n  status_with_armor[0] = \"Current HP: 10 out of 20\";\n  status_with_armor[1] = \"Current Strength: 20\";\n  status_with_armor[2] = \"Current Defence: 20\";\n  status_with_armor[3] = \"Current Location: Ending room\";\n  status_with_armor[4] = \"Current Name: Mike\";\n  status_with_armor[5] = \"Current Weapon: weaponx\";\n  status_with_armor[6] = \"Current Armor: armorx\";\n\n  assert(status_with_armor = status_test->playerStatus(*stats_hero));\n}\n```\nNow we can write out the methods for the dungeon class itself. Go open up the file “database.cpp\" and add the lines below to the file, remember to start at the line of code indicated in the margins.\n\n```c\nDungeon::Dungeon( int maxPlayers, int maxRooms )  : mMaxPlayers(maxPlayers), mMaxRooms(maxRooms)\n{\n  mRooms.reserve( maxRooms ) ;\n  mPlayers.reserve( maxPlayers ) ;\n}\n\nbool Dungeon::isComplete( void )\n{\n  bool flag = true ;\n\n  for( unsigned int i = 0 ; i < mRooms.size() ; ++i )\n  {\n    if( mRooms[i]->mMonsters.empty() )\n    {\n      continue ;\n    }\n    else\n    {\n      flag = false ;\n      break ;\n    }\n  }\n\n  return flag ;\n}\n\nstring Dungeon::addPlayer( Player *newPlayer )\n{\n  mPlayers.push_back( newPlayer ) ;\n  string response = \"The player named \" + newPlayer->getName() + \" entered the Dungeon\" ;\n\n  generatePlayerStats( newPlayer ) ;\n\n  return response ;\n}\n\nvoid Dungeon::generatePlayerStats( Player* newPlayer )\n{\n  newPlayer->mMaxHp = 10 ;\n  newPlayer->setHp( newPlayer->mMaxHp ) ;\n  newPlayer->setStrength( 2 ) ;\n  newPlayer->setDefence( 2 ) ;\n}\n\nstring Dungeon::addRoom( Room *newRoom )\n{\n  mRooms.push_back( newRoom ) ;\n  string response = \"The room: \" + newRoom->mName + \" was added\" ;\n\n  return response ;\n}\n\nstring Dungeon::removePlayer( std::string playerName )\n{\n  string response = playerName + \" has left the dungeon\" ;\n\n  for( unsigned int i = 0 ; i < mPlayers.size() ; ++i )\n  {\n    if( playerName == mPlayers[i]->getName() )\n    {\n      mPlayers.erase( mPlayers.begin() + i ) ;\n      break ;\n    }\n  }\n\n  return response ;\n}\n\n//Should change this to have the monstersName as an argument\nvoid Dungeon::combatLoop( Player& hero, Monster& villain )\n{\n  villain.inCombat = true ;\n\n  while( true )\n  {\n    cout << hero.attack( villain.getName() ) << endl ;\n    if( villain.getHp() <= 0 )\n    {\n      cout << villain.getName() + \" was slain by the valiant \" << hero.getName() << endl;\n      hero.mLocation->killMonster( villain.getName() ) ;\n      return ;\n    }\n    else\n    {\n      int damage = 0 ;\n      damage = villain.getStrength() - hero.getDefence() ;\n\n      if( damage > 0 )\n      {\n        hero.setHp( hero.getHp() - damage ) ;\n        cout << hero.getName() + \" was dealt \" << damage << \" damage\" << endl ;\n      }\n      else\n      {\n        cout << hero.getName() + \" dodged the attack\" << endl ;\n      }\n\n      if( hero.death() )\n      {\n        cout << hero.getName() + \" was slain by the horrible \" + villain.getName() << endl;\n        return ;\n      }\n    }\n  }\n}\n\nstring* Dungeon::playerStatus( Player& player )\n{\n  stringstream ss ;\n  string temp ;\n  const int statusCount = 7 ;\n  string* response = new string[statusCount] ;\n\n  ss << player.getHp() ;\n  ss >> temp ;\n  response[0] = \"Current HP: \" + temp ;\n  ss.clear() ;\n  temp.clear() ;\n  ss << player.mMaxHp ;\n  ss >> temp ;\n  response[0] = response[0] + \" out of \" + temp ;\n  temp.clear() ;\n  ss.clear() ;\n\n  ss << player.getStrength() ;\n  ss >> temp ;\n  response[1] = \"Current Strength: \" + temp ;\n  ss.clear() ;\n  temp.clear() ;\n\n  ss << player.getDefence() ;\n  ss >> temp ;\n  response[2] = \"Current Defence: \" + temp ;\n  ss.clear() ;\n  temp.clear() ;\n\n  if( NULL == player.mLocation )\n  {\n    response[3] = \"Error: BAD LOCATION\" ;\n  }\n  else\n  {\n    response[3] = \"Current Location: \" + player.getLocation() ;\n  }\n\n  response[4] = \"Current Name: \" + player.getName() ;\n\n  if( NULL == player.mWeapon )\n  {\n    response[5] = \"Current Weapon: none equipped\" ;\n  }\n  else\n  {\n    response[5] = \"Current Weapon: \" + player.mWeapon->getName() ;\n  }\n\n  if( NULL == player.mArmor )\n  {\n    response[6] = \"Current Armor: none equipped\" ;\n  }\n  else\n  {\n    response[6] = \"Current Armor: \" + player.mArmor->getName() ;\n  }\n\n  return response ;\n}\n\nvoid Dungeon::displayHelp( void )\n{\n  cout << \"////////////////\" << endl ;\n  cout << \"Help menu\" << endl ;\n  cout << \"////////////////\" << endl ;\n  cout << \"Attack a monster type -> a:monster_name_here\" << endl ;\n  cout << \"Move to a new location type -> mv:location_name_here\" << endl ;\n  cout << \"Look for items type -> find:\" << endl ;\n  cout << \"Search the room for exits and monsters type -> loc:\" << endl ;\n  cout << \"Equip new items type -> eq:weapon_or_armor_name\" << endl;\n  cout << \"See your current status type -> you:\" << endl;\n}\n```\n\nThe next class we have to test is the filter class, if you recall from previous parts, the filter class’ job is to validate user input to check if it is safe to “dispatch\" to the database. You can think of the filter as a sanitizer for bad commands just like you can image a filter swearing words on message boards. Now go open up “test.h\" and add the following line.\n\n```c\nvoid test_filter_class(void);\n```\n\nYou know the drill, create the test methods within the file “test.cpp\" for the filter class(don’t worry this class is short).\n\n```c\nvoid Test::test_filter_class(void)\n{\n  // Filter chat test\n  // string Filter::chat() just truncates the command from the  //fromchat message if it was t:message  Filter filter;\n  string input(\"t:Hello world\");\n  string response(\"Hello world\");\n\n  assert(response == filter.chat(input));\n\n  // Filter validateMessage test\n  /*\n     The valid commands are the following\n    a:\n    mv:\n    find:\n    loc:\n    eq:\n    you:\n    help:\n   */\n  assert(true == filter.validateMessage(\"mv:n\"));\n  assert(true == filter.validateMessage(\"a:goblin\"));\n  assert(true == filter.validateMessage(\"find:\"));\n  assert(true == filter.validateMessage(\"loc:\"));\n  assert(true == filter.validateMessage(\"eq:weapon\"));\n  assert(true == filter.validateMessage(\"you:\"));\n  assert(true == filter.validateMessage(\"help:\"));\n\n  assert(false == filter.validateMessage(\"move:north\"));\n  assert(false == filter.validateMessage(\"move:south\"));\n  assert(false == filter.validateMessage(\"move:east\"));\n  assert(false == filter.validateMessage(\"move:west\"));\n  assert(false == filter.validateMessage(\"attack:goblin\"));\n  assert(false == filter.validateMessage(\"fid:\"));\n  assert(false == filter.validateMessage(\"location:\"));\n  assert(false == filter.validateMessage(\"eqip:weapon\"));\n  assert(false == filter.validateMessage(\"me:\"));\n  assert(false == filter.validateMessage(\"zelpeafaf:\"));\n  assert(false == filter.validateMessage(\"gg:\"));\n  assert(false == filter.validateMessage(\"Pi:affg\"));\n  assert(false == filter.validateMessage(\"Eqip:weapon\"));\n  assert(false == filter.validateMessage(\"Ye:\"));\n  assert(false == filter.validateMessage(\"no command input\"));\n}\n```\nThere are only two methods for the filter class, chat and validate message. As you can probably guess, chat just sends out the text following the chat command “t:\". However validate message a bit more involved. Validate message works by running three distinct test, the “keywordtest\" the “commandtest\" and the movecommandtest\". Keyword just makes sure that the user entered a keyword such as “a:\" for attack, “you:\" for player status or any of the others. The “commandtest\" just checks after the keyword has been validated that the fullname of the command matches the possible command inputs. Lastly the “movecommandtest\" ensures that the direction of travel for the move command is north, south, east or west. So go open up “database.cpp\" and add the lines below paying attention to which line the code begins on as shown in the margin.\n```c\nFilter::valid Filter::validateMessage( std::string message )\n{\n  //Necessary for the std::tolower() method\n  locale loc ;\n\n  for( unsigned int i = 0 ; i < message.length() ; ++i )\n  {\n    message [ i ] = tolower( message[ i ], loc ) ;\n  }\n\n  bool keywordTest = false ;  bool commandTest = false ;  bool moveCommandTest = true ; // Checks for a valid direction\n  unsigned int inputIndex = 0;\n\n  switch( message[ 0 ] )\n  {\n    case 'a': //Attack  case 'm': //Move\n    case 'f': //Find\n    case 'l': //Location\n    case 'e': //Equip\n    case 'y': //You\n    case 't': //Talk\n    case 'h': //Help Menu\n      keywordTest = true ;\n      break ;break\n\n    default:\n        keywordTest = false ;\n  }\n\n  if( false == keywordTest )\n  {\n    return false ;\n  }\n\n  string subMessage ;\n\n  for( unsigned int i = 0 ; i < message.size() ; ++i )\n  {\n    if( message[ i ] == ':' )\n    {\n      inputIndex = i;\n      subMessage += message[ i ] ;\n      break ;\n    }\n    else\n    {\n      subMessage += message[ i ] ;\n      continue ;\n    }\n  }\n\n  if( subMessage == \"a:\" ||\n      subMessage == \"mv:\" ||\n      subMessage == \"find:\" ||\n      subMessage == \"loc:\" ||\n      subMessage == \"eq:\" ||\n      subMessage == \"you:\" ||\n      subMessage == \"t:\" ||\n      subMessage == \"help:\" )\n  {\n    commandTest = true ;\n  }\n  else\n  {\n    return false;\n  }\n\n  if( subMessage == \"mv:\" )\n  {\n    //Checks if a direction was entered by the player,\n    // accomplishes this by seeing if the mv: command\n    // is followed by at most a single character representing\n    // the directions 'n' or 'e' or 'w' or 's'\n    if( inputIndex + 1 == message.size() )\n    {\n      moveCommandTest = false;\n    }\n\n    while( inputIndex < message.size() )\n    {\n      if( false == moveCommandTest )\n      {\n        break ;\n      }\n\n      if(message[ inputIndex ] == ' ')\n      {\n        moveCommandTest = false;\n        break ;\n      }\n\n      ++inputIndex ;\n    }inputIndex\n  }\n\n  if( true == commandTest && true == keywordTest && true == moveCommandTest )\n  {\n    return true ;\n  }\n  else\n  {\n    return false ;\n  }\n}\n\nstring Filter::chat( string message )\n{\n  return message.substr( 2, message.length() ) ;\n} \n```\nThe dispatch class is the last class we need for thesingle player version of the game. Being the dispatchits sole purpose is to separate the value and command fromthe filtered user input and “dispatch\" it to the database.Now lets open up “test.h\" and add the line below. \n```c\nvoid test_dispatch_class(void);\n```\nNext we’ll write out the test for the dispatch class within \"test.cpp\", so go open that file and insert the code below.\n```c\nvoid Test::test_dispatch_class()\n{\n  // Dispatch extractCommand test\n  //a Attack  //m Move\n  //f Find\n  //l Location\n  //e Equip\n  //y You\n  //t Talk\n  //h Help Menu\n  Dispatch dispatch;\n\n  assert('a' == dispatch.extractCommand(\"a:\"));\n  assert('m' == dispatch.extractCommand(\"mv:\"));\n  assert('f' == dispatch.extractCommand(\"find:\"));\n  assert('l' == dispatch.extractCommand(\"loc:\"));\n  assert('e' == dispatch.extractCommand(\"eq:\"));\n  assert('y' == dispatch.extractCommand(\"you:\"));\n  assert('t' == dispatch.extractCommand(\"t:\"));\n  assert('h' == dispatch.extractCommand(\"help:\"));\n\n  // Dispatch extractValue test\n  /*\n     The only commands that take values.\n\n     attack  move  equip\n     talk  */\n  assert(\"goblin\" == dispatch.extractValue(\"a:goblin\"));\n  assert(\"north\" == dispatch.extractValue(\"mv:north\"));\n  assert(\"armor\" == dispatch.extractValue(\"eq:armor\"));\n  assert(\"hello world\" == dispatch.extractValue(\"t:hello world\"));\n  assert(\"  s p a c  e  s  \" == dispatch.extractValue(\n        \"t:  s p a c  e  s  \"));\n} \n```\nNow we can add the methods for the dispatch class to our “database.cpp\"file. Open up the file “database.cpp\" and add the lines below.\n```c\nchar Dispatch::extractCommand(std::string fromFilter)\n{\n  //a Attack  //m Move\n  //f Find\n  //l Location\n  //e Equip\n  //y You\n  //t Talk\n  //h Help Menu\n\n  return fromFilter[ 0 ] ;\n}\n\nstring Dispatch::extractValue(std::string fromFilter)\n{\n  /*\n     The value of the string from the filter is all of the text\n     that follows the command.\n\n     -Example-\na:goblin\n\nThe command is a:\nThe value is goblin\n   */\n\n  // For single character commands such as t:\n  if( fromFilter[ 1 ] == ':' )\n  {\n    return fromFilter.substr( 2, fromFilter.length() ) ;\n  }\n\n  return fromFilter.substr( 3, fromFilter.length() ) ;\n} \n```\nThe last thing we have to do before we can call our single player version of the game complete is to make sure all the test pass with flying colors. Beingthat we only implemented unit test, you will be notified when a test failsby the console giving you a “assertion failed at line:XYZ\" where XYZ is the line number. So open up “main.cpp\" and make sure it looks like the code below. \n```c\n//Filename main.cpp\n#include \"Database.h\"\n#include\"Test.h\"\n\nusing namespace MUD ;\n\nvoid run_test(void)\n{\n  cout << \"Ignore the combat printouts from the\\n\";\n  cout << \"test_dungeon_class() method\\n\" << endl;\n\n  Test::get_instance()->test_item_class();\n  Test::get_instance()->test_monster_class();\n  Test::get_instance()->test_room_class();\n  Test::get_instance()->test_player_class();\n  Test::get_instance()->test_dungeon_class();\n  Test::get_instance()->test_filter_class();\n  Test::get_instance()->test_dispatch_class();\n}\n\nvoid run_sample_game(void);\n\nint main(void)\n{\n  run_test();\n  //run_sample_game();\n  return 0;\n}\n\nvoid run_sample_game(void)\n{\n  //Construct Dungeon\n  Dungeon caves( 2, 21 ) ;\n\n  //Items power vitality health\n  Item* herb_a = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_b = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_c = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_d = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_e = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_f = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n  Item* herb_g = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n\n  Item* woodsword = new Item( \"woodsword\", Item::WEAPON, 10, 0, 0 ) ;\n  Item* steelblade = new Item( \"steelblade\", Item::WEAPON, 20, 0, 0 ) ;\n  Item* crystalsword = new Item( \"crystalsword\", Item::WEAPON, 35, 0, 0 ) ;\n  Item* genjiblade = new Item( \"genjiblade\", Item::WEAPON, 60, 0, 0 ) ;\n  Item* angelicsword = new Item( \"angelicsword\", Item::WEAPON, 80, 0, 0 ) ;\n  Item* finalweapon = new Item( \"dragonslayer\", Item::WEAPON, 2000, 0, 0 ) ;\n\n  Item* woodarmor = new Item( \"woodarmor\", Item::ARMOR, 0, 5, 15 ) ;\n  Item* steelarmor = new Item( \"steelarmor\", Item::ARMOR, 0, 7, 20 ) ;\n  Item* diamondarmor = new Item( \"diamondarmor\", Item::ARMOR, 0, 12, 30 ) ;\n  Item* crystalarmor = new Item( \"crystalarmor\", Item::ARMOR, 0, 15, 35 ) ;\n  Item* dragonarmor = new Item( \"dragonarmor\", Item::ARMOR, 0, 20, 100 ) ;\n  Item* ultimatearmor = new Item( \"ultimatearmor\", Item::ARMOR, 0, 1000, 1000 ) ;\n\n  //Monsters hp str def\n  Monster* bear = new Monster( \"bear\", 15, 2, 3 ) ;\n  Monster* goblin = new Monster( \"goblin\", 5, 3, 1 ) ;\n  Monster* imp = new Monster( \"imp\", 5, 5, 2 ) ;\n  Monster* redgoblin = new Monster( \"redgoblin\", 5, 5, 5 ) ;\n  Monster* demon = new Monster( \"demon\", 6, 3, 7 ) ;\n  Monster* zergling = new Monster( \"zergling\", 10, 10, 9 ) ;\n  Monster* bats = new Monster( \"bats\", 20, 15, 3 ) ;\n  Monster* morebats = new Monster( \"morebats\", 25, 20, 15 ) ;\n  Monster* golem = new Monster( \"golem\", 50, 21, 9 ) ;\n  Monster* goatdemon = new Monster( \"goatdemon\", 100, 10, 10 ) ;\n  Monster* cyclops = new Monster( \"cyclops\", 150, 90, 0 ) ;\n  Monster* behemoth = new Monster( \"behemoth\", 250, 30, 40 ) ;\n  Monster* alien = new Monster( \"alien\", 50, 21, 4 ) ;\n  Monster* giantrat = new Monster( \"giantrat\", 55, 40, 1 ) ;\n  Monster* fallenangel = new Monster( \"fallenangel\", 300, 100, 100 ) ;\n  Monster* greatdragon = new Monster( \"greatdragon\", 500, 300, 1 ) ;\n  Monster* invincibledragon = new Monster( \"invincibledragon\", 999, 999, 999 ) ;\n\n  //Rooms name description item\n  Room* mainHall = new Room( \"The main cavern\", \"A murkey swamp cavern\", woodsword ) ;\n  Room* river = new Room( \"The black river\", \"A river with dark water\", woodarmor ) ;\n  Room* greencave = new Room( \"The greencave\", \"A moss covered cave\", herb_a ) ;\n  Room* bluecave = new Room( \"The bluecave\", \"A frosty cave\", steelblade ) ;\n  Room* darkpit = new Room( \"The darkpit\", \"An endless hole lies before you\", steelarmor ) ;\n  Room* morbidfield = new Room( \"The morbidfield\", \"Pitch black grass surrounds you\", herb_b ) ;\n  Room* graveyard = new Room( \"The graveyard\", \"Tombstones abound\", diamondarmor ) ;\n  Room* crypt = new Room( \"The crypt\", \"A nasty rotten crypt\", crystalsword ) ;\n  Room* evilpassage = new Room( \"The evil passage\", \"An evil pasage\", crystalarmor ) ;\n  Room* darklair = new Room( \"The dark lair\", \"A dark lair\", herb_c ) ;\n  Room* firepit = new Room( \"The firey pits\", \"Fire is every where\", herb_d ) ;\n  Room* greenpasture = new Room( \"The greenpastures\", \"A meadow is before you\", genjiblade ) ;\n  Room* icecave = new Room( \"The icy caves\", \"Ice everywhere you look\", herb_e ) ;\n  Room* livingroom = new Room( \"The living room\", \"The room is alive\", dragonarmor ) ;\n  Room* cellar = new Room( \"The cellar\", \"A dirty cellar filled with rats\", angelicsword ) ;\n  Room* lifespring = new Room( \"The lifespring\", \"A beautiful fountain stands\", herb_f ) ;\n  Room* waterfall = new Room( \"The waterfall\", \"Clear blue water falls\", herb_g ) ;\n  Room* hellsgate = new Room( \"The gates of hell\", \"Large rusty doors lead to hell\", ultimatearmor ) ;\n  Room* dragoncave = new Room( \"The dragon's cave\", \"An ancient cave...\" ) ;\n  Room* dragonsden = new Room( \"The dragon's den\", \"A powerful monster awaits\" ) ;\n  Room* lostforest = new Room( \"The secret forest\", \"The strongest sword lies hidden here\", finalweapon ) ;\n\n  //Link Rooms\n  mainHall->link( 'e', *river ) ;\n  river->link( 's', *greencave ) ;\n  river->link( 'e', *bluecave ) ;\n  river->link( 'w', *mainHall ) ;\n  greencave->link( 'n', *river ) ;\n  bluecave->link( 'w', *river ) ;\n  bluecave->link( 'n', *darkpit ) ;\n  darkpit->link( 's', *bluecave ) ;\n  darkpit->link( 'n', *morbidfield ) ;\n  morbidfield->link( 's', *darkpit ) ;\n  morbidfield->link( 'e', *graveyard ) ;\n  graveyard->link( 'w', *morbidfield ) ;\n  graveyard->link( 'n', *crypt ) ;\n  graveyard->link( 'e', *evilpassage ) ;\n  crypt->link( 's', *graveyard ) ;\n  evilpassage->link( 'w', *graveyard ) ;\n  evilpassage->link( 's', *darklair ) ;\n  darklair->link( 'n', *evilpassage ) ;\n  darklair->link( 's', *firepit ) ;\n  firepit->link( 'n', *darklair ) ;\n  firepit->link( 'e', *greenpasture ) ;\n  greenpasture->link( 'w', *firepit ) ;\n  greenpasture->link( 's', *icecave ) ;\n  greenpasture->link( 'e', *livingroom ) ;\n  icecave->link( 'n', *greenpasture ) ;\n  livingroom->link( 'w', *greenpasture ) ;\n  livingroom->link( 'e', *cellar ) ;\n  cellar->link( 'w', *livingroom ) ;\n  cellar->link( 'n', *lifespring ) ;\n  cellar->link( 'e', *hellsgate ) ;\n  lifespring->link( 's', *cellar ) ;\n  lifespring->link( 'n', *waterfall ) ;\n  waterfall->link( 's', *lifespring ) ;\n  hellsgate->link( 'w', *cellar ) ;\n  hellsgate->link( 'e', *dragoncave ) ;\n  dragoncave->link( 'w', *hellsgate ) ;\n  dragoncave->link( 'e', *dragonsden ) ;\n  dragonsden->link( 'w', *dragoncave ) ;\n  dragonsden->link( 'e', *lostforest ) ;\n  lostforest->link( 'w', *dragonsden ) ;\n\n  //Add monsters to rooms\n  mainHall->addMonster( goblin ) ;\n  mainHall->addMonster( imp ) ;\n  river->addMonster( bear ) ;\n  river->addMonster( redgoblin ) ;\n  bluecave->addMonster( demon ) ;\n  bluecave->addMonster( zergling ) ;\n  morbidfield->addMonster( bats ) ;\n  morbidfield->addMonster( morebats ) ;\n  graveyard->addMonster( golem ) ;\n  evilpassage->addMonster( goatdemon ) ;\n  firepit->addMonster( cyclops ) ;\n  greenpasture->addMonster( behemoth ) ;\n  livingroom->addMonster( alien ) ;\n  cellar->addMonster( giantrat ) ;\n  hellsgate->addMonster( fallenangel ) ;\n  dragoncave->addMonster( greatdragon ) ;\n  dragonsden->addMonster( invincibledragon ) ;\n\n  //Add the rooms to the dungeon\n  caves.addRoom( mainHall ) ;\n  caves.addRoom( river ) ;\n  caves.addRoom( greencave ) ;\n  caves.addRoom( bluecave ) ;\n  caves.addRoom( darkpit ) ;\n  caves.addRoom( morbidfield ) ;\n  caves.addRoom( graveyard ) ;\n  caves.addRoom( crypt ) ;\n  caves.addRoom( evilpassage ) ;\n  caves.addRoom( darklair ) ;\n  caves.addRoom( firepit ) ;\n  caves.addRoom( greenpasture ) ;\n  caves.addRoom( icecave ) ;\n  caves.addRoom( livingroom ) ;\n  caves.addRoom( cellar ) ;\n  caves.addRoom( lifespring ) ;\n  caves.addRoom( waterfall ) ;\n  caves.addRoom( hellsgate ) ;\n  caves.addRoom( dragoncave ) ;\n  caves.addRoom( dragonsden ) ;\n  caves.addRoom( lostforest ) ;\n\n  //Create a filter  Filter filter ;\n\n  //Create a dispatch object with a command char and a value string\n  Dispatch dispatch ;\n  char command ;\n  string value ;\n\n  //Simulate a new game\n  //Create a new player and add to the dungeon\n  string input ;\n  cout << \"Welcome to the game\\nEnter in a new name: \" ;\n  getline(cin, input, '\\n');\n\n  Player* one = new Player( input, mainHall ) ;\n  cout << caves.addPlayer( one ) << endl ;\n\n  //Display needed info for the players\n  cout << \"The objective is to clear the dungeon of all monsters. Good Luck\" << endl ;\n  cout << \"Enter in a new command to start, to display help type the following command\" << endl ;\n  cout << \"help:\" << endl ;\n  cout << \"To quit simply enter \\\"quit\\\" without the quotes as a new command\" << endl ;\n  cout << \"New Command\" << endl ;\n  getline(cin, input, '\\n');\n\n  //Start the game loop\n  while( input != \"quit\" )\n  {\n    //Pass the users message through the filter\n    if( filter.validateMessage( input ) )\n    {\n      //Split the users message into a command and value pair\n      command = dispatch.extractCommand( input ) ;\n      value = dispatch.extractValue( input ) ;\n\n      //Match the command and forward the value\n      switch( command )\n      {\n\n        case 'a': //Attack\n          //If the monster does not exist or the name was mispelled\n          if( &(one->mLocation->getMonsterRef( value )) == NULL )\n          {\n            cout << \"There is no \" + value + \" at this location\" << endl ;\n            break ;\n          }\n          //If the monster is there but in combat the player cannot fight it\n          if( one->mLocation->getMonsterRef( value ).inCombat == true )\n          {\n            cout << \"The \" + value + \" is currently fighting\" << endl ;\n            break ;\n          }\n\n          caves.combatLoop( *one, one->mLocation->getMonsterRef( value ) ) ;\n          break ;\n\n        case 'm': //Move\n          cout << one->move( value[ 0 ] ) ;\n          break ;\n\n        case 'f': //Find\n          cout << one->search() ;\n          break ;\n\n        case 'l': //Location\n          cout << one->getLocation() ;\n          break ;\n\n        case 'e': //Equip\n          cout << one->equip( value ) ;\n          break ;\n\n        case 'y': //You\n          {\n            string* playerStats = new string ;\n            playerStats = caves.playerStatus( *one ) ;\n\n            for( int i = 0 ; i < 7 ; ++i )\n            {\n              cout << playerStats[i] << endl ;\n            }endl\n          }\n          break ;\n\n          //case 't': //Talk\n\n        case 'h': //Help Menu\n          caves.displayHelp();\n          break ;\n      }\n    }\n    else\n    {\n      cout << \"Invalid command please refer to the help menu.\\nhelp:\" << endl ;\n      cout << \"Or type \\\"quit\\\" to quit the game\" << endl ;\n    }\n\n    if( caves.isComplete() )\n    {\n      cout << \"Dungeon Cleared, YOU WIN!\" << endl ;\n      break ;\n    }\n\n    if( one->death() )\n    {\n      cout << one->getName() + \" was slain by the \" + one->mLocation->getMonsterRef( value ).getName() << endl ;\n      one->mLocation->getMonsterRef( value ).inCombat = false ;\n      cout << \"*Hint* Secret rooms hidden abound; find them and victory shall be yours\" << endl ;\n      input = \"quit\" ;\n    }\n    else\n    {\n      //Get the next command\n      cout << \"\\n\\nNew Command\" << endl ;\n      getline(cin, input, '\\n');\n    }\n  }\n\n  caves.removePlayer( one->getName() ) ;\n}\n```\nFor reference here are all the files for the project below.If none of the dropbox links are working then mention it in the comments section and I’ll re-upload the files. \n<p>\n<a  href=\"http://dl.dropbox.com/u/22280460/database.cpp\">http://dl.dropbox.com/u/22280460/database.cpp</a>\n<br />\n<a href=\"http://dl.dropbox.com/u/22280460/database.h\">http://dl.dropbox.com/u/22280460/database.h</a>\n<br />\n<a href=\"http://dl.dropbox.com/u/22280460/main.cpp\">http://dl.dropbox.com/u/22280460/main.cpp</a>\n<br />\n<a href=\"http://dl.dropbox.com/u/22280460/Test.cpp\">http://dl.dropbox.com/u/22280460/Test.cpp</a>\n<br />\n<a href=\"http://dl.dropbox.com/u/22280460/Test.h\">http://dl.dropbox.com/u/22280460/Test.h</a>\n</p>\n\n[Click here for part VI][link_part_6]\n\n[link_part_4]: /2011/06/11/textbasedrpgpart4\n[link_part_6]: /2011/06/16/textbasedrpgpart6\n","slug":"textbasedrpgpart5","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3ip001tyswvhzlrbivv","layout":"post","photos":[],"link":"","content":"<p>The fifth part of the tutorial on creating a text based multiplayer RPG game will see us creating the last part of the testing and game mechanics before the next section where we’ll launch the client and server code to actually test our game in action.</p>\n<a id=\"more\"></a>\n<ul>\n<li><a href=\"/2011/06/11/textbasedrpgpart4\">Click here for part IV</a></li>\n<li><a href=\"/2011/06/16/textbasedrpgpart6\">Click here for part VI</a></li>\n</ul>\n<p>In this part of the tutorial we will complete the test and methods necessary to get the full functionality for the stand alone single player version. In the next part of the tutorial part 6, we will begin to develop both the client and server code that allows other users to connect and play our game over a local area network. So lets continue with the testing and move onto the player class. Go ahead and open up the “test.h” file and add line below.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_player_class</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure>\n<p>Then open up the file “test.cpp” and add the methods for the player test class beginning at the line indicated.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div></pre></td><td class=\"code\"><pre><div class=\"line\">void Test::test_player_class(void)</div><div class=\"line\">&#123;</div><div class=\"line\">  // Player constructor w/o initial room</div><div class=\"line\">  Player no_room_player(\"hero\");</div><div class=\"line\"></div><div class=\"line\">  assert(10 == no_room_player.mMaxHp);</div><div class=\"line\">  assert(10 == no_room_player.mHp);</div><div class=\"line\">  assert(1 == no_room_player.mStrength);</div><div class=\"line\">  assert(0 == no_room_player.mDefence);</div><div class=\"line\">  assert(NULL == no_room_player.mLocation);</div><div class=\"line\">  assert(\"hero\" == no_room_player.mName);</div><div class=\"line\">  assert(NULL == no_room_player.mWeapon);</div><div class=\"line\">  assert(NULL == no_room_player.mArmor);</div><div class=\"line\"></div><div class=\"line\">  // Player constructor w/room</div><div class=\"line\">  Player room_player(\"dude\", new Room(\"Home\", \"A big house\"));</div><div class=\"line\"></div><div class=\"line\">  assert(NULL != room_player.mLocation);</div><div class=\"line\"></div><div class=\"line\">  // Player getters/setters</div><div class=\"line\">  Player get_set(\"setter\", new Room(\"Lake\", \"A clean lake\"));</div><div class=\"line\"></div><div class=\"line\">  get_set.setDefence(1);</div><div class=\"line\">  get_set.setHp(10);</div><div class=\"line\">  get_set.setName(\"getter\");</div><div class=\"line\">  get_set.setStrength(2);</div><div class=\"line\"></div><div class=\"line\">  assert(1 == get_set.getDefence());</div><div class=\"line\">  assert(10 == get_set.getHp());</div><div class=\"line\">  assert(\"getter\" == get_set.getName());</div><div class=\"line\">  assert(2 == get_set.getStrength());</div><div class=\"line\">  assert(\"Lake\" == get_set.getLocation());</div><div class=\"line\"></div><div class=\"line\">  // Player equip test</div><div class=\"line\">  // The Item is not found</div><div class=\"line\">  // - There is no item within the room \"There is no item to equip in this rooom\"</div><div class=\"line\">  // - The player misspelled the item name \"To equip an item you must type its full name correctly\"</div><div class=\"line\">  Room no_item_room(\"Itemless\", \"There is no item here\");</div><div class=\"line\">  Player no_item_player(\"Hi\");</div><div class=\"line\">  no_item_player.mLocation = &amp;no_item_room;</div><div class=\"line\">  string response(\"There is no item to equip in this room\");</div><div class=\"line\"></div><div class=\"line\">  assert(response == no_item_player.equip(\"Bad Item name\"));</div><div class=\"line\"></div><div class=\"line\">  Room with_item(\"Item room\", \"Item filled room\", new Item(\"dagger\", Item::WEAPON, 10, 0, 0));</div><div class=\"line\">  no_item_player.mLocation = &amp;with_item;</div><div class=\"line\">  response = \"To equip an item you must type its full name correctly\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == no_item_player.equip(\"daggers\"));</div><div class=\"line\"></div><div class=\"line\">  // Weapon is found</div><div class=\"line\">  // - The weapon becomes unavailable</div><div class=\"line\">  // - The players strength is set equal to the weapons power value</div><div class=\"line\">  // - The response returned is \"You equipped the Item.mName\"      Player item_player(\"Bye\", &amp;with_item);</div><div class=\"line\">  response = \"You equipped the dagger\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == item_player.equip(\"dagger\"));</div><div class=\"line\">  assert(false == with_item.mItem-&gt;mAvailiable);</div><div class=\"line\">  assert(with_item.mItem-&gt;getPower() == item_player.getStrength());</div><div class=\"line\"></div><div class=\"line\">  // Armor is found</div><div class=\"line\">  // - The armor becomes unavailable</div><div class=\"line\">  // - The players vitality is set equal to the armor's defence  // - The response returned is \"You equipped the Item.mName\"</div><div class=\"line\">  // - The armor's health value is added to the players max hp</div><div class=\"line\">  Item* steel_plate = new Item(\"steelplate\", Item::ARMOR, 0, 10, 20);</div><div class=\"line\">  with_item.setItem(steel_plate);</div><div class=\"line\">  response = \"You equipped the steelplate\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == item_player.equip(\"steelplate\"));</div><div class=\"line\">  assert(with_item.mItem-&gt;mAvailiable == false);</div><div class=\"line\">  assert(steel_plate-&gt;getHealth() + item_player.getHp()</div><div class=\"line\">      == item_player.mMaxHp);</div><div class=\"line\">  assert(with_item.mItem-&gt;getVitality() == item_player.getDefence());</div><div class=\"line\"></div><div class=\"line\">  // Health is found</div><div class=\"line\">  // - The health item becomes unavailable</div><div class=\"line\">  // - The player's hp is fully restored</div><div class=\"line\">  // - The response is \"You were healed\"</div><div class=\"line\">  Item* herb = new Item(\"herbs\", Item::HEALTH, 0, 0, 0);</div><div class=\"line\">  with_item.setItem(herb);</div><div class=\"line\">  response = \"You were healed\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == item_player.equip(\"herbs\"));</div><div class=\"line\">  assert(with_item.mItem-&gt;mAvailiable == false);</div><div class=\"line\">  assert(item_player.getHp() == item_player.mMaxHp);</div><div class=\"line\"></div><div class=\"line\">  // Player attack test</div><div class=\"line\">  // a- There are no monsters within the Room then the method should  //methodreturn \"There are no monsters in this room to fight\"</div><div class=\"line\">  // b- The player mis-typed the monster name then</div><div class=\"line\">  //name\"The Monster.mName is not here\"</div><div class=\"line\">  // c- If damage was dealt to the monster then the message should say</div><div class=\"line\">  //should\"Monster.mName was dealt X damage\"  // d- If no damage was dealt to the monster then the message should say</div><div class=\"line\">  //should\"Monster.mName dodged the attack\"</div><div class=\"line\">  string response_a(\"There are no monsters in this room to fight\");</div><div class=\"line\">  string response_b(\"The roll is not here\");</div><div class=\"line\">  string response_c(\"troll was dealt 30 damage\");</div><div class=\"line\">  string response_d(\"supertroll dodged the attack\");</div><div class=\"line\"></div><div class=\"line\">  Item* great_sword = new Item(\"greatsword\", Item::WEAPON, 30, 0, 0);</div><div class=\"line\">  Room* arena = new Room(\"arena\", \"A large crowd gathers\", great_sword);</div><div class=\"line\">  Monster* troll = new Monster(\"troll\", 50, 0, 0);</div><div class=\"line\"></div><div class=\"line\">  arena-&gt;setItem(great_sword);</div><div class=\"line\">  Player* attacker = new Player(\"Fighter\", arena);</div><div class=\"line\">  attacker-&gt;equip(\"greatsword\");</div><div class=\"line\"></div><div class=\"line\">  assert(response_a == attacker-&gt;attack(\"troll\"));</div><div class=\"line\"></div><div class=\"line\">  arena-&gt;addMonster(troll);</div><div class=\"line\"></div><div class=\"line\">  assert(response_b == attacker-&gt;attack(\"roll\"));</div><div class=\"line\">  assert(response_c == attacker-&gt;attack(\"troll\"));</div><div class=\"line\"></div><div class=\"line\">  Monster* super_troll = new Monster(\"supertroll\", 8, 0, 999);</div><div class=\"line\">  arena-&gt;addMonster(super_troll);</div><div class=\"line\">  assert(response_d == attacker-&gt;attack(\"supertroll\"));</div><div class=\"line\"></div><div class=\"line\">  // Player move test</div><div class=\"line\">  // - If the player moves in an invalid direction then  //direction\"You traveled nowhere\" should be returned</div><div class=\"line\">  // - If the direction is valid but no room is connected</div><div class=\"line\">  //is\"There is nothing in that direction\"</div><div class=\"line\">  // - If the direction is valid and a room exist</div><div class=\"line\">  //room\"You traveled directionname\\nmLocation-&gt;getDescription()\"</div><div class=\"line\">  Room* moving_room = new Room(\"Moving room\", \"You can move from here\");</div><div class=\"line\">  Room* moving_north = new Room(\"Moving north\",  \"North of the moving room\");</div><div class=\"line\">  Room* moving_south = new Room(\"Moving south\",  \"South of the moving room\");</div><div class=\"line\">  Room* moving_west = new Room(\"Moving west\",</div><div class=\"line\">      \"West of the moving room\");</div><div class=\"line\">  Room* moving_east = new Room(\"Moving east\",</div><div class=\"line\">      \"East of the moving room\");</div><div class=\"line\"></div><div class=\"line\">  Player* moving_player = new Player(\"Jill\", moving_room);</div><div class=\"line\">  response = \"You traveled nowhere\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == moving_player-&gt;move('p'));</div><div class=\"line\"></div><div class=\"line\">  response = \"There is nothing in that direction\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == moving_player-&gt;move('n'));</div><div class=\"line\">  assert(response == moving_player-&gt;move('e'));</div><div class=\"line\">  assert(response == moving_player-&gt;move('w'));</div><div class=\"line\">  assert(response == moving_player-&gt;move('s'));</div><div class=\"line\"></div><div class=\"line\">  moving_player-&gt;mLocation = moving_room;</div><div class=\"line\">  response = \"You traveled North\\n\" + moving_north-&gt;getDescription();</div><div class=\"line\">  moving_room-&gt;link('n', *moving_north);</div><div class=\"line\">  assert(response == moving_player-&gt;move('n'));</div><div class=\"line\"></div><div class=\"line\">  moving_player-&gt;mLocation = moving_room;</div><div class=\"line\">  response = \"You traveled South\\n\" + moving_south-&gt;getDescription();</div><div class=\"line\">  moving_room-&gt;link('s', *moving_south);</div><div class=\"line\">  assert(response == moving_player-&gt;move('s'));</div><div class=\"line\"></div><div class=\"line\">  moving_player-&gt;mLocation = moving_room;</div><div class=\"line\">  response = \"You traveled West\\n\" + moving_west-&gt;getDescription();</div><div class=\"line\">  moving_room-&gt;link('w', *moving_west);</div><div class=\"line\">  assert(response == moving_player-&gt;move('w'));</div><div class=\"line\"></div><div class=\"line\">  moving_player-&gt;mLocation = moving_room;</div><div class=\"line\">  response = \"You traveled East\\n\" + moving_east-&gt;getDescription();</div><div class=\"line\">  moving_room-&gt;link('e', *moving_east);</div><div class=\"line\">  assert(response == moving_player-&gt;move('e'));</div><div class=\"line\"></div><div class=\"line\">  // Player search test</div><div class=\"line\">  // Exact same as the string Room::searchResponse( void )  // method so it has already been tested</div><div class=\"line\"></div><div class=\"line\">  // Player death test</div><div class=\"line\">  // -Returns true when the player's hp is less than zero</div><div class=\"line\">  // -Returns false when the player's hp is greater than zero</div><div class=\"line\">  Player* death_test = new Player(\"Dead guy\");</div><div class=\"line\"></div><div class=\"line\">  assert(false == death_test-&gt;death());</div><div class=\"line\"></div><div class=\"line\">  death_test-&gt;setHp(-1);</div><div class=\"line\">  assert(true == death_test-&gt;death());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now that we have the methods for the player class all set the next thing we have to do is to write out the methods for the player class. To do so open up the file “database.cpp” and add the methods for the player class below.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div></pre></td><td class=\"code\"><pre><div class=\"line\">Player::Player( <span class=\"built_in\">string</span> name, Room* start )  : mName(name), mLocation(start), mWeapon(<span class=\"literal\">NULL</span>), mArmor(<span class=\"literal\">NULL</span>),</div><div class=\"line\">  mHp(<span class=\"number\">10</span>), mMaxHp(<span class=\"number\">10</span>), mStrength(<span class=\"number\">1</span>), mDefence(<span class=\"number\">0</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Player::setHp( <span class=\"keyword\">int</span> newHp )</div><div class=\"line\">&#123;</div><div class=\"line\">  mHp = newHp ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Player::getHp( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mHp ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Player::setStrength( <span class=\"keyword\">int</span> newStrength )</div><div class=\"line\">&#123;</div><div class=\"line\">  mStrength = newStrength ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Player::getStrength( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mStrength ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Player::setDefence( <span class=\"keyword\">int</span> newDefence )</div><div class=\"line\">&#123;</div><div class=\"line\">  mDefence = newDefence ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Player::getDefence( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mDefence ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::getLocation( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mLocation-&gt;mName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Player::setName( <span class=\"built_in\">string</span> newName )</div><div class=\"line\">&#123;</div><div class=\"line\">  mName = newName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::getName( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span>  &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::attack( <span class=\"built_in\">string</span> monsterName )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">list</span>&lt; Monster* &gt;::iterator iter ;</div><div class=\"line\">  <span class=\"keyword\">int</span> damage = <span class=\"number\">0</span> ;</div><div class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">response</span><span class=\"params\">( <span class=\"string\">\"The \"</span> + monsterName + <span class=\"string\">\" is not here\"</span> )</span> </span>;  <span class=\"built_in\">stringstream</span> ss ;</div><div class=\"line\">  <span class=\"built_in\">string</span> strDamage ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( mLocation-&gt;mMonsters.empty() )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"There are no monsters in this room to fight\"</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( iter = mLocation-&gt;mMonsters.begin() ; iter != mLocation-&gt;mMonsters.end() ; ++iter )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( (*iter)-&gt;getName() == monsterName )</div><div class=\"line\">    &#123;</div><div class=\"line\">      damage = getStrength() - (*iter)-&gt;getDefence() ;</div><div class=\"line\">      ss &lt;&lt; damage ;</div><div class=\"line\">      ss &gt;&gt; strDamage ;</div><div class=\"line\">      ss.clear() ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( damage &gt; <span class=\"number\">0</span> )</div><div class=\"line\">      &#123;</div><div class=\"line\">        (*iter)-&gt;setHp( (*iter)-&gt;getHp() - damage ) ;</div><div class=\"line\">        response = (*iter)-&gt;getName() + <span class=\"string\">\" was dealt \"</span> + strDamage + <span class=\"string\">\" damage\"</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        response = (*iter)-&gt;getName() + <span class=\"string\">\" dodged the attack\"</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::equip( <span class=\"built_in\">string</span> itemName )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">string</span> response ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( mLocation-&gt;mItem != <span class=\"literal\">NULL</span> &amp;&amp; mLocation-&gt;mItem-&gt;getName() == itemName )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( Item::WEAPON == mLocation-&gt;mItem-&gt;getType() &amp;&amp; <span class=\"literal\">true</span> == mLocation-&gt;mItem-&gt;mAvailiable )</div><div class=\"line\">    &#123;</div><div class=\"line\">      mWeapon = mLocation-&gt;mItem ;</div><div class=\"line\">      mLocation-&gt;itemTaken() ;</div><div class=\"line\">      setStrength( mWeapon-&gt;getPower() ) ;</div><div class=\"line\">      response = <span class=\"string\">\"You equipped the \"</span> + mWeapon-&gt;getName() ;</div><div class=\"line\">      <span class=\"keyword\">return</span> response ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( Item::ARMOR == mLocation-&gt;mItem-&gt;getType() &amp;&amp; <span class=\"literal\">true</span> == mLocation-&gt;mItem-&gt;mAvailiable )</div><div class=\"line\">    &#123;</div><div class=\"line\">      mArmor = mLocation-&gt;mItem ;</div><div class=\"line\">      mLocation-&gt;itemTaken() ;</div><div class=\"line\">      setDefence( mArmor-&gt;getVitality() ) ;</div><div class=\"line\">      mMaxHp += mArmor-&gt;getHealth() ;</div><div class=\"line\">      response = <span class=\"string\">\"You equipped the \"</span> + mArmor-&gt;getName() ;</div><div class=\"line\">      <span class=\"keyword\">return</span> response ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      setHp( mMaxHp ) ;</div><div class=\"line\">      mLocation-&gt;itemTaken() ;</div><div class=\"line\">      response = <span class=\"string\">\"You were healed\"</span> ;</div><div class=\"line\">      <span class=\"keyword\">return</span> response ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( mLocation-&gt;mItem == <span class=\"literal\">NULL</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"There is no item to equip in this room\"</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    response = <span class=\"string\">\"To equip an item you must type its full name correctly\"</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> response ;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::move( <span class=\"keyword\">char</span> direction )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">string</span> response = <span class=\"string\">\"You traveled \"</span> ;</div><div class=\"line\">  <span class=\"keyword\">switch</span>( direction )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'n'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'N'</span>:</div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == mLocation-&gt;mNorth )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = <span class=\"string\">\"There is nothing in that direction\"</span> ;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mLocation = &amp;(mLocation-&gt;north()) ;</div><div class=\"line\">      response = response + <span class=\"string\">\"North\\n\"</span> + mLocation-&gt;getDescription() ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'S'</span>:</div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == mLocation-&gt;mSouth )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = <span class=\"string\">\"There is nothing in that direction\"</span> ;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mLocation = &amp;(mLocation-&gt;south()) ;</div><div class=\"line\">      response = response + <span class=\"string\">\"South\\n\"</span> + mLocation-&gt;getDescription() ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'E'</span>:</div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == mLocation-&gt;mEast )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = <span class=\"string\">\"There is nothing in that direction\"</span> ;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mLocation = &amp;(mLocation-&gt;east()) ;</div><div class=\"line\">      response = response + <span class=\"string\">\"East\\n\"</span> + mLocation-&gt;getDescription() ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'w'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'W'</span>:</div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == mLocation-&gt;mWest )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = <span class=\"string\">\"There is nothing in that direction\"</span> ;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mLocation = &amp;(mLocation-&gt;west()) ;</div><div class=\"line\">      response = response + <span class=\"string\">\"West\\n\"</span> + mLocation-&gt;getDescription() ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      response = response + <span class=\"string\">\"nowhere\"</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::search( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mLocation-&gt;searchResponse() ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Player::dead Player::death( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>( getHp() &lt;= <span class=\"number\">0</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Afterwards you can begin to test the Dungeon class, so open up the file “test.h” file and add the following line.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_dungeon_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div></pre></td></tr></table></figure>\n<p>Here are the methods for the dungeon test, it is quite long so you can copy it if you want to but I suggest typing it out and reading through the comments in order to better understand the codebase; the file for the code below is “test.cpp”</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_dungeon_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Dungeon constructor test</span></div><div class=\"line\">  Dungeon* test_dungeon = <span class=\"keyword\">new</span> Dungeon(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"number\">1</span> == test_dungeon-&gt;mMaxPlayers);</div><div class=\"line\">  assert(<span class=\"number\">1</span> == test_dungeon-&gt;mMaxRooms);</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == test_dungeon-&gt;mPlayers.empty());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == test_dungeon-&gt;mRooms.empty());</div><div class=\"line\">  <span class=\"comment\">// - A dungeon without monsters is considered complete</span></div><div class=\"line\">  assert(<span class=\"literal\">true</span> == test_dungeon-&gt;isComplete());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon addPlayer test</span></div><div class=\"line\">  <span class=\"comment\">// - Successful addition of a new player should display the following</span></div><div class=\"line\">  <span class=\"comment\">//the\"The player named newPlayer-&gt;getName() entered the Dungeon\"</span></div><div class=\"line\">  Player* newbie = <span class=\"keyword\">new</span> Player(<span class=\"string\">\"Noob\"</span>);</div><div class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">response</span><span class=\"params\">(<span class=\"string\">\"The player named Noob entered the Dungeon\"</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(response == test_dungeon-&gt;addPlayer(newbie));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == test_dungeon-&gt;mPlayers.empty());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon addRoom test</span></div><div class=\"line\">  <span class=\"comment\">// - \"The room: newRoom-&gt;mName was added\" will be displayed</span></div><div class=\"line\">  <span class=\"comment\">//beif the addition was successful</span></div><div class=\"line\">  Room* main_room = <span class=\"keyword\">new</span> Room(<span class=\"string\">\"Main hall\"</span>, <span class=\"string\">\"The main hall\"</span>);</div><div class=\"line\">  response = <span class=\"string\">\"The room: Main hall was added\"</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(response == test_dungeon-&gt;addRoom(main_room));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == test_dungeon-&gt;mRooms.empty());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon removePlayer test</span></div><div class=\"line\">  response = <span class=\"string\">\"Noob has left the dungeon\"</span>;</div><div class=\"line\">  assert(response == test_dungeon-&gt;removePlayer(newbie-&gt;getName()));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon generatePlayerStats test</span></div><div class=\"line\">  <span class=\"comment\">// -Sets the players max hp to 10, strength and defence to 2</span></div><div class=\"line\">  test_dungeon-&gt;generatePlayerStats(newbie);</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"number\">10</span> == newbie-&gt;getHp());</div><div class=\"line\">  assert(<span class=\"number\">2</span> == newbie-&gt;getStrength());</div><div class=\"line\">  assert(<span class=\"number\">2</span> == newbie-&gt;getDefence());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon combatLoop test</span></div><div class=\"line\">  <span class=\"comment\">// - If the hero is stronger than the monster then the monster  //theshould die else the hero should die</span></div><div class=\"line\">  Dungeon* combat_test = <span class=\"keyword\">new</span> Dungeon(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">  Room* combat_room = <span class=\"keyword\">new</span> Room(<span class=\"string\">\"Battle\"</span>, <span class=\"string\">\"Fight here\"</span>);</div><div class=\"line\">  Item* longsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"longsword\"</span>, Item::WEAPON, <span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  Player* brawler = <span class=\"keyword\">new</span> Player(<span class=\"string\">\"brawler\"</span>, combat_room);</div><div class=\"line\">  Monster* ogre = <span class=\"keyword\">new</span> Monster(<span class=\"string\">\"ogre\"</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);  Monster* superogre = <span class=\"keyword\">new</span> Monster(<span class=\"string\">\"superogre\"</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);  combat_room-&gt;setItem(longsword);</div><div class=\"line\">  combat_room-&gt;addMonster(ogre);</div><div class=\"line\">  combat_room-&gt;addMonster(superogre);</div><div class=\"line\">  combat_test-&gt;addRoom(combat_room);</div><div class=\"line\">  combat_test-&gt;addPlayer(brawler);</div><div class=\"line\">  combat_test-&gt;generatePlayerStats(brawler);</div><div class=\"line\">  brawler-&gt;mLocation = combat_room;</div><div class=\"line\">  brawler-&gt;equip(<span class=\"string\">\"longsword\"</span>);</div><div class=\"line\"></div><div class=\"line\">  combat_test-&gt;combatLoop(*brawler, *ogre);</div><div class=\"line\">  assert(combat_room-&gt;mMonsters.empty() == <span class=\"literal\">false</span>);</div><div class=\"line\">  assert(combat_test-&gt;isComplete() == <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\">  Item* badsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"badsword\"</span>, Item::WEAPON, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  combat_room-&gt;setItem(badsword);</div><div class=\"line\">  brawler-&gt;equip(<span class=\"string\">\"badsword\"</span>);</div><div class=\"line\"></div><div class=\"line\">  combat_test-&gt;combatLoop(*brawler, *superogre);</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == brawler-&gt;death());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon playerStatus test</span></div><div class=\"line\">  Dungeon* status_test = <span class=\"keyword\">new</span> Dungeon(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\">  Room* start_room = <span class=\"keyword\">new</span> Room(<span class=\"string\">\"Starting room\"</span>, <span class=\"string\">\"Start here\"</span>);</div><div class=\"line\">  Room* end_room = <span class=\"keyword\">new</span> Room(<span class=\"string\">\"Ending room\"</span>, <span class=\"string\">\"End here\"</span>);</div><div class=\"line\">  Player* stats_hero = <span class=\"keyword\">new</span> Player(<span class=\"string\">\"Mike\"</span>, start_room);</div><div class=\"line\">  Item* weapon_x = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"weaponx\"</span>, Item::WEAPON, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  Item* armor_x = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"armorx\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\">  start_room-&gt;link(<span class=\"string\">'e'</span>, *end_room);</div><div class=\"line\">  end_room-&gt;link(<span class=\"string\">'w'</span>, *start_room);</div><div class=\"line\">  start_room-&gt;setItem(weapon_x);</div><div class=\"line\">  end_room-&gt;setItem(armor_x);</div><div class=\"line\">  status_test-&gt;addRoom(start_room);</div><div class=\"line\">  status_test-&gt;addRoom(end_room);</div><div class=\"line\">  status_test-&gt;addPlayer(stats_hero);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// The stats reported are the following</span></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">     1. Hp</div><div class=\"line\">     2. Strength</div><div class=\"line\">     3. Defence</div><div class=\"line\">     4. Location</div><div class=\"line\">     5. Name</div><div class=\"line\">     6. Weapon</div><div class=\"line\">     7. Armor</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> stat_total = <span class=\"number\">7</span>;</div><div class=\"line\">  <span class=\"built_in\">string</span>* status_before_weapon = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[stat_total];</div><div class=\"line\">  <span class=\"built_in\">string</span>* status_with_weapon = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[stat_total];</div><div class=\"line\">  <span class=\"built_in\">string</span>* status_with_armor = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[stat_total];</div><div class=\"line\"></div><div class=\"line\">  status_before_weapon[<span class=\"number\">0</span>] = <span class=\"string\">\"Current HP: 10 out of 10\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">1</span>] = <span class=\"string\">\"Current Strength: 2\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">2</span>] = <span class=\"string\">\"Current Defence: 2\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">3</span>] = <span class=\"string\">\"Current Location: Starting room\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">4</span>] = <span class=\"string\">\"Current Name: Mike\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">5</span>] = <span class=\"string\">\"Current Weapon: none equipped\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">6</span>] = <span class=\"string\">\"Current Armor: none equipped\"</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(status_before_weapon = status_test-&gt;playerStatus(*stats_hero));</div><div class=\"line\"></div><div class=\"line\">  stats_hero-&gt;equip(<span class=\"string\">\"weaponx\"</span>);</div><div class=\"line\"></div><div class=\"line\">  status_with_weapon[<span class=\"number\">0</span>] = <span class=\"string\">\"Current HP: 10 out of 10\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">1</span>] = <span class=\"string\">\"Current Strength: 20\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">2</span>] = <span class=\"string\">\"Current Defence: 2\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">3</span>] = <span class=\"string\">\"Current Location: Starting room\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">4</span>] = <span class=\"string\">\"Current Name: Mike\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">5</span>] = <span class=\"string\">\"Current Weapon: weaponx\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">6</span>] = <span class=\"string\">\"Current Armor: none equipped\"</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(status_with_weapon = status_test-&gt;playerStatus(*stats_hero));</div><div class=\"line\"></div><div class=\"line\">  stats_hero-&gt;move(<span class=\"string\">'e'</span>);</div><div class=\"line\">  stats_hero-&gt;equip(<span class=\"string\">\"armorx\"</span>);</div><div class=\"line\"></div><div class=\"line\">  status_with_armor[<span class=\"number\">0</span>] = <span class=\"string\">\"Current HP: 10 out of 20\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">1</span>] = <span class=\"string\">\"Current Strength: 20\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">2</span>] = <span class=\"string\">\"Current Defence: 20\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">3</span>] = <span class=\"string\">\"Current Location: Ending room\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">4</span>] = <span class=\"string\">\"Current Name: Mike\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">5</span>] = <span class=\"string\">\"Current Weapon: weaponx\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">6</span>] = <span class=\"string\">\"Current Armor: armorx\"</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(status_with_armor = status_test-&gt;playerStatus(*stats_hero));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now we can write out the methods for the dungeon class itself. Go open up the file “database.cpp” and add the lines below to the file, remember to start at the line of code indicated in the margins.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dungeon::Dungeon( <span class=\"keyword\">int</span> maxPlayers, <span class=\"keyword\">int</span> maxRooms )  : mMaxPlayers(maxPlayers), mMaxRooms(maxRooms)</div><div class=\"line\">&#123;</div><div class=\"line\">  mRooms.reserve( maxRooms ) ;</div><div class=\"line\">  mPlayers.reserve( maxPlayers ) ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> Dungeon::isComplete( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">bool</span> flag = <span class=\"literal\">true</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; mRooms.size() ; ++i )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( mRooms[i]-&gt;mMonsters.empty() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">continue</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      flag = <span class=\"literal\">false</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> flag ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Dungeon::addPlayer( Player *newPlayer )</div><div class=\"line\">&#123;</div><div class=\"line\">  mPlayers.push_back( newPlayer ) ;</div><div class=\"line\">  <span class=\"built_in\">string</span> response = <span class=\"string\">\"The player named \"</span> + newPlayer-&gt;getName() + <span class=\"string\">\" entered the Dungeon\"</span> ;</div><div class=\"line\"></div><div class=\"line\">  generatePlayerStats( newPlayer ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Dungeon::generatePlayerStats( Player* newPlayer )</div><div class=\"line\">&#123;</div><div class=\"line\">  newPlayer-&gt;mMaxHp = <span class=\"number\">10</span> ;</div><div class=\"line\">  newPlayer-&gt;setHp( newPlayer-&gt;mMaxHp ) ;</div><div class=\"line\">  newPlayer-&gt;setStrength( <span class=\"number\">2</span> ) ;</div><div class=\"line\">  newPlayer-&gt;setDefence( <span class=\"number\">2</span> ) ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Dungeon::addRoom( Room *newRoom )</div><div class=\"line\">&#123;</div><div class=\"line\">  mRooms.push_back( newRoom ) ;</div><div class=\"line\">  <span class=\"built_in\">string</span> response = <span class=\"string\">\"The room: \"</span> + newRoom-&gt;mName + <span class=\"string\">\" was added\"</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Dungeon::removePlayer( <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> playerName )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">string</span> response = playerName + <span class=\"string\">\" has left the dungeon\"</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; mPlayers.size() ; ++i )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( playerName == mPlayers[i]-&gt;getName() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      mPlayers.erase( mPlayers.begin() + i ) ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Should change this to have the monstersName as an argument</span></div><div class=\"line\"><span class=\"keyword\">void</span> Dungeon::combatLoop( Player&amp; hero, Monster&amp; villain )</div><div class=\"line\">&#123;</div><div class=\"line\">  villain.inCombat = <span class=\"literal\">true</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span>( <span class=\"literal\">true</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; hero.attack( villain.getName() ) &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">    <span class=\"keyword\">if</span>( villain.getHp() &lt;= <span class=\"number\">0</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; villain.getName() + <span class=\"string\">\" was slain by the valiant \"</span> &lt;&lt; hero.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">      hero.mLocation-&gt;killMonster( villain.getName() ) ;</div><div class=\"line\">      <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> damage = <span class=\"number\">0</span> ;</div><div class=\"line\">      damage = villain.getStrength() - hero.getDefence() ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( damage &gt; <span class=\"number\">0</span> )</div><div class=\"line\">      &#123;</div><div class=\"line\">        hero.setHp( hero.getHp() - damage ) ;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; hero.getName() + <span class=\"string\">\" was dealt \"</span> &lt;&lt; damage &lt;&lt; <span class=\"string\">\" damage\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; hero.getName() + <span class=\"string\">\" dodged the attack\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( hero.death() )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; hero.getName() + <span class=\"string\">\" was slain by the horrible \"</span> + villain.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span>* Dungeon::playerStatus( Player&amp; player )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">stringstream</span> ss ;</div><div class=\"line\">  <span class=\"built_in\">string</span> temp ;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> statusCount = <span class=\"number\">7</span> ;</div><div class=\"line\">  <span class=\"built_in\">string</span>* response = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[statusCount] ;</div><div class=\"line\"></div><div class=\"line\">  ss &lt;&lt; player.getHp() ;</div><div class=\"line\">  ss &gt;&gt; temp ;</div><div class=\"line\">  response[<span class=\"number\">0</span>] = <span class=\"string\">\"Current HP: \"</span> + temp ;</div><div class=\"line\">  ss.clear() ;</div><div class=\"line\">  temp.clear() ;</div><div class=\"line\">  ss &lt;&lt; player.mMaxHp ;</div><div class=\"line\">  ss &gt;&gt; temp ;</div><div class=\"line\">  response[<span class=\"number\">0</span>] = response[<span class=\"number\">0</span>] + <span class=\"string\">\" out of \"</span> + temp ;</div><div class=\"line\">  temp.clear() ;</div><div class=\"line\">  ss.clear() ;</div><div class=\"line\"></div><div class=\"line\">  ss &lt;&lt; player.getStrength() ;</div><div class=\"line\">  ss &gt;&gt; temp ;</div><div class=\"line\">  response[<span class=\"number\">1</span>] = <span class=\"string\">\"Current Strength: \"</span> + temp ;</div><div class=\"line\">  ss.clear() ;</div><div class=\"line\">  temp.clear() ;</div><div class=\"line\"></div><div class=\"line\">  ss &lt;&lt; player.getDefence() ;</div><div class=\"line\">  ss &gt;&gt; temp ;</div><div class=\"line\">  response[<span class=\"number\">2</span>] = <span class=\"string\">\"Current Defence: \"</span> + temp ;</div><div class=\"line\">  ss.clear() ;</div><div class=\"line\">  temp.clear() ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == player.mLocation )</div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">3</span>] = <span class=\"string\">\"Error: BAD LOCATION\"</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">3</span>] = <span class=\"string\">\"Current Location: \"</span> + player.getLocation() ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  response[<span class=\"number\">4</span>] = <span class=\"string\">\"Current Name: \"</span> + player.getName() ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == player.mWeapon )</div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">5</span>] = <span class=\"string\">\"Current Weapon: none equipped\"</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">5</span>] = <span class=\"string\">\"Current Weapon: \"</span> + player.mWeapon-&gt;getName() ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == player.mArmor )</div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">6</span>] = <span class=\"string\">\"Current Armor: none equipped\"</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">6</span>] = <span class=\"string\">\"Current Armor: \"</span> + player.mArmor-&gt;getName() ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Dungeon::displayHelp( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"////////////////\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Help menu\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"////////////////\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Attack a monster type -&gt; a:monster_name_here\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Move to a new location type -&gt; mv:location_name_here\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Look for items type -&gt; find:\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Search the room for exits and monsters type -&gt; loc:\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Equip new items type -&gt; eq:weapon_or_armor_name\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"See your current status type -&gt; you:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next class we have to test is the filter class, if you recall from previous parts, the filter class’ job is to validate user input to check if it is safe to “dispatch” to the database. You can think of the filter as a sanitizer for bad commands just like you can image a filter swearing words on message boards. Now go open up “test.h” and add the following line.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_filter_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div></pre></td></tr></table></figure>\n<p>You know the drill, create the test methods within the file “test.cpp” for the filter class(don’t worry this class is short).</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_filter_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Filter chat test</span></div><div class=\"line\">  <span class=\"comment\">// string Filter::chat() just truncates the command from the  //fromchat message if it was t:message  Filter filter;</span></div><div class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">input</span><span class=\"params\">(<span class=\"string\">\"t:Hello world\"</span>)</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">response</span><span class=\"params\">(<span class=\"string\">\"Hello world\"</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(response == filter.chat(input));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Filter validateMessage test</span></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">     The valid commands are the following</div><div class=\"line\">    a:</div><div class=\"line\">    mv:</div><div class=\"line\">    find:</div><div class=\"line\">    loc:</div><div class=\"line\">    eq:</div><div class=\"line\">    you:</div><div class=\"line\">    help:</div><div class=\"line\">   */</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"mv:n\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"a:goblin\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"find:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"loc:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"eq:weapon\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"you:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"help:\"</span>));</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"move:north\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"move:south\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"move:east\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"move:west\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"attack:goblin\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"fid:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"location:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"eqip:weapon\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"me:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"zelpeafaf:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"gg:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"Pi:affg\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"Eqip:weapon\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"Ye:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"no command input\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>There are only two methods for the filter class, chat and validate message. As you can probably guess, chat just sends out the text following the chat command “t:”. However validate message a bit more involved. Validate message works by running three distinct test, the “keywordtest” the “commandtest” and the movecommandtest”. Keyword just makes sure that the user entered a keyword such as “a:” for attack, “you:” for player status or any of the others. The “commandtest” just checks after the keyword has been validated that the fullname of the command matches the possible command inputs. Lastly the “movecommandtest” ensures that the direction of travel for the move command is north, south, east or west. So go open up “database.cpp” and add the lines below paying attention to which line the code begins on as shown in the margin.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\">Filter::valid Filter::validateMessage( <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> message )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">//Necessary for the std::tolower() method</span></div><div class=\"line\">  locale loc ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; message.length() ; ++i )</div><div class=\"line\">  &#123;</div><div class=\"line\">    message [ i ] = <span class=\"built_in\">tolower</span>( message[ i ], loc ) ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">bool</span> keywordTest = <span class=\"literal\">false</span> ;  <span class=\"keyword\">bool</span> commandTest = <span class=\"literal\">false</span> ;  <span class=\"keyword\">bool</span> moveCommandTest = <span class=\"literal\">true</span> ; <span class=\"comment\">// Checks for a valid direction</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> inputIndex = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">switch</span>( message[ <span class=\"number\">0</span> ] )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>: <span class=\"comment\">//Attack  case 'm': //Move</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'f'</span>: <span class=\"comment\">//Find</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'l'</span>: <span class=\"comment\">//Location</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>: <span class=\"comment\">//Equip</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'y'</span>: <span class=\"comment\">//You</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'t'</span>: <span class=\"comment\">//Talk</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'h'</span>: <span class=\"comment\">//Help Menu</span></div><div class=\"line\">      keywordTest = <span class=\"literal\">true</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;<span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        keywordTest = <span class=\"literal\">false</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"literal\">false</span> == keywordTest )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">string</span> subMessage ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; message.size() ; ++i )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( message[ i ] == <span class=\"string\">':'</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      inputIndex = i;</div><div class=\"line\">      subMessage += message[ i ] ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      subMessage += message[ i ] ;</div><div class=\"line\">      <span class=\"keyword\">continue</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( subMessage == <span class=\"string\">\"a:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"mv:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"find:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"loc:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"eq:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"you:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"t:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"help:\"</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    commandTest = <span class=\"literal\">true</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( subMessage == <span class=\"string\">\"mv:\"</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//Checks if a direction was entered by the player,</span></div><div class=\"line\">    <span class=\"comment\">// accomplishes this by seeing if the mv: command</span></div><div class=\"line\">    <span class=\"comment\">// is followed by at most a single character representing</span></div><div class=\"line\">    <span class=\"comment\">// the directions 'n' or 'e' or 'w' or 's'</span></div><div class=\"line\">    <span class=\"keyword\">if</span>( inputIndex + <span class=\"number\">1</span> == message.size() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      moveCommandTest = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>( inputIndex &lt; message.size() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"literal\">false</span> == moveCommandTest )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>(message[ inputIndex ] == <span class=\"string\">' '</span>)</div><div class=\"line\">      &#123;</div><div class=\"line\">        moveCommandTest = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      ++inputIndex ;</div><div class=\"line\">    &#125;inputIndex</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"literal\">true</span> == commandTest &amp;&amp; <span class=\"literal\">true</span> == keywordTest &amp;&amp; <span class=\"literal\">true</span> == moveCommandTest )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Filter::chat( <span class=\"built_in\">string</span> message )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> message.substr( <span class=\"number\">2</span>, message.length() ) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The dispatch class is the last class we need for thesingle player version of the game. Being the dispatchits sole purpose is to separate the value and command fromthe filtered user input and “dispatch” it to the database.Now lets open up “test.h” and add the line below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_dispatch_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>Next we’ll write out the test for the dispatch class within “test.cpp”, so go open that file and insert the code below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_dispatch_class()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Dispatch extractCommand test</span></div><div class=\"line\">  <span class=\"comment\">//a Attack  //m Move</span></div><div class=\"line\">  <span class=\"comment\">//f Find</span></div><div class=\"line\">  <span class=\"comment\">//l Location</span></div><div class=\"line\">  <span class=\"comment\">//e Equip</span></div><div class=\"line\">  <span class=\"comment\">//y You</span></div><div class=\"line\">  <span class=\"comment\">//t Talk</span></div><div class=\"line\">  <span class=\"comment\">//h Help Menu</span></div><div class=\"line\">  Dispatch dispatch;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">'a'</span> == dispatch.extractCommand(<span class=\"string\">\"a:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'m'</span> == dispatch.extractCommand(<span class=\"string\">\"mv:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'f'</span> == dispatch.extractCommand(<span class=\"string\">\"find:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'l'</span> == dispatch.extractCommand(<span class=\"string\">\"loc:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'e'</span> == dispatch.extractCommand(<span class=\"string\">\"eq:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'y'</span> == dispatch.extractCommand(<span class=\"string\">\"you:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'t'</span> == dispatch.extractCommand(<span class=\"string\">\"t:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'h'</span> == dispatch.extractCommand(<span class=\"string\">\"help:\"</span>));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dispatch extractValue test</span></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">     The only commands that take values.</div><div class=\"line\"></div><div class=\"line\">     attack  move  equip</div><div class=\"line\">     talk  */</div><div class=\"line\">  assert(<span class=\"string\">\"goblin\"</span> == dispatch.extractValue(<span class=\"string\">\"a:goblin\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">\"north\"</span> == dispatch.extractValue(<span class=\"string\">\"mv:north\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">\"armor\"</span> == dispatch.extractValue(<span class=\"string\">\"eq:armor\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">\"hello world\"</span> == dispatch.extractValue(<span class=\"string\">\"t:hello world\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">\"  s p a c  e  s  \"</span> == dispatch.extractValue(</div><div class=\"line\">        <span class=\"string\">\"t:  s p a c  e  s  \"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now we can add the methods for the dispatch class to our “database.cpp”file. Open up the file “database.cpp” and add the lines below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span> Dispatch::extractCommand(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> fromFilter)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">//a Attack  //m Move</span></div><div class=\"line\">  <span class=\"comment\">//f Find</span></div><div class=\"line\">  <span class=\"comment\">//l Location</span></div><div class=\"line\">  <span class=\"comment\">//e Equip</span></div><div class=\"line\">  <span class=\"comment\">//y You</span></div><div class=\"line\">  <span class=\"comment\">//t Talk</span></div><div class=\"line\">  <span class=\"comment\">//h Help Menu</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> fromFilter[ <span class=\"number\">0</span> ] ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Dispatch::extractValue(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> fromFilter)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">     The value of the string from the filter is all of the text</div><div class=\"line\">     that follows the command.</div><div class=\"line\"></div><div class=\"line\">     -Example-</div><div class=\"line\">a:goblin</div><div class=\"line\"></div><div class=\"line\">The command is a:</div><div class=\"line\">The value is goblin</div><div class=\"line\">   */</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// For single character commands such as t:</span></div><div class=\"line\">  <span class=\"keyword\">if</span>( fromFilter[ <span class=\"number\">1</span> ] == <span class=\"string\">':'</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fromFilter.substr( <span class=\"number\">2</span>, fromFilter.length() ) ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> fromFilter.substr( <span class=\"number\">3</span>, fromFilter.length() ) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The last thing we have to do before we can call our single player version of the game complete is to make sure all the test pass with flying colors. Beingthat we only implemented unit test, you will be notified when a test failsby the console giving you a “assertion failed at line:XYZ” where XYZ is the line number. So open up “main.cpp” and make sure it looks like the code below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Filename main.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Database.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run_test</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Ignore the combat printouts from the\\n\"</span>;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"test_dungeon_class() method\\n\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">  Test::get_instance()-&gt;test_item_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_monster_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_room_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_player_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_dungeon_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_filter_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_dispatch_class();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run_sample_game</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  run_test();</div><div class=\"line\">  <span class=\"comment\">//run_sample_game();</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run_sample_game</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">//Construct Dungeon</span></div><div class=\"line\">  <span class=\"function\">Dungeon <span class=\"title\">caves</span><span class=\"params\">( <span class=\"number\">2</span>, <span class=\"number\">21</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Items power vitality health</span></div><div class=\"line\">  Item* herb_a = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_b = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_c = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_d = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_e = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_f = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_g = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  Item* woodsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* steelblade = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"steelblade\"</span>, Item::WEAPON, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* crystalsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"crystalsword\"</span>, Item::WEAPON, <span class=\"number\">35</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* genjiblade = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"genjiblade\"</span>, Item::WEAPON, <span class=\"number\">60</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* angelicsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"angelicsword\"</span>, Item::WEAPON, <span class=\"number\">80</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* finalweapon = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"dragonslayer\"</span>, Item::WEAPON, <span class=\"number\">2000</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  Item* woodarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"woodarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span> ) ;</div><div class=\"line\">  Item* steelarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"steelarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">20</span> ) ;</div><div class=\"line\">  Item* diamondarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"diamondarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">30</span> ) ;</div><div class=\"line\">  Item* crystalarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"crystalarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">35</span> ) ;</div><div class=\"line\">  Item* dragonarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"dragonarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">100</span> ) ;</div><div class=\"line\">  Item* ultimatearmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"ultimatearmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Monsters hp str def</span></div><div class=\"line\">  Monster* bear = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"bear\"</span>, <span class=\"number\">15</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ) ;</div><div class=\"line\">  Monster* goblin = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"goblin\"</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">  Monster* imp = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"imp\"</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span> ) ;</div><div class=\"line\">  Monster* redgoblin = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"redgoblin\"</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span> ) ;</div><div class=\"line\">  Monster* demon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"demon\"</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span> ) ;</div><div class=\"line\">  Monster* zergling = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"zergling\"</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span> ) ;</div><div class=\"line\">  Monster* bats = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"bats\"</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">3</span> ) ;</div><div class=\"line\">  Monster* morebats = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"morebats\"</span>, <span class=\"number\">25</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span> ) ;</div><div class=\"line\">  Monster* golem = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"golem\"</span>, <span class=\"number\">50</span>, <span class=\"number\">21</span>, <span class=\"number\">9</span> ) ;</div><div class=\"line\">  Monster* goatdemon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"goatdemon\"</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span> ) ;</div><div class=\"line\">  Monster* cyclops = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"cyclops\"</span>, <span class=\"number\">150</span>, <span class=\"number\">90</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Monster* behemoth = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"behemoth\"</span>, <span class=\"number\">250</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span> ) ;</div><div class=\"line\">  Monster* alien = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"alien\"</span>, <span class=\"number\">50</span>, <span class=\"number\">21</span>, <span class=\"number\">4</span> ) ;</div><div class=\"line\">  Monster* giantrat = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"giantrat\"</span>, <span class=\"number\">55</span>, <span class=\"number\">40</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">  Monster* fallenangel = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"fallenangel\"</span>, <span class=\"number\">300</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span> ) ;</div><div class=\"line\">  Monster* greatdragon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"greatdragon\"</span>, <span class=\"number\">500</span>, <span class=\"number\">300</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">  Monster* invincibledragon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"invincibledragon\"</span>, <span class=\"number\">999</span>, <span class=\"number\">999</span>, <span class=\"number\">999</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Rooms name description item</span></div><div class=\"line\">  Room* mainHall = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The main cavern\"</span>, <span class=\"string\">\"A murkey swamp cavern\"</span>, woodsword ) ;</div><div class=\"line\">  Room* river = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The black river\"</span>, <span class=\"string\">\"A river with dark water\"</span>, woodarmor ) ;</div><div class=\"line\">  Room* greencave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The greencave\"</span>, <span class=\"string\">\"A moss covered cave\"</span>, herb_a ) ;</div><div class=\"line\">  Room* bluecave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The bluecave\"</span>, <span class=\"string\">\"A frosty cave\"</span>, steelblade ) ;</div><div class=\"line\">  Room* darkpit = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The darkpit\"</span>, <span class=\"string\">\"An endless hole lies before you\"</span>, steelarmor ) ;</div><div class=\"line\">  Room* morbidfield = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The morbidfield\"</span>, <span class=\"string\">\"Pitch black grass surrounds you\"</span>, herb_b ) ;</div><div class=\"line\">  Room* graveyard = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The graveyard\"</span>, <span class=\"string\">\"Tombstones abound\"</span>, diamondarmor ) ;</div><div class=\"line\">  Room* crypt = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The crypt\"</span>, <span class=\"string\">\"A nasty rotten crypt\"</span>, crystalsword ) ;</div><div class=\"line\">  Room* evilpassage = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The evil passage\"</span>, <span class=\"string\">\"An evil pasage\"</span>, crystalarmor ) ;</div><div class=\"line\">  Room* darklair = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dark lair\"</span>, <span class=\"string\">\"A dark lair\"</span>, herb_c ) ;</div><div class=\"line\">  Room* firepit = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The firey pits\"</span>, <span class=\"string\">\"Fire is every where\"</span>, herb_d ) ;</div><div class=\"line\">  Room* greenpasture = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The greenpastures\"</span>, <span class=\"string\">\"A meadow is before you\"</span>, genjiblade ) ;</div><div class=\"line\">  Room* icecave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The icy caves\"</span>, <span class=\"string\">\"Ice everywhere you look\"</span>, herb_e ) ;</div><div class=\"line\">  Room* livingroom = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The living room\"</span>, <span class=\"string\">\"The room is alive\"</span>, dragonarmor ) ;</div><div class=\"line\">  Room* cellar = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The cellar\"</span>, <span class=\"string\">\"A dirty cellar filled with rats\"</span>, angelicsword ) ;</div><div class=\"line\">  Room* lifespring = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The lifespring\"</span>, <span class=\"string\">\"A beautiful fountain stands\"</span>, herb_f ) ;</div><div class=\"line\">  Room* waterfall = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The waterfall\"</span>, <span class=\"string\">\"Clear blue water falls\"</span>, herb_g ) ;</div><div class=\"line\">  Room* hellsgate = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The gates of hell\"</span>, <span class=\"string\">\"Large rusty doors lead to hell\"</span>, ultimatearmor ) ;</div><div class=\"line\">  Room* dragoncave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dragon's cave\"</span>, <span class=\"string\">\"An ancient cave...\"</span> ) ;</div><div class=\"line\">  Room* dragonsden = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dragon's den\"</span>, <span class=\"string\">\"A powerful monster awaits\"</span> ) ;</div><div class=\"line\">  Room* lostforest = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The secret forest\"</span>, <span class=\"string\">\"The strongest sword lies hidden here\"</span>, finalweapon ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Link Rooms</span></div><div class=\"line\">  mainHall-&gt;link( <span class=\"string\">'e'</span>, *river ) ;</div><div class=\"line\">  river-&gt;link( <span class=\"string\">'s'</span>, *greencave ) ;</div><div class=\"line\">  river-&gt;link( <span class=\"string\">'e'</span>, *bluecave ) ;</div><div class=\"line\">  river-&gt;link( <span class=\"string\">'w'</span>, *mainHall ) ;</div><div class=\"line\">  greencave-&gt;link( <span class=\"string\">'n'</span>, *river ) ;</div><div class=\"line\">  bluecave-&gt;link( <span class=\"string\">'w'</span>, *river ) ;</div><div class=\"line\">  bluecave-&gt;link( <span class=\"string\">'n'</span>, *darkpit ) ;</div><div class=\"line\">  darkpit-&gt;link( <span class=\"string\">'s'</span>, *bluecave ) ;</div><div class=\"line\">  darkpit-&gt;link( <span class=\"string\">'n'</span>, *morbidfield ) ;</div><div class=\"line\">  morbidfield-&gt;link( <span class=\"string\">'s'</span>, *darkpit ) ;</div><div class=\"line\">  morbidfield-&gt;link( <span class=\"string\">'e'</span>, *graveyard ) ;</div><div class=\"line\">  graveyard-&gt;link( <span class=\"string\">'w'</span>, *morbidfield ) ;</div><div class=\"line\">  graveyard-&gt;link( <span class=\"string\">'n'</span>, *crypt ) ;</div><div class=\"line\">  graveyard-&gt;link( <span class=\"string\">'e'</span>, *evilpassage ) ;</div><div class=\"line\">  crypt-&gt;link( <span class=\"string\">'s'</span>, *graveyard ) ;</div><div class=\"line\">  evilpassage-&gt;link( <span class=\"string\">'w'</span>, *graveyard ) ;</div><div class=\"line\">  evilpassage-&gt;link( <span class=\"string\">'s'</span>, *darklair ) ;</div><div class=\"line\">  darklair-&gt;link( <span class=\"string\">'n'</span>, *evilpassage ) ;</div><div class=\"line\">  darklair-&gt;link( <span class=\"string\">'s'</span>, *firepit ) ;</div><div class=\"line\">  firepit-&gt;link( <span class=\"string\">'n'</span>, *darklair ) ;</div><div class=\"line\">  firepit-&gt;link( <span class=\"string\">'e'</span>, *greenpasture ) ;</div><div class=\"line\">  greenpasture-&gt;link( <span class=\"string\">'w'</span>, *firepit ) ;</div><div class=\"line\">  greenpasture-&gt;link( <span class=\"string\">'s'</span>, *icecave ) ;</div><div class=\"line\">  greenpasture-&gt;link( <span class=\"string\">'e'</span>, *livingroom ) ;</div><div class=\"line\">  icecave-&gt;link( <span class=\"string\">'n'</span>, *greenpasture ) ;</div><div class=\"line\">  livingroom-&gt;link( <span class=\"string\">'w'</span>, *greenpasture ) ;</div><div class=\"line\">  livingroom-&gt;link( <span class=\"string\">'e'</span>, *cellar ) ;</div><div class=\"line\">  cellar-&gt;link( <span class=\"string\">'w'</span>, *livingroom ) ;</div><div class=\"line\">  cellar-&gt;link( <span class=\"string\">'n'</span>, *lifespring ) ;</div><div class=\"line\">  cellar-&gt;link( <span class=\"string\">'e'</span>, *hellsgate ) ;</div><div class=\"line\">  lifespring-&gt;link( <span class=\"string\">'s'</span>, *cellar ) ;</div><div class=\"line\">  lifespring-&gt;link( <span class=\"string\">'n'</span>, *waterfall ) ;</div><div class=\"line\">  waterfall-&gt;link( <span class=\"string\">'s'</span>, *lifespring ) ;</div><div class=\"line\">  hellsgate-&gt;link( <span class=\"string\">'w'</span>, *cellar ) ;</div><div class=\"line\">  hellsgate-&gt;link( <span class=\"string\">'e'</span>, *dragoncave ) ;</div><div class=\"line\">  dragoncave-&gt;link( <span class=\"string\">'w'</span>, *hellsgate ) ;</div><div class=\"line\">  dragoncave-&gt;link( <span class=\"string\">'e'</span>, *dragonsden ) ;</div><div class=\"line\">  dragonsden-&gt;link( <span class=\"string\">'w'</span>, *dragoncave ) ;</div><div class=\"line\">  dragonsden-&gt;link( <span class=\"string\">'e'</span>, *lostforest ) ;</div><div class=\"line\">  lostforest-&gt;link( <span class=\"string\">'w'</span>, *dragonsden ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Add monsters to rooms</span></div><div class=\"line\">  mainHall-&gt;addMonster( goblin ) ;</div><div class=\"line\">  mainHall-&gt;addMonster( imp ) ;</div><div class=\"line\">  river-&gt;addMonster( bear ) ;</div><div class=\"line\">  river-&gt;addMonster( redgoblin ) ;</div><div class=\"line\">  bluecave-&gt;addMonster( demon ) ;</div><div class=\"line\">  bluecave-&gt;addMonster( zergling ) ;</div><div class=\"line\">  morbidfield-&gt;addMonster( bats ) ;</div><div class=\"line\">  morbidfield-&gt;addMonster( morebats ) ;</div><div class=\"line\">  graveyard-&gt;addMonster( golem ) ;</div><div class=\"line\">  evilpassage-&gt;addMonster( goatdemon ) ;</div><div class=\"line\">  firepit-&gt;addMonster( cyclops ) ;</div><div class=\"line\">  greenpasture-&gt;addMonster( behemoth ) ;</div><div class=\"line\">  livingroom-&gt;addMonster( alien ) ;</div><div class=\"line\">  cellar-&gt;addMonster( giantrat ) ;</div><div class=\"line\">  hellsgate-&gt;addMonster( fallenangel ) ;</div><div class=\"line\">  dragoncave-&gt;addMonster( greatdragon ) ;</div><div class=\"line\">  dragonsden-&gt;addMonster( invincibledragon ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Add the rooms to the dungeon</span></div><div class=\"line\">  caves.addRoom( mainHall ) ;</div><div class=\"line\">  caves.addRoom( river ) ;</div><div class=\"line\">  caves.addRoom( greencave ) ;</div><div class=\"line\">  caves.addRoom( bluecave ) ;</div><div class=\"line\">  caves.addRoom( darkpit ) ;</div><div class=\"line\">  caves.addRoom( morbidfield ) ;</div><div class=\"line\">  caves.addRoom( graveyard ) ;</div><div class=\"line\">  caves.addRoom( crypt ) ;</div><div class=\"line\">  caves.addRoom( evilpassage ) ;</div><div class=\"line\">  caves.addRoom( darklair ) ;</div><div class=\"line\">  caves.addRoom( firepit ) ;</div><div class=\"line\">  caves.addRoom( greenpasture ) ;</div><div class=\"line\">  caves.addRoom( icecave ) ;</div><div class=\"line\">  caves.addRoom( livingroom ) ;</div><div class=\"line\">  caves.addRoom( cellar ) ;</div><div class=\"line\">  caves.addRoom( lifespring ) ;</div><div class=\"line\">  caves.addRoom( waterfall ) ;</div><div class=\"line\">  caves.addRoom( hellsgate ) ;</div><div class=\"line\">  caves.addRoom( dragoncave ) ;</div><div class=\"line\">  caves.addRoom( dragonsden ) ;</div><div class=\"line\">  caves.addRoom( lostforest ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Create a filter  Filter filter ;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Create a dispatch object with a command char and a value string</span></div><div class=\"line\">  Dispatch dispatch ;</div><div class=\"line\">  <span class=\"keyword\">char</span> command ;</div><div class=\"line\">  <span class=\"built_in\">string</span> value ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Simulate a new game</span></div><div class=\"line\">  <span class=\"comment\">//Create a new player and add to the dungeon</span></div><div class=\"line\">  <span class=\"built_in\">string</span> input ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Welcome to the game\\nEnter in a new name: \"</span> ;</div><div class=\"line\">  getline(<span class=\"built_in\">cin</span>, input, <span class=\"string\">'\\n'</span>);</div><div class=\"line\"></div><div class=\"line\">  Player* one = <span class=\"keyword\">new</span> Player( input, mainHall ) ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; caves.addPlayer( one ) &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Display needed info for the players</span></div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The objective is to clear the dungeon of all monsters. Good Luck\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Enter in a new command to start, to display help type the following command\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"help:\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"To quit simply enter \\\"quit\\\" without the quotes as a new command\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"New Command\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  getline(<span class=\"built_in\">cin</span>, input, <span class=\"string\">'\\n'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Start the game loop</span></div><div class=\"line\">  <span class=\"keyword\">while</span>( input != <span class=\"string\">\"quit\"</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//Pass the users message through the filter</span></div><div class=\"line\">    <span class=\"keyword\">if</span>( filter.validateMessage( input ) )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//Split the users message into a command and value pair</span></div><div class=\"line\">      command = dispatch.extractCommand( input ) ;</div><div class=\"line\">      value = dispatch.extractValue( input ) ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Match the command and forward the value</span></div><div class=\"line\">      <span class=\"keyword\">switch</span>( command )</div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>: <span class=\"comment\">//Attack</span></div><div class=\"line\">          <span class=\"comment\">//If the monster does not exist or the name was mispelled</span></div><div class=\"line\">          <span class=\"keyword\">if</span>( &amp;(one-&gt;mLocation-&gt;getMonsterRef( value )) == <span class=\"literal\">NULL</span> )</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"There is no \"</span> + value + <span class=\"string\">\" at this location\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">            <span class=\"keyword\">break</span> ;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">//If the monster is there but in combat the player cannot fight it</span></div><div class=\"line\">          <span class=\"keyword\">if</span>( one-&gt;mLocation-&gt;getMonsterRef( value ).inCombat == <span class=\"literal\">true</span> )</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The \"</span> + value + <span class=\"string\">\" is currently fighting\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">            <span class=\"keyword\">break</span> ;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          caves.combatLoop( *one, one-&gt;mLocation-&gt;getMonsterRef( value ) ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span>: <span class=\"comment\">//Move</span></div><div class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt; one-&gt;move( value[ <span class=\"number\">0</span> ] ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'f'</span>: <span class=\"comment\">//Find</span></div><div class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt; one-&gt;search() ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'l'</span>: <span class=\"comment\">//Location</span></div><div class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt; one-&gt;getLocation() ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>: <span class=\"comment\">//Equip</span></div><div class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt; one-&gt;equip( value ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span>: <span class=\"comment\">//You</span></div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"built_in\">string</span>* playerStats = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span> ;</div><div class=\"line\">            playerStats = caves.playerStatus( *one ) ;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">7</span> ; ++i )</div><div class=\"line\">            &#123;</div><div class=\"line\">              <span class=\"built_in\">cout</span> &lt;&lt; playerStats[i] &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">            &#125;<span class=\"built_in\">endl</span></div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">//case 't': //Talk</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span>: <span class=\"comment\">//Help Menu</span></div><div class=\"line\">          caves.displayHelp();</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Invalid command please refer to the help menu.\\nhelp:\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Or type \\\"quit\\\" to quit the game\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( caves.isComplete() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Dungeon Cleared, YOU WIN!\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( one-&gt;death() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; one-&gt;getName() + <span class=\"string\">\" was slain by the \"</span> + one-&gt;mLocation-&gt;getMonsterRef( value ).getName() &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      one-&gt;mLocation-&gt;getMonsterRef( value ).inCombat = <span class=\"literal\">false</span> ;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"*Hint* Secret rooms hidden abound; find them and victory shall be yours\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      input = <span class=\"string\">\"quit\"</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//Get the next command</span></div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\\nNew Command\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      getline(<span class=\"built_in\">cin</span>, input, <span class=\"string\">'\\n'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  caves.removePlayer( one-&gt;getName() ) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>For reference here are all the files for the project below.If none of the dropbox links are working then mention it in the comments section and I’ll re-upload the files. </p>\n<p><br><a href=\"http://dl.dropbox.com/u/22280460/database.cpp\" target=\"_blank\" rel=\"external\">http://dl.dropbox.com/u/22280460/database.cpp</a><br><br><br><a href=\"http://dl.dropbox.com/u/22280460/database.h\" target=\"_blank\" rel=\"external\">http://dl.dropbox.com/u/22280460/database.h</a><br><br><br><a href=\"http://dl.dropbox.com/u/22280460/main.cpp\" target=\"_blank\" rel=\"external\">http://dl.dropbox.com/u/22280460/main.cpp</a><br><br><br><a href=\"http://dl.dropbox.com/u/22280460/Test.cpp\" target=\"_blank\" rel=\"external\">http://dl.dropbox.com/u/22280460/Test.cpp</a><br><br><br><a href=\"http://dl.dropbox.com/u/22280460/Test.h\" target=\"_blank\" rel=\"external\">http://dl.dropbox.com/u/22280460/Test.h</a><br></p>\n\n<p><a href=\"/2011/06/16/textbasedrpgpart6\">Click here for part VI</a></p>\n","site":{"data":{}},"excerpt":"<p>The fifth part of the tutorial on creating a text based multiplayer RPG game will see us creating the last part of the testing and game mechanics before the next section where we’ll launch the client and server code to actually test our game in action.</p>","more":"<ul>\n<li><a href=\"/2011/06/11/textbasedrpgpart4\">Click here for part IV</a></li>\n<li><a href=\"/2011/06/16/textbasedrpgpart6\">Click here for part VI</a></li>\n</ul>\n<p>In this part of the tutorial we will complete the test and methods necessary to get the full functionality for the stand alone single player version. In the next part of the tutorial part 6, we will begin to develop both the client and server code that allows other users to connect and play our game over a local area network. So lets continue with the testing and move onto the player class. Go ahead and open up the “test.h” file and add line below.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_player_class</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure>\n<p>Then open up the file “test.cpp” and add the methods for the player test class beginning at the line indicated.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div></pre></td><td class=\"code\"><pre><div class=\"line\">void Test::test_player_class(void)</div><div class=\"line\">&#123;</div><div class=\"line\">  // Player constructor w/o initial room</div><div class=\"line\">  Player no_room_player(\"hero\");</div><div class=\"line\"></div><div class=\"line\">  assert(10 == no_room_player.mMaxHp);</div><div class=\"line\">  assert(10 == no_room_player.mHp);</div><div class=\"line\">  assert(1 == no_room_player.mStrength);</div><div class=\"line\">  assert(0 == no_room_player.mDefence);</div><div class=\"line\">  assert(NULL == no_room_player.mLocation);</div><div class=\"line\">  assert(\"hero\" == no_room_player.mName);</div><div class=\"line\">  assert(NULL == no_room_player.mWeapon);</div><div class=\"line\">  assert(NULL == no_room_player.mArmor);</div><div class=\"line\"></div><div class=\"line\">  // Player constructor w/room</div><div class=\"line\">  Player room_player(\"dude\", new Room(\"Home\", \"A big house\"));</div><div class=\"line\"></div><div class=\"line\">  assert(NULL != room_player.mLocation);</div><div class=\"line\"></div><div class=\"line\">  // Player getters/setters</div><div class=\"line\">  Player get_set(\"setter\", new Room(\"Lake\", \"A clean lake\"));</div><div class=\"line\"></div><div class=\"line\">  get_set.setDefence(1);</div><div class=\"line\">  get_set.setHp(10);</div><div class=\"line\">  get_set.setName(\"getter\");</div><div class=\"line\">  get_set.setStrength(2);</div><div class=\"line\"></div><div class=\"line\">  assert(1 == get_set.getDefence());</div><div class=\"line\">  assert(10 == get_set.getHp());</div><div class=\"line\">  assert(\"getter\" == get_set.getName());</div><div class=\"line\">  assert(2 == get_set.getStrength());</div><div class=\"line\">  assert(\"Lake\" == get_set.getLocation());</div><div class=\"line\"></div><div class=\"line\">  // Player equip test</div><div class=\"line\">  // The Item is not found</div><div class=\"line\">  // - There is no item within the room \"There is no item to equip in this rooom\"</div><div class=\"line\">  // - The player misspelled the item name \"To equip an item you must type its full name correctly\"</div><div class=\"line\">  Room no_item_room(\"Itemless\", \"There is no item here\");</div><div class=\"line\">  Player no_item_player(\"Hi\");</div><div class=\"line\">  no_item_player.mLocation = &amp;no_item_room;</div><div class=\"line\">  string response(\"There is no item to equip in this room\");</div><div class=\"line\"></div><div class=\"line\">  assert(response == no_item_player.equip(\"Bad Item name\"));</div><div class=\"line\"></div><div class=\"line\">  Room with_item(\"Item room\", \"Item filled room\", new Item(\"dagger\", Item::WEAPON, 10, 0, 0));</div><div class=\"line\">  no_item_player.mLocation = &amp;with_item;</div><div class=\"line\">  response = \"To equip an item you must type its full name correctly\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == no_item_player.equip(\"daggers\"));</div><div class=\"line\"></div><div class=\"line\">  // Weapon is found</div><div class=\"line\">  // - The weapon becomes unavailable</div><div class=\"line\">  // - The players strength is set equal to the weapons power value</div><div class=\"line\">  // - The response returned is \"You equipped the Item.mName\"      Player item_player(\"Bye\", &amp;with_item);</div><div class=\"line\">  response = \"You equipped the dagger\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == item_player.equip(\"dagger\"));</div><div class=\"line\">  assert(false == with_item.mItem-&gt;mAvailiable);</div><div class=\"line\">  assert(with_item.mItem-&gt;getPower() == item_player.getStrength());</div><div class=\"line\"></div><div class=\"line\">  // Armor is found</div><div class=\"line\">  // - The armor becomes unavailable</div><div class=\"line\">  // - The players vitality is set equal to the armor's defence  // - The response returned is \"You equipped the Item.mName\"</div><div class=\"line\">  // - The armor's health value is added to the players max hp</div><div class=\"line\">  Item* steel_plate = new Item(\"steelplate\", Item::ARMOR, 0, 10, 20);</div><div class=\"line\">  with_item.setItem(steel_plate);</div><div class=\"line\">  response = \"You equipped the steelplate\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == item_player.equip(\"steelplate\"));</div><div class=\"line\">  assert(with_item.mItem-&gt;mAvailiable == false);</div><div class=\"line\">  assert(steel_plate-&gt;getHealth() + item_player.getHp()</div><div class=\"line\">      == item_player.mMaxHp);</div><div class=\"line\">  assert(with_item.mItem-&gt;getVitality() == item_player.getDefence());</div><div class=\"line\"></div><div class=\"line\">  // Health is found</div><div class=\"line\">  // - The health item becomes unavailable</div><div class=\"line\">  // - The player's hp is fully restored</div><div class=\"line\">  // - The response is \"You were healed\"</div><div class=\"line\">  Item* herb = new Item(\"herbs\", Item::HEALTH, 0, 0, 0);</div><div class=\"line\">  with_item.setItem(herb);</div><div class=\"line\">  response = \"You were healed\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == item_player.equip(\"herbs\"));</div><div class=\"line\">  assert(with_item.mItem-&gt;mAvailiable == false);</div><div class=\"line\">  assert(item_player.getHp() == item_player.mMaxHp);</div><div class=\"line\"></div><div class=\"line\">  // Player attack test</div><div class=\"line\">  // a- There are no monsters within the Room then the method should  //methodreturn \"There are no monsters in this room to fight\"</div><div class=\"line\">  // b- The player mis-typed the monster name then</div><div class=\"line\">  //name\"The Monster.mName is not here\"</div><div class=\"line\">  // c- If damage was dealt to the monster then the message should say</div><div class=\"line\">  //should\"Monster.mName was dealt X damage\"  // d- If no damage was dealt to the monster then the message should say</div><div class=\"line\">  //should\"Monster.mName dodged the attack\"</div><div class=\"line\">  string response_a(\"There are no monsters in this room to fight\");</div><div class=\"line\">  string response_b(\"The roll is not here\");</div><div class=\"line\">  string response_c(\"troll was dealt 30 damage\");</div><div class=\"line\">  string response_d(\"supertroll dodged the attack\");</div><div class=\"line\"></div><div class=\"line\">  Item* great_sword = new Item(\"greatsword\", Item::WEAPON, 30, 0, 0);</div><div class=\"line\">  Room* arena = new Room(\"arena\", \"A large crowd gathers\", great_sword);</div><div class=\"line\">  Monster* troll = new Monster(\"troll\", 50, 0, 0);</div><div class=\"line\"></div><div class=\"line\">  arena-&gt;setItem(great_sword);</div><div class=\"line\">  Player* attacker = new Player(\"Fighter\", arena);</div><div class=\"line\">  attacker-&gt;equip(\"greatsword\");</div><div class=\"line\"></div><div class=\"line\">  assert(response_a == attacker-&gt;attack(\"troll\"));</div><div class=\"line\"></div><div class=\"line\">  arena-&gt;addMonster(troll);</div><div class=\"line\"></div><div class=\"line\">  assert(response_b == attacker-&gt;attack(\"roll\"));</div><div class=\"line\">  assert(response_c == attacker-&gt;attack(\"troll\"));</div><div class=\"line\"></div><div class=\"line\">  Monster* super_troll = new Monster(\"supertroll\", 8, 0, 999);</div><div class=\"line\">  arena-&gt;addMonster(super_troll);</div><div class=\"line\">  assert(response_d == attacker-&gt;attack(\"supertroll\"));</div><div class=\"line\"></div><div class=\"line\">  // Player move test</div><div class=\"line\">  // - If the player moves in an invalid direction then  //direction\"You traveled nowhere\" should be returned</div><div class=\"line\">  // - If the direction is valid but no room is connected</div><div class=\"line\">  //is\"There is nothing in that direction\"</div><div class=\"line\">  // - If the direction is valid and a room exist</div><div class=\"line\">  //room\"You traveled directionname\\nmLocation-&gt;getDescription()\"</div><div class=\"line\">  Room* moving_room = new Room(\"Moving room\", \"You can move from here\");</div><div class=\"line\">  Room* moving_north = new Room(\"Moving north\",  \"North of the moving room\");</div><div class=\"line\">  Room* moving_south = new Room(\"Moving south\",  \"South of the moving room\");</div><div class=\"line\">  Room* moving_west = new Room(\"Moving west\",</div><div class=\"line\">      \"West of the moving room\");</div><div class=\"line\">  Room* moving_east = new Room(\"Moving east\",</div><div class=\"line\">      \"East of the moving room\");</div><div class=\"line\"></div><div class=\"line\">  Player* moving_player = new Player(\"Jill\", moving_room);</div><div class=\"line\">  response = \"You traveled nowhere\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == moving_player-&gt;move('p'));</div><div class=\"line\"></div><div class=\"line\">  response = \"There is nothing in that direction\";</div><div class=\"line\"></div><div class=\"line\">  assert(response == moving_player-&gt;move('n'));</div><div class=\"line\">  assert(response == moving_player-&gt;move('e'));</div><div class=\"line\">  assert(response == moving_player-&gt;move('w'));</div><div class=\"line\">  assert(response == moving_player-&gt;move('s'));</div><div class=\"line\"></div><div class=\"line\">  moving_player-&gt;mLocation = moving_room;</div><div class=\"line\">  response = \"You traveled North\\n\" + moving_north-&gt;getDescription();</div><div class=\"line\">  moving_room-&gt;link('n', *moving_north);</div><div class=\"line\">  assert(response == moving_player-&gt;move('n'));</div><div class=\"line\"></div><div class=\"line\">  moving_player-&gt;mLocation = moving_room;</div><div class=\"line\">  response = \"You traveled South\\n\" + moving_south-&gt;getDescription();</div><div class=\"line\">  moving_room-&gt;link('s', *moving_south);</div><div class=\"line\">  assert(response == moving_player-&gt;move('s'));</div><div class=\"line\"></div><div class=\"line\">  moving_player-&gt;mLocation = moving_room;</div><div class=\"line\">  response = \"You traveled West\\n\" + moving_west-&gt;getDescription();</div><div class=\"line\">  moving_room-&gt;link('w', *moving_west);</div><div class=\"line\">  assert(response == moving_player-&gt;move('w'));</div><div class=\"line\"></div><div class=\"line\">  moving_player-&gt;mLocation = moving_room;</div><div class=\"line\">  response = \"You traveled East\\n\" + moving_east-&gt;getDescription();</div><div class=\"line\">  moving_room-&gt;link('e', *moving_east);</div><div class=\"line\">  assert(response == moving_player-&gt;move('e'));</div><div class=\"line\"></div><div class=\"line\">  // Player search test</div><div class=\"line\">  // Exact same as the string Room::searchResponse( void )  // method so it has already been tested</div><div class=\"line\"></div><div class=\"line\">  // Player death test</div><div class=\"line\">  // -Returns true when the player's hp is less than zero</div><div class=\"line\">  // -Returns false when the player's hp is greater than zero</div><div class=\"line\">  Player* death_test = new Player(\"Dead guy\");</div><div class=\"line\"></div><div class=\"line\">  assert(false == death_test-&gt;death());</div><div class=\"line\"></div><div class=\"line\">  death_test-&gt;setHp(-1);</div><div class=\"line\">  assert(true == death_test-&gt;death());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now that we have the methods for the player class all set the next thing we have to do is to write out the methods for the player class. To do so open up the file “database.cpp” and add the methods for the player class below.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div></pre></td><td class=\"code\"><pre><div class=\"line\">Player::Player( <span class=\"built_in\">string</span> name, Room* start )  : mName(name), mLocation(start), mWeapon(<span class=\"literal\">NULL</span>), mArmor(<span class=\"literal\">NULL</span>),</div><div class=\"line\">  mHp(<span class=\"number\">10</span>), mMaxHp(<span class=\"number\">10</span>), mStrength(<span class=\"number\">1</span>), mDefence(<span class=\"number\">0</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Player::setHp( <span class=\"keyword\">int</span> newHp )</div><div class=\"line\">&#123;</div><div class=\"line\">  mHp = newHp ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Player::getHp( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mHp ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Player::setStrength( <span class=\"keyword\">int</span> newStrength )</div><div class=\"line\">&#123;</div><div class=\"line\">  mStrength = newStrength ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Player::getStrength( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mStrength ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Player::setDefence( <span class=\"keyword\">int</span> newDefence )</div><div class=\"line\">&#123;</div><div class=\"line\">  mDefence = newDefence ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Player::getDefence( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mDefence ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::getLocation( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mLocation-&gt;mName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Player::setName( <span class=\"built_in\">string</span> newName )</div><div class=\"line\">&#123;</div><div class=\"line\">  mName = newName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::getName( <span class=\"keyword\">void</span> ) <span class=\"keyword\">const</span>  &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mName ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::attack( <span class=\"built_in\">string</span> monsterName )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">list</span>&lt; Monster* &gt;::iterator iter ;</div><div class=\"line\">  <span class=\"keyword\">int</span> damage = <span class=\"number\">0</span> ;</div><div class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">response</span><span class=\"params\">( <span class=\"string\">\"The \"</span> + monsterName + <span class=\"string\">\" is not here\"</span> )</span> </span>;  <span class=\"built_in\">stringstream</span> ss ;</div><div class=\"line\">  <span class=\"built_in\">string</span> strDamage ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( mLocation-&gt;mMonsters.empty() )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"There are no monsters in this room to fight\"</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( iter = mLocation-&gt;mMonsters.begin() ; iter != mLocation-&gt;mMonsters.end() ; ++iter )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( (*iter)-&gt;getName() == monsterName )</div><div class=\"line\">    &#123;</div><div class=\"line\">      damage = getStrength() - (*iter)-&gt;getDefence() ;</div><div class=\"line\">      ss &lt;&lt; damage ;</div><div class=\"line\">      ss &gt;&gt; strDamage ;</div><div class=\"line\">      ss.clear() ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( damage &gt; <span class=\"number\">0</span> )</div><div class=\"line\">      &#123;</div><div class=\"line\">        (*iter)-&gt;setHp( (*iter)-&gt;getHp() - damage ) ;</div><div class=\"line\">        response = (*iter)-&gt;getName() + <span class=\"string\">\" was dealt \"</span> + strDamage + <span class=\"string\">\" damage\"</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        response = (*iter)-&gt;getName() + <span class=\"string\">\" dodged the attack\"</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::equip( <span class=\"built_in\">string</span> itemName )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">string</span> response ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( mLocation-&gt;mItem != <span class=\"literal\">NULL</span> &amp;&amp; mLocation-&gt;mItem-&gt;getName() == itemName )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( Item::WEAPON == mLocation-&gt;mItem-&gt;getType() &amp;&amp; <span class=\"literal\">true</span> == mLocation-&gt;mItem-&gt;mAvailiable )</div><div class=\"line\">    &#123;</div><div class=\"line\">      mWeapon = mLocation-&gt;mItem ;</div><div class=\"line\">      mLocation-&gt;itemTaken() ;</div><div class=\"line\">      setStrength( mWeapon-&gt;getPower() ) ;</div><div class=\"line\">      response = <span class=\"string\">\"You equipped the \"</span> + mWeapon-&gt;getName() ;</div><div class=\"line\">      <span class=\"keyword\">return</span> response ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( Item::ARMOR == mLocation-&gt;mItem-&gt;getType() &amp;&amp; <span class=\"literal\">true</span> == mLocation-&gt;mItem-&gt;mAvailiable )</div><div class=\"line\">    &#123;</div><div class=\"line\">      mArmor = mLocation-&gt;mItem ;</div><div class=\"line\">      mLocation-&gt;itemTaken() ;</div><div class=\"line\">      setDefence( mArmor-&gt;getVitality() ) ;</div><div class=\"line\">      mMaxHp += mArmor-&gt;getHealth() ;</div><div class=\"line\">      response = <span class=\"string\">\"You equipped the \"</span> + mArmor-&gt;getName() ;</div><div class=\"line\">      <span class=\"keyword\">return</span> response ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      setHp( mMaxHp ) ;</div><div class=\"line\">      mLocation-&gt;itemTaken() ;</div><div class=\"line\">      response = <span class=\"string\">\"You were healed\"</span> ;</div><div class=\"line\">      <span class=\"keyword\">return</span> response ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( mLocation-&gt;mItem == <span class=\"literal\">NULL</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"There is no item to equip in this room\"</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    response = <span class=\"string\">\"To equip an item you must type its full name correctly\"</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> response ;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::move( <span class=\"keyword\">char</span> direction )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">string</span> response = <span class=\"string\">\"You traveled \"</span> ;</div><div class=\"line\">  <span class=\"keyword\">switch</span>( direction )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'n'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'N'</span>:</div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == mLocation-&gt;mNorth )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = <span class=\"string\">\"There is nothing in that direction\"</span> ;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mLocation = &amp;(mLocation-&gt;north()) ;</div><div class=\"line\">      response = response + <span class=\"string\">\"North\\n\"</span> + mLocation-&gt;getDescription() ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'S'</span>:</div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == mLocation-&gt;mSouth )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = <span class=\"string\">\"There is nothing in that direction\"</span> ;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mLocation = &amp;(mLocation-&gt;south()) ;</div><div class=\"line\">      response = response + <span class=\"string\">\"South\\n\"</span> + mLocation-&gt;getDescription() ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'E'</span>:</div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == mLocation-&gt;mEast )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = <span class=\"string\">\"There is nothing in that direction\"</span> ;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mLocation = &amp;(mLocation-&gt;east()) ;</div><div class=\"line\">      response = response + <span class=\"string\">\"East\\n\"</span> + mLocation-&gt;getDescription() ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'w'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'W'</span>:</div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == mLocation-&gt;mWest )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = <span class=\"string\">\"There is nothing in that direction\"</span> ;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mLocation = &amp;(mLocation-&gt;west()) ;</div><div class=\"line\">      response = response + <span class=\"string\">\"West\\n\"</span> + mLocation-&gt;getDescription() ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      response = response + <span class=\"string\">\"nowhere\"</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Player::search( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> mLocation-&gt;searchResponse() ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Player::dead Player::death( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>( getHp() &lt;= <span class=\"number\">0</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Afterwards you can begin to test the Dungeon class, so open up the file “test.h” file and add the following line.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_dungeon_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div></pre></td></tr></table></figure>\n<p>Here are the methods for the dungeon test, it is quite long so you can copy it if you want to but I suggest typing it out and reading through the comments in order to better understand the codebase; the file for the code below is “test.cpp”</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_dungeon_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Dungeon constructor test</span></div><div class=\"line\">  Dungeon* test_dungeon = <span class=\"keyword\">new</span> Dungeon(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"number\">1</span> == test_dungeon-&gt;mMaxPlayers);</div><div class=\"line\">  assert(<span class=\"number\">1</span> == test_dungeon-&gt;mMaxRooms);</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == test_dungeon-&gt;mPlayers.empty());</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == test_dungeon-&gt;mRooms.empty());</div><div class=\"line\">  <span class=\"comment\">// - A dungeon without monsters is considered complete</span></div><div class=\"line\">  assert(<span class=\"literal\">true</span> == test_dungeon-&gt;isComplete());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon addPlayer test</span></div><div class=\"line\">  <span class=\"comment\">// - Successful addition of a new player should display the following</span></div><div class=\"line\">  <span class=\"comment\">//the\"The player named newPlayer-&gt;getName() entered the Dungeon\"</span></div><div class=\"line\">  Player* newbie = <span class=\"keyword\">new</span> Player(<span class=\"string\">\"Noob\"</span>);</div><div class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">response</span><span class=\"params\">(<span class=\"string\">\"The player named Noob entered the Dungeon\"</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(response == test_dungeon-&gt;addPlayer(newbie));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == test_dungeon-&gt;mPlayers.empty());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon addRoom test</span></div><div class=\"line\">  <span class=\"comment\">// - \"The room: newRoom-&gt;mName was added\" will be displayed</span></div><div class=\"line\">  <span class=\"comment\">//beif the addition was successful</span></div><div class=\"line\">  Room* main_room = <span class=\"keyword\">new</span> Room(<span class=\"string\">\"Main hall\"</span>, <span class=\"string\">\"The main hall\"</span>);</div><div class=\"line\">  response = <span class=\"string\">\"The room: Main hall was added\"</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(response == test_dungeon-&gt;addRoom(main_room));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == test_dungeon-&gt;mRooms.empty());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon removePlayer test</span></div><div class=\"line\">  response = <span class=\"string\">\"Noob has left the dungeon\"</span>;</div><div class=\"line\">  assert(response == test_dungeon-&gt;removePlayer(newbie-&gt;getName()));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon generatePlayerStats test</span></div><div class=\"line\">  <span class=\"comment\">// -Sets the players max hp to 10, strength and defence to 2</span></div><div class=\"line\">  test_dungeon-&gt;generatePlayerStats(newbie);</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"number\">10</span> == newbie-&gt;getHp());</div><div class=\"line\">  assert(<span class=\"number\">2</span> == newbie-&gt;getStrength());</div><div class=\"line\">  assert(<span class=\"number\">2</span> == newbie-&gt;getDefence());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon combatLoop test</span></div><div class=\"line\">  <span class=\"comment\">// - If the hero is stronger than the monster then the monster  //theshould die else the hero should die</span></div><div class=\"line\">  Dungeon* combat_test = <span class=\"keyword\">new</span> Dungeon(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">  Room* combat_room = <span class=\"keyword\">new</span> Room(<span class=\"string\">\"Battle\"</span>, <span class=\"string\">\"Fight here\"</span>);</div><div class=\"line\">  Item* longsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"longsword\"</span>, Item::WEAPON, <span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  Player* brawler = <span class=\"keyword\">new</span> Player(<span class=\"string\">\"brawler\"</span>, combat_room);</div><div class=\"line\">  Monster* ogre = <span class=\"keyword\">new</span> Monster(<span class=\"string\">\"ogre\"</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);  Monster* superogre = <span class=\"keyword\">new</span> Monster(<span class=\"string\">\"superogre\"</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);  combat_room-&gt;setItem(longsword);</div><div class=\"line\">  combat_room-&gt;addMonster(ogre);</div><div class=\"line\">  combat_room-&gt;addMonster(superogre);</div><div class=\"line\">  combat_test-&gt;addRoom(combat_room);</div><div class=\"line\">  combat_test-&gt;addPlayer(brawler);</div><div class=\"line\">  combat_test-&gt;generatePlayerStats(brawler);</div><div class=\"line\">  brawler-&gt;mLocation = combat_room;</div><div class=\"line\">  brawler-&gt;equip(<span class=\"string\">\"longsword\"</span>);</div><div class=\"line\"></div><div class=\"line\">  combat_test-&gt;combatLoop(*brawler, *ogre);</div><div class=\"line\">  assert(combat_room-&gt;mMonsters.empty() == <span class=\"literal\">false</span>);</div><div class=\"line\">  assert(combat_test-&gt;isComplete() == <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\">  Item* badsword = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"badsword\"</span>, Item::WEAPON, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  combat_room-&gt;setItem(badsword);</div><div class=\"line\">  brawler-&gt;equip(<span class=\"string\">\"badsword\"</span>);</div><div class=\"line\"></div><div class=\"line\">  combat_test-&gt;combatLoop(*brawler, *superogre);</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == brawler-&gt;death());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dungeon playerStatus test</span></div><div class=\"line\">  Dungeon* status_test = <span class=\"keyword\">new</span> Dungeon(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\">  Room* start_room = <span class=\"keyword\">new</span> Room(<span class=\"string\">\"Starting room\"</span>, <span class=\"string\">\"Start here\"</span>);</div><div class=\"line\">  Room* end_room = <span class=\"keyword\">new</span> Room(<span class=\"string\">\"Ending room\"</span>, <span class=\"string\">\"End here\"</span>);</div><div class=\"line\">  Player* stats_hero = <span class=\"keyword\">new</span> Player(<span class=\"string\">\"Mike\"</span>, start_room);</div><div class=\"line\">  Item* weapon_x = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"weaponx\"</span>, Item::WEAPON, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  Item* armor_x = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"armorx\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\">  start_room-&gt;link(<span class=\"string\">'e'</span>, *end_room);</div><div class=\"line\">  end_room-&gt;link(<span class=\"string\">'w'</span>, *start_room);</div><div class=\"line\">  start_room-&gt;setItem(weapon_x);</div><div class=\"line\">  end_room-&gt;setItem(armor_x);</div><div class=\"line\">  status_test-&gt;addRoom(start_room);</div><div class=\"line\">  status_test-&gt;addRoom(end_room);</div><div class=\"line\">  status_test-&gt;addPlayer(stats_hero);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// The stats reported are the following</span></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">     1. Hp</div><div class=\"line\">     2. Strength</div><div class=\"line\">     3. Defence</div><div class=\"line\">     4. Location</div><div class=\"line\">     5. Name</div><div class=\"line\">     6. Weapon</div><div class=\"line\">     7. Armor</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> stat_total = <span class=\"number\">7</span>;</div><div class=\"line\">  <span class=\"built_in\">string</span>* status_before_weapon = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[stat_total];</div><div class=\"line\">  <span class=\"built_in\">string</span>* status_with_weapon = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[stat_total];</div><div class=\"line\">  <span class=\"built_in\">string</span>* status_with_armor = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[stat_total];</div><div class=\"line\"></div><div class=\"line\">  status_before_weapon[<span class=\"number\">0</span>] = <span class=\"string\">\"Current HP: 10 out of 10\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">1</span>] = <span class=\"string\">\"Current Strength: 2\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">2</span>] = <span class=\"string\">\"Current Defence: 2\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">3</span>] = <span class=\"string\">\"Current Location: Starting room\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">4</span>] = <span class=\"string\">\"Current Name: Mike\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">5</span>] = <span class=\"string\">\"Current Weapon: none equipped\"</span>;</div><div class=\"line\">  status_before_weapon[<span class=\"number\">6</span>] = <span class=\"string\">\"Current Armor: none equipped\"</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(status_before_weapon = status_test-&gt;playerStatus(*stats_hero));</div><div class=\"line\"></div><div class=\"line\">  stats_hero-&gt;equip(<span class=\"string\">\"weaponx\"</span>);</div><div class=\"line\"></div><div class=\"line\">  status_with_weapon[<span class=\"number\">0</span>] = <span class=\"string\">\"Current HP: 10 out of 10\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">1</span>] = <span class=\"string\">\"Current Strength: 20\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">2</span>] = <span class=\"string\">\"Current Defence: 2\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">3</span>] = <span class=\"string\">\"Current Location: Starting room\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">4</span>] = <span class=\"string\">\"Current Name: Mike\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">5</span>] = <span class=\"string\">\"Current Weapon: weaponx\"</span>;</div><div class=\"line\">  status_with_weapon[<span class=\"number\">6</span>] = <span class=\"string\">\"Current Armor: none equipped\"</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(status_with_weapon = status_test-&gt;playerStatus(*stats_hero));</div><div class=\"line\"></div><div class=\"line\">  stats_hero-&gt;move(<span class=\"string\">'e'</span>);</div><div class=\"line\">  stats_hero-&gt;equip(<span class=\"string\">\"armorx\"</span>);</div><div class=\"line\"></div><div class=\"line\">  status_with_armor[<span class=\"number\">0</span>] = <span class=\"string\">\"Current HP: 10 out of 20\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">1</span>] = <span class=\"string\">\"Current Strength: 20\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">2</span>] = <span class=\"string\">\"Current Defence: 20\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">3</span>] = <span class=\"string\">\"Current Location: Ending room\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">4</span>] = <span class=\"string\">\"Current Name: Mike\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">5</span>] = <span class=\"string\">\"Current Weapon: weaponx\"</span>;</div><div class=\"line\">  status_with_armor[<span class=\"number\">6</span>] = <span class=\"string\">\"Current Armor: armorx\"</span>;</div><div class=\"line\"></div><div class=\"line\">  assert(status_with_armor = status_test-&gt;playerStatus(*stats_hero));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now we can write out the methods for the dungeon class itself. Go open up the file “database.cpp” and add the lines below to the file, remember to start at the line of code indicated in the margins.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dungeon::Dungeon( <span class=\"keyword\">int</span> maxPlayers, <span class=\"keyword\">int</span> maxRooms )  : mMaxPlayers(maxPlayers), mMaxRooms(maxRooms)</div><div class=\"line\">&#123;</div><div class=\"line\">  mRooms.reserve( maxRooms ) ;</div><div class=\"line\">  mPlayers.reserve( maxPlayers ) ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> Dungeon::isComplete( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">bool</span> flag = <span class=\"literal\">true</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; mRooms.size() ; ++i )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( mRooms[i]-&gt;mMonsters.empty() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">continue</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      flag = <span class=\"literal\">false</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> flag ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Dungeon::addPlayer( Player *newPlayer )</div><div class=\"line\">&#123;</div><div class=\"line\">  mPlayers.push_back( newPlayer ) ;</div><div class=\"line\">  <span class=\"built_in\">string</span> response = <span class=\"string\">\"The player named \"</span> + newPlayer-&gt;getName() + <span class=\"string\">\" entered the Dungeon\"</span> ;</div><div class=\"line\"></div><div class=\"line\">  generatePlayerStats( newPlayer ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Dungeon::generatePlayerStats( Player* newPlayer )</div><div class=\"line\">&#123;</div><div class=\"line\">  newPlayer-&gt;mMaxHp = <span class=\"number\">10</span> ;</div><div class=\"line\">  newPlayer-&gt;setHp( newPlayer-&gt;mMaxHp ) ;</div><div class=\"line\">  newPlayer-&gt;setStrength( <span class=\"number\">2</span> ) ;</div><div class=\"line\">  newPlayer-&gt;setDefence( <span class=\"number\">2</span> ) ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Dungeon::addRoom( Room *newRoom )</div><div class=\"line\">&#123;</div><div class=\"line\">  mRooms.push_back( newRoom ) ;</div><div class=\"line\">  <span class=\"built_in\">string</span> response = <span class=\"string\">\"The room: \"</span> + newRoom-&gt;mName + <span class=\"string\">\" was added\"</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Dungeon::removePlayer( <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> playerName )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">string</span> response = playerName + <span class=\"string\">\" has left the dungeon\"</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; mPlayers.size() ; ++i )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( playerName == mPlayers[i]-&gt;getName() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      mPlayers.erase( mPlayers.begin() + i ) ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Should change this to have the monstersName as an argument</span></div><div class=\"line\"><span class=\"keyword\">void</span> Dungeon::combatLoop( Player&amp; hero, Monster&amp; villain )</div><div class=\"line\">&#123;</div><div class=\"line\">  villain.inCombat = <span class=\"literal\">true</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span>( <span class=\"literal\">true</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; hero.attack( villain.getName() ) &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">    <span class=\"keyword\">if</span>( villain.getHp() &lt;= <span class=\"number\">0</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; villain.getName() + <span class=\"string\">\" was slain by the valiant \"</span> &lt;&lt; hero.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">      hero.mLocation-&gt;killMonster( villain.getName() ) ;</div><div class=\"line\">      <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> damage = <span class=\"number\">0</span> ;</div><div class=\"line\">      damage = villain.getStrength() - hero.getDefence() ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( damage &gt; <span class=\"number\">0</span> )</div><div class=\"line\">      &#123;</div><div class=\"line\">        hero.setHp( hero.getHp() - damage ) ;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; hero.getName() + <span class=\"string\">\" was dealt \"</span> &lt;&lt; damage &lt;&lt; <span class=\"string\">\" damage\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; hero.getName() + <span class=\"string\">\" dodged the attack\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( hero.death() )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; hero.getName() + <span class=\"string\">\" was slain by the horrible \"</span> + villain.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span>* Dungeon::playerStatus( Player&amp; player )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">stringstream</span> ss ;</div><div class=\"line\">  <span class=\"built_in\">string</span> temp ;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> statusCount = <span class=\"number\">7</span> ;</div><div class=\"line\">  <span class=\"built_in\">string</span>* response = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[statusCount] ;</div><div class=\"line\"></div><div class=\"line\">  ss &lt;&lt; player.getHp() ;</div><div class=\"line\">  ss &gt;&gt; temp ;</div><div class=\"line\">  response[<span class=\"number\">0</span>] = <span class=\"string\">\"Current HP: \"</span> + temp ;</div><div class=\"line\">  ss.clear() ;</div><div class=\"line\">  temp.clear() ;</div><div class=\"line\">  ss &lt;&lt; player.mMaxHp ;</div><div class=\"line\">  ss &gt;&gt; temp ;</div><div class=\"line\">  response[<span class=\"number\">0</span>] = response[<span class=\"number\">0</span>] + <span class=\"string\">\" out of \"</span> + temp ;</div><div class=\"line\">  temp.clear() ;</div><div class=\"line\">  ss.clear() ;</div><div class=\"line\"></div><div class=\"line\">  ss &lt;&lt; player.getStrength() ;</div><div class=\"line\">  ss &gt;&gt; temp ;</div><div class=\"line\">  response[<span class=\"number\">1</span>] = <span class=\"string\">\"Current Strength: \"</span> + temp ;</div><div class=\"line\">  ss.clear() ;</div><div class=\"line\">  temp.clear() ;</div><div class=\"line\"></div><div class=\"line\">  ss &lt;&lt; player.getDefence() ;</div><div class=\"line\">  ss &gt;&gt; temp ;</div><div class=\"line\">  response[<span class=\"number\">2</span>] = <span class=\"string\">\"Current Defence: \"</span> + temp ;</div><div class=\"line\">  ss.clear() ;</div><div class=\"line\">  temp.clear() ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == player.mLocation )</div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">3</span>] = <span class=\"string\">\"Error: BAD LOCATION\"</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">3</span>] = <span class=\"string\">\"Current Location: \"</span> + player.getLocation() ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  response[<span class=\"number\">4</span>] = <span class=\"string\">\"Current Name: \"</span> + player.getName() ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == player.mWeapon )</div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">5</span>] = <span class=\"string\">\"Current Weapon: none equipped\"</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">5</span>] = <span class=\"string\">\"Current Weapon: \"</span> + player.mWeapon-&gt;getName() ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == player.mArmor )</div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">6</span>] = <span class=\"string\">\"Current Armor: none equipped\"</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    response[<span class=\"number\">6</span>] = <span class=\"string\">\"Current Armor: \"</span> + player.mArmor-&gt;getName() ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> response ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> Dungeon::displayHelp( <span class=\"keyword\">void</span> )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"////////////////\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Help menu\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"////////////////\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Attack a monster type -&gt; a:monster_name_here\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Move to a new location type -&gt; mv:location_name_here\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Look for items type -&gt; find:\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Search the room for exits and monsters type -&gt; loc:\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Equip new items type -&gt; eq:weapon_or_armor_name\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"See your current status type -&gt; you:\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next class we have to test is the filter class, if you recall from previous parts, the filter class’ job is to validate user input to check if it is safe to “dispatch” to the database. You can think of the filter as a sanitizer for bad commands just like you can image a filter swearing words on message boards. Now go open up “test.h” and add the following line.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_filter_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div></pre></td></tr></table></figure>\n<p>You know the drill, create the test methods within the file “test.cpp” for the filter class(don’t worry this class is short).</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_filter_class(<span class=\"keyword\">void</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Filter chat test</span></div><div class=\"line\">  <span class=\"comment\">// string Filter::chat() just truncates the command from the  //fromchat message if it was t:message  Filter filter;</span></div><div class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">input</span><span class=\"params\">(<span class=\"string\">\"t:Hello world\"</span>)</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">response</span><span class=\"params\">(<span class=\"string\">\"Hello world\"</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\">  assert(response == filter.chat(input));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Filter validateMessage test</span></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">     The valid commands are the following</div><div class=\"line\">    a:</div><div class=\"line\">    mv:</div><div class=\"line\">    find:</div><div class=\"line\">    loc:</div><div class=\"line\">    eq:</div><div class=\"line\">    you:</div><div class=\"line\">    help:</div><div class=\"line\">   */</span></div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"mv:n\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"a:goblin\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"find:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"loc:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"eq:weapon\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"you:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">true</span> == filter.validateMessage(<span class=\"string\">\"help:\"</span>));</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"move:north\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"move:south\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"move:east\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"move:west\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"attack:goblin\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"fid:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"location:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"eqip:weapon\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"me:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"zelpeafaf:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"gg:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"Pi:affg\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"Eqip:weapon\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"Ye:\"</span>));</div><div class=\"line\">  assert(<span class=\"literal\">false</span> == filter.validateMessage(<span class=\"string\">\"no command input\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>There are only two methods for the filter class, chat and validate message. As you can probably guess, chat just sends out the text following the chat command “t:”. However validate message a bit more involved. Validate message works by running three distinct test, the “keywordtest” the “commandtest” and the movecommandtest”. Keyword just makes sure that the user entered a keyword such as “a:” for attack, “you:” for player status or any of the others. The “commandtest” just checks after the keyword has been validated that the fullname of the command matches the possible command inputs. Lastly the “movecommandtest” ensures that the direction of travel for the move command is north, south, east or west. So go open up “database.cpp” and add the lines below paying attention to which line the code begins on as shown in the margin.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\">Filter::valid Filter::validateMessage( <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> message )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">//Necessary for the std::tolower() method</span></div><div class=\"line\">  locale loc ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; message.length() ; ++i )</div><div class=\"line\">  &#123;</div><div class=\"line\">    message [ i ] = <span class=\"built_in\">tolower</span>( message[ i ], loc ) ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">bool</span> keywordTest = <span class=\"literal\">false</span> ;  <span class=\"keyword\">bool</span> commandTest = <span class=\"literal\">false</span> ;  <span class=\"keyword\">bool</span> moveCommandTest = <span class=\"literal\">true</span> ; <span class=\"comment\">// Checks for a valid direction</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> inputIndex = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">switch</span>( message[ <span class=\"number\">0</span> ] )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>: <span class=\"comment\">//Attack  case 'm': //Move</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'f'</span>: <span class=\"comment\">//Find</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'l'</span>: <span class=\"comment\">//Location</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>: <span class=\"comment\">//Equip</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'y'</span>: <span class=\"comment\">//You</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'t'</span>: <span class=\"comment\">//Talk</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'h'</span>: <span class=\"comment\">//Help Menu</span></div><div class=\"line\">      keywordTest = <span class=\"literal\">true</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;<span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        keywordTest = <span class=\"literal\">false</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"literal\">false</span> == keywordTest )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">string</span> subMessage ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; message.size() ; ++i )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( message[ i ] == <span class=\"string\">':'</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      inputIndex = i;</div><div class=\"line\">      subMessage += message[ i ] ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      subMessage += message[ i ] ;</div><div class=\"line\">      <span class=\"keyword\">continue</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( subMessage == <span class=\"string\">\"a:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"mv:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"find:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"loc:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"eq:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"you:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"t:\"</span> ||</div><div class=\"line\">      subMessage == <span class=\"string\">\"help:\"</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    commandTest = <span class=\"literal\">true</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( subMessage == <span class=\"string\">\"mv:\"</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//Checks if a direction was entered by the player,</span></div><div class=\"line\">    <span class=\"comment\">// accomplishes this by seeing if the mv: command</span></div><div class=\"line\">    <span class=\"comment\">// is followed by at most a single character representing</span></div><div class=\"line\">    <span class=\"comment\">// the directions 'n' or 'e' or 'w' or 's'</span></div><div class=\"line\">    <span class=\"keyword\">if</span>( inputIndex + <span class=\"number\">1</span> == message.size() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      moveCommandTest = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>( inputIndex &lt; message.size() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"literal\">false</span> == moveCommandTest )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>(message[ inputIndex ] == <span class=\"string\">' '</span>)</div><div class=\"line\">      &#123;</div><div class=\"line\">        moveCommandTest = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      ++inputIndex ;</div><div class=\"line\">    &#125;inputIndex</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"literal\">true</span> == commandTest &amp;&amp; <span class=\"literal\">true</span> == keywordTest &amp;&amp; <span class=\"literal\">true</span> == moveCommandTest )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> ;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Filter::chat( <span class=\"built_in\">string</span> message )</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> message.substr( <span class=\"number\">2</span>, message.length() ) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The dispatch class is the last class we need for thesingle player version of the game. Being the dispatchits sole purpose is to separate the value and command fromthe filtered user input and “dispatch” it to the database.Now lets open up “test.h” and add the line below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_dispatch_class</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>Next we’ll write out the test for the dispatch class within “test.cpp”, so go open that file and insert the code below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Test::test_dispatch_class()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// Dispatch extractCommand test</span></div><div class=\"line\">  <span class=\"comment\">//a Attack  //m Move</span></div><div class=\"line\">  <span class=\"comment\">//f Find</span></div><div class=\"line\">  <span class=\"comment\">//l Location</span></div><div class=\"line\">  <span class=\"comment\">//e Equip</span></div><div class=\"line\">  <span class=\"comment\">//y You</span></div><div class=\"line\">  <span class=\"comment\">//t Talk</span></div><div class=\"line\">  <span class=\"comment\">//h Help Menu</span></div><div class=\"line\">  Dispatch dispatch;</div><div class=\"line\"></div><div class=\"line\">  assert(<span class=\"string\">'a'</span> == dispatch.extractCommand(<span class=\"string\">\"a:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'m'</span> == dispatch.extractCommand(<span class=\"string\">\"mv:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'f'</span> == dispatch.extractCommand(<span class=\"string\">\"find:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'l'</span> == dispatch.extractCommand(<span class=\"string\">\"loc:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'e'</span> == dispatch.extractCommand(<span class=\"string\">\"eq:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'y'</span> == dispatch.extractCommand(<span class=\"string\">\"you:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'t'</span> == dispatch.extractCommand(<span class=\"string\">\"t:\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">'h'</span> == dispatch.extractCommand(<span class=\"string\">\"help:\"</span>));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Dispatch extractValue test</span></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">     The only commands that take values.</div><div class=\"line\"></div><div class=\"line\">     attack  move  equip</div><div class=\"line\">     talk  */</span></div><div class=\"line\">  assert(<span class=\"string\">\"goblin\"</span> == dispatch.extractValue(<span class=\"string\">\"a:goblin\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">\"north\"</span> == dispatch.extractValue(<span class=\"string\">\"mv:north\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">\"armor\"</span> == dispatch.extractValue(<span class=\"string\">\"eq:armor\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">\"hello world\"</span> == dispatch.extractValue(<span class=\"string\">\"t:hello world\"</span>));</div><div class=\"line\">  assert(<span class=\"string\">\"  s p a c  e  s  \"</span> == dispatch.extractValue(</div><div class=\"line\">        <span class=\"string\">\"t:  s p a c  e  s  \"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now we can add the methods for the dispatch class to our “database.cpp”file. Open up the file “database.cpp” and add the lines below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span> Dispatch::extractCommand(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> fromFilter)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">//a Attack  //m Move</span></div><div class=\"line\">  <span class=\"comment\">//f Find</span></div><div class=\"line\">  <span class=\"comment\">//l Location</span></div><div class=\"line\">  <span class=\"comment\">//e Equip</span></div><div class=\"line\">  <span class=\"comment\">//y You</span></div><div class=\"line\">  <span class=\"comment\">//t Talk</span></div><div class=\"line\">  <span class=\"comment\">//h Help Menu</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> fromFilter[ <span class=\"number\">0</span> ] ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> Dispatch::extractValue(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> fromFilter)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">     The value of the string from the filter is all of the text</div><div class=\"line\">     that follows the command.</div><div class=\"line\"></div><div class=\"line\">     -Example-</div><div class=\"line\">a:goblin</div><div class=\"line\"></div><div class=\"line\">The command is a:</div><div class=\"line\">The value is goblin</div><div class=\"line\">   */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// For single character commands such as t:</span></div><div class=\"line\">  <span class=\"keyword\">if</span>( fromFilter[ <span class=\"number\">1</span> ] == <span class=\"string\">':'</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fromFilter.substr( <span class=\"number\">2</span>, fromFilter.length() ) ;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> fromFilter.substr( <span class=\"number\">3</span>, fromFilter.length() ) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The last thing we have to do before we can call our single player version of the game complete is to make sure all the test pass with flying colors. Beingthat we only implemented unit test, you will be notified when a test failsby the console giving you a “assertion failed at line:XYZ” where XYZ is the line number. So open up “main.cpp” and make sure it looks like the code below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Filename main.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Database.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"Test.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run_test</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Ignore the combat printouts from the\\n\"</span>;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"test_dungeon_class() method\\n\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">  Test::get_instance()-&gt;test_item_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_monster_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_room_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_player_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_dungeon_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_filter_class();</div><div class=\"line\">  Test::get_instance()-&gt;test_dispatch_class();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run_sample_game</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  run_test();</div><div class=\"line\">  <span class=\"comment\">//run_sample_game();</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run_sample_game</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//Construct Dungeon</span></div><div class=\"line\">  <span class=\"function\">Dungeon <span class=\"title\">caves</span><span class=\"params\">( <span class=\"number\">2</span>, <span class=\"number\">21</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Items power vitality health</span></div><div class=\"line\">  Item* herb_a = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_b = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_c = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_d = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_e = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_f = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* herb_g = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  Item* woodsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* steelblade = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"steelblade\"</span>, Item::WEAPON, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* crystalsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"crystalsword\"</span>, Item::WEAPON, <span class=\"number\">35</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* genjiblade = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"genjiblade\"</span>, Item::WEAPON, <span class=\"number\">60</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* angelicsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"angelicsword\"</span>, Item::WEAPON, <span class=\"number\">80</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Item* finalweapon = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"dragonslayer\"</span>, Item::WEAPON, <span class=\"number\">2000</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  Item* woodarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"woodarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span> ) ;</div><div class=\"line\">  Item* steelarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"steelarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">20</span> ) ;</div><div class=\"line\">  Item* diamondarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"diamondarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">30</span> ) ;</div><div class=\"line\">  Item* crystalarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"crystalarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">35</span> ) ;</div><div class=\"line\">  Item* dragonarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"dragonarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">100</span> ) ;</div><div class=\"line\">  Item* ultimatearmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"ultimatearmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Monsters hp str def</span></div><div class=\"line\">  Monster* bear = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"bear\"</span>, <span class=\"number\">15</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ) ;</div><div class=\"line\">  Monster* goblin = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"goblin\"</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">  Monster* imp = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"imp\"</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span> ) ;</div><div class=\"line\">  Monster* redgoblin = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"redgoblin\"</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span> ) ;</div><div class=\"line\">  Monster* demon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"demon\"</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span> ) ;</div><div class=\"line\">  Monster* zergling = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"zergling\"</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span> ) ;</div><div class=\"line\">  Monster* bats = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"bats\"</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">3</span> ) ;</div><div class=\"line\">  Monster* morebats = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"morebats\"</span>, <span class=\"number\">25</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span> ) ;</div><div class=\"line\">  Monster* golem = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"golem\"</span>, <span class=\"number\">50</span>, <span class=\"number\">21</span>, <span class=\"number\">9</span> ) ;</div><div class=\"line\">  Monster* goatdemon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"goatdemon\"</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span> ) ;</div><div class=\"line\">  Monster* cyclops = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"cyclops\"</span>, <span class=\"number\">150</span>, <span class=\"number\">90</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">  Monster* behemoth = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"behemoth\"</span>, <span class=\"number\">250</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span> ) ;</div><div class=\"line\">  Monster* alien = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"alien\"</span>, <span class=\"number\">50</span>, <span class=\"number\">21</span>, <span class=\"number\">4</span> ) ;</div><div class=\"line\">  Monster* giantrat = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"giantrat\"</span>, <span class=\"number\">55</span>, <span class=\"number\">40</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">  Monster* fallenangel = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"fallenangel\"</span>, <span class=\"number\">300</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span> ) ;</div><div class=\"line\">  Monster* greatdragon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"greatdragon\"</span>, <span class=\"number\">500</span>, <span class=\"number\">300</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">  Monster* invincibledragon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"invincibledragon\"</span>, <span class=\"number\">999</span>, <span class=\"number\">999</span>, <span class=\"number\">999</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Rooms name description item</span></div><div class=\"line\">  Room* mainHall = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The main cavern\"</span>, <span class=\"string\">\"A murkey swamp cavern\"</span>, woodsword ) ;</div><div class=\"line\">  Room* river = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The black river\"</span>, <span class=\"string\">\"A river with dark water\"</span>, woodarmor ) ;</div><div class=\"line\">  Room* greencave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The greencave\"</span>, <span class=\"string\">\"A moss covered cave\"</span>, herb_a ) ;</div><div class=\"line\">  Room* bluecave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The bluecave\"</span>, <span class=\"string\">\"A frosty cave\"</span>, steelblade ) ;</div><div class=\"line\">  Room* darkpit = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The darkpit\"</span>, <span class=\"string\">\"An endless hole lies before you\"</span>, steelarmor ) ;</div><div class=\"line\">  Room* morbidfield = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The morbidfield\"</span>, <span class=\"string\">\"Pitch black grass surrounds you\"</span>, herb_b ) ;</div><div class=\"line\">  Room* graveyard = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The graveyard\"</span>, <span class=\"string\">\"Tombstones abound\"</span>, diamondarmor ) ;</div><div class=\"line\">  Room* crypt = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The crypt\"</span>, <span class=\"string\">\"A nasty rotten crypt\"</span>, crystalsword ) ;</div><div class=\"line\">  Room* evilpassage = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The evil passage\"</span>, <span class=\"string\">\"An evil pasage\"</span>, crystalarmor ) ;</div><div class=\"line\">  Room* darklair = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dark lair\"</span>, <span class=\"string\">\"A dark lair\"</span>, herb_c ) ;</div><div class=\"line\">  Room* firepit = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The firey pits\"</span>, <span class=\"string\">\"Fire is every where\"</span>, herb_d ) ;</div><div class=\"line\">  Room* greenpasture = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The greenpastures\"</span>, <span class=\"string\">\"A meadow is before you\"</span>, genjiblade ) ;</div><div class=\"line\">  Room* icecave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The icy caves\"</span>, <span class=\"string\">\"Ice everywhere you look\"</span>, herb_e ) ;</div><div class=\"line\">  Room* livingroom = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The living room\"</span>, <span class=\"string\">\"The room is alive\"</span>, dragonarmor ) ;</div><div class=\"line\">  Room* cellar = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The cellar\"</span>, <span class=\"string\">\"A dirty cellar filled with rats\"</span>, angelicsword ) ;</div><div class=\"line\">  Room* lifespring = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The lifespring\"</span>, <span class=\"string\">\"A beautiful fountain stands\"</span>, herb_f ) ;</div><div class=\"line\">  Room* waterfall = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The waterfall\"</span>, <span class=\"string\">\"Clear blue water falls\"</span>, herb_g ) ;</div><div class=\"line\">  Room* hellsgate = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The gates of hell\"</span>, <span class=\"string\">\"Large rusty doors lead to hell\"</span>, ultimatearmor ) ;</div><div class=\"line\">  Room* dragoncave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dragon's cave\"</span>, <span class=\"string\">\"An ancient cave...\"</span> ) ;</div><div class=\"line\">  Room* dragonsden = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dragon's den\"</span>, <span class=\"string\">\"A powerful monster awaits\"</span> ) ;</div><div class=\"line\">  Room* lostforest = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The secret forest\"</span>, <span class=\"string\">\"The strongest sword lies hidden here\"</span>, finalweapon ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Link Rooms</span></div><div class=\"line\">  mainHall-&gt;link( <span class=\"string\">'e'</span>, *river ) ;</div><div class=\"line\">  river-&gt;link( <span class=\"string\">'s'</span>, *greencave ) ;</div><div class=\"line\">  river-&gt;link( <span class=\"string\">'e'</span>, *bluecave ) ;</div><div class=\"line\">  river-&gt;link( <span class=\"string\">'w'</span>, *mainHall ) ;</div><div class=\"line\">  greencave-&gt;link( <span class=\"string\">'n'</span>, *river ) ;</div><div class=\"line\">  bluecave-&gt;link( <span class=\"string\">'w'</span>, *river ) ;</div><div class=\"line\">  bluecave-&gt;link( <span class=\"string\">'n'</span>, *darkpit ) ;</div><div class=\"line\">  darkpit-&gt;link( <span class=\"string\">'s'</span>, *bluecave ) ;</div><div class=\"line\">  darkpit-&gt;link( <span class=\"string\">'n'</span>, *morbidfield ) ;</div><div class=\"line\">  morbidfield-&gt;link( <span class=\"string\">'s'</span>, *darkpit ) ;</div><div class=\"line\">  morbidfield-&gt;link( <span class=\"string\">'e'</span>, *graveyard ) ;</div><div class=\"line\">  graveyard-&gt;link( <span class=\"string\">'w'</span>, *morbidfield ) ;</div><div class=\"line\">  graveyard-&gt;link( <span class=\"string\">'n'</span>, *crypt ) ;</div><div class=\"line\">  graveyard-&gt;link( <span class=\"string\">'e'</span>, *evilpassage ) ;</div><div class=\"line\">  crypt-&gt;link( <span class=\"string\">'s'</span>, *graveyard ) ;</div><div class=\"line\">  evilpassage-&gt;link( <span class=\"string\">'w'</span>, *graveyard ) ;</div><div class=\"line\">  evilpassage-&gt;link( <span class=\"string\">'s'</span>, *darklair ) ;</div><div class=\"line\">  darklair-&gt;link( <span class=\"string\">'n'</span>, *evilpassage ) ;</div><div class=\"line\">  darklair-&gt;link( <span class=\"string\">'s'</span>, *firepit ) ;</div><div class=\"line\">  firepit-&gt;link( <span class=\"string\">'n'</span>, *darklair ) ;</div><div class=\"line\">  firepit-&gt;link( <span class=\"string\">'e'</span>, *greenpasture ) ;</div><div class=\"line\">  greenpasture-&gt;link( <span class=\"string\">'w'</span>, *firepit ) ;</div><div class=\"line\">  greenpasture-&gt;link( <span class=\"string\">'s'</span>, *icecave ) ;</div><div class=\"line\">  greenpasture-&gt;link( <span class=\"string\">'e'</span>, *livingroom ) ;</div><div class=\"line\">  icecave-&gt;link( <span class=\"string\">'n'</span>, *greenpasture ) ;</div><div class=\"line\">  livingroom-&gt;link( <span class=\"string\">'w'</span>, *greenpasture ) ;</div><div class=\"line\">  livingroom-&gt;link( <span class=\"string\">'e'</span>, *cellar ) ;</div><div class=\"line\">  cellar-&gt;link( <span class=\"string\">'w'</span>, *livingroom ) ;</div><div class=\"line\">  cellar-&gt;link( <span class=\"string\">'n'</span>, *lifespring ) ;</div><div class=\"line\">  cellar-&gt;link( <span class=\"string\">'e'</span>, *hellsgate ) ;</div><div class=\"line\">  lifespring-&gt;link( <span class=\"string\">'s'</span>, *cellar ) ;</div><div class=\"line\">  lifespring-&gt;link( <span class=\"string\">'n'</span>, *waterfall ) ;</div><div class=\"line\">  waterfall-&gt;link( <span class=\"string\">'s'</span>, *lifespring ) ;</div><div class=\"line\">  hellsgate-&gt;link( <span class=\"string\">'w'</span>, *cellar ) ;</div><div class=\"line\">  hellsgate-&gt;link( <span class=\"string\">'e'</span>, *dragoncave ) ;</div><div class=\"line\">  dragoncave-&gt;link( <span class=\"string\">'w'</span>, *hellsgate ) ;</div><div class=\"line\">  dragoncave-&gt;link( <span class=\"string\">'e'</span>, *dragonsden ) ;</div><div class=\"line\">  dragonsden-&gt;link( <span class=\"string\">'w'</span>, *dragoncave ) ;</div><div class=\"line\">  dragonsden-&gt;link( <span class=\"string\">'e'</span>, *lostforest ) ;</div><div class=\"line\">  lostforest-&gt;link( <span class=\"string\">'w'</span>, *dragonsden ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Add monsters to rooms</span></div><div class=\"line\">  mainHall-&gt;addMonster( goblin ) ;</div><div class=\"line\">  mainHall-&gt;addMonster( imp ) ;</div><div class=\"line\">  river-&gt;addMonster( bear ) ;</div><div class=\"line\">  river-&gt;addMonster( redgoblin ) ;</div><div class=\"line\">  bluecave-&gt;addMonster( demon ) ;</div><div class=\"line\">  bluecave-&gt;addMonster( zergling ) ;</div><div class=\"line\">  morbidfield-&gt;addMonster( bats ) ;</div><div class=\"line\">  morbidfield-&gt;addMonster( morebats ) ;</div><div class=\"line\">  graveyard-&gt;addMonster( golem ) ;</div><div class=\"line\">  evilpassage-&gt;addMonster( goatdemon ) ;</div><div class=\"line\">  firepit-&gt;addMonster( cyclops ) ;</div><div class=\"line\">  greenpasture-&gt;addMonster( behemoth ) ;</div><div class=\"line\">  livingroom-&gt;addMonster( alien ) ;</div><div class=\"line\">  cellar-&gt;addMonster( giantrat ) ;</div><div class=\"line\">  hellsgate-&gt;addMonster( fallenangel ) ;</div><div class=\"line\">  dragoncave-&gt;addMonster( greatdragon ) ;</div><div class=\"line\">  dragonsden-&gt;addMonster( invincibledragon ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Add the rooms to the dungeon</span></div><div class=\"line\">  caves.addRoom( mainHall ) ;</div><div class=\"line\">  caves.addRoom( river ) ;</div><div class=\"line\">  caves.addRoom( greencave ) ;</div><div class=\"line\">  caves.addRoom( bluecave ) ;</div><div class=\"line\">  caves.addRoom( darkpit ) ;</div><div class=\"line\">  caves.addRoom( morbidfield ) ;</div><div class=\"line\">  caves.addRoom( graveyard ) ;</div><div class=\"line\">  caves.addRoom( crypt ) ;</div><div class=\"line\">  caves.addRoom( evilpassage ) ;</div><div class=\"line\">  caves.addRoom( darklair ) ;</div><div class=\"line\">  caves.addRoom( firepit ) ;</div><div class=\"line\">  caves.addRoom( greenpasture ) ;</div><div class=\"line\">  caves.addRoom( icecave ) ;</div><div class=\"line\">  caves.addRoom( livingroom ) ;</div><div class=\"line\">  caves.addRoom( cellar ) ;</div><div class=\"line\">  caves.addRoom( lifespring ) ;</div><div class=\"line\">  caves.addRoom( waterfall ) ;</div><div class=\"line\">  caves.addRoom( hellsgate ) ;</div><div class=\"line\">  caves.addRoom( dragoncave ) ;</div><div class=\"line\">  caves.addRoom( dragonsden ) ;</div><div class=\"line\">  caves.addRoom( lostforest ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Create a filter  Filter filter ;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Create a dispatch object with a command char and a value string</span></div><div class=\"line\">  Dispatch dispatch ;</div><div class=\"line\">  <span class=\"keyword\">char</span> command ;</div><div class=\"line\">  <span class=\"built_in\">string</span> value ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Simulate a new game</span></div><div class=\"line\">  <span class=\"comment\">//Create a new player and add to the dungeon</span></div><div class=\"line\">  <span class=\"built_in\">string</span> input ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Welcome to the game\\nEnter in a new name: \"</span> ;</div><div class=\"line\">  getline(<span class=\"built_in\">cin</span>, input, <span class=\"string\">'\\n'</span>);</div><div class=\"line\"></div><div class=\"line\">  Player* one = <span class=\"keyword\">new</span> Player( input, mainHall ) ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; caves.addPlayer( one ) &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Display needed info for the players</span></div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The objective is to clear the dungeon of all monsters. Good Luck\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Enter in a new command to start, to display help type the following command\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"help:\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"To quit simply enter \\\"quit\\\" without the quotes as a new command\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"New Command\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">  getline(<span class=\"built_in\">cin</span>, input, <span class=\"string\">'\\n'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Start the game loop</span></div><div class=\"line\">  <span class=\"keyword\">while</span>( input != <span class=\"string\">\"quit\"</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//Pass the users message through the filter</span></div><div class=\"line\">    <span class=\"keyword\">if</span>( filter.validateMessage( input ) )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//Split the users message into a command and value pair</span></div><div class=\"line\">      command = dispatch.extractCommand( input ) ;</div><div class=\"line\">      value = dispatch.extractValue( input ) ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Match the command and forward the value</span></div><div class=\"line\">      <span class=\"keyword\">switch</span>( command )</div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>: <span class=\"comment\">//Attack</span></div><div class=\"line\">          <span class=\"comment\">//If the monster does not exist or the name was mispelled</span></div><div class=\"line\">          <span class=\"keyword\">if</span>( &amp;(one-&gt;mLocation-&gt;getMonsterRef( value )) == <span class=\"literal\">NULL</span> )</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"There is no \"</span> + value + <span class=\"string\">\" at this location\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">            <span class=\"keyword\">break</span> ;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">//If the monster is there but in combat the player cannot fight it</span></div><div class=\"line\">          <span class=\"keyword\">if</span>( one-&gt;mLocation-&gt;getMonsterRef( value ).inCombat == <span class=\"literal\">true</span> )</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The \"</span> + value + <span class=\"string\">\" is currently fighting\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">            <span class=\"keyword\">break</span> ;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          caves.combatLoop( *one, one-&gt;mLocation-&gt;getMonsterRef( value ) ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span>: <span class=\"comment\">//Move</span></div><div class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt; one-&gt;move( value[ <span class=\"number\">0</span> ] ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'f'</span>: <span class=\"comment\">//Find</span></div><div class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt; one-&gt;search() ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'l'</span>: <span class=\"comment\">//Location</span></div><div class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt; one-&gt;getLocation() ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>: <span class=\"comment\">//Equip</span></div><div class=\"line\">          <span class=\"built_in\">cout</span> &lt;&lt; one-&gt;equip( value ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span>: <span class=\"comment\">//You</span></div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"built_in\">string</span>* playerStats = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span> ;</div><div class=\"line\">            playerStats = caves.playerStatus( *one ) ;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">7</span> ; ++i )</div><div class=\"line\">            &#123;</div><div class=\"line\">              <span class=\"built_in\">cout</span> &lt;&lt; playerStats[i] &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">            &#125;<span class=\"built_in\">endl</span></div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">//case 't': //Talk</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span>: <span class=\"comment\">//Help Menu</span></div><div class=\"line\">          caves.displayHelp();</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Invalid command please refer to the help menu.\\nhelp:\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Or type \\\"quit\\\" to quit the game\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( caves.isComplete() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Dungeon Cleared, YOU WIN!\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( one-&gt;death() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; one-&gt;getName() + <span class=\"string\">\" was slain by the \"</span> + one-&gt;mLocation-&gt;getMonsterRef( value ).getName() &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      one-&gt;mLocation-&gt;getMonsterRef( value ).inCombat = <span class=\"literal\">false</span> ;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"*Hint* Secret rooms hidden abound; find them and victory shall be yours\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      input = <span class=\"string\">\"quit\"</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//Get the next command</span></div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\\nNew Command\"</span> &lt;&lt; <span class=\"built_in\">endl</span> ;</div><div class=\"line\">      getline(<span class=\"built_in\">cin</span>, input, <span class=\"string\">'\\n'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  caves.removePlayer( one-&gt;getName() ) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>For reference here are all the files for the project below.If none of the dropbox links are working then mention it in the comments section and I’ll re-upload the files. </p>\n<p><br><a  href=\"http://dl.dropbox.com/u/22280460/database.cpp\">http://dl.dropbox.com/u/22280460/database.cpp</a><br><br /><br><a href=\"http://dl.dropbox.com/u/22280460/database.h\">http://dl.dropbox.com/u/22280460/database.h</a><br><br /><br><a href=\"http://dl.dropbox.com/u/22280460/main.cpp\">http://dl.dropbox.com/u/22280460/main.cpp</a><br><br /><br><a href=\"http://dl.dropbox.com/u/22280460/Test.cpp\">http://dl.dropbox.com/u/22280460/Test.cpp</a><br><br /><br><a href=\"http://dl.dropbox.com/u/22280460/Test.h\">http://dl.dropbox.com/u/22280460/Test.h</a><br></p>\n\n<p><a href=\"/2011/06/16/textbasedrpgpart6\">Click here for part VI</a></p>"},{"title":"Build A Text Based Multiplayer RPG Part VI","date":"2011-06-16T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart6.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart6.JPG","comments":0,"_content":"In part six of the tutorial we build the client side code for the multiplayer game which will connect to the server. After completion of this part you can run the client code by itself to simulate a single player version of the game.\n\n<!-- more -->\n[Click here for part V][link_part_5]\n[Click here for part VII][link_part_7]\n\nIn this tutorial we are going to build the client code which will be used by players to access the server where the game is hosted. However for this part of the tutorial we're going to transition over from <a href=\"http://en.wikipedia.org/wiki/C%2B%2B\">pure C++</a> to <a href=\"http://en.wikipedia.org/wiki/C%2B%2B/CLI\">C++/CLI</a> for access to the <a href=\"http://msdn.microsoft.com/en-us/library/system.net.aspx\">.Net framework's networking libraries</a>. If you haven't been following this tutorial using Windows don't feel left out because you can still take the basic ideas of networking shown here and apply them to <a href=\"http://en.wikipedia.org/wiki/BSD_sockets\">BSD sockets</a> which are used on Unix(includes Mac OS X) operating systems. Or if you are skillful enough with <a href=\"http://en.wikipedia.org/wiki/Java_Native_Interface\">Java native interfacing</a> you can port this whole program over to Java and use <a href=\"http://download.oracle.com/javase/tutorial/networking/sockets/\">Java's networking packages</a>, and run our little game on any machine with the JRE installed.\n\nAnyways I'll assume that for this part of the tutorial you are either running a copy of Visual Studio 2008, Visual Studio 2010 or the express edition of Visual Studio 2010. I'm personally running the professional version of Visual Studio 2010 but you can get the express version of Visual Studio 2010 here.\n\n<a href=\"http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express\">Get the express version of Visual Studio 2010.</a>\n\n<!-- more -->\nInstall Visual Studio 2010 if you haven't and once that is done follow the instructions below to create a new C++/CLI project.\n\n1) File -> New -> Project\n2) From the project menu find Visual C++\n3) Under Visual C++ you'll see some listings, click the one titled CLR\n4) Then create a new CLR Console Application by giving it a proper name\n5) For CLR applications you need to keep the default files while adding your own source and headers so make sure your project appears similar to the picture below.\n\nThis require that you create a new \"main.cpp\" file, so do that now and add it to the sources folder of your application. Now open up the \"main.cpp\" file as all of the following code snippets will reference the that file.\n\nThe first thing we want to do is to reference the .Net libraries for networking, threading, text manipulation and console output. To do so, add the following lines of code.\n\n```c\n#include \"stdafx.h\"\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nusing namespace System::Text;\nusing namespace System::Threading;\n```\nAs our game's client program all it needs to do is simply connect to the server and be able to both send and receive request from it. Lets call the function connect() and have it take a single string argument which will be the servers ip address.\n```c\nvoid connect( String^ server )\n{\n```\nNext we need to capture two types of network exceptions, being that we will be creating a socket to stream byte code to our server they will be the ArgumentNullException and the SocketException. You can probably guess which types of errors they catch by their names so lets focus on connecting to our server. Like all exception handled code in C++/CLI we have to wrap the code responsible for throwing exceptions within a try{} block.\n```c\n    try\n    {\n```\nFor any <a href=\"http://en.wikipedia.org/wiki/Transmission_Control_Protocol\">tcp client</a> the basic premise is to connect to a remote server via specific port. Our game will use port 13000 and the server ip will be the argument passed to the function as a string.\n```c\n        // Create a TcpClient.\n        // Note, for this client to work you need to have a TcpServer \n        // connected to the same address as specified by the server, port\n        // combination.\n        Int32 port = 13000;\n        TcpClient^ client = gcnew TcpClient( server, port );\n```\nNow that our client is setup and knows the location of our server we now need to be able to send and receive messages on our port by setting up a network stream object. The network stream object will allow us to read and write messages(as encoded bytes) to and from the server.\n\n```c\n        // Get a client stream for reading and writing.\n        NetworkStream^ stream = client->GetStream();\n\n        //Prepare a Byte array to store the servers response\n        array<Byte>^ responseData = gcnew array<Byte>(256);\n```\nIn addition since byte code in its raw form is practically useless to humans we'll create a string to hold the decoded messages as ascii text.\n```c\n        //The repsonse text string\n        String^ response = String::Empty ;\n```\n\nIn our client server model once the client connects to the server the server will acknowledege the connect and send out an initial message. Since all communication between the client and server takes place over the network stream we have to decode the network stream into our byte array and then decode the raw bytes into ascii so we can read the result.\n\n```c\n        // Read the TcpServer's response and store it as bytes.\n        Int32 bytes = stream->Read( responseData, 0, responseData->Length );\n        response = Text::Encoding::ASCII->GetString( responseData, 0, bytes );\n        Console::WriteLine( response );\n```\nMuch like the single player stand alone test version, we'll still enter new commands into a console but this time the commands will get encoded and streamed over to the server.\n```c\n        //Enter a new command as raw text \n        String^ command ;\n        Console::WriteLine( \"Type a new command\\n\" ) ;\n        command = Console::ReadLine() ;\n```\n\nRecall how we read data from the server, we loaded the stream into our byte array, we encoded the byte array to ascii and then we output the message to our screen. So to send messages back to the server we just reverse this process. We load a byte array with the text typed into the console.\n\n```c\n        // Translate the passed command into ASCII and store it as a Byte array.\n        array<Byte>^ commandData = Text::Encoding::ASCII->GetBytes( command );\n```\nLastly we're going to re-implement the game loop, if you remember, our game will run until the user types \"quit\" into the command console. The game will just repeat the same process we outlined above for reading and writing across the network stream but this time within a loop.\n```c\n        while( command != \"quit\" )\n        {\n          // Send the command to the connected TcpServer\n          stream->Write( commandData, 0, commandData->Length );\n          Console::WriteLine( \"Sent: {0}\", command );\n\n          //Store the server's response\n          response = String::Empty ;\n\n          //If there is a message from the server capture and display it\n          responseData->Clear( responseData, 0, 256 ) ;\n\n          bytes = stream->Read( responseData, 0, responseData->Length );\n\n          //While there is a message available from the server read it\n          while( bytes > 0 )\n          {\n            response = Text::Encoding::ASCII->GetString( responseData, 0, bytes );\n            Console::WriteLine( \"Received: {0}\", response );\n\n            bytes = 0 ;\n            responseData->Clear( responseData, 0, 256 ) ;\n            if( stream->DataAvailable )\n            {\n              bytes = stream->Read( responseData, 0, responseData->Length );\n            }\n          }\n\n          //Enter a new command as raw text \n          Console::WriteLine( \"Type a new command\\n\" ) ;\n          command = Console::ReadLine() ;\n\n          commandData = Text::Encoding::ASCII->GetBytes( command );\n          stream->Write( commandData, 0, commandData->Length );\n\n        }\n      // Close everything.\n      client->Close();\n\n    }\n```\nRemember the exceptions we have to catch? Just add them to the end of the try block.\n```c\n    catch( ArgumentNullException^ e ) \n    {\n      Console::WriteLine( \"ArgumentNullException: {0}\", e );\n    }\n  catch( SocketException^ e ) \n  {\n    Console::WriteLine( \"SocketException: {0}\", e );\n  }\n}\n```\nNow finish the client code by adding the main() method, we'll be setting up our server on localhost so just pass 127.0.0.1 to the argument of the connect function.\n```c\nint main(array<System::String ^> ^args)\n{\n  connect( \"127.0.0.1\" ) ;\n\n  return 0;\n}\n```\nHere is a full copy of the file \"main.cpp\"\n```c\n#include \"stdafx.h\"\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nusing namespace System::Text;\nusing namespace System::Threading;\n\nvoid connect( String^ server )\n{\n  try\n  {\n    // Create a TcpClient.\n    // Note, for this client to work you need to have a TcpServer \n    // connected to the same address as specified by the server, port\n    // combination.\n    Int32 port = 13000;\n    TcpClient^ client = gcnew TcpClient( server, port );\n\n    // Get a client stream for reading and writing.\n    NetworkStream^ stream = client->GetStream();\n\n    //Prepare a Byte array to store the servers response\n    array<Byte>^ responseData = gcnew array<Byte>(256);\n\n    //The repsonse text string\n    String^ response = String::Empty ;\n\n    // Read the TcpServer's response and store it as bytes.\n    Int32 bytes = stream->Read( responseData, 0, responseData->Length );\n    response = Text::Encoding::ASCII->GetString( responseData, 0, bytes );\n    Console::WriteLine( response );\n\n    //Enter a new command as raw text \n    String^ command ;\n    Console::WriteLine( \"Type a new command\\n\" ) ;\n    command = Console::ReadLine() ;\n\n    // Translate the passed command into ASCII and store it as a Byte array.\n    array<Byte>^ commandData = Text::Encoding::ASCII->GetBytes( command );\n\n    while( command != \"quit\" )\n    {\n      // Send the command to the connected TcpServer\n      stream->Write( commandData, 0, commandData->Length );\n      Console::WriteLine( \"Sent: {0}\", command );\n\n      //Store the server's response\n      response = String::Empty ;\n\n      //If there is a message from the server capture and display it\n      responseData->Clear( responseData, 0, 256 ) ;\n\n      bytes = stream->Read( responseData, 0, responseData->Length );\n\n      //While there is a message available from the server read it\n      while( bytes > 0 )\n      {\n        response = Text::Encoding::ASCII->GetString( responseData, 0, bytes );\n        Console::WriteLine( \"Received: {0}\", response );\n\n        bytes = 0 ;\n        responseData->Clear( responseData, 0, 256 ) ;\n        if( stream->DataAvailable )\n        {\n          bytes = stream->Read( responseData, 0, responseData->Length );\n        }\n      }\n\n      //Enter a new command as raw text \n      Console::WriteLine( \"Type a new command\\n\" ) ;\n      command = Console::ReadLine() ;\n\n      commandData = Text::Encoding::ASCII->GetBytes( command );\n      stream->Write( commandData, 0, commandData->Length );\n\n    }\n    // Close everything.\n    client->Close();\n\n  }\n  catch( ArgumentNullException^ e ) \n  {\n    Console::WriteLine( \"ArgumentNullException: {0}\", e );\n  }\n  catch( SocketException^ e ) \n  {\n    Console::WriteLine( \"SocketException: {0}\", e );\n  }\n}\n\nint main(array<System::String ^> ^args)\n{\n  connect( \"127.0.0.1\" ) ;\n\n  return 0;\n}\n```\n<a href=\"http://dl.dropbox.com/u/22280460/Simple_C%2B%2B_Client.rar\">Click here to download the client code for Visual Studio 2010</a>\n\nThe file is hosted on my dropbox account so let me know if you can't access it and I'll re-upload it again.\n\n[Click here for part VII][link_part_7]\n\n[link_part_5]: /2011/06/15/textbasedrpgpart5\n[link_part_7]: /2011/06/17/textbasedrpgpart7\n","source":"_posts/textbasedrpgpart6.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part VI\ndate: 2011-06-16\ncategories: [tutorial]\ntags: [cpp]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart6.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart6.JPG\ncomments: false\n---\nIn part six of the tutorial we build the client side code for the multiplayer game which will connect to the server. After completion of this part you can run the client code by itself to simulate a single player version of the game.\n\n<!-- more -->\n[Click here for part V][link_part_5]\n[Click here for part VII][link_part_7]\n\nIn this tutorial we are going to build the client code which will be used by players to access the server where the game is hosted. However for this part of the tutorial we're going to transition over from <a href=\"http://en.wikipedia.org/wiki/C%2B%2B\">pure C++</a> to <a href=\"http://en.wikipedia.org/wiki/C%2B%2B/CLI\">C++/CLI</a> for access to the <a href=\"http://msdn.microsoft.com/en-us/library/system.net.aspx\">.Net framework's networking libraries</a>. If you haven't been following this tutorial using Windows don't feel left out because you can still take the basic ideas of networking shown here and apply them to <a href=\"http://en.wikipedia.org/wiki/BSD_sockets\">BSD sockets</a> which are used on Unix(includes Mac OS X) operating systems. Or if you are skillful enough with <a href=\"http://en.wikipedia.org/wiki/Java_Native_Interface\">Java native interfacing</a> you can port this whole program over to Java and use <a href=\"http://download.oracle.com/javase/tutorial/networking/sockets/\">Java's networking packages</a>, and run our little game on any machine with the JRE installed.\n\nAnyways I'll assume that for this part of the tutorial you are either running a copy of Visual Studio 2008, Visual Studio 2010 or the express edition of Visual Studio 2010. I'm personally running the professional version of Visual Studio 2010 but you can get the express version of Visual Studio 2010 here.\n\n<a href=\"http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express\">Get the express version of Visual Studio 2010.</a>\n\n<!-- more -->\nInstall Visual Studio 2010 if you haven't and once that is done follow the instructions below to create a new C++/CLI project.\n\n1) File -> New -> Project\n2) From the project menu find Visual C++\n3) Under Visual C++ you'll see some listings, click the one titled CLR\n4) Then create a new CLR Console Application by giving it a proper name\n5) For CLR applications you need to keep the default files while adding your own source and headers so make sure your project appears similar to the picture below.\n\nThis require that you create a new \"main.cpp\" file, so do that now and add it to the sources folder of your application. Now open up the \"main.cpp\" file as all of the following code snippets will reference the that file.\n\nThe first thing we want to do is to reference the .Net libraries for networking, threading, text manipulation and console output. To do so, add the following lines of code.\n\n```c\n#include \"stdafx.h\"\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nusing namespace System::Text;\nusing namespace System::Threading;\n```\nAs our game's client program all it needs to do is simply connect to the server and be able to both send and receive request from it. Lets call the function connect() and have it take a single string argument which will be the servers ip address.\n```c\nvoid connect( String^ server )\n{\n```\nNext we need to capture two types of network exceptions, being that we will be creating a socket to stream byte code to our server they will be the ArgumentNullException and the SocketException. You can probably guess which types of errors they catch by their names so lets focus on connecting to our server. Like all exception handled code in C++/CLI we have to wrap the code responsible for throwing exceptions within a try{} block.\n```c\n    try\n    {\n```\nFor any <a href=\"http://en.wikipedia.org/wiki/Transmission_Control_Protocol\">tcp client</a> the basic premise is to connect to a remote server via specific port. Our game will use port 13000 and the server ip will be the argument passed to the function as a string.\n```c\n        // Create a TcpClient.\n        // Note, for this client to work you need to have a TcpServer \n        // connected to the same address as specified by the server, port\n        // combination.\n        Int32 port = 13000;\n        TcpClient^ client = gcnew TcpClient( server, port );\n```\nNow that our client is setup and knows the location of our server we now need to be able to send and receive messages on our port by setting up a network stream object. The network stream object will allow us to read and write messages(as encoded bytes) to and from the server.\n\n```c\n        // Get a client stream for reading and writing.\n        NetworkStream^ stream = client->GetStream();\n\n        //Prepare a Byte array to store the servers response\n        array<Byte>^ responseData = gcnew array<Byte>(256);\n```\nIn addition since byte code in its raw form is practically useless to humans we'll create a string to hold the decoded messages as ascii text.\n```c\n        //The repsonse text string\n        String^ response = String::Empty ;\n```\n\nIn our client server model once the client connects to the server the server will acknowledege the connect and send out an initial message. Since all communication between the client and server takes place over the network stream we have to decode the network stream into our byte array and then decode the raw bytes into ascii so we can read the result.\n\n```c\n        // Read the TcpServer's response and store it as bytes.\n        Int32 bytes = stream->Read( responseData, 0, responseData->Length );\n        response = Text::Encoding::ASCII->GetString( responseData, 0, bytes );\n        Console::WriteLine( response );\n```\nMuch like the single player stand alone test version, we'll still enter new commands into a console but this time the commands will get encoded and streamed over to the server.\n```c\n        //Enter a new command as raw text \n        String^ command ;\n        Console::WriteLine( \"Type a new command\\n\" ) ;\n        command = Console::ReadLine() ;\n```\n\nRecall how we read data from the server, we loaded the stream into our byte array, we encoded the byte array to ascii and then we output the message to our screen. So to send messages back to the server we just reverse this process. We load a byte array with the text typed into the console.\n\n```c\n        // Translate the passed command into ASCII and store it as a Byte array.\n        array<Byte>^ commandData = Text::Encoding::ASCII->GetBytes( command );\n```\nLastly we're going to re-implement the game loop, if you remember, our game will run until the user types \"quit\" into the command console. The game will just repeat the same process we outlined above for reading and writing across the network stream but this time within a loop.\n```c\n        while( command != \"quit\" )\n        {\n          // Send the command to the connected TcpServer\n          stream->Write( commandData, 0, commandData->Length );\n          Console::WriteLine( \"Sent: {0}\", command );\n\n          //Store the server's response\n          response = String::Empty ;\n\n          //If there is a message from the server capture and display it\n          responseData->Clear( responseData, 0, 256 ) ;\n\n          bytes = stream->Read( responseData, 0, responseData->Length );\n\n          //While there is a message available from the server read it\n          while( bytes > 0 )\n          {\n            response = Text::Encoding::ASCII->GetString( responseData, 0, bytes );\n            Console::WriteLine( \"Received: {0}\", response );\n\n            bytes = 0 ;\n            responseData->Clear( responseData, 0, 256 ) ;\n            if( stream->DataAvailable )\n            {\n              bytes = stream->Read( responseData, 0, responseData->Length );\n            }\n          }\n\n          //Enter a new command as raw text \n          Console::WriteLine( \"Type a new command\\n\" ) ;\n          command = Console::ReadLine() ;\n\n          commandData = Text::Encoding::ASCII->GetBytes( command );\n          stream->Write( commandData, 0, commandData->Length );\n\n        }\n      // Close everything.\n      client->Close();\n\n    }\n```\nRemember the exceptions we have to catch? Just add them to the end of the try block.\n```c\n    catch( ArgumentNullException^ e ) \n    {\n      Console::WriteLine( \"ArgumentNullException: {0}\", e );\n    }\n  catch( SocketException^ e ) \n  {\n    Console::WriteLine( \"SocketException: {0}\", e );\n  }\n}\n```\nNow finish the client code by adding the main() method, we'll be setting up our server on localhost so just pass 127.0.0.1 to the argument of the connect function.\n```c\nint main(array<System::String ^> ^args)\n{\n  connect( \"127.0.0.1\" ) ;\n\n  return 0;\n}\n```\nHere is a full copy of the file \"main.cpp\"\n```c\n#include \"stdafx.h\"\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nusing namespace System::Text;\nusing namespace System::Threading;\n\nvoid connect( String^ server )\n{\n  try\n  {\n    // Create a TcpClient.\n    // Note, for this client to work you need to have a TcpServer \n    // connected to the same address as specified by the server, port\n    // combination.\n    Int32 port = 13000;\n    TcpClient^ client = gcnew TcpClient( server, port );\n\n    // Get a client stream for reading and writing.\n    NetworkStream^ stream = client->GetStream();\n\n    //Prepare a Byte array to store the servers response\n    array<Byte>^ responseData = gcnew array<Byte>(256);\n\n    //The repsonse text string\n    String^ response = String::Empty ;\n\n    // Read the TcpServer's response and store it as bytes.\n    Int32 bytes = stream->Read( responseData, 0, responseData->Length );\n    response = Text::Encoding::ASCII->GetString( responseData, 0, bytes );\n    Console::WriteLine( response );\n\n    //Enter a new command as raw text \n    String^ command ;\n    Console::WriteLine( \"Type a new command\\n\" ) ;\n    command = Console::ReadLine() ;\n\n    // Translate the passed command into ASCII and store it as a Byte array.\n    array<Byte>^ commandData = Text::Encoding::ASCII->GetBytes( command );\n\n    while( command != \"quit\" )\n    {\n      // Send the command to the connected TcpServer\n      stream->Write( commandData, 0, commandData->Length );\n      Console::WriteLine( \"Sent: {0}\", command );\n\n      //Store the server's response\n      response = String::Empty ;\n\n      //If there is a message from the server capture and display it\n      responseData->Clear( responseData, 0, 256 ) ;\n\n      bytes = stream->Read( responseData, 0, responseData->Length );\n\n      //While there is a message available from the server read it\n      while( bytes > 0 )\n      {\n        response = Text::Encoding::ASCII->GetString( responseData, 0, bytes );\n        Console::WriteLine( \"Received: {0}\", response );\n\n        bytes = 0 ;\n        responseData->Clear( responseData, 0, 256 ) ;\n        if( stream->DataAvailable )\n        {\n          bytes = stream->Read( responseData, 0, responseData->Length );\n        }\n      }\n\n      //Enter a new command as raw text \n      Console::WriteLine( \"Type a new command\\n\" ) ;\n      command = Console::ReadLine() ;\n\n      commandData = Text::Encoding::ASCII->GetBytes( command );\n      stream->Write( commandData, 0, commandData->Length );\n\n    }\n    // Close everything.\n    client->Close();\n\n  }\n  catch( ArgumentNullException^ e ) \n  {\n    Console::WriteLine( \"ArgumentNullException: {0}\", e );\n  }\n  catch( SocketException^ e ) \n  {\n    Console::WriteLine( \"SocketException: {0}\", e );\n  }\n}\n\nint main(array<System::String ^> ^args)\n{\n  connect( \"127.0.0.1\" ) ;\n\n  return 0;\n}\n```\n<a href=\"http://dl.dropbox.com/u/22280460/Simple_C%2B%2B_Client.rar\">Click here to download the client code for Visual Studio 2010</a>\n\nThe file is hosted on my dropbox account so let me know if you can't access it and I'll re-upload it again.\n\n[Click here for part VII][link_part_7]\n\n[link_part_5]: /2011/06/15/textbasedrpgpart5\n[link_part_7]: /2011/06/17/textbasedrpgpart7\n","slug":"textbasedrpgpart6","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3it001wyswvabxsjv73","layout":"post","photos":[],"link":"","content":"<p>In part six of the tutorial we build the client side code for the multiplayer game which will connect to the server. After completion of this part you can run the client code by itself to simulate a single player version of the game.</p>\n<a id=\"more\"></a>\n<p><a href=\"/2011/06/15/textbasedrpgpart5\">Click here for part V</a><br><a href=\"/2011/06/17/textbasedrpgpart7\">Click here for part VII</a></p>\n<p>In this tutorial we are going to build the client code which will be used by players to access the server where the game is hosted. However for this part of the tutorial we’re going to transition over from <a href=\"http://en.wikipedia.org/wiki/C%2B%2B\" target=\"_blank\" rel=\"external\">pure C++</a> to <a href=\"http://en.wikipedia.org/wiki/C%2B%2B/CLI\" target=\"_blank\" rel=\"external\">C++/CLI</a> for access to the <a href=\"http://msdn.microsoft.com/en-us/library/system.net.aspx\" target=\"_blank\" rel=\"external\">.Net framework’s networking libraries</a>. If you haven’t been following this tutorial using Windows don’t feel left out because you can still take the basic ideas of networking shown here and apply them to <a href=\"http://en.wikipedia.org/wiki/BSD_sockets\" target=\"_blank\" rel=\"external\">BSD sockets</a> which are used on Unix(includes Mac OS X) operating systems. Or if you are skillful enough with <a href=\"http://en.wikipedia.org/wiki/Java_Native_Interface\" target=\"_blank\" rel=\"external\">Java native interfacing</a> you can port this whole program over to Java and use <a href=\"http://download.oracle.com/javase/tutorial/networking/sockets/\" target=\"_blank\" rel=\"external\">Java’s networking packages</a>, and run our little game on any machine with the JRE installed.</p>\n<p>Anyways I’ll assume that for this part of the tutorial you are either running a copy of Visual Studio 2008, Visual Studio 2010 or the express edition of Visual Studio 2010. I’m personally running the professional version of Visual Studio 2010 but you can get the express version of Visual Studio 2010 here.</p>\n<p><a href=\"http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express\" target=\"_blank\" rel=\"external\">Get the express version of Visual Studio 2010.</a></p>\n<!-- more -->\n<p>Install Visual Studio 2010 if you haven’t and once that is done follow the instructions below to create a new C++/CLI project.</p>\n<p>1) File -&gt; New -&gt; Project<br>2) From the project menu find Visual C++<br>3) Under Visual C++ you’ll see some listings, click the one titled CLR<br>4) Then create a new CLR Console Application by giving it a proper name<br>5) For CLR applications you need to keep the default files while adding your own source and headers so make sure your project appears similar to the picture below.</p>\n<p>This require that you create a new “main.cpp” file, so do that now and add it to the sources folder of your application. Now open up the “main.cpp” file as all of the following code snippets will reference the that file.</p>\n<p>The first thing we want to do is to reference the .Net libraries for networking, threading, text manipulation and console output. To do so, add the following lines of code.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::IO;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net::Sockets;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Text;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Threading;</div></pre></td></tr></table></figure>\n<p>As our game’s client program all it needs to do is simply connect to the server and be able to both send and receive request from it. Lets call the function connect() and have it take a single string argument which will be the servers ip address.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">( String^ server )</span></span></div><div class=\"line\">&#123;</div></pre></td></tr></table></figure></p>\n<p>Next we need to capture two types of network exceptions, being that we will be creating a socket to stream byte code to our server they will be the ArgumentNullException and the SocketException. You can probably guess which types of errors they catch by their names so lets focus on connecting to our server. Like all exception handled code in C++/CLI we have to wrap the code responsible for throwing exceptions within a try{} block.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span></div><div class=\"line\">&#123;</div></pre></td></tr></table></figure></p>\n<p>For any <a href=\"http://en.wikipedia.org/wiki/Transmission_Control_Protocol\" target=\"_blank\" rel=\"external\">tcp client</a> the basic premise is to connect to a remote server via specific port. Our game will use port 13000 and the server ip will be the argument passed to the function as a string.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Create a TcpClient.</span></div><div class=\"line\"><span class=\"comment\">// Note, for this client to work you need to have a TcpServer </span></div><div class=\"line\"><span class=\"comment\">// connected to the same address as specified by the server, port</span></div><div class=\"line\"><span class=\"comment\">// combination.</span></div><div class=\"line\">Int32 port = <span class=\"number\">13000</span>;</div><div class=\"line\">TcpClient^ client = gcnew TcpClient( server, port );</div></pre></td></tr></table></figure></p>\n<p>Now that our client is setup and knows the location of our server we now need to be able to send and receive messages on our port by setting up a network stream object. The network stream object will allow us to read and write messages(as encoded bytes) to and from the server.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Get a client stream for reading and writing.</span></div><div class=\"line\">NetworkStream^ stream = client-&gt;GetStream();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Prepare a Byte array to store the servers response</span></div><div class=\"line\"><span class=\"built_in\">array</span>&lt;Byte&gt;^ responseData = gcnew <span class=\"built_in\">array</span>&lt;Byte&gt;(<span class=\"number\">256</span>);</div></pre></td></tr></table></figure>\n<p>In addition since byte code in its raw form is practically useless to humans we’ll create a string to hold the decoded messages as ascii text.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//The repsonse text string</span></div><div class=\"line\">String^ response = String::Empty ;</div></pre></td></tr></table></figure></p>\n<p>In our client server model once the client connects to the server the server will acknowledege the connect and send out an initial message. Since all communication between the client and server takes place over the network stream we have to decode the network stream into our byte array and then decode the raw bytes into ascii so we can read the result.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Read the TcpServer's response and store it as bytes.</span></div><div class=\"line\">Int32 bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\">response = Text::Encoding::ASCII-&gt;GetString( responseData, <span class=\"number\">0</span>, bytes );</div><div class=\"line\">Console::WriteLine( response );</div></pre></td></tr></table></figure>\n<p>Much like the single player stand alone test version, we’ll still enter new commands into a console but this time the commands will get encoded and streamed over to the server.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Enter a new command as raw text </span></div><div class=\"line\">String^ command ;</div><div class=\"line\">Console::WriteLine( <span class=\"string\">\"Type a new command\\n\"</span> ) ;</div><div class=\"line\">command = Console::ReadLine() ;</div></pre></td></tr></table></figure></p>\n<p>Recall how we read data from the server, we loaded the stream into our byte array, we encoded the byte array to ascii and then we output the message to our screen. So to send messages back to the server we just reverse this process. We load a byte array with the text typed into the console.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Translate the passed command into ASCII and store it as a Byte array.</span></div><div class=\"line\"><span class=\"built_in\">array</span>&lt;Byte&gt;^ commandData = Text::Encoding::ASCII-&gt;GetBytes( command );</div></pre></td></tr></table></figure>\n<p>Lastly we’re going to re-implement the game loop, if you remember, our game will run until the user types “quit” into the command console. The game will just repeat the same process we outlined above for reading and writing across the network stream but this time within a loop.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">while</span>( command != <span class=\"string\">\"quit\"</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">// Send the command to the connected TcpServer</span></div><div class=\"line\">      stream-&gt;Write( commandData, <span class=\"number\">0</span>, commandData-&gt;Length );</div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"Sent: &#123;0&#125;\"</span>, command );</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Store the server's response</span></div><div class=\"line\">      response = String::Empty ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//If there is a message from the server capture and display it</span></div><div class=\"line\">      responseData-&gt;Clear( responseData, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\"></div><div class=\"line\">      bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//While there is a message available from the server read it</span></div><div class=\"line\">      <span class=\"keyword\">while</span>( bytes &gt; <span class=\"number\">0</span> )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = Text::Encoding::ASCII-&gt;GetString( responseData, <span class=\"number\">0</span>, bytes );</div><div class=\"line\">        Console::WriteLine( <span class=\"string\">\"Received: &#123;0&#125;\"</span>, response );</div><div class=\"line\"></div><div class=\"line\">        bytes = <span class=\"number\">0</span> ;</div><div class=\"line\">        responseData-&gt;Clear( responseData, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\">        <span class=\"keyword\">if</span>( stream-&gt;DataAvailable )</div><div class=\"line\">        &#123;</div><div class=\"line\">          bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Enter a new command as raw text </span></div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"Type a new command\\n\"</span> ) ;</div><div class=\"line\">      command = Console::ReadLine() ;</div><div class=\"line\"></div><div class=\"line\">      commandData = Text::Encoding::ASCII-&gt;GetBytes( command );</div><div class=\"line\">      stream-&gt;Write( commandData, <span class=\"number\">0</span>, commandData-&gt;Length );</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"comment\">// Close everything.</span></div><div class=\"line\">  client-&gt;Close();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Remember the exceptions we have to catch? Just add them to the end of the try block.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">catch</span>( ArgumentNullException^ e ) </div><div class=\"line\">    &#123;</div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"ArgumentNullException: &#123;0&#125;\"</span>, e );</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>( SocketException^ e ) </div><div class=\"line\">  &#123;</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"SocketException: &#123;0&#125;\"</span>, e );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now finish the client code by adding the main() method, we’ll be setting up our server on localhost so just pass 127.0.0.1 to the argument of the connect function.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"built_in\">array</span>&lt;System::String ^&gt; ^args)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  connect( <span class=\"string\">\"127.0.0.1\"</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Here is a full copy of the file “main.cpp”<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::IO;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net::Sockets;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Text;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Threading;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">( String^ server )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">// Create a TcpClient.</span></div><div class=\"line\">    <span class=\"comment\">// Note, for this client to work you need to have a TcpServer </span></div><div class=\"line\">    <span class=\"comment\">// connected to the same address as specified by the server, port</span></div><div class=\"line\">    <span class=\"comment\">// combination.</span></div><div class=\"line\">    Int32 port = <span class=\"number\">13000</span>;</div><div class=\"line\">    TcpClient^ client = gcnew TcpClient( server, port );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Get a client stream for reading and writing.</span></div><div class=\"line\">    NetworkStream^ stream = client-&gt;GetStream();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Prepare a Byte array to store the servers response</span></div><div class=\"line\">    <span class=\"built_in\">array</span>&lt;Byte&gt;^ responseData = gcnew <span class=\"built_in\">array</span>&lt;Byte&gt;(<span class=\"number\">256</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//The repsonse text string</span></div><div class=\"line\">    String^ response = String::Empty ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Read the TcpServer's response and store it as bytes.</span></div><div class=\"line\">    Int32 bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\">    response = Text::Encoding::ASCII-&gt;GetString( responseData, <span class=\"number\">0</span>, bytes );</div><div class=\"line\">    Console::WriteLine( response );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Enter a new command as raw text </span></div><div class=\"line\">    String^ command ;</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"Type a new command\\n\"</span> ) ;</div><div class=\"line\">    command = Console::ReadLine() ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Translate the passed command into ASCII and store it as a Byte array.</span></div><div class=\"line\">    <span class=\"built_in\">array</span>&lt;Byte&gt;^ commandData = Text::Encoding::ASCII-&gt;GetBytes( command );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>( command != <span class=\"string\">\"quit\"</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">// Send the command to the connected TcpServer</span></div><div class=\"line\">      stream-&gt;Write( commandData, <span class=\"number\">0</span>, commandData-&gt;Length );</div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"Sent: &#123;0&#125;\"</span>, command );</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Store the server's response</span></div><div class=\"line\">      response = String::Empty ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//If there is a message from the server capture and display it</span></div><div class=\"line\">      responseData-&gt;Clear( responseData, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\"></div><div class=\"line\">      bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//While there is a message available from the server read it</span></div><div class=\"line\">      <span class=\"keyword\">while</span>( bytes &gt; <span class=\"number\">0</span> )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = Text::Encoding::ASCII-&gt;GetString( responseData, <span class=\"number\">0</span>, bytes );</div><div class=\"line\">        Console::WriteLine( <span class=\"string\">\"Received: &#123;0&#125;\"</span>, response );</div><div class=\"line\"></div><div class=\"line\">        bytes = <span class=\"number\">0</span> ;</div><div class=\"line\">        responseData-&gt;Clear( responseData, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\">        <span class=\"keyword\">if</span>( stream-&gt;DataAvailable )</div><div class=\"line\">        &#123;</div><div class=\"line\">          bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Enter a new command as raw text </span></div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"Type a new command\\n\"</span> ) ;</div><div class=\"line\">      command = Console::ReadLine() ;</div><div class=\"line\"></div><div class=\"line\">      commandData = Text::Encoding::ASCII-&gt;GetBytes( command );</div><div class=\"line\">      stream-&gt;Write( commandData, <span class=\"number\">0</span>, commandData-&gt;Length );</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Close everything.</span></div><div class=\"line\">    client-&gt;Close();</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>( ArgumentNullException^ e ) </div><div class=\"line\">  &#123;</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"ArgumentNullException: &#123;0&#125;\"</span>, e );</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>( SocketException^ e ) </div><div class=\"line\">  &#123;</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"SocketException: &#123;0&#125;\"</span>, e );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"built_in\">array</span>&lt;System::String ^&gt; ^args)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  connect( <span class=\"string\">\"127.0.0.1\"</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://dl.dropbox.com/u/22280460/Simple_C%2B%2B_Client.rar\" target=\"_blank\" rel=\"external\">Click here to download the client code for Visual Studio 2010</a></p>\n<p>The file is hosted on my dropbox account so let me know if you can’t access it and I’ll re-upload it again.</p>\n<p><a href=\"/2011/06/17/textbasedrpgpart7\">Click here for part VII</a></p>\n","site":{"data":{}},"excerpt":"<p>In part six of the tutorial we build the client side code for the multiplayer game which will connect to the server. After completion of this part you can run the client code by itself to simulate a single player version of the game.</p>","more":"<p><a href=\"/2011/06/15/textbasedrpgpart5\">Click here for part V</a><br><a href=\"/2011/06/17/textbasedrpgpart7\">Click here for part VII</a></p>\n<p>In this tutorial we are going to build the client code which will be used by players to access the server where the game is hosted. However for this part of the tutorial we’re going to transition over from <a href=\"http://en.wikipedia.org/wiki/C%2B%2B\">pure C++</a> to <a href=\"http://en.wikipedia.org/wiki/C%2B%2B/CLI\">C++/CLI</a> for access to the <a href=\"http://msdn.microsoft.com/en-us/library/system.net.aspx\">.Net framework’s networking libraries</a>. If you haven’t been following this tutorial using Windows don’t feel left out because you can still take the basic ideas of networking shown here and apply them to <a href=\"http://en.wikipedia.org/wiki/BSD_sockets\">BSD sockets</a> which are used on Unix(includes Mac OS X) operating systems. Or if you are skillful enough with <a href=\"http://en.wikipedia.org/wiki/Java_Native_Interface\">Java native interfacing</a> you can port this whole program over to Java and use <a href=\"http://download.oracle.com/javase/tutorial/networking/sockets/\">Java’s networking packages</a>, and run our little game on any machine with the JRE installed.</p>\n<p>Anyways I’ll assume that for this part of the tutorial you are either running a copy of Visual Studio 2008, Visual Studio 2010 or the express edition of Visual Studio 2010. I’m personally running the professional version of Visual Studio 2010 but you can get the express version of Visual Studio 2010 here.</p>\n<p><a href=\"http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express\">Get the express version of Visual Studio 2010.</a></p>\n<!-- more -->\n<p>Install Visual Studio 2010 if you haven’t and once that is done follow the instructions below to create a new C++/CLI project.</p>\n<p>1) File -&gt; New -&gt; Project<br>2) From the project menu find Visual C++<br>3) Under Visual C++ you’ll see some listings, click the one titled CLR<br>4) Then create a new CLR Console Application by giving it a proper name<br>5) For CLR applications you need to keep the default files while adding your own source and headers so make sure your project appears similar to the picture below.</p>\n<p>This require that you create a new “main.cpp” file, so do that now and add it to the sources folder of your application. Now open up the “main.cpp” file as all of the following code snippets will reference the that file.</p>\n<p>The first thing we want to do is to reference the .Net libraries for networking, threading, text manipulation and console output. To do so, add the following lines of code.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::IO;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net::Sockets;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Text;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Threading;</div></pre></td></tr></table></figure>\n<p>As our game’s client program all it needs to do is simply connect to the server and be able to both send and receive request from it. Lets call the function connect() and have it take a single string argument which will be the servers ip address.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">( String^ server )</span></div><div class=\"line\"></span>&#123;</div></pre></td></tr></table></figure></p>\n<p>Next we need to capture two types of network exceptions, being that we will be creating a socket to stream byte code to our server they will be the ArgumentNullException and the SocketException. You can probably guess which types of errors they catch by their names so lets focus on connecting to our server. Like all exception handled code in C++/CLI we have to wrap the code responsible for throwing exceptions within a try{} block.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span></div><div class=\"line\">&#123;</div></pre></td></tr></table></figure></p>\n<p>For any <a href=\"http://en.wikipedia.org/wiki/Transmission_Control_Protocol\">tcp client</a> the basic premise is to connect to a remote server via specific port. Our game will use port 13000 and the server ip will be the argument passed to the function as a string.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Create a TcpClient.</span></div><div class=\"line\"><span class=\"comment\">// Note, for this client to work you need to have a TcpServer </span></div><div class=\"line\"><span class=\"comment\">// connected to the same address as specified by the server, port</span></div><div class=\"line\"><span class=\"comment\">// combination.</span></div><div class=\"line\">Int32 port = <span class=\"number\">13000</span>;</div><div class=\"line\">TcpClient^ client = gcnew TcpClient( server, port );</div></pre></td></tr></table></figure></p>\n<p>Now that our client is setup and knows the location of our server we now need to be able to send and receive messages on our port by setting up a network stream object. The network stream object will allow us to read and write messages(as encoded bytes) to and from the server.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Get a client stream for reading and writing.</span></div><div class=\"line\">NetworkStream^ stream = client-&gt;GetStream();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Prepare a Byte array to store the servers response</span></div><div class=\"line\"><span class=\"built_in\">array</span>&lt;Byte&gt;^ responseData = gcnew <span class=\"built_in\">array</span>&lt;Byte&gt;(<span class=\"number\">256</span>);</div></pre></td></tr></table></figure>\n<p>In addition since byte code in its raw form is practically useless to humans we’ll create a string to hold the decoded messages as ascii text.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//The repsonse text string</span></div><div class=\"line\">String^ response = String::Empty ;</div></pre></td></tr></table></figure></p>\n<p>In our client server model once the client connects to the server the server will acknowledege the connect and send out an initial message. Since all communication between the client and server takes place over the network stream we have to decode the network stream into our byte array and then decode the raw bytes into ascii so we can read the result.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Read the TcpServer's response and store it as bytes.</span></div><div class=\"line\">Int32 bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\">response = Text::Encoding::ASCII-&gt;GetString( responseData, <span class=\"number\">0</span>, bytes );</div><div class=\"line\">Console::WriteLine( response );</div></pre></td></tr></table></figure>\n<p>Much like the single player stand alone test version, we’ll still enter new commands into a console but this time the commands will get encoded and streamed over to the server.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Enter a new command as raw text </span></div><div class=\"line\">String^ command ;</div><div class=\"line\">Console::WriteLine( <span class=\"string\">\"Type a new command\\n\"</span> ) ;</div><div class=\"line\">command = Console::ReadLine() ;</div></pre></td></tr></table></figure></p>\n<p>Recall how we read data from the server, we loaded the stream into our byte array, we encoded the byte array to ascii and then we output the message to our screen. So to send messages back to the server we just reverse this process. We load a byte array with the text typed into the console.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Translate the passed command into ASCII and store it as a Byte array.</span></div><div class=\"line\"><span class=\"built_in\">array</span>&lt;Byte&gt;^ commandData = Text::Encoding::ASCII-&gt;GetBytes( command );</div></pre></td></tr></table></figure>\n<p>Lastly we’re going to re-implement the game loop, if you remember, our game will run until the user types “quit” into the command console. The game will just repeat the same process we outlined above for reading and writing across the network stream but this time within a loop.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">while</span>( command != <span class=\"string\">\"quit\"</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">// Send the command to the connected TcpServer</span></div><div class=\"line\">      stream-&gt;Write( commandData, <span class=\"number\">0</span>, commandData-&gt;Length );</div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"Sent: &#123;0&#125;\"</span>, command );</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Store the server's response</span></div><div class=\"line\">      response = String::Empty ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//If there is a message from the server capture and display it</span></div><div class=\"line\">      responseData-&gt;Clear( responseData, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\"></div><div class=\"line\">      bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//While there is a message available from the server read it</span></div><div class=\"line\">      <span class=\"keyword\">while</span>( bytes &gt; <span class=\"number\">0</span> )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = Text::Encoding::ASCII-&gt;GetString( responseData, <span class=\"number\">0</span>, bytes );</div><div class=\"line\">        Console::WriteLine( <span class=\"string\">\"Received: &#123;0&#125;\"</span>, response );</div><div class=\"line\"></div><div class=\"line\">        bytes = <span class=\"number\">0</span> ;</div><div class=\"line\">        responseData-&gt;Clear( responseData, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\">        <span class=\"keyword\">if</span>( stream-&gt;DataAvailable )</div><div class=\"line\">        &#123;</div><div class=\"line\">          bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Enter a new command as raw text </span></div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"Type a new command\\n\"</span> ) ;</div><div class=\"line\">      command = Console::ReadLine() ;</div><div class=\"line\"></div><div class=\"line\">      commandData = Text::Encoding::ASCII-&gt;GetBytes( command );</div><div class=\"line\">      stream-&gt;Write( commandData, <span class=\"number\">0</span>, commandData-&gt;Length );</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"comment\">// Close everything.</span></div><div class=\"line\">  client-&gt;Close();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Remember the exceptions we have to catch? Just add them to the end of the try block.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">catch</span>( ArgumentNullException^ e ) </div><div class=\"line\">    &#123;</div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"ArgumentNullException: &#123;0&#125;\"</span>, e );</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>( SocketException^ e ) </div><div class=\"line\">  &#123;</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"SocketException: &#123;0&#125;\"</span>, e );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now finish the client code by adding the main() method, we’ll be setting up our server on localhost so just pass 127.0.0.1 to the argument of the connect function.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"built_in\">array</span>&lt;System::String ^&gt; ^args)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  connect( <span class=\"string\">\"127.0.0.1\"</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Here is a full copy of the file “main.cpp”<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::IO;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net::Sockets;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Text;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Threading;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">( String^ server )</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">// Create a TcpClient.</span></div><div class=\"line\">    <span class=\"comment\">// Note, for this client to work you need to have a TcpServer </span></div><div class=\"line\">    <span class=\"comment\">// connected to the same address as specified by the server, port</span></div><div class=\"line\">    <span class=\"comment\">// combination.</span></div><div class=\"line\">    Int32 port = <span class=\"number\">13000</span>;</div><div class=\"line\">    TcpClient^ client = gcnew TcpClient( server, port );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Get a client stream for reading and writing.</span></div><div class=\"line\">    NetworkStream^ stream = client-&gt;GetStream();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Prepare a Byte array to store the servers response</span></div><div class=\"line\">    <span class=\"built_in\">array</span>&lt;Byte&gt;^ responseData = gcnew <span class=\"built_in\">array</span>&lt;Byte&gt;(<span class=\"number\">256</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//The repsonse text string</span></div><div class=\"line\">    String^ response = String::Empty ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Read the TcpServer's response and store it as bytes.</span></div><div class=\"line\">    Int32 bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\">    response = Text::Encoding::ASCII-&gt;GetString( responseData, <span class=\"number\">0</span>, bytes );</div><div class=\"line\">    Console::WriteLine( response );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Enter a new command as raw text </span></div><div class=\"line\">    String^ command ;</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"Type a new command\\n\"</span> ) ;</div><div class=\"line\">    command = Console::ReadLine() ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Translate the passed command into ASCII and store it as a Byte array.</span></div><div class=\"line\">    <span class=\"built_in\">array</span>&lt;Byte&gt;^ commandData = Text::Encoding::ASCII-&gt;GetBytes( command );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>( command != <span class=\"string\">\"quit\"</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">// Send the command to the connected TcpServer</span></div><div class=\"line\">      stream-&gt;Write( commandData, <span class=\"number\">0</span>, commandData-&gt;Length );</div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"Sent: &#123;0&#125;\"</span>, command );</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Store the server's response</span></div><div class=\"line\">      response = String::Empty ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//If there is a message from the server capture and display it</span></div><div class=\"line\">      responseData-&gt;Clear( responseData, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\"></div><div class=\"line\">      bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//While there is a message available from the server read it</span></div><div class=\"line\">      <span class=\"keyword\">while</span>( bytes &gt; <span class=\"number\">0</span> )</div><div class=\"line\">      &#123;</div><div class=\"line\">        response = Text::Encoding::ASCII-&gt;GetString( responseData, <span class=\"number\">0</span>, bytes );</div><div class=\"line\">        Console::WriteLine( <span class=\"string\">\"Received: &#123;0&#125;\"</span>, response );</div><div class=\"line\"></div><div class=\"line\">        bytes = <span class=\"number\">0</span> ;</div><div class=\"line\">        responseData-&gt;Clear( responseData, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\">        <span class=\"keyword\">if</span>( stream-&gt;DataAvailable )</div><div class=\"line\">        &#123;</div><div class=\"line\">          bytes = stream-&gt;Read( responseData, <span class=\"number\">0</span>, responseData-&gt;Length );</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Enter a new command as raw text </span></div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"Type a new command\\n\"</span> ) ;</div><div class=\"line\">      command = Console::ReadLine() ;</div><div class=\"line\"></div><div class=\"line\">      commandData = Text::Encoding::ASCII-&gt;GetBytes( command );</div><div class=\"line\">      stream-&gt;Write( commandData, <span class=\"number\">0</span>, commandData-&gt;Length );</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Close everything.</span></div><div class=\"line\">    client-&gt;Close();</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>( ArgumentNullException^ e ) </div><div class=\"line\">  &#123;</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"ArgumentNullException: &#123;0&#125;\"</span>, e );</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>( SocketException^ e ) </div><div class=\"line\">  &#123;</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"SocketException: &#123;0&#125;\"</span>, e );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"built_in\">array</span>&lt;System::String ^&gt; ^args)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  connect( <span class=\"string\">\"127.0.0.1\"</span> ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://dl.dropbox.com/u/22280460/Simple_C%2B%2B_Client.rar\">Click here to download the client code for Visual Studio 2010</a></p>\n<p>The file is hosted on my dropbox account so let me know if you can’t access it and I’ll re-upload it again.</p>\n<p><a href=\"/2011/06/17/textbasedrpgpart7\">Click here for part VII</a></p>"},{"title":"Build A Text Based Multiplayer RPG Part VII","date":"2011-06-17T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart7.JPG","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart7.JPG","comments":0,"_content":"The Final part of our tutorial, after completing this tutorial you will have successfully created a multiplayer text based rpg. Read on to learn how to design the game server that will connect to the client code written in part six.\n\n<!-- more -->\n[Click here for part VI][link_part_6]\n\nIn the last part of this series we're going to develop the server logic to host our game and end with a short demonstration of how it works in action. Just as you performed it in part 6, create a new Visual C++ CLR project within Visual Studio and add the following files leaving them empty for now; \"Common.h\", \"database.h\", \"server.h\", \"database.cpp\", \"main.cpp\" and \"server.cpp\". \n\nThe first file we'll write is the \"Common.h\" file. All \"Common.h\" does is declare the namespaces and set the constant values we'll be using for the server application. If you recall from part six when we set the client to access the server via port 13000, you can now see why we did so because by setting the same port on the server the server will know which port to set the listening socket to.\n\n```c\n#pragma once\n\n/// namespaces\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nusing namespace System::Text;\nusing namespace System::Threading;\nusing namespace System::Collections;\n\nnamespace NetGame\n{\n  /// Constants\n  const unsigned PORT        =  13000;\n  const unsigned MAX_PLAYERS =  2;\n}\n```\n\nNext we move to the \"database.h\" file. If you remember way back in part 1 where we outlined the code for our game I told you there was a reason why we titled the header file for the game database instead of dungeon or something. The reason as you can see now is because our game will serve like a virtual database where we'll pull out data on monsters, items and locations for players to interact with and update them whenever actions occur to propagate changes to the game world out to all players. Now go ahead and add \"database.h\" from the test project over to this project. Then copy the files for \"database.cpp\" over to this new project as well from the test. However CLR applications need to reference \"stdafx.h\" within \"database.cpp\", so add the line below.\n\n```c\n#include \"stdafx.h\"\n```\nFor the server we'll start with declaring its classes and methods within \"server.h\" so go open that file. Within \"server.h\" add the following pre-processor directives.\n```c\n#pragma once\n\n#include \"stdafx.h\"\n#include \"Common.h\"\n#include \"database.h\"\n```\nNext we'll be adding two classes, one for the server and one for managing the client connections. In C++/CLI we need to have our classes managed as well so for the server class add the declarations below.\n```c\nnamespace NetGame\n{\n  public ref class Server\n  {\n    public:\n      Server();\n      static void MsgToAll( String^ from, String^ message );\n      static void ServerMsgToAll(String^ serverMessage );\n      static void MsgToPlayer( String^ serverMessage, System::String^ playername );\n\n      TcpListener^                           gameServer;\n      static System::Collections::Hashtable^ playerNames;\n      static System::Collections::Hashtable^ playersByConnection;\n  };\n```\nThen for the client relay which is responsible for starting and stopping a thread for each new player on the server add the code below.\n```c\n    public ref class TcpRelayClient\n    {\n      public:\n        TcpRelayClient( TcpClient^ playerConnection );\n        TcpClient^     client;\n        StreamReader^  reader;\n        StreamWriter^  writer;\n        String^        player;\n\n      private: \n        void startRelay();\n        void run();\n    };\n```\nThe last two methods of the server class are specific for backwards compatibility between managed and native C++.\n```c\n  // See the link below\n  //msdn.microsoft.com/en-us/library/1b4az623(v=VS.90).aspx \n  //How to: Convert System::String to Standard String\n  void MarshalString ( String^ s, std::string& os ) ;\n  String^ toSysString( std::string ) ;\n}\n```\n<div>\nThe point of string marshaling is to allow use to translate between C++/CLI String^ and native `std::string*` pointers. Now we're ready to tackle the meat of the application, the definitions of the servers methods; open up \"server.cpp\" for editing and first add the pre-processor directives.\n</div>\n```c\n#pragma once\n\n#include \"stdafx.h\"\n#include \"server.h\"\n#include \"database.h\" \n\nusing namespace MUD ;\n```\nFor this game since we're not using an actual database lets declare all of our game objects first before accepting any connections from remote clients.\n```c\n//BEGIN creation of the game objects\nDungeon caves( 2, 21 ) ;\n\nItem* herb_a = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_b = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_c = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_d = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_e = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_f = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_g = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n\nItem* woodsword = new Item( \"woodsword\", Item::WEAPON, 10, 0, 0 ) ;\nItem* steelblade = new Item( \"steelblade\", Item::WEAPON, 20, 0, 0 ) ;\nItem* crystalsword = new Item( \"crystalsword\", Item::WEAPON, 35, 0, 0 ) ;\nItem* genjiblade = new Item( \"genjiblade\", Item::WEAPON, 60, 0, 0 ) ;\nItem* angelicsword = new Item( \"angelicsword\", Item::WEAPON, 80, 0, 0 ) ;\nItem* finalweapon = new Item( \"dragonslayer\", Item::WEAPON, 2000, 0, 0 ) ;\n\nItem* woodarmor = new Item( \"woodarmor\", Item::ARMOR, 0, 5, 15 ) ;\nItem* steelarmor = new Item( \"steelarmor\", Item::ARMOR, 0, 7, 20 ) ;\nItem* diamondarmor = new Item( \"diamondarmor\", Item::ARMOR, 0, 12, 30 ) ;\nItem* crystalarmor = new Item( \"crystalarmor\", Item::ARMOR, 0, 15, 35 ) ;\nItem* dragonarmor = new Item( \"dragonarmor\", Item::ARMOR, 0, 20, 100 ) ;\nItem* ultimatearmor = new Item( \"ultimatearmor\", Item::ARMOR, 0, 1000, 1000 ) ;\n\nMonster* bear = new Monster( \"bear\", 15, 2, 3 ) ;\nMonster* goblin = new Monster( \"goblin\", 5, 3, 1 ) ;\nMonster* imp = new Monster( \"imp\", 5, 5, 2 ) ;\nMonster* redgoblin = new Monster( \"redgoblin\", 5, 5, 5 ) ;\nMonster* demon = new Monster( \"demon\", 6, 3, 7 ) ;\nMonster* zergling = new Monster( \"zergling\", 10, 10, 9 ) ;\nMonster* bats = new Monster( \"bats\", 20, 15, 3 ) ;\nMonster* morebats = new Monster( \"morebats\", 25, 20, 15 ) ;\nMonster* golem = new Monster( \"golem\", 50, 21, 9 ) ;\nMonster* goatdemon = new Monster( \"goatdemon\", 100, 10, 10 ) ;\nMonster* cyclops = new Monster( \"cyclops\", 150, 90, 0 ) ;\nMonster* behemoth = new Monster( \"behemoth\", 250, 30, 40 ) ;\nMonster* alien = new Monster( \"alien\", 50, 21, 4 ) ;\nMonster* giantrat = new Monster( \"giantrat\", 55, 40, 1 ) ;\nMonster* fallenangel = new Monster( \"fallenangel\", 300, 100, 100 ) ;\nMonster* greatdragon = new Monster( \"greatdragon\", 500, 300, 1 ) ;\nMonster* invincibledragon = new Monster( \"invincibledragon\", 999, 999, 999 ) ;\n\nRoom* mainHall = new Room( \"The main cavern\", \"A murkey swamp cavern\", woodsword ) ;\nRoom* river = new Room( \"The black river\", \"A river with dark water\", woodarmor ) ;\nRoom* greencave = new Room( \"The greencave\", \"A moss covered cave\", herb_a ) ;\nRoom* bluecave = new Room( \"The bluecave\", \"A frosty cave\", steelblade ) ;\nRoom* darkpit = new Room( \"The darkpit\", \"An endless hole lies before you\", steelarmor ) ;\nRoom* morbidfield = new Room( \"The morbidfield\", \"Pitch black grass surrounds you\", herb_b ) ;\nRoom* graveyard = new Room( \"The graveyard\", \"Tombstones abound\", diamondarmor ) ;\nRoom* crypt = new Room( \"The crypt\", \"A nasty rotten crypt\", crystalsword ) ;\nRoom* evilpassage = new Room( \"The evil passage\", \"An evil pasage\", crystalarmor ) ;\nRoom* darklair = new Room( \"The dark lair\", \"A dark lair\", herb_c ) ;\nRoom* firepit = new Room( \"The firey pits\", \"Fire is every where\", herb_d ) ;\nRoom* greenpasture = new Room( \"The greenpastures\", \"A meadow is before you\", genjiblade ) ;\nRoom* icecave = new Room( \"The icy caves\", \"Ice everywhere you look\", herb_e ) ;\nRoom* livingroom = new Room( \"The living room\", \"The room is alive\", dragonarmor ) ;\nRoom* cellar = new Room( \"The cellar\", \"A dirty cellar filled with rats\", angelicsword ) ;\nRoom* lifespring = new Room( \"The lifespring\", \"A beautiful fountain stands\", herb_f ) ;\nRoom* waterfall = new Room( \"The waterfall\", \"Clear blue water falls\", herb_g ) ;\nRoom* hellsgate = new Room( \"The gates of hell\", \"Large rusty doors lead to hell\", ultimatearmor ) ;\nRoom* dragoncave = new Room( \"The dragon's cave\", \"An ancient cave...\" ) ;\nRoom* dragonsden = new Room( \"The dragon's den\", \"A powerful monster awaits\" ) ;\nRoom* lostforest = new Room( \"The secret forest\", \"The strongest sword lies hidden here\", finalweapon ) ;\n\nFilter filter ;\n\nDispatch dispatch ;\nchar command ;\nstring value ;\n//END creation of the game objects\n```\n\nIn a professional game setting it would be here where you would instantiate a connection to your MySQL or whatever database your using and not load the server code until the database connection has been verified; but for this simple game this will be good enough. Now that our game objects have been created, we'll start by defining the Server constructor. Within the Server constructor we want to initialize the dynamic content of the game, i.e game content which will change state throughout the execution of our game.\n\n```c\nnamespace NetGame\n{\n  Server::Server()\n  {  \n    //BEGIN linking game objects\n    mainHall->link( 'e', *river ) ;\n    river->link( 's', *greencave ) ;\n    river->link( 'e', *bluecave ) ;\n    river->link( 'w', *mainHall ) ;\n    greencave->link( 'n', *river ) ;\n    bluecave->link( 'w', *river ) ;\n    bluecave->link( 'n', *darkpit ) ;\n    darkpit->link( 's', *bluecave ) ;\n    darkpit->link( 'n', *morbidfield ) ;\n    morbidfield->link( 's', *darkpit ) ;\n    morbidfield->link( 'e', *graveyard ) ;\n    graveyard->link( 'w', *morbidfield ) ;\n    graveyard->link( 'n', *crypt ) ;\n    graveyard->link( 'e', *evilpassage ) ;\n    crypt->link( 's', *graveyard ) ;\n    evilpassage->link( 'w', *graveyard ) ;\n    evilpassage->link( 's', *darklair ) ;\n    darklair->link( 'n', *evilpassage ) ;\n    darklair->link( 's', *firepit ) ;\n    firepit->link( 'n', *darklair ) ;\n    firepit->link( 'e', *greenpasture ) ;\n    greenpasture->link( 'w', *firepit ) ;\n    greenpasture->link( 's', *icecave ) ;\n    greenpasture->link( 'e', *livingroom ) ;\n    icecave->link( 'n', *greenpasture ) ;\n    livingroom->link( 'w', *greenpasture ) ;\n    livingroom->link( 'e', *cellar ) ;\n    cellar->link( 'w', *livingroom ) ;\n    cellar->link( 'n', *lifespring ) ;\n    cellar->link( 'e', *hellsgate ) ;\n    lifespring->link( 's', *cellar ) ;\n    lifespring->link( 'n', *waterfall ) ;\n    waterfall->link( 's', *lifespring ) ;\n    hellsgate->link( 'w', *cellar ) ;\n    hellsgate->link( 'e', *dragoncave ) ;\n    dragoncave->link( 'w', *hellsgate ) ;\n    dragoncave->link( 'e', *dragonsden ) ;\n    dragonsden->link( 'w', *dragoncave ) ;\n    dragonsden->link( 'e', *lostforest ) ;\n    lostforest->link( 'w', *dragonsden ) ;\n\n    mainHall->addMonster( goblin ) ;\n    mainHall->addMonster( imp ) ;\n    river->addMonster( bear ) ;\n    river->addMonster( redgoblin ) ;\n    bluecave->addMonster( demon ) ;\n    bluecave->addMonster( zergling ) ;\n    morbidfield->addMonster( bats ) ;\n    morbidfield->addMonster( morebats ) ;\n    graveyard->addMonster( golem ) ;\n    evilpassage->addMonster( goatdemon ) ;\n    firepit->addMonster( cyclops ) ;\n    greenpasture->addMonster( behemoth ) ;\n    livingroom->addMonster( alien ) ;\n    cellar->addMonster( giantrat ) ;\n    hellsgate->addMonster( fallenangel ) ;\n    dragoncave->addMonster( greatdragon ) ;\n    dragonsden->addMonster( invincibledragon ) ;\n\n    caves.addRoom( mainHall ) ;\n    caves.addRoom( river ) ;\n    caves.addRoom( greencave ) ;\n    caves.addRoom( bluecave ) ;\n    caves.addRoom( darkpit ) ;\n    caves.addRoom( morbidfield ) ;\n    caves.addRoom( graveyard ) ;\n    caves.addRoom( crypt ) ;\n    caves.addRoom( evilpassage ) ;\n    caves.addRoom( darklair ) ;\n    caves.addRoom( firepit ) ;\n    caves.addRoom( greenpasture ) ;\n    caves.addRoom( icecave ) ;\n    caves.addRoom( livingroom ) ;\n    caves.addRoom( cellar ) ;\n    caves.addRoom( lifespring ) ;\n    caves.addRoom( waterfall ) ;\n    caves.addRoom( hellsgate ) ;\n    caves.addRoom( dragoncave ) ;\n    caves.addRoom( dragonsden ) ;\n    caves.addRoom( lostforest ) ;\n    //END linking game objects\n```\nNext we'll set the options for the game, open up the server on our desired port and begin accepting player connections.\n```c\n    // MAX_PLAYERS and PORT can be set in Common.h\n    bool running            =  true;\n    playerNames             =  gcnew Hashtable( MAX_PLAYERS );\n    playersByConnection     =  gcnew Hashtable( MAX_PLAYERS );\n\n    gameServer              =  gcnew TcpListener( PORT );\n    gameServer->Start();\n```\nNow that the server is started you want to run the servers connection loop to keep it in a pending state for new players\n```c\n      // Server loop is infinite since we have to close the program\n      // manually when we want the server to stop.\n      while ( true )\n      {\n        if ( gameServer->Pending() )\n      }\n    TcpClient^ playerConnection = gameServer->AcceptTcpClient();\n    Console::WriteLine( \"SERVER: New player now connected! \"  ); \n    gcnew TcpRelayClient( playerConnection );\n  }\n}\n}\n```\nThe next method to define is the global messaging method which can send messages from the server to all players. This is a key feature for our game because we can easily alert players of events such as when a new player connects and or other things.\nThe code might look confusing at first but all we're doing is gathering up all the open player connections into a array of Sockets and iterating through each socket and pushing a copy of the message out. Oh and we also catch the exception if the socket connection failed, then we just remove it from the server's list(remember the playersconnections HashTable from server.h).\n```c\nvoid Server::MsgToAll( String^ from, String^ message )\n{\n  StreamWriter^ serverwriter;\n  ArrayList^ toRemove = gcnew ArrayList( 0 );\n\n  array<Sockets::TcpClient^>^  tcpClients =  gcnew array<Sockets::TcpClient^>( playerNames->Count );\n\n  Server::playerNames->Values->CopyTo(tcpClients, 0); \n  for ( int count = 0; count < tcpClients->Length; ++count )\n  {\n    try\n    {\n      if (message->Trim() == \"\" || tcpClients[count] == nullptr )  \n        continue;  \n      serverwriter =  gcnew StreamWriter(tcpClients[ count ]->GetStream());  \n      //write our message to the window  \n      serverwriter->WriteLine(from + \": \" + message);  \n      //make sure all bytes are written  \n      serverwriter->Flush();  \n      //dispose of the writer object until needed again  \n      serverwriter = nullptr;  \n\n    }\n    catch ( Exception^ error_44 )\n    {\n      error_44 = error_44;\n      String^ name = (String^)playersByConnection[tcpClients[count]];  \n      //send the message that the user has left  \n      Server::ServerMsgToAll(\"** \" + name + \" ** Has Left The Room.\");  \n      //remove the name from playernames list\n      Server::playerNames->Remove( name );\n      //remove that index of the array, thus freeing it up  \n      //for another user  \n      Server::playersByConnection->Remove(tcpClients[count]);  \n    }\n  }\n}\n```\n\nNext we'll write the code for the ServerMsgToAll, the thing about this method is that its only used to report back to the server admin the messages sent via MsgToAll when an exception occurred. The logic behind the method is similar to MsgToAll so enter the code below.\n\n```c\nvoid Server::ServerMsgToAll(String^ serverMessage )\n{\n  StreamWriter^ serverwriter;\n\n  array<Sockets::TcpClient^>^  tcpClients =  gcnew array<Sockets::TcpClient^>( playerNames->Count );\n\n  Server::playerNames->Values->CopyTo(tcpClients, 0); \n\n  for ( int count = 0; count < tcpClients->Length; ++count )\n  {\n    try\n    {\n      if (serverMessage->Trim() == \"\" || tcpClients[count] == nullptr )  \n        continue;  \n      serverwriter =  gcnew StreamWriter(tcpClients[ count ]->GetStream());  \n      //write our message to the window  \n      serverwriter->WriteLine( serverMessage );  \n      //make sure all bytes are written  \n      serverwriter->Flush();  \n      //dispose of the writer object until needed again  \n      serverwriter = nullptr;  \n      Console::WriteLine( \"SERVER SENT:\" + \" has joined the game\" );\n\n    }\n    catch ( Exception^ error_44 )\n    {\n      error_44 = error_44;\n      String^ name = (String^)playersByConnection[tcpClients[count]];  \n\n      Server::playerNames->Remove( name );\n      //remove that index of the array, thus freeing it up  \n      //for another user  \n      Server::playersByConnection->Remove(tcpClients[count]);  \n    }\n  } \n}\n```\n\nMsgToPlayer is similar again to the previous two methods except that the MsgToPlayer accepts an additional parameter for the player name of who you wish to direct the message at. The player name is reference by looking up the playerNames hash table using the player name as the key.\n\n```c\nvoid Server::MsgToPlayer(String^ serverMessage, System::String^ playername)\n{\n  StreamWriter^ serverwriter;\n\n  array<Sockets::TcpClient^>^ tcpClients = gcnew array<Sockets::TcpClient^>( playerNames->Count );\n\n  Server::playerNames->Values->CopyTo(tcpClients, 0); \n\n  for ( int count = 0; count < tcpClients->Length; ++count )\n  {\n    try\n    {\n      if (serverMessage->Trim() == \"\" || tcpClients[count] == nullptr )  \n        continue;  \n\n      if( playerNames->ContainsKey( playername ) )\n      {\n        serverwriter =  gcnew StreamWriter(tcpClients[ count ]->GetStream());  \n        //write our message to the window  \n        serverwriter->WriteLine( serverMessage );  \n        //make sure all bytes are written  \n        serverwriter->Flush();  \n        //dispose of the writer object until needed again  \n        serverwriter = nullptr;  \n        Console::WriteLine( \"SERVER SENT: \" + serverMessage + \" to \" + playername );\n      }\n    }\n    catch ( Exception^ error_44 )\n    {\n      error_44 = error_44;\n      String^ name = (String^)playersByConnection[tcpClients[count]];  \n\n      Server::playerNames->Remove( name );\n      //remove that index of the array, thus freeing it up  \n      //for another user  \n      Server::playersByConnection->Remove(tcpClients[count]);  \n    }\n  } \n}\n```\nThe next method just handles the case when a new player connection has been made.\n```c\n// When a new player connects to the server spawn a thread that will\n// run the game loop.\nTcpRelayClient::TcpRelayClient( TcpClient^ playerConnection )\n{\n  client =  playerConnection;\n  Thread^   playerRelayThread   = gcnew Thread( \n      gcnew ThreadStart( this, & NetGame::TcpRelayClient::startRelay ) );\n\n  playerRelayThread->Start();\n}\n```\nIf you look at the last method you'll notice that for each player connection we spawn a new thread on the server with the startRelay() method. The startRelay() method was chosen because its the method which runs all the logic for interacting with our game database. For the most part the startRelay() method consist of the same game loop from the test version of the game, you'll notice it soon but before that the initialization for the game loop is where the new code is. To start we setup both a stream writer and stream reader to send and receive messages from the player on the thread.\n```c\n// When we start a new thread for a player who just connected,\n// this is the method the thread runs.\n// In short this is the game loop the player interacts with.\nvoid TcpRelayClient::startRelay( )\n{  \n  reader = gcnew StreamReader( client->GetStream() );\n  // Writer sends messages out to the client whos connection\n  // is running on this thread.\n  writer = gcnew StreamWriter( client->GetStream() );\n\n  NetworkStream^ netReader = client->GetStream();\n```\nJust before we actually let the player begin sending new commands we have to store the player's name within our players hashtable. Please note that for this simple game we don't double check that two players will have the exact same name because we aren't building this game to support thousands of players, so our collision prone hashtables are good enough. Ok so lets get the players name, store it within the player hashtables and then let them play.\n```c\n  writer->WriteLine( \"New Game \" );\n  Console::WriteLine( \"SERVER: Getting the new users Name \" );\n  writer->WriteLine( \"Enter a new name for your charecter\" );\n  writer->Flush();\n  Console::WriteLine( \"SERVER SENT: Enter a new name for your character\" );\n\n  // Read the player's response\n  array<Byte, 1>^  bytesFromClient = gcnew array<Byte, 1>(256);\n  String^ strFromClient = String::Empty ;\n  Int32 bytes = 0 ;\n  bytes = netReader->Read( bytesFromClient, 0, bytesFromClient->Length ) ;\n  strFromClient = Text::Encoding::ASCII->GetString( bytesFromClient, 0, bytes );\n  player = strFromClient ;\n\n  // Add the player to the hash tables as a new key value pair\n  Console::WriteLine( player + \" has joined the game\" );\n  Server::playerNames->Add( player, client ); \n  Server::playersByConnection->Add( client, player );\n  String^ message ;\n\n  Thread^ playerConnect = gcnew Thread( \n      gcnew ThreadStart( this, & NetGame::TcpRelayClient::run ) );\n\n  playerConnect->Start();\n```\nFinally we can insert the code for the game loop which is directly extracted from the test game but with some slight additions to how the strings are processed. If you can recall from \"server.h\" there were two methods, MarshalString and toSysString. Marshal string converts a given managed string or a System::String to native std::string, while toSysString does exactly what it says it does.\n\n```c\n  //ALL THE CODE BELOW IS THE ACTUAL GAME LOOP\n  //Create a new player and add to the Dungeon \n  string output ;\n  string input ;\n  String^ tempStr = nullptr ;\n\n  string playerName ;\n  // MarshalString converts a managed String^ to a native string\n  MarshalString( player, playerName ) ; \n  Player* thePlayer = new Player( playerName, mainHall ) ;\n  output = caves.addPlayer( thePlayer ) ;\n\n  //Let all players know of the new player\n  message = toSysString( output ) ;\n\n  //Display needed info for the players\n  output = \"\\nDefeat all monsters\" ;\n  output += \"\\nEnter a new command to start, for help menu enter\" ;\n  output += \"\\nhelp:\" ;\n  output += \"\\nTo quit enter \\\"quit\\\"\" ;\n  message += toSysString( output ) ;\n  Server::MsgToPlayer( message, player ) ;\n\n  //Get client command\n  bytesFromClient->Clear( bytesFromClient, 0, 256 ) ;\n  bytes = netReader->Read( bytesFromClient, 0, bytesFromClient->Length ) ;\n  strFromClient = Text::Encoding::ASCII->GetString( bytesFromClient, 0, bytes ); \n  MarshalString( strFromClient, input ) ;\n\n  //Start the game loop\n  while( input != \"quit\" )\n  {\n    //Pass the users message through the filter\n    if( filter.validateMessage( input ) )\n    {\n      //Split the users message into a command and value pair\n      command = dispatch.extractCommand( input ) ;\n      value = dispatch.extractValue( input ) ;\n\n      //Match the command and forward the value\n      switch( command )\n      {\n        case 'a': //Attack \n          //If the monster does not exist or the name was mispelled\n          if( &(thePlayer->mLocation->getMonsterRef( value )) == NULL )\n          {\n            //cout << \"There is no \" + value + \" at this location\" << endl ;\n            output = \"There is no \" + value + \" at this location\" ;\n            message = toSysString( output ) ;\n            Server::MsgToPlayer( message, player ) ;\n            break ;\n          }\n          //If the monster is there but in combat the player cannot fight it\n          if( thePlayer->mLocation->getMonsterRef( value ).inCombat == true )\n          {\n            //cout << \"The \" + value + \" is currently fighting\" << endl ;\n            output = \"The \" + value + \" is currently fighting\" ;\n            message = toSysString( output ) ;\n            Server::MsgToPlayer( message, player ) ;\n            break ;\n          }\n          caves.combatLoop( *thePlayer, thePlayer->mLocation->getMonsterRef( value ) ) ;\n          output = \"combat has finished\" ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n\n        case 'm': //Move\n          //cout << thePlayer->move( value[0] ) ;\n          output = thePlayer->move( value[0] ) ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n\n        case 'f': //Find\n          //cout << thePlayer->search() ;\n          output = thePlayer->search() ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n\n        case 'l': //Location\n          //cout << thePlayer->getLocation() ;\n          output = thePlayer->getLocation() ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n\n        case 'e': //Equip\n          //cout << thePlayer->equip( value ) ;\n          output = thePlayer->equip( value ) ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n\n        case 'y': //You\n          {\n            string* playerStats = new string ;\n            playerStats = caves.playerStatus( *thePlayer ) ;\n\n            for( int i = 0 ; i < 7 ; ++i )\n            {\n              //cout << playerStats[i] << endl ;\n              output = playerStats[i] ;\n              message = toSysString( output ) ;\n              Server::MsgToPlayer( message, player ) ;\n            }\n\n            playerStats = NULL ;\n            delete playerStats ;\n          }\n          break ;\n\n        case 't': //Talk\n          output = value ;\n          message = toSysString( output ) ;\n          Server::MsgToAll( player, message ) ;\n          break ;\n\n        case 'h': //Help Menu\n          //cout << \"a: mv: find: loc: eq: you: t: help:\" << endl ;\n          output = \"a: mv: find: loc: eq: you: t: help:\" ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n      }\n    }\n    else\n    {\n      //cout << \"Invalid command\" << endl ;\n      output = \"Invalid command\" ;\n      message = toSysString( output ) ;\n      Server::MsgToPlayer( message, player ) ;\n    }\n\n    if( caves.isComplete() )\n    {\n      //cout << \"Dungeon Cleared, YOU WIN!\" << endl ;\n      output = \"Dungeon Cleared, YOU WIN!\" ;\n      message = toSysString( output ) ;\n      Server::MsgToAll( player, message ) ;\n      break ;\n    }\n\n    if( thePlayer->death() )\n    {\n      //cout << thePlayer->getName() + \" was slain by the \" + thePlayer->mLocation->getMonsterRef( value ).getName() << endl ;\n      //output = thePlayer->getName() + \" was slain by the \" + thePlayer->mLocation->getMonsterRef( value ).getName() ;\n      output = \"slain type quit to continue\" ;\n      message = toSysString( output ) ;\n      Server::MsgToPlayer( message, player ) ;\n      thePlayer->mLocation->getMonsterRef( value ).inCombat = false ;\n      break ;\n    }\n    else\n    {\n      //Get the next command\n      //cout << \"\\n\\nNew Command\" << endl ;\n      //cin >> input ;\n      //bytes = 0 ;\n      bytesFromClient->Clear( bytesFromClient, 0, 256 ) ;\n      bytes = netReader->Read( bytesFromClient, 0, bytesFromClient->Length ) ;\n      strFromClient = Text::Encoding::ASCII->GetString( bytesFromClient, 0, bytes ); \n      MarshalString( strFromClient, input ) ;\n    }\n  }\n  //End of game loop\n}\n```\nBefore we demo our fully functional multiplayer game we have to add the last utility methods for string processing and for logging of the games actions to the server's console.\n```c\n// When running is set to true during initialization of the server\n// which happens when the server constructor is called, this will\n// begin the loop which just displays all game info to the \n// server admin. Think of it as a log of all the players actions.\nvoid  TcpRelayClient::run()\n{\n  bool running = true;\n\n  try\n  {\n    String^ line = \"\";\n    while ( running )\n    {\n      if ( client->Connected )\n      {\n        line = reader->ReadLine();\n        Server::MsgToAll( player,  line );\n      }\n      else\n      {\n        running = false;            \n      }\n    }\n  }\n  catch ( Exception^ eRun )\n  {\n    Console::WriteLine( \"EXCEPTION\" +  eRun->Message + \"\\nThe player named: \" + player + \" has disconnected, the server continues\" );\n  }\n}\n\n// Converts a managed string to a native string \nvoid MarshalString ( String ^ s, string& os ) \n{\n  using namespace Runtime::InteropServices;\n  const char* chars = (const char*)(Marshal::StringToHGlobalAnsi(s)).ToPointer();\n  os = chars;\n  Marshal::FreeHGlobal(IntPtr((void*)chars));\n}\n\n// Converts a native string to a managed one\nString^ toSysString( std::string output )\n{\n  String^ tempStr = gcnew String( output.c_str() ) ;\n\n  return tempStr ;\n}\n}\n```\nNow open up the file \"main.cpp\" and run the server, we run the server via the constructor method so as soon as you create the server it will pend for request on 127.0.0.1 port 13000 for new players.\n\nFor the demo what you'll need to do is to open up three instances of Visual Studio. One instance will run the server, so open up the server project on the first one while the second and third instances will each run clients; so open up the client project on the other two. Once you have all three open the first step is to start the server.\n\nThen launch the second client and give this new player a name.\n\nNow switch back to the first client enter the following commands, \"eq:woodsword\" and then \"a:imp\" this will have the effect of equipping the woodsword item from the Main Hall and killing the imp monster. Finally switch back over to the second client and enter the following command \"find:\", you will notice that both the woodsword and the imp have cannot be found as they were both taken care of by the first player. You have just finished writing a simple text based multiplayer RPG.\n\nOnce again the two files below, the one for the server and the one for the client are hosted on my dropbox account, so if at any time they aren't accessible(I often move files around and don't clean up dead links) and put a request into the comments section.\n\n<a href=\"http://dl.dropbox.com/u/22280460/Simple_RPG_Client.rar\">Click here to download the client application</a>\n<a href=\"http://dl.dropbox.com/u/22280460/Simple_RPG_Server.rar\">Click here to download the server application</a>\n\n[link_part_6]: /2011/06/16/textbasedrpgpart6\n","source":"_posts/textbasedrpgpart7.md","raw":"---\ntitle: Build A Text Based Multiplayer RPG Part VII\ndate: 2011-06-17\ncategories: [tutorial]\ntags: [cpp]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart7.JPG\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/textbasedrpgpart7.JPG\ncomments: false\n---\nThe Final part of our tutorial, after completing this tutorial you will have successfully created a multiplayer text based rpg. Read on to learn how to design the game server that will connect to the client code written in part six.\n\n<!-- more -->\n[Click here for part VI][link_part_6]\n\nIn the last part of this series we're going to develop the server logic to host our game and end with a short demonstration of how it works in action. Just as you performed it in part 6, create a new Visual C++ CLR project within Visual Studio and add the following files leaving them empty for now; \"Common.h\", \"database.h\", \"server.h\", \"database.cpp\", \"main.cpp\" and \"server.cpp\". \n\nThe first file we'll write is the \"Common.h\" file. All \"Common.h\" does is declare the namespaces and set the constant values we'll be using for the server application. If you recall from part six when we set the client to access the server via port 13000, you can now see why we did so because by setting the same port on the server the server will know which port to set the listening socket to.\n\n```c\n#pragma once\n\n/// namespaces\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nusing namespace System::Text;\nusing namespace System::Threading;\nusing namespace System::Collections;\n\nnamespace NetGame\n{\n  /// Constants\n  const unsigned PORT        =  13000;\n  const unsigned MAX_PLAYERS =  2;\n}\n```\n\nNext we move to the \"database.h\" file. If you remember way back in part 1 where we outlined the code for our game I told you there was a reason why we titled the header file for the game database instead of dungeon or something. The reason as you can see now is because our game will serve like a virtual database where we'll pull out data on monsters, items and locations for players to interact with and update them whenever actions occur to propagate changes to the game world out to all players. Now go ahead and add \"database.h\" from the test project over to this project. Then copy the files for \"database.cpp\" over to this new project as well from the test. However CLR applications need to reference \"stdafx.h\" within \"database.cpp\", so add the line below.\n\n```c\n#include \"stdafx.h\"\n```\nFor the server we'll start with declaring its classes and methods within \"server.h\" so go open that file. Within \"server.h\" add the following pre-processor directives.\n```c\n#pragma once\n\n#include \"stdafx.h\"\n#include \"Common.h\"\n#include \"database.h\"\n```\nNext we'll be adding two classes, one for the server and one for managing the client connections. In C++/CLI we need to have our classes managed as well so for the server class add the declarations below.\n```c\nnamespace NetGame\n{\n  public ref class Server\n  {\n    public:\n      Server();\n      static void MsgToAll( String^ from, String^ message );\n      static void ServerMsgToAll(String^ serverMessage );\n      static void MsgToPlayer( String^ serverMessage, System::String^ playername );\n\n      TcpListener^                           gameServer;\n      static System::Collections::Hashtable^ playerNames;\n      static System::Collections::Hashtable^ playersByConnection;\n  };\n```\nThen for the client relay which is responsible for starting and stopping a thread for each new player on the server add the code below.\n```c\n    public ref class TcpRelayClient\n    {\n      public:\n        TcpRelayClient( TcpClient^ playerConnection );\n        TcpClient^     client;\n        StreamReader^  reader;\n        StreamWriter^  writer;\n        String^        player;\n\n      private: \n        void startRelay();\n        void run();\n    };\n```\nThe last two methods of the server class are specific for backwards compatibility between managed and native C++.\n```c\n  // See the link below\n  //msdn.microsoft.com/en-us/library/1b4az623(v=VS.90).aspx \n  //How to: Convert System::String to Standard String\n  void MarshalString ( String^ s, std::string& os ) ;\n  String^ toSysString( std::string ) ;\n}\n```\n<div>\nThe point of string marshaling is to allow use to translate between C++/CLI String^ and native `std::string*` pointers. Now we're ready to tackle the meat of the application, the definitions of the servers methods; open up \"server.cpp\" for editing and first add the pre-processor directives.\n</div>\n```c\n#pragma once\n\n#include \"stdafx.h\"\n#include \"server.h\"\n#include \"database.h\" \n\nusing namespace MUD ;\n```\nFor this game since we're not using an actual database lets declare all of our game objects first before accepting any connections from remote clients.\n```c\n//BEGIN creation of the game objects\nDungeon caves( 2, 21 ) ;\n\nItem* herb_a = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_b = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_c = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_d = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_e = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_f = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\nItem* herb_g = new Item( \"herb\", Item::HEALTH, 0, 0, 0 ) ;\n\nItem* woodsword = new Item( \"woodsword\", Item::WEAPON, 10, 0, 0 ) ;\nItem* steelblade = new Item( \"steelblade\", Item::WEAPON, 20, 0, 0 ) ;\nItem* crystalsword = new Item( \"crystalsword\", Item::WEAPON, 35, 0, 0 ) ;\nItem* genjiblade = new Item( \"genjiblade\", Item::WEAPON, 60, 0, 0 ) ;\nItem* angelicsword = new Item( \"angelicsword\", Item::WEAPON, 80, 0, 0 ) ;\nItem* finalweapon = new Item( \"dragonslayer\", Item::WEAPON, 2000, 0, 0 ) ;\n\nItem* woodarmor = new Item( \"woodarmor\", Item::ARMOR, 0, 5, 15 ) ;\nItem* steelarmor = new Item( \"steelarmor\", Item::ARMOR, 0, 7, 20 ) ;\nItem* diamondarmor = new Item( \"diamondarmor\", Item::ARMOR, 0, 12, 30 ) ;\nItem* crystalarmor = new Item( \"crystalarmor\", Item::ARMOR, 0, 15, 35 ) ;\nItem* dragonarmor = new Item( \"dragonarmor\", Item::ARMOR, 0, 20, 100 ) ;\nItem* ultimatearmor = new Item( \"ultimatearmor\", Item::ARMOR, 0, 1000, 1000 ) ;\n\nMonster* bear = new Monster( \"bear\", 15, 2, 3 ) ;\nMonster* goblin = new Monster( \"goblin\", 5, 3, 1 ) ;\nMonster* imp = new Monster( \"imp\", 5, 5, 2 ) ;\nMonster* redgoblin = new Monster( \"redgoblin\", 5, 5, 5 ) ;\nMonster* demon = new Monster( \"demon\", 6, 3, 7 ) ;\nMonster* zergling = new Monster( \"zergling\", 10, 10, 9 ) ;\nMonster* bats = new Monster( \"bats\", 20, 15, 3 ) ;\nMonster* morebats = new Monster( \"morebats\", 25, 20, 15 ) ;\nMonster* golem = new Monster( \"golem\", 50, 21, 9 ) ;\nMonster* goatdemon = new Monster( \"goatdemon\", 100, 10, 10 ) ;\nMonster* cyclops = new Monster( \"cyclops\", 150, 90, 0 ) ;\nMonster* behemoth = new Monster( \"behemoth\", 250, 30, 40 ) ;\nMonster* alien = new Monster( \"alien\", 50, 21, 4 ) ;\nMonster* giantrat = new Monster( \"giantrat\", 55, 40, 1 ) ;\nMonster* fallenangel = new Monster( \"fallenangel\", 300, 100, 100 ) ;\nMonster* greatdragon = new Monster( \"greatdragon\", 500, 300, 1 ) ;\nMonster* invincibledragon = new Monster( \"invincibledragon\", 999, 999, 999 ) ;\n\nRoom* mainHall = new Room( \"The main cavern\", \"A murkey swamp cavern\", woodsword ) ;\nRoom* river = new Room( \"The black river\", \"A river with dark water\", woodarmor ) ;\nRoom* greencave = new Room( \"The greencave\", \"A moss covered cave\", herb_a ) ;\nRoom* bluecave = new Room( \"The bluecave\", \"A frosty cave\", steelblade ) ;\nRoom* darkpit = new Room( \"The darkpit\", \"An endless hole lies before you\", steelarmor ) ;\nRoom* morbidfield = new Room( \"The morbidfield\", \"Pitch black grass surrounds you\", herb_b ) ;\nRoom* graveyard = new Room( \"The graveyard\", \"Tombstones abound\", diamondarmor ) ;\nRoom* crypt = new Room( \"The crypt\", \"A nasty rotten crypt\", crystalsword ) ;\nRoom* evilpassage = new Room( \"The evil passage\", \"An evil pasage\", crystalarmor ) ;\nRoom* darklair = new Room( \"The dark lair\", \"A dark lair\", herb_c ) ;\nRoom* firepit = new Room( \"The firey pits\", \"Fire is every where\", herb_d ) ;\nRoom* greenpasture = new Room( \"The greenpastures\", \"A meadow is before you\", genjiblade ) ;\nRoom* icecave = new Room( \"The icy caves\", \"Ice everywhere you look\", herb_e ) ;\nRoom* livingroom = new Room( \"The living room\", \"The room is alive\", dragonarmor ) ;\nRoom* cellar = new Room( \"The cellar\", \"A dirty cellar filled with rats\", angelicsword ) ;\nRoom* lifespring = new Room( \"The lifespring\", \"A beautiful fountain stands\", herb_f ) ;\nRoom* waterfall = new Room( \"The waterfall\", \"Clear blue water falls\", herb_g ) ;\nRoom* hellsgate = new Room( \"The gates of hell\", \"Large rusty doors lead to hell\", ultimatearmor ) ;\nRoom* dragoncave = new Room( \"The dragon's cave\", \"An ancient cave...\" ) ;\nRoom* dragonsden = new Room( \"The dragon's den\", \"A powerful monster awaits\" ) ;\nRoom* lostforest = new Room( \"The secret forest\", \"The strongest sword lies hidden here\", finalweapon ) ;\n\nFilter filter ;\n\nDispatch dispatch ;\nchar command ;\nstring value ;\n//END creation of the game objects\n```\n\nIn a professional game setting it would be here where you would instantiate a connection to your MySQL or whatever database your using and not load the server code until the database connection has been verified; but for this simple game this will be good enough. Now that our game objects have been created, we'll start by defining the Server constructor. Within the Server constructor we want to initialize the dynamic content of the game, i.e game content which will change state throughout the execution of our game.\n\n```c\nnamespace NetGame\n{\n  Server::Server()\n  {  \n    //BEGIN linking game objects\n    mainHall->link( 'e', *river ) ;\n    river->link( 's', *greencave ) ;\n    river->link( 'e', *bluecave ) ;\n    river->link( 'w', *mainHall ) ;\n    greencave->link( 'n', *river ) ;\n    bluecave->link( 'w', *river ) ;\n    bluecave->link( 'n', *darkpit ) ;\n    darkpit->link( 's', *bluecave ) ;\n    darkpit->link( 'n', *morbidfield ) ;\n    morbidfield->link( 's', *darkpit ) ;\n    morbidfield->link( 'e', *graveyard ) ;\n    graveyard->link( 'w', *morbidfield ) ;\n    graveyard->link( 'n', *crypt ) ;\n    graveyard->link( 'e', *evilpassage ) ;\n    crypt->link( 's', *graveyard ) ;\n    evilpassage->link( 'w', *graveyard ) ;\n    evilpassage->link( 's', *darklair ) ;\n    darklair->link( 'n', *evilpassage ) ;\n    darklair->link( 's', *firepit ) ;\n    firepit->link( 'n', *darklair ) ;\n    firepit->link( 'e', *greenpasture ) ;\n    greenpasture->link( 'w', *firepit ) ;\n    greenpasture->link( 's', *icecave ) ;\n    greenpasture->link( 'e', *livingroom ) ;\n    icecave->link( 'n', *greenpasture ) ;\n    livingroom->link( 'w', *greenpasture ) ;\n    livingroom->link( 'e', *cellar ) ;\n    cellar->link( 'w', *livingroom ) ;\n    cellar->link( 'n', *lifespring ) ;\n    cellar->link( 'e', *hellsgate ) ;\n    lifespring->link( 's', *cellar ) ;\n    lifespring->link( 'n', *waterfall ) ;\n    waterfall->link( 's', *lifespring ) ;\n    hellsgate->link( 'w', *cellar ) ;\n    hellsgate->link( 'e', *dragoncave ) ;\n    dragoncave->link( 'w', *hellsgate ) ;\n    dragoncave->link( 'e', *dragonsden ) ;\n    dragonsden->link( 'w', *dragoncave ) ;\n    dragonsden->link( 'e', *lostforest ) ;\n    lostforest->link( 'w', *dragonsden ) ;\n\n    mainHall->addMonster( goblin ) ;\n    mainHall->addMonster( imp ) ;\n    river->addMonster( bear ) ;\n    river->addMonster( redgoblin ) ;\n    bluecave->addMonster( demon ) ;\n    bluecave->addMonster( zergling ) ;\n    morbidfield->addMonster( bats ) ;\n    morbidfield->addMonster( morebats ) ;\n    graveyard->addMonster( golem ) ;\n    evilpassage->addMonster( goatdemon ) ;\n    firepit->addMonster( cyclops ) ;\n    greenpasture->addMonster( behemoth ) ;\n    livingroom->addMonster( alien ) ;\n    cellar->addMonster( giantrat ) ;\n    hellsgate->addMonster( fallenangel ) ;\n    dragoncave->addMonster( greatdragon ) ;\n    dragonsden->addMonster( invincibledragon ) ;\n\n    caves.addRoom( mainHall ) ;\n    caves.addRoom( river ) ;\n    caves.addRoom( greencave ) ;\n    caves.addRoom( bluecave ) ;\n    caves.addRoom( darkpit ) ;\n    caves.addRoom( morbidfield ) ;\n    caves.addRoom( graveyard ) ;\n    caves.addRoom( crypt ) ;\n    caves.addRoom( evilpassage ) ;\n    caves.addRoom( darklair ) ;\n    caves.addRoom( firepit ) ;\n    caves.addRoom( greenpasture ) ;\n    caves.addRoom( icecave ) ;\n    caves.addRoom( livingroom ) ;\n    caves.addRoom( cellar ) ;\n    caves.addRoom( lifespring ) ;\n    caves.addRoom( waterfall ) ;\n    caves.addRoom( hellsgate ) ;\n    caves.addRoom( dragoncave ) ;\n    caves.addRoom( dragonsden ) ;\n    caves.addRoom( lostforest ) ;\n    //END linking game objects\n```\nNext we'll set the options for the game, open up the server on our desired port and begin accepting player connections.\n```c\n    // MAX_PLAYERS and PORT can be set in Common.h\n    bool running            =  true;\n    playerNames             =  gcnew Hashtable( MAX_PLAYERS );\n    playersByConnection     =  gcnew Hashtable( MAX_PLAYERS );\n\n    gameServer              =  gcnew TcpListener( PORT );\n    gameServer->Start();\n```\nNow that the server is started you want to run the servers connection loop to keep it in a pending state for new players\n```c\n      // Server loop is infinite since we have to close the program\n      // manually when we want the server to stop.\n      while ( true )\n      {\n        if ( gameServer->Pending() )\n      }\n    TcpClient^ playerConnection = gameServer->AcceptTcpClient();\n    Console::WriteLine( \"SERVER: New player now connected! \"  ); \n    gcnew TcpRelayClient( playerConnection );\n  }\n}\n}\n```\nThe next method to define is the global messaging method which can send messages from the server to all players. This is a key feature for our game because we can easily alert players of events such as when a new player connects and or other things.\nThe code might look confusing at first but all we're doing is gathering up all the open player connections into a array of Sockets and iterating through each socket and pushing a copy of the message out. Oh and we also catch the exception if the socket connection failed, then we just remove it from the server's list(remember the playersconnections HashTable from server.h).\n```c\nvoid Server::MsgToAll( String^ from, String^ message )\n{\n  StreamWriter^ serverwriter;\n  ArrayList^ toRemove = gcnew ArrayList( 0 );\n\n  array<Sockets::TcpClient^>^  tcpClients =  gcnew array<Sockets::TcpClient^>( playerNames->Count );\n\n  Server::playerNames->Values->CopyTo(tcpClients, 0); \n  for ( int count = 0; count < tcpClients->Length; ++count )\n  {\n    try\n    {\n      if (message->Trim() == \"\" || tcpClients[count] == nullptr )  \n        continue;  \n      serverwriter =  gcnew StreamWriter(tcpClients[ count ]->GetStream());  \n      //write our message to the window  \n      serverwriter->WriteLine(from + \": \" + message);  \n      //make sure all bytes are written  \n      serverwriter->Flush();  \n      //dispose of the writer object until needed again  \n      serverwriter = nullptr;  \n\n    }\n    catch ( Exception^ error_44 )\n    {\n      error_44 = error_44;\n      String^ name = (String^)playersByConnection[tcpClients[count]];  \n      //send the message that the user has left  \n      Server::ServerMsgToAll(\"** \" + name + \" ** Has Left The Room.\");  \n      //remove the name from playernames list\n      Server::playerNames->Remove( name );\n      //remove that index of the array, thus freeing it up  \n      //for another user  \n      Server::playersByConnection->Remove(tcpClients[count]);  \n    }\n  }\n}\n```\n\nNext we'll write the code for the ServerMsgToAll, the thing about this method is that its only used to report back to the server admin the messages sent via MsgToAll when an exception occurred. The logic behind the method is similar to MsgToAll so enter the code below.\n\n```c\nvoid Server::ServerMsgToAll(String^ serverMessage )\n{\n  StreamWriter^ serverwriter;\n\n  array<Sockets::TcpClient^>^  tcpClients =  gcnew array<Sockets::TcpClient^>( playerNames->Count );\n\n  Server::playerNames->Values->CopyTo(tcpClients, 0); \n\n  for ( int count = 0; count < tcpClients->Length; ++count )\n  {\n    try\n    {\n      if (serverMessage->Trim() == \"\" || tcpClients[count] == nullptr )  \n        continue;  \n      serverwriter =  gcnew StreamWriter(tcpClients[ count ]->GetStream());  \n      //write our message to the window  \n      serverwriter->WriteLine( serverMessage );  \n      //make sure all bytes are written  \n      serverwriter->Flush();  \n      //dispose of the writer object until needed again  \n      serverwriter = nullptr;  \n      Console::WriteLine( \"SERVER SENT:\" + \" has joined the game\" );\n\n    }\n    catch ( Exception^ error_44 )\n    {\n      error_44 = error_44;\n      String^ name = (String^)playersByConnection[tcpClients[count]];  \n\n      Server::playerNames->Remove( name );\n      //remove that index of the array, thus freeing it up  \n      //for another user  \n      Server::playersByConnection->Remove(tcpClients[count]);  \n    }\n  } \n}\n```\n\nMsgToPlayer is similar again to the previous two methods except that the MsgToPlayer accepts an additional parameter for the player name of who you wish to direct the message at. The player name is reference by looking up the playerNames hash table using the player name as the key.\n\n```c\nvoid Server::MsgToPlayer(String^ serverMessage, System::String^ playername)\n{\n  StreamWriter^ serverwriter;\n\n  array<Sockets::TcpClient^>^ tcpClients = gcnew array<Sockets::TcpClient^>( playerNames->Count );\n\n  Server::playerNames->Values->CopyTo(tcpClients, 0); \n\n  for ( int count = 0; count < tcpClients->Length; ++count )\n  {\n    try\n    {\n      if (serverMessage->Trim() == \"\" || tcpClients[count] == nullptr )  \n        continue;  \n\n      if( playerNames->ContainsKey( playername ) )\n      {\n        serverwriter =  gcnew StreamWriter(tcpClients[ count ]->GetStream());  \n        //write our message to the window  \n        serverwriter->WriteLine( serverMessage );  \n        //make sure all bytes are written  \n        serverwriter->Flush();  \n        //dispose of the writer object until needed again  \n        serverwriter = nullptr;  \n        Console::WriteLine( \"SERVER SENT: \" + serverMessage + \" to \" + playername );\n      }\n    }\n    catch ( Exception^ error_44 )\n    {\n      error_44 = error_44;\n      String^ name = (String^)playersByConnection[tcpClients[count]];  \n\n      Server::playerNames->Remove( name );\n      //remove that index of the array, thus freeing it up  \n      //for another user  \n      Server::playersByConnection->Remove(tcpClients[count]);  \n    }\n  } \n}\n```\nThe next method just handles the case when a new player connection has been made.\n```c\n// When a new player connects to the server spawn a thread that will\n// run the game loop.\nTcpRelayClient::TcpRelayClient( TcpClient^ playerConnection )\n{\n  client =  playerConnection;\n  Thread^   playerRelayThread   = gcnew Thread( \n      gcnew ThreadStart( this, & NetGame::TcpRelayClient::startRelay ) );\n\n  playerRelayThread->Start();\n}\n```\nIf you look at the last method you'll notice that for each player connection we spawn a new thread on the server with the startRelay() method. The startRelay() method was chosen because its the method which runs all the logic for interacting with our game database. For the most part the startRelay() method consist of the same game loop from the test version of the game, you'll notice it soon but before that the initialization for the game loop is where the new code is. To start we setup both a stream writer and stream reader to send and receive messages from the player on the thread.\n```c\n// When we start a new thread for a player who just connected,\n// this is the method the thread runs.\n// In short this is the game loop the player interacts with.\nvoid TcpRelayClient::startRelay( )\n{  \n  reader = gcnew StreamReader( client->GetStream() );\n  // Writer sends messages out to the client whos connection\n  // is running on this thread.\n  writer = gcnew StreamWriter( client->GetStream() );\n\n  NetworkStream^ netReader = client->GetStream();\n```\nJust before we actually let the player begin sending new commands we have to store the player's name within our players hashtable. Please note that for this simple game we don't double check that two players will have the exact same name because we aren't building this game to support thousands of players, so our collision prone hashtables are good enough. Ok so lets get the players name, store it within the player hashtables and then let them play.\n```c\n  writer->WriteLine( \"New Game \" );\n  Console::WriteLine( \"SERVER: Getting the new users Name \" );\n  writer->WriteLine( \"Enter a new name for your charecter\" );\n  writer->Flush();\n  Console::WriteLine( \"SERVER SENT: Enter a new name for your character\" );\n\n  // Read the player's response\n  array<Byte, 1>^  bytesFromClient = gcnew array<Byte, 1>(256);\n  String^ strFromClient = String::Empty ;\n  Int32 bytes = 0 ;\n  bytes = netReader->Read( bytesFromClient, 0, bytesFromClient->Length ) ;\n  strFromClient = Text::Encoding::ASCII->GetString( bytesFromClient, 0, bytes );\n  player = strFromClient ;\n\n  // Add the player to the hash tables as a new key value pair\n  Console::WriteLine( player + \" has joined the game\" );\n  Server::playerNames->Add( player, client ); \n  Server::playersByConnection->Add( client, player );\n  String^ message ;\n\n  Thread^ playerConnect = gcnew Thread( \n      gcnew ThreadStart( this, & NetGame::TcpRelayClient::run ) );\n\n  playerConnect->Start();\n```\nFinally we can insert the code for the game loop which is directly extracted from the test game but with some slight additions to how the strings are processed. If you can recall from \"server.h\" there were two methods, MarshalString and toSysString. Marshal string converts a given managed string or a System::String to native std::string, while toSysString does exactly what it says it does.\n\n```c\n  //ALL THE CODE BELOW IS THE ACTUAL GAME LOOP\n  //Create a new player and add to the Dungeon \n  string output ;\n  string input ;\n  String^ tempStr = nullptr ;\n\n  string playerName ;\n  // MarshalString converts a managed String^ to a native string\n  MarshalString( player, playerName ) ; \n  Player* thePlayer = new Player( playerName, mainHall ) ;\n  output = caves.addPlayer( thePlayer ) ;\n\n  //Let all players know of the new player\n  message = toSysString( output ) ;\n\n  //Display needed info for the players\n  output = \"\\nDefeat all monsters\" ;\n  output += \"\\nEnter a new command to start, for help menu enter\" ;\n  output += \"\\nhelp:\" ;\n  output += \"\\nTo quit enter \\\"quit\\\"\" ;\n  message += toSysString( output ) ;\n  Server::MsgToPlayer( message, player ) ;\n\n  //Get client command\n  bytesFromClient->Clear( bytesFromClient, 0, 256 ) ;\n  bytes = netReader->Read( bytesFromClient, 0, bytesFromClient->Length ) ;\n  strFromClient = Text::Encoding::ASCII->GetString( bytesFromClient, 0, bytes ); \n  MarshalString( strFromClient, input ) ;\n\n  //Start the game loop\n  while( input != \"quit\" )\n  {\n    //Pass the users message through the filter\n    if( filter.validateMessage( input ) )\n    {\n      //Split the users message into a command and value pair\n      command = dispatch.extractCommand( input ) ;\n      value = dispatch.extractValue( input ) ;\n\n      //Match the command and forward the value\n      switch( command )\n      {\n        case 'a': //Attack \n          //If the monster does not exist or the name was mispelled\n          if( &(thePlayer->mLocation->getMonsterRef( value )) == NULL )\n          {\n            //cout << \"There is no \" + value + \" at this location\" << endl ;\n            output = \"There is no \" + value + \" at this location\" ;\n            message = toSysString( output ) ;\n            Server::MsgToPlayer( message, player ) ;\n            break ;\n          }\n          //If the monster is there but in combat the player cannot fight it\n          if( thePlayer->mLocation->getMonsterRef( value ).inCombat == true )\n          {\n            //cout << \"The \" + value + \" is currently fighting\" << endl ;\n            output = \"The \" + value + \" is currently fighting\" ;\n            message = toSysString( output ) ;\n            Server::MsgToPlayer( message, player ) ;\n            break ;\n          }\n          caves.combatLoop( *thePlayer, thePlayer->mLocation->getMonsterRef( value ) ) ;\n          output = \"combat has finished\" ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n\n        case 'm': //Move\n          //cout << thePlayer->move( value[0] ) ;\n          output = thePlayer->move( value[0] ) ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n\n        case 'f': //Find\n          //cout << thePlayer->search() ;\n          output = thePlayer->search() ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n\n        case 'l': //Location\n          //cout << thePlayer->getLocation() ;\n          output = thePlayer->getLocation() ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n\n        case 'e': //Equip\n          //cout << thePlayer->equip( value ) ;\n          output = thePlayer->equip( value ) ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n\n        case 'y': //You\n          {\n            string* playerStats = new string ;\n            playerStats = caves.playerStatus( *thePlayer ) ;\n\n            for( int i = 0 ; i < 7 ; ++i )\n            {\n              //cout << playerStats[i] << endl ;\n              output = playerStats[i] ;\n              message = toSysString( output ) ;\n              Server::MsgToPlayer( message, player ) ;\n            }\n\n            playerStats = NULL ;\n            delete playerStats ;\n          }\n          break ;\n\n        case 't': //Talk\n          output = value ;\n          message = toSysString( output ) ;\n          Server::MsgToAll( player, message ) ;\n          break ;\n\n        case 'h': //Help Menu\n          //cout << \"a: mv: find: loc: eq: you: t: help:\" << endl ;\n          output = \"a: mv: find: loc: eq: you: t: help:\" ;\n          message = toSysString( output ) ;\n          Server::MsgToPlayer( message, player ) ;\n          break ;\n      }\n    }\n    else\n    {\n      //cout << \"Invalid command\" << endl ;\n      output = \"Invalid command\" ;\n      message = toSysString( output ) ;\n      Server::MsgToPlayer( message, player ) ;\n    }\n\n    if( caves.isComplete() )\n    {\n      //cout << \"Dungeon Cleared, YOU WIN!\" << endl ;\n      output = \"Dungeon Cleared, YOU WIN!\" ;\n      message = toSysString( output ) ;\n      Server::MsgToAll( player, message ) ;\n      break ;\n    }\n\n    if( thePlayer->death() )\n    {\n      //cout << thePlayer->getName() + \" was slain by the \" + thePlayer->mLocation->getMonsterRef( value ).getName() << endl ;\n      //output = thePlayer->getName() + \" was slain by the \" + thePlayer->mLocation->getMonsterRef( value ).getName() ;\n      output = \"slain type quit to continue\" ;\n      message = toSysString( output ) ;\n      Server::MsgToPlayer( message, player ) ;\n      thePlayer->mLocation->getMonsterRef( value ).inCombat = false ;\n      break ;\n    }\n    else\n    {\n      //Get the next command\n      //cout << \"\\n\\nNew Command\" << endl ;\n      //cin >> input ;\n      //bytes = 0 ;\n      bytesFromClient->Clear( bytesFromClient, 0, 256 ) ;\n      bytes = netReader->Read( bytesFromClient, 0, bytesFromClient->Length ) ;\n      strFromClient = Text::Encoding::ASCII->GetString( bytesFromClient, 0, bytes ); \n      MarshalString( strFromClient, input ) ;\n    }\n  }\n  //End of game loop\n}\n```\nBefore we demo our fully functional multiplayer game we have to add the last utility methods for string processing and for logging of the games actions to the server's console.\n```c\n// When running is set to true during initialization of the server\n// which happens when the server constructor is called, this will\n// begin the loop which just displays all game info to the \n// server admin. Think of it as a log of all the players actions.\nvoid  TcpRelayClient::run()\n{\n  bool running = true;\n\n  try\n  {\n    String^ line = \"\";\n    while ( running )\n    {\n      if ( client->Connected )\n      {\n        line = reader->ReadLine();\n        Server::MsgToAll( player,  line );\n      }\n      else\n      {\n        running = false;            \n      }\n    }\n  }\n  catch ( Exception^ eRun )\n  {\n    Console::WriteLine( \"EXCEPTION\" +  eRun->Message + \"\\nThe player named: \" + player + \" has disconnected, the server continues\" );\n  }\n}\n\n// Converts a managed string to a native string \nvoid MarshalString ( String ^ s, string& os ) \n{\n  using namespace Runtime::InteropServices;\n  const char* chars = (const char*)(Marshal::StringToHGlobalAnsi(s)).ToPointer();\n  os = chars;\n  Marshal::FreeHGlobal(IntPtr((void*)chars));\n}\n\n// Converts a native string to a managed one\nString^ toSysString( std::string output )\n{\n  String^ tempStr = gcnew String( output.c_str() ) ;\n\n  return tempStr ;\n}\n}\n```\nNow open up the file \"main.cpp\" and run the server, we run the server via the constructor method so as soon as you create the server it will pend for request on 127.0.0.1 port 13000 for new players.\n\nFor the demo what you'll need to do is to open up three instances of Visual Studio. One instance will run the server, so open up the server project on the first one while the second and third instances will each run clients; so open up the client project on the other two. Once you have all three open the first step is to start the server.\n\nThen launch the second client and give this new player a name.\n\nNow switch back to the first client enter the following commands, \"eq:woodsword\" and then \"a:imp\" this will have the effect of equipping the woodsword item from the Main Hall and killing the imp monster. Finally switch back over to the second client and enter the following command \"find:\", you will notice that both the woodsword and the imp have cannot be found as they were both taken care of by the first player. You have just finished writing a simple text based multiplayer RPG.\n\nOnce again the two files below, the one for the server and the one for the client are hosted on my dropbox account, so if at any time they aren't accessible(I often move files around and don't clean up dead links) and put a request into the comments section.\n\n<a href=\"http://dl.dropbox.com/u/22280460/Simple_RPG_Client.rar\">Click here to download the client application</a>\n<a href=\"http://dl.dropbox.com/u/22280460/Simple_RPG_Server.rar\">Click here to download the server application</a>\n\n[link_part_6]: /2011/06/16/textbasedrpgpart6\n","slug":"textbasedrpgpart7","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3ix0021yswv0pifxnb2","layout":"post","photos":[],"link":"","content":"<p>The Final part of our tutorial, after completing this tutorial you will have successfully created a multiplayer text based rpg. Read on to learn how to design the game server that will connect to the client code written in part six.</p>\n<a id=\"more\"></a>\n<p><a href=\"/2011/06/16/textbasedrpgpart6\">Click here for part VI</a></p>\n<p>In the last part of this series we’re going to develop the server logic to host our game and end with a short demonstration of how it works in action. Just as you performed it in part 6, create a new Visual C++ CLR project within Visual Studio and add the following files leaving them empty for now; “Common.h”, “database.h”, “server.h”, “database.cpp”, “main.cpp” and “server.cpp”. </p>\n<p>The first file we’ll write is the “Common.h” file. All “Common.h” does is declare the namespaces and set the constant values we’ll be using for the server application. If you recall from part six when we set the client to access the server via port 13000, you can now see why we did so because by setting the same port on the server the server will know which port to set the listening socket to.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/// namespaces</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::IO;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net::Sockets;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Text;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Threading;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> NetGame</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/// Constants</span></div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> PORT        =  <span class=\"number\">13000</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> MAX_PLAYERS =  <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Next we move to the “database.h” file. If you remember way back in part 1 where we outlined the code for our game I told you there was a reason why we titled the header file for the game database instead of dungeon or something. The reason as you can see now is because our game will serve like a virtual database where we’ll pull out data on monsters, items and locations for players to interact with and update them whenever actions occur to propagate changes to the game world out to all players. Now go ahead and add “database.h” from the test project over to this project. Then copy the files for “database.cpp” over to this new project as well from the test. However CLR applications need to reference “stdafx.h” within “database.cpp”, so add the line below.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div></pre></td></tr></table></figure>\n<p>For the server we’ll start with declaring its classes and methods within “server.h” so go open that file. Within “server.h” add the following pre-processor directives.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Common.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"database.h\"</span></span></div></pre></td></tr></table></figure></p>\n<p>Next we’ll be adding two classes, one for the server and one for managing the client connections. In C++/CLI we need to have our classes managed as well so for the server class add the declarations below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> NetGame</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> ref <span class=\"keyword\">class</span> Server</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Server();</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">MsgToAll</span><span class=\"params\">( String^ from, String^ message )</span></span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ServerMsgToAll</span><span class=\"params\">(String^ serverMessage )</span></span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">MsgToPlayer</span><span class=\"params\">( String^ serverMessage, System::String^ playername )</span></span>;</div><div class=\"line\"></div><div class=\"line\">      TcpListener^                           gameServer;</div><div class=\"line\">      <span class=\"keyword\">static</span> System::Collections::Hashtable^ playerNames;</div><div class=\"line\">      <span class=\"keyword\">static</span> System::Collections::Hashtable^ playersByConnection;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure></p>\n<p>Then for the client relay which is responsible for starting and stopping a thread for each new player on the server add the code below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> ref <span class=\"keyword\">class</span> TcpRelayClient</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    TcpRelayClient( TcpClient^ playerConnection );</div><div class=\"line\">    TcpClient^     client;</div><div class=\"line\">    StreamReader^  reader;</div><div class=\"line\">    StreamWriter^  writer;</div><div class=\"line\">    String^        player;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span>: </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startRelay</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>The last two methods of the server class are specific for backwards compatibility between managed and native C++.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// See the link below</span></div><div class=\"line\">  <span class=\"comment\">//msdn.microsoft.com/en-us/library/1b4az623(v=VS.90).aspx </span></div><div class=\"line\">  <span class=\"comment\">//How to: Convert System::String to Standard String</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MarshalString</span> <span class=\"params\">( String^ s, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; os )</span> </span>;</div><div class=\"line\">  String^ toSysString( <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> ) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><div><br>The point of string marshaling is to allow use to translate between C++/CLI String^ and native <code>std::string*</code> pointers. Now we’re ready to tackle the meat of the application, the definitions of the servers methods; open up “server.cpp” for editing and first add the pre-processor directives.<br></div><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"server.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"database.h\"</span> </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD ;</div></pre></td></tr></table></figure></p>\n<p>For this game since we’re not using an actual database lets declare all of our game objects first before accepting any connections from remote clients.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//BEGIN creation of the game objects</span></div><div class=\"line\"><span class=\"function\">Dungeon <span class=\"title\">caves</span><span class=\"params\">( <span class=\"number\">2</span>, <span class=\"number\">21</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">Item* herb_a = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_b = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_c = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_d = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_e = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_f = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_g = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\"></div><div class=\"line\">Item* woodsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* steelblade = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"steelblade\"</span>, Item::WEAPON, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* crystalsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"crystalsword\"</span>, Item::WEAPON, <span class=\"number\">35</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* genjiblade = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"genjiblade\"</span>, Item::WEAPON, <span class=\"number\">60</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* angelicsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"angelicsword\"</span>, Item::WEAPON, <span class=\"number\">80</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* finalweapon = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"dragonslayer\"</span>, Item::WEAPON, <span class=\"number\">2000</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\"></div><div class=\"line\">Item* woodarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"woodarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span> ) ;</div><div class=\"line\">Item* steelarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"steelarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">20</span> ) ;</div><div class=\"line\">Item* diamondarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"diamondarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">30</span> ) ;</div><div class=\"line\">Item* crystalarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"crystalarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">35</span> ) ;</div><div class=\"line\">Item* dragonarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"dragonarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">100</span> ) ;</div><div class=\"line\">Item* ultimatearmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"ultimatearmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span> ) ;</div><div class=\"line\"></div><div class=\"line\">Monster* bear = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"bear\"</span>, <span class=\"number\">15</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ) ;</div><div class=\"line\">Monster* goblin = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"goblin\"</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">Monster* imp = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"imp\"</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span> ) ;</div><div class=\"line\">Monster* redgoblin = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"redgoblin\"</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span> ) ;</div><div class=\"line\">Monster* demon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"demon\"</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span> ) ;</div><div class=\"line\">Monster* zergling = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"zergling\"</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span> ) ;</div><div class=\"line\">Monster* bats = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"bats\"</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">3</span> ) ;</div><div class=\"line\">Monster* morebats = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"morebats\"</span>, <span class=\"number\">25</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span> ) ;</div><div class=\"line\">Monster* golem = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"golem\"</span>, <span class=\"number\">50</span>, <span class=\"number\">21</span>, <span class=\"number\">9</span> ) ;</div><div class=\"line\">Monster* goatdemon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"goatdemon\"</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span> ) ;</div><div class=\"line\">Monster* cyclops = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"cyclops\"</span>, <span class=\"number\">150</span>, <span class=\"number\">90</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Monster* behemoth = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"behemoth\"</span>, <span class=\"number\">250</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span> ) ;</div><div class=\"line\">Monster* alien = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"alien\"</span>, <span class=\"number\">50</span>, <span class=\"number\">21</span>, <span class=\"number\">4</span> ) ;</div><div class=\"line\">Monster* giantrat = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"giantrat\"</span>, <span class=\"number\">55</span>, <span class=\"number\">40</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">Monster* fallenangel = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"fallenangel\"</span>, <span class=\"number\">300</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span> ) ;</div><div class=\"line\">Monster* greatdragon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"greatdragon\"</span>, <span class=\"number\">500</span>, <span class=\"number\">300</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">Monster* invincibledragon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"invincibledragon\"</span>, <span class=\"number\">999</span>, <span class=\"number\">999</span>, <span class=\"number\">999</span> ) ;</div><div class=\"line\"></div><div class=\"line\">Room* mainHall = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The main cavern\"</span>, <span class=\"string\">\"A murkey swamp cavern\"</span>, woodsword ) ;</div><div class=\"line\">Room* river = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The black river\"</span>, <span class=\"string\">\"A river with dark water\"</span>, woodarmor ) ;</div><div class=\"line\">Room* greencave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The greencave\"</span>, <span class=\"string\">\"A moss covered cave\"</span>, herb_a ) ;</div><div class=\"line\">Room* bluecave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The bluecave\"</span>, <span class=\"string\">\"A frosty cave\"</span>, steelblade ) ;</div><div class=\"line\">Room* darkpit = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The darkpit\"</span>, <span class=\"string\">\"An endless hole lies before you\"</span>, steelarmor ) ;</div><div class=\"line\">Room* morbidfield = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The morbidfield\"</span>, <span class=\"string\">\"Pitch black grass surrounds you\"</span>, herb_b ) ;</div><div class=\"line\">Room* graveyard = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The graveyard\"</span>, <span class=\"string\">\"Tombstones abound\"</span>, diamondarmor ) ;</div><div class=\"line\">Room* crypt = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The crypt\"</span>, <span class=\"string\">\"A nasty rotten crypt\"</span>, crystalsword ) ;</div><div class=\"line\">Room* evilpassage = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The evil passage\"</span>, <span class=\"string\">\"An evil pasage\"</span>, crystalarmor ) ;</div><div class=\"line\">Room* darklair = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dark lair\"</span>, <span class=\"string\">\"A dark lair\"</span>, herb_c ) ;</div><div class=\"line\">Room* firepit = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The firey pits\"</span>, <span class=\"string\">\"Fire is every where\"</span>, herb_d ) ;</div><div class=\"line\">Room* greenpasture = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The greenpastures\"</span>, <span class=\"string\">\"A meadow is before you\"</span>, genjiblade ) ;</div><div class=\"line\">Room* icecave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The icy caves\"</span>, <span class=\"string\">\"Ice everywhere you look\"</span>, herb_e ) ;</div><div class=\"line\">Room* livingroom = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The living room\"</span>, <span class=\"string\">\"The room is alive\"</span>, dragonarmor ) ;</div><div class=\"line\">Room* cellar = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The cellar\"</span>, <span class=\"string\">\"A dirty cellar filled with rats\"</span>, angelicsword ) ;</div><div class=\"line\">Room* lifespring = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The lifespring\"</span>, <span class=\"string\">\"A beautiful fountain stands\"</span>, herb_f ) ;</div><div class=\"line\">Room* waterfall = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The waterfall\"</span>, <span class=\"string\">\"Clear blue water falls\"</span>, herb_g ) ;</div><div class=\"line\">Room* hellsgate = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The gates of hell\"</span>, <span class=\"string\">\"Large rusty doors lead to hell\"</span>, ultimatearmor ) ;</div><div class=\"line\">Room* dragoncave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dragon's cave\"</span>, <span class=\"string\">\"An ancient cave...\"</span> ) ;</div><div class=\"line\">Room* dragonsden = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dragon's den\"</span>, <span class=\"string\">\"A powerful monster awaits\"</span> ) ;</div><div class=\"line\">Room* lostforest = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The secret forest\"</span>, <span class=\"string\">\"The strongest sword lies hidden here\"</span>, finalweapon ) ;</div><div class=\"line\"></div><div class=\"line\">Filter filter ;</div><div class=\"line\"></div><div class=\"line\">Dispatch dispatch ;</div><div class=\"line\"><span class=\"keyword\">char</span> command ;</div><div class=\"line\"><span class=\"built_in\">string</span> value ;</div><div class=\"line\"><span class=\"comment\">//END creation of the game objects</span></div></pre></td></tr></table></figure></p>\n<p>In a professional game setting it would be here where you would instantiate a connection to your MySQL or whatever database your using and not load the server code until the database connection has been verified; but for this simple game this will be good enough. Now that our game objects have been created, we’ll start by defining the Server constructor. Within the Server constructor we want to initialize the dynamic content of the game, i.e game content which will change state throughout the execution of our game.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> NetGame</div><div class=\"line\">&#123;</div><div class=\"line\">  Server::Server()</div><div class=\"line\">  &#123;  </div><div class=\"line\">    <span class=\"comment\">//BEGIN linking game objects</span></div><div class=\"line\">    mainHall-&gt;link( <span class=\"string\">'e'</span>, *river ) ;</div><div class=\"line\">    river-&gt;link( <span class=\"string\">'s'</span>, *greencave ) ;</div><div class=\"line\">    river-&gt;link( <span class=\"string\">'e'</span>, *bluecave ) ;</div><div class=\"line\">    river-&gt;link( <span class=\"string\">'w'</span>, *mainHall ) ;</div><div class=\"line\">    greencave-&gt;link( <span class=\"string\">'n'</span>, *river ) ;</div><div class=\"line\">    bluecave-&gt;link( <span class=\"string\">'w'</span>, *river ) ;</div><div class=\"line\">    bluecave-&gt;link( <span class=\"string\">'n'</span>, *darkpit ) ;</div><div class=\"line\">    darkpit-&gt;link( <span class=\"string\">'s'</span>, *bluecave ) ;</div><div class=\"line\">    darkpit-&gt;link( <span class=\"string\">'n'</span>, *morbidfield ) ;</div><div class=\"line\">    morbidfield-&gt;link( <span class=\"string\">'s'</span>, *darkpit ) ;</div><div class=\"line\">    morbidfield-&gt;link( <span class=\"string\">'e'</span>, *graveyard ) ;</div><div class=\"line\">    graveyard-&gt;link( <span class=\"string\">'w'</span>, *morbidfield ) ;</div><div class=\"line\">    graveyard-&gt;link( <span class=\"string\">'n'</span>, *crypt ) ;</div><div class=\"line\">    graveyard-&gt;link( <span class=\"string\">'e'</span>, *evilpassage ) ;</div><div class=\"line\">    crypt-&gt;link( <span class=\"string\">'s'</span>, *graveyard ) ;</div><div class=\"line\">    evilpassage-&gt;link( <span class=\"string\">'w'</span>, *graveyard ) ;</div><div class=\"line\">    evilpassage-&gt;link( <span class=\"string\">'s'</span>, *darklair ) ;</div><div class=\"line\">    darklair-&gt;link( <span class=\"string\">'n'</span>, *evilpassage ) ;</div><div class=\"line\">    darklair-&gt;link( <span class=\"string\">'s'</span>, *firepit ) ;</div><div class=\"line\">    firepit-&gt;link( <span class=\"string\">'n'</span>, *darklair ) ;</div><div class=\"line\">    firepit-&gt;link( <span class=\"string\">'e'</span>, *greenpasture ) ;</div><div class=\"line\">    greenpasture-&gt;link( <span class=\"string\">'w'</span>, *firepit ) ;</div><div class=\"line\">    greenpasture-&gt;link( <span class=\"string\">'s'</span>, *icecave ) ;</div><div class=\"line\">    greenpasture-&gt;link( <span class=\"string\">'e'</span>, *livingroom ) ;</div><div class=\"line\">    icecave-&gt;link( <span class=\"string\">'n'</span>, *greenpasture ) ;</div><div class=\"line\">    livingroom-&gt;link( <span class=\"string\">'w'</span>, *greenpasture ) ;</div><div class=\"line\">    livingroom-&gt;link( <span class=\"string\">'e'</span>, *cellar ) ;</div><div class=\"line\">    cellar-&gt;link( <span class=\"string\">'w'</span>, *livingroom ) ;</div><div class=\"line\">    cellar-&gt;link( <span class=\"string\">'n'</span>, *lifespring ) ;</div><div class=\"line\">    cellar-&gt;link( <span class=\"string\">'e'</span>, *hellsgate ) ;</div><div class=\"line\">    lifespring-&gt;link( <span class=\"string\">'s'</span>, *cellar ) ;</div><div class=\"line\">    lifespring-&gt;link( <span class=\"string\">'n'</span>, *waterfall ) ;</div><div class=\"line\">    waterfall-&gt;link( <span class=\"string\">'s'</span>, *lifespring ) ;</div><div class=\"line\">    hellsgate-&gt;link( <span class=\"string\">'w'</span>, *cellar ) ;</div><div class=\"line\">    hellsgate-&gt;link( <span class=\"string\">'e'</span>, *dragoncave ) ;</div><div class=\"line\">    dragoncave-&gt;link( <span class=\"string\">'w'</span>, *hellsgate ) ;</div><div class=\"line\">    dragoncave-&gt;link( <span class=\"string\">'e'</span>, *dragonsden ) ;</div><div class=\"line\">    dragonsden-&gt;link( <span class=\"string\">'w'</span>, *dragoncave ) ;</div><div class=\"line\">    dragonsden-&gt;link( <span class=\"string\">'e'</span>, *lostforest ) ;</div><div class=\"line\">    lostforest-&gt;link( <span class=\"string\">'w'</span>, *dragonsden ) ;</div><div class=\"line\"></div><div class=\"line\">    mainHall-&gt;addMonster( goblin ) ;</div><div class=\"line\">    mainHall-&gt;addMonster( imp ) ;</div><div class=\"line\">    river-&gt;addMonster( bear ) ;</div><div class=\"line\">    river-&gt;addMonster( redgoblin ) ;</div><div class=\"line\">    bluecave-&gt;addMonster( demon ) ;</div><div class=\"line\">    bluecave-&gt;addMonster( zergling ) ;</div><div class=\"line\">    morbidfield-&gt;addMonster( bats ) ;</div><div class=\"line\">    morbidfield-&gt;addMonster( morebats ) ;</div><div class=\"line\">    graveyard-&gt;addMonster( golem ) ;</div><div class=\"line\">    evilpassage-&gt;addMonster( goatdemon ) ;</div><div class=\"line\">    firepit-&gt;addMonster( cyclops ) ;</div><div class=\"line\">    greenpasture-&gt;addMonster( behemoth ) ;</div><div class=\"line\">    livingroom-&gt;addMonster( alien ) ;</div><div class=\"line\">    cellar-&gt;addMonster( giantrat ) ;</div><div class=\"line\">    hellsgate-&gt;addMonster( fallenangel ) ;</div><div class=\"line\">    dragoncave-&gt;addMonster( greatdragon ) ;</div><div class=\"line\">    dragonsden-&gt;addMonster( invincibledragon ) ;</div><div class=\"line\"></div><div class=\"line\">    caves.addRoom( mainHall ) ;</div><div class=\"line\">    caves.addRoom( river ) ;</div><div class=\"line\">    caves.addRoom( greencave ) ;</div><div class=\"line\">    caves.addRoom( bluecave ) ;</div><div class=\"line\">    caves.addRoom( darkpit ) ;</div><div class=\"line\">    caves.addRoom( morbidfield ) ;</div><div class=\"line\">    caves.addRoom( graveyard ) ;</div><div class=\"line\">    caves.addRoom( crypt ) ;</div><div class=\"line\">    caves.addRoom( evilpassage ) ;</div><div class=\"line\">    caves.addRoom( darklair ) ;</div><div class=\"line\">    caves.addRoom( firepit ) ;</div><div class=\"line\">    caves.addRoom( greenpasture ) ;</div><div class=\"line\">    caves.addRoom( icecave ) ;</div><div class=\"line\">    caves.addRoom( livingroom ) ;</div><div class=\"line\">    caves.addRoom( cellar ) ;</div><div class=\"line\">    caves.addRoom( lifespring ) ;</div><div class=\"line\">    caves.addRoom( waterfall ) ;</div><div class=\"line\">    caves.addRoom( hellsgate ) ;</div><div class=\"line\">    caves.addRoom( dragoncave ) ;</div><div class=\"line\">    caves.addRoom( dragonsden ) ;</div><div class=\"line\">    caves.addRoom( lostforest ) ;</div><div class=\"line\">    <span class=\"comment\">//END linking game objects</span></div></pre></td></tr></table></figure>\n<p>Next we’ll set the options for the game, open up the server on our desired port and begin accepting player connections.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// MAX_PLAYERS and PORT can be set in Common.h</span></div><div class=\"line\"><span class=\"keyword\">bool</span> running            =  <span class=\"literal\">true</span>;</div><div class=\"line\">playerNames             =  gcnew Hashtable( MAX_PLAYERS );</div><div class=\"line\">playersByConnection     =  gcnew Hashtable( MAX_PLAYERS );</div><div class=\"line\"></div><div class=\"line\">gameServer              =  gcnew TcpListener( PORT );</div><div class=\"line\">gameServer-&gt;Start();</div></pre></td></tr></table></figure></p>\n<p>Now that the server is started you want to run the servers connection loop to keep it in a pending state for new players<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">      <span class=\"comment\">// Server loop is infinite since we have to close the program</span></div><div class=\"line\">      <span class=\"comment\">// manually when we want the server to stop.</span></div><div class=\"line\">      <span class=\"keyword\">while</span> ( <span class=\"literal\">true</span> )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ( gameServer-&gt;Pending() )</div><div class=\"line\">      &#125;</div><div class=\"line\">    TcpClient^ playerConnection = gameServer-&gt;AcceptTcpClient();</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"SERVER: New player now connected! \"</span>  ); </div><div class=\"line\">    <span class=\"function\">gcnew <span class=\"title\">TcpRelayClient</span><span class=\"params\">( playerConnection )</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The next method to define is the global messaging method which can send messages from the server to all players. This is a key feature for our game because we can easily alert players of events such as when a new player connects and or other things.<br>The code might look confusing at first but all we’re doing is gathering up all the open player connections into a array of Sockets and iterating through each socket and pushing a copy of the message out. Oh and we also catch the exception if the socket connection failed, then we just remove it from the server’s list(remember the playersconnections HashTable from server.h).<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Server::MsgToAll( String^ from, String^ message )</div><div class=\"line\">&#123;</div><div class=\"line\">  StreamWriter^ serverwriter;</div><div class=\"line\">  ArrayList^ toRemove = gcnew ArrayList( <span class=\"number\">0</span> );</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;^  tcpClients =  gcnew <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;( playerNames-&gt;Count );</div><div class=\"line\"></div><div class=\"line\">  Server::playerNames-&gt;Values-&gt;CopyTo(tcpClients, <span class=\"number\">0</span>); </div><div class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>; count &lt; tcpClients-&gt;Length; ++count )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (message-&gt;Trim() == <span class=\"string\">\"\"</span> || tcpClients[count] == <span class=\"literal\">nullptr</span> )  </div><div class=\"line\">        <span class=\"keyword\">continue</span>;  </div><div class=\"line\">      serverwriter =  gcnew StreamWriter(tcpClients[ count ]-&gt;GetStream());  </div><div class=\"line\">      <span class=\"comment\">//write our message to the window  </span></div><div class=\"line\">      serverwriter-&gt;WriteLine(from + <span class=\"string\">\": \"</span> + message);  </div><div class=\"line\">      <span class=\"comment\">//make sure all bytes are written  </span></div><div class=\"line\">      serverwriter-&gt;Flush();  </div><div class=\"line\">      <span class=\"comment\">//dispose of the writer object until needed again  </span></div><div class=\"line\">      serverwriter = <span class=\"literal\">nullptr</span>;  </div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> ( Exception^ error_44 )</div><div class=\"line\">    &#123;</div><div class=\"line\">      error_44 = error_44;</div><div class=\"line\">      String^ name = (String^)playersByConnection[tcpClients[count]];  </div><div class=\"line\">      <span class=\"comment\">//send the message that the user has left  </span></div><div class=\"line\">      Server::ServerMsgToAll(<span class=\"string\">\"** \"</span> + name + <span class=\"string\">\" ** Has Left The Room.\"</span>);  </div><div class=\"line\">      <span class=\"comment\">//remove the name from playernames list</span></div><div class=\"line\">      Server::playerNames-&gt;Remove( name );</div><div class=\"line\">      <span class=\"comment\">//remove that index of the array, thus freeing it up  </span></div><div class=\"line\">      <span class=\"comment\">//for another user  </span></div><div class=\"line\">      Server::playersByConnection-&gt;Remove(tcpClients[count]);  </div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Next we’ll write the code for the ServerMsgToAll, the thing about this method is that its only used to report back to the server admin the messages sent via MsgToAll when an exception occurred. The logic behind the method is similar to MsgToAll so enter the code below.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Server::ServerMsgToAll(String^ serverMessage )</div><div class=\"line\">&#123;</div><div class=\"line\">  StreamWriter^ serverwriter;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;^  tcpClients =  gcnew <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;( playerNames-&gt;Count );</div><div class=\"line\"></div><div class=\"line\">  Server::playerNames-&gt;Values-&gt;CopyTo(tcpClients, <span class=\"number\">0</span>); </div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>; count &lt; tcpClients-&gt;Length; ++count )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (serverMessage-&gt;Trim() == <span class=\"string\">\"\"</span> || tcpClients[count] == <span class=\"literal\">nullptr</span> )  </div><div class=\"line\">        <span class=\"keyword\">continue</span>;  </div><div class=\"line\">      serverwriter =  gcnew StreamWriter(tcpClients[ count ]-&gt;GetStream());  </div><div class=\"line\">      <span class=\"comment\">//write our message to the window  </span></div><div class=\"line\">      serverwriter-&gt;WriteLine( serverMessage );  </div><div class=\"line\">      <span class=\"comment\">//make sure all bytes are written  </span></div><div class=\"line\">      serverwriter-&gt;Flush();  </div><div class=\"line\">      <span class=\"comment\">//dispose of the writer object until needed again  </span></div><div class=\"line\">      serverwriter = <span class=\"literal\">nullptr</span>;  </div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"SERVER SENT:\"</span> + <span class=\"string\">\" has joined the game\"</span> );</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> ( Exception^ error_44 )</div><div class=\"line\">    &#123;</div><div class=\"line\">      error_44 = error_44;</div><div class=\"line\">      String^ name = (String^)playersByConnection[tcpClients[count]];  </div><div class=\"line\"></div><div class=\"line\">      Server::playerNames-&gt;Remove( name );</div><div class=\"line\">      <span class=\"comment\">//remove that index of the array, thus freeing it up  </span></div><div class=\"line\">      <span class=\"comment\">//for another user  </span></div><div class=\"line\">      Server::playersByConnection-&gt;Remove(tcpClients[count]);  </div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>MsgToPlayer is similar again to the previous two methods except that the MsgToPlayer accepts an additional parameter for the player name of who you wish to direct the message at. The player name is reference by looking up the playerNames hash table using the player name as the key.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Server::MsgToPlayer(String^ serverMessage, System::String^ playername)</div><div class=\"line\">&#123;</div><div class=\"line\">  StreamWriter^ serverwriter;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;^ tcpClients = gcnew <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;( playerNames-&gt;Count );</div><div class=\"line\"></div><div class=\"line\">  Server::playerNames-&gt;Values-&gt;CopyTo(tcpClients, <span class=\"number\">0</span>); </div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>; count &lt; tcpClients-&gt;Length; ++count )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (serverMessage-&gt;Trim() == <span class=\"string\">\"\"</span> || tcpClients[count] == <span class=\"literal\">nullptr</span> )  </div><div class=\"line\">        <span class=\"keyword\">continue</span>;  </div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( playerNames-&gt;ContainsKey( playername ) )</div><div class=\"line\">      &#123;</div><div class=\"line\">        serverwriter =  gcnew StreamWriter(tcpClients[ count ]-&gt;GetStream());  </div><div class=\"line\">        <span class=\"comment\">//write our message to the window  </span></div><div class=\"line\">        serverwriter-&gt;WriteLine( serverMessage );  </div><div class=\"line\">        <span class=\"comment\">//make sure all bytes are written  </span></div><div class=\"line\">        serverwriter-&gt;Flush();  </div><div class=\"line\">        <span class=\"comment\">//dispose of the writer object until needed again  </span></div><div class=\"line\">        serverwriter = <span class=\"literal\">nullptr</span>;  </div><div class=\"line\">        Console::WriteLine( <span class=\"string\">\"SERVER SENT: \"</span> + serverMessage + <span class=\"string\">\" to \"</span> + playername );</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> ( Exception^ error_44 )</div><div class=\"line\">    &#123;</div><div class=\"line\">      error_44 = error_44;</div><div class=\"line\">      String^ name = (String^)playersByConnection[tcpClients[count]];  </div><div class=\"line\"></div><div class=\"line\">      Server::playerNames-&gt;Remove( name );</div><div class=\"line\">      <span class=\"comment\">//remove that index of the array, thus freeing it up  </span></div><div class=\"line\">      <span class=\"comment\">//for another user  </span></div><div class=\"line\">      Server::playersByConnection-&gt;Remove(tcpClients[count]);  </div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next method just handles the case when a new player connection has been made.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// When a new player connects to the server spawn a thread that will</span></div><div class=\"line\"><span class=\"comment\">// run the game loop.</span></div><div class=\"line\">TcpRelayClient::TcpRelayClient( TcpClient^ playerConnection )</div><div class=\"line\">&#123;</div><div class=\"line\">  client =  playerConnection;</div><div class=\"line\">  Thread^   playerRelayThread   = gcnew Thread( </div><div class=\"line\">      gcnew ThreadStart( <span class=\"keyword\">this</span>, &amp; NetGame::TcpRelayClient::startRelay ) );</div><div class=\"line\"></div><div class=\"line\">  playerRelayThread-&gt;Start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>If you look at the last method you’ll notice that for each player connection we spawn a new thread on the server with the startRelay() method. The startRelay() method was chosen because its the method which runs all the logic for interacting with our game database. For the most part the startRelay() method consist of the same game loop from the test version of the game, you’ll notice it soon but before that the initialization for the game loop is where the new code is. To start we setup both a stream writer and stream reader to send and receive messages from the player on the thread.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// When we start a new thread for a player who just connected,</span></div><div class=\"line\"><span class=\"comment\">// this is the method the thread runs.</span></div><div class=\"line\"><span class=\"comment\">// In short this is the game loop the player interacts with.</span></div><div class=\"line\"><span class=\"keyword\">void</span> TcpRelayClient::startRelay( )</div><div class=\"line\">&#123;  </div><div class=\"line\">  reader = gcnew StreamReader( client-&gt;GetStream() );</div><div class=\"line\">  <span class=\"comment\">// Writer sends messages out to the client whos connection</span></div><div class=\"line\">  <span class=\"comment\">// is running on this thread.</span></div><div class=\"line\">  writer = gcnew StreamWriter( client-&gt;GetStream() );</div><div class=\"line\"></div><div class=\"line\">  NetworkStream^ netReader = client-&gt;GetStream();</div></pre></td></tr></table></figure></p>\n<p>Just before we actually let the player begin sending new commands we have to store the player’s name within our players hashtable. Please note that for this simple game we don’t double check that two players will have the exact same name because we aren’t building this game to support thousands of players, so our collision prone hashtables are good enough. Ok so lets get the players name, store it within the player hashtables and then let them play.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">writer-&gt;WriteLine( <span class=\"string\">\"New Game \"</span> );</div><div class=\"line\">Console::WriteLine( <span class=\"string\">\"SERVER: Getting the new users Name \"</span> );</div><div class=\"line\">writer-&gt;WriteLine( <span class=\"string\">\"Enter a new name for your charecter\"</span> );</div><div class=\"line\">writer-&gt;Flush();</div><div class=\"line\">Console::WriteLine( <span class=\"string\">\"SERVER SENT: Enter a new name for your character\"</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Read the player's response</span></div><div class=\"line\"><span class=\"built_in\">array</span>&lt;Byte, 1&gt;^  bytesFromClient = gcnew <span class=\"built_in\">array</span>&lt;Byte, <span class=\"number\">1</span>&gt;(<span class=\"number\">256</span>);</div><div class=\"line\">String^ strFromClient = String::Empty ;</div><div class=\"line\">Int32 bytes = <span class=\"number\">0</span> ;</div><div class=\"line\">bytes = netReader-&gt;Read( bytesFromClient, <span class=\"number\">0</span>, bytesFromClient-&gt;Length ) ;</div><div class=\"line\">strFromClient = Text::Encoding::ASCII-&gt;GetString( bytesFromClient, <span class=\"number\">0</span>, bytes );</div><div class=\"line\">player = strFromClient ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Add the player to the hash tables as a new key value pair</span></div><div class=\"line\">Console::WriteLine( player + <span class=\"string\">\" has joined the game\"</span> );</div><div class=\"line\">Server::playerNames-&gt;Add( player, client ); </div><div class=\"line\">Server::playersByConnection-&gt;Add( client, player );</div><div class=\"line\">String^ message ;</div><div class=\"line\"></div><div class=\"line\">Thread^ playerConnect = gcnew Thread( </div><div class=\"line\">    gcnew ThreadStart( <span class=\"keyword\">this</span>, &amp; NetGame::TcpRelayClient::run ) );</div><div class=\"line\"></div><div class=\"line\">playerConnect-&gt;Start();</div></pre></td></tr></table></figure></p>\n<p>Finally we can insert the code for the game loop which is directly extracted from the test game but with some slight additions to how the strings are processed. If you can recall from “server.h” there were two methods, MarshalString and toSysString. Marshal string converts a given managed string or a System::String to native std::string, while toSysString does exactly what it says it does.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//ALL THE CODE BELOW IS THE ACTUAL GAME LOOP</span></div><div class=\"line\">  <span class=\"comment\">//Create a new player and add to the Dungeon </span></div><div class=\"line\">  <span class=\"built_in\">string</span> output ;</div><div class=\"line\">  <span class=\"built_in\">string</span> input ;</div><div class=\"line\">  String^ tempStr = <span class=\"literal\">nullptr</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">string</span> playerName ;</div><div class=\"line\">  <span class=\"comment\">// MarshalString converts a managed String^ to a native string</span></div><div class=\"line\">  MarshalString( player, playerName ) ; </div><div class=\"line\">  Player* thePlayer = <span class=\"keyword\">new</span> Player( playerName, mainHall ) ;</div><div class=\"line\">  output = caves.addPlayer( thePlayer ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Let all players know of the new player</span></div><div class=\"line\">  message = toSysString( output ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Display needed info for the players</span></div><div class=\"line\">  output = <span class=\"string\">\"\\nDefeat all monsters\"</span> ;</div><div class=\"line\">  output += <span class=\"string\">\"\\nEnter a new command to start, for help menu enter\"</span> ;</div><div class=\"line\">  output += <span class=\"string\">\"\\nhelp:\"</span> ;</div><div class=\"line\">  output += <span class=\"string\">\"\\nTo quit enter \\\"quit\\\"\"</span> ;</div><div class=\"line\">  message += toSysString( output ) ;</div><div class=\"line\">  Server::MsgToPlayer( message, player ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Get client command</span></div><div class=\"line\">  bytesFromClient-&gt;Clear( bytesFromClient, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\">  bytes = netReader-&gt;Read( bytesFromClient, <span class=\"number\">0</span>, bytesFromClient-&gt;Length ) ;</div><div class=\"line\">  strFromClient = Text::Encoding::ASCII-&gt;GetString( bytesFromClient, <span class=\"number\">0</span>, bytes ); </div><div class=\"line\">  MarshalString( strFromClient, input ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Start the game loop</span></div><div class=\"line\">  <span class=\"keyword\">while</span>( input != <span class=\"string\">\"quit\"</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//Pass the users message through the filter</span></div><div class=\"line\">    <span class=\"keyword\">if</span>( filter.validateMessage( input ) )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//Split the users message into a command and value pair</span></div><div class=\"line\">      command = dispatch.extractCommand( input ) ;</div><div class=\"line\">      value = dispatch.extractValue( input ) ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Match the command and forward the value</span></div><div class=\"line\">      <span class=\"keyword\">switch</span>( command )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>: <span class=\"comment\">//Attack </span></div><div class=\"line\">          <span class=\"comment\">//If the monster does not exist or the name was mispelled</span></div><div class=\"line\">          <span class=\"keyword\">if</span>( &amp;(thePlayer-&gt;mLocation-&gt;getMonsterRef( value )) == <span class=\"literal\">NULL</span> )</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"comment\">//cout &lt;&lt; \"There is no \" + value + \" at this location\" &lt;&lt; endl ;</span></div><div class=\"line\">            output = <span class=\"string\">\"There is no \"</span> + value + <span class=\"string\">\" at this location\"</span> ;</div><div class=\"line\">            message = toSysString( output ) ;</div><div class=\"line\">            Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">            <span class=\"keyword\">break</span> ;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">//If the monster is there but in combat the player cannot fight it</span></div><div class=\"line\">          <span class=\"keyword\">if</span>( thePlayer-&gt;mLocation-&gt;getMonsterRef( value ).inCombat == <span class=\"literal\">true</span> )</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"comment\">//cout &lt;&lt; \"The \" + value + \" is currently fighting\" &lt;&lt; endl ;</span></div><div class=\"line\">            output = <span class=\"string\">\"The \"</span> + value + <span class=\"string\">\" is currently fighting\"</span> ;</div><div class=\"line\">            message = toSysString( output ) ;</div><div class=\"line\">            Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">            <span class=\"keyword\">break</span> ;</div><div class=\"line\">          &#125;</div><div class=\"line\">          caves.combatLoop( *thePlayer, thePlayer-&gt;mLocation-&gt;getMonsterRef( value ) ) ;</div><div class=\"line\">          output = <span class=\"string\">\"combat has finished\"</span> ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span>: <span class=\"comment\">//Move</span></div><div class=\"line\">          <span class=\"comment\">//cout &lt;&lt; thePlayer-&gt;move( value[0] ) ;</span></div><div class=\"line\">          output = thePlayer-&gt;move( value[<span class=\"number\">0</span>] ) ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'f'</span>: <span class=\"comment\">//Find</span></div><div class=\"line\">          <span class=\"comment\">//cout &lt;&lt; thePlayer-&gt;search() ;</span></div><div class=\"line\">          output = thePlayer-&gt;search() ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'l'</span>: <span class=\"comment\">//Location</span></div><div class=\"line\">          <span class=\"comment\">//cout &lt;&lt; thePlayer-&gt;getLocation() ;</span></div><div class=\"line\">          output = thePlayer-&gt;getLocation() ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>: <span class=\"comment\">//Equip</span></div><div class=\"line\">          <span class=\"comment\">//cout &lt;&lt; thePlayer-&gt;equip( value ) ;</span></div><div class=\"line\">          output = thePlayer-&gt;equip( value ) ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span>: <span class=\"comment\">//You</span></div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"built_in\">string</span>* playerStats = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span> ;</div><div class=\"line\">            playerStats = caves.playerStatus( *thePlayer ) ;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">7</span> ; ++i )</div><div class=\"line\">            &#123;</div><div class=\"line\">              <span class=\"comment\">//cout &lt;&lt; playerStats[i] &lt;&lt; endl ;</span></div><div class=\"line\">              output = playerStats[i] ;</div><div class=\"line\">              message = toSysString( output ) ;</div><div class=\"line\">              Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            playerStats = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">            <span class=\"keyword\">delete</span> playerStats ;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'t'</span>: <span class=\"comment\">//Talk</span></div><div class=\"line\">          output = value ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToAll( player, message ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span>: <span class=\"comment\">//Help Menu</span></div><div class=\"line\">          <span class=\"comment\">//cout &lt;&lt; \"a: mv: find: loc: eq: you: t: help:\" &lt;&lt; endl ;</span></div><div class=\"line\">          output = <span class=\"string\">\"a: mv: find: loc: eq: you: t: help:\"</span> ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//cout &lt;&lt; \"Invalid command\" &lt;&lt; endl ;</span></div><div class=\"line\">      output = <span class=\"string\">\"Invalid command\"</span> ;</div><div class=\"line\">      message = toSysString( output ) ;</div><div class=\"line\">      Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( caves.isComplete() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//cout &lt;&lt; \"Dungeon Cleared, YOU WIN!\" &lt;&lt; endl ;</span></div><div class=\"line\">      output = <span class=\"string\">\"Dungeon Cleared, YOU WIN!\"</span> ;</div><div class=\"line\">      message = toSysString( output ) ;</div><div class=\"line\">      Server::MsgToAll( player, message ) ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( thePlayer-&gt;death() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//cout &lt;&lt; thePlayer-&gt;getName() + \" was slain by the \" + thePlayer-&gt;mLocation-&gt;getMonsterRef( value ).getName() &lt;&lt; endl ;</span></div><div class=\"line\">      <span class=\"comment\">//output = thePlayer-&gt;getName() + \" was slain by the \" + thePlayer-&gt;mLocation-&gt;getMonsterRef( value ).getName() ;</span></div><div class=\"line\">      output = <span class=\"string\">\"slain type quit to continue\"</span> ;</div><div class=\"line\">      message = toSysString( output ) ;</div><div class=\"line\">      Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">      thePlayer-&gt;mLocation-&gt;getMonsterRef( value ).inCombat = <span class=\"literal\">false</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//Get the next command</span></div><div class=\"line\">      <span class=\"comment\">//cout &lt;&lt; \"\\n\\nNew Command\" &lt;&lt; endl ;</span></div><div class=\"line\">      <span class=\"comment\">//cin &gt;&gt; input ;</span></div><div class=\"line\">      <span class=\"comment\">//bytes = 0 ;</span></div><div class=\"line\">      bytesFromClient-&gt;Clear( bytesFromClient, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\">      bytes = netReader-&gt;Read( bytesFromClient, <span class=\"number\">0</span>, bytesFromClient-&gt;Length ) ;</div><div class=\"line\">      strFromClient = Text::Encoding::ASCII-&gt;GetString( bytesFromClient, <span class=\"number\">0</span>, bytes ); </div><div class=\"line\">      MarshalString( strFromClient, input ) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//End of game loop</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Before we demo our fully functional multiplayer game we have to add the last utility methods for string processing and for logging of the games actions to the server’s console.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// When running is set to true during initialization of the server</span></div><div class=\"line\"><span class=\"comment\">// which happens when the server constructor is called, this will</span></div><div class=\"line\"><span class=\"comment\">// begin the loop which just displays all game info to the </span></div><div class=\"line\"><span class=\"comment\">// server admin. Think of it as a log of all the players actions.</span></div><div class=\"line\"><span class=\"keyword\">void</span>  TcpRelayClient::run()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">bool</span> running = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">try</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    String^ line = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> ( running )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( client-&gt;Connected )</div><div class=\"line\">      &#123;</div><div class=\"line\">        line = reader-&gt;ReadLine();</div><div class=\"line\">        Server::MsgToAll( player,  line );</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        running = <span class=\"literal\">false</span>;            </div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span> ( Exception^ eRun )</div><div class=\"line\">  &#123;</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"EXCEPTION\"</span> +  eRun-&gt;Message + <span class=\"string\">\"\\nThe player named: \"</span> + player + <span class=\"string\">\" has disconnected, the server continues\"</span> );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Converts a managed string to a native string </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MarshalString</span> <span class=\"params\">( String ^ s, <span class=\"built_in\">string</span>&amp; os )</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Runtime::InteropServices;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* chars = (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)(Marshal::StringToHGlobalAnsi(s)).ToPointer();</div><div class=\"line\">  os = chars;</div><div class=\"line\">  Marshal::FreeHGlobal(IntPtr((<span class=\"keyword\">void</span>*)chars));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Converts a native string to a managed one</span></div><div class=\"line\">String^ toSysString( <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> output )</div><div class=\"line\">&#123;</div><div class=\"line\">  String^ tempStr = gcnew String( output.c_str() ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> tempStr ;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now open up the file “main.cpp” and run the server, we run the server via the constructor method so as soon as you create the server it will pend for request on 127.0.0.1 port 13000 for new players.</p>\n<p>For the demo what you’ll need to do is to open up three instances of Visual Studio. One instance will run the server, so open up the server project on the first one while the second and third instances will each run clients; so open up the client project on the other two. Once you have all three open the first step is to start the server.</p>\n<p>Then launch the second client and give this new player a name.</p>\n<p>Now switch back to the first client enter the following commands, “eq:woodsword” and then “a:imp” this will have the effect of equipping the woodsword item from the Main Hall and killing the imp monster. Finally switch back over to the second client and enter the following command “find:”, you will notice that both the woodsword and the imp have cannot be found as they were both taken care of by the first player. You have just finished writing a simple text based multiplayer RPG.</p>\n<p>Once again the two files below, the one for the server and the one for the client are hosted on my dropbox account, so if at any time they aren’t accessible(I often move files around and don’t clean up dead links) and put a request into the comments section.</p>\n<p><a href=\"http://dl.dropbox.com/u/22280460/Simple_RPG_Client.rar\" target=\"_blank\" rel=\"external\">Click here to download the client application</a><br><a href=\"http://dl.dropbox.com/u/22280460/Simple_RPG_Server.rar\" target=\"_blank\" rel=\"external\">Click here to download the server application</a></p>\n","site":{"data":{}},"excerpt":"<p>The Final part of our tutorial, after completing this tutorial you will have successfully created a multiplayer text based rpg. Read on to learn how to design the game server that will connect to the client code written in part six.</p>","more":"<p><a href=\"/2011/06/16/textbasedrpgpart6\">Click here for part VI</a></p>\n<p>In the last part of this series we’re going to develop the server logic to host our game and end with a short demonstration of how it works in action. Just as you performed it in part 6, create a new Visual C++ CLR project within Visual Studio and add the following files leaving them empty for now; “Common.h”, “database.h”, “server.h”, “database.cpp”, “main.cpp” and “server.cpp”. </p>\n<p>The first file we’ll write is the “Common.h” file. All “Common.h” does is declare the namespaces and set the constant values we’ll be using for the server application. If you recall from part six when we set the client to access the server via port 13000, you can now see why we did so because by setting the same port on the server the server will know which port to set the listening socket to.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/// namespaces</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::IO;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Net::Sockets;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Text;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Threading;</div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> System::Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> NetGame</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/// Constants</span></div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> PORT        =  <span class=\"number\">13000</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> MAX_PLAYERS =  <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Next we move to the “database.h” file. If you remember way back in part 1 where we outlined the code for our game I told you there was a reason why we titled the header file for the game database instead of dungeon or something. The reason as you can see now is because our game will serve like a virtual database where we’ll pull out data on monsters, items and locations for players to interact with and update them whenever actions occur to propagate changes to the game world out to all players. Now go ahead and add “database.h” from the test project over to this project. Then copy the files for “database.cpp” over to this new project as well from the test. However CLR applications need to reference “stdafx.h” within “database.cpp”, so add the line below.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div></pre></td></tr></table></figure>\n<p>For the server we’ll start with declaring its classes and methods within “server.h” so go open that file. Within “server.h” add the following pre-processor directives.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Common.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"database.h\"</span></span></div></pre></td></tr></table></figure></p>\n<p>Next we’ll be adding two classes, one for the server and one for managing the client connections. In C++/CLI we need to have our classes managed as well so for the server class add the declarations below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> NetGame</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> ref <span class=\"keyword\">class</span> Server</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">      Server();</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">MsgToAll</span><span class=\"params\">( String^ from, String^ message )</span></span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ServerMsgToAll</span><span class=\"params\">(String^ serverMessage )</span></span>;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">MsgToPlayer</span><span class=\"params\">( String^ serverMessage, System::String^ playername )</span></span>;</div><div class=\"line\"></div><div class=\"line\">      TcpListener^                           gameServer;</div><div class=\"line\">      <span class=\"keyword\">static</span> System::Collections::Hashtable^ playerNames;</div><div class=\"line\">      <span class=\"keyword\">static</span> System::Collections::Hashtable^ playersByConnection;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure></p>\n<p>Then for the client relay which is responsible for starting and stopping a thread for each new player on the server add the code below.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> ref <span class=\"keyword\">class</span> TcpRelayClient</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    TcpRelayClient( TcpClient^ playerConnection );</div><div class=\"line\">    TcpClient^     client;</div><div class=\"line\">    StreamReader^  reader;</div><div class=\"line\">    StreamWriter^  writer;</div><div class=\"line\">    String^        player;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span>: </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startRelay</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>The last two methods of the server class are specific for backwards compatibility between managed and native C++.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// See the link below</span></div><div class=\"line\">  <span class=\"comment\">//msdn.microsoft.com/en-us/library/1b4az623(v=VS.90).aspx </span></div><div class=\"line\">  <span class=\"comment\">//How to: Convert System::String to Standard String</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MarshalString</span> <span class=\"params\">( String^ s, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; os )</span> </span>;</div><div class=\"line\">  String^ toSysString( <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> ) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><div><br>The point of string marshaling is to allow use to translate between C++/CLI String^ and native <code>std::string*</code> pointers. Now we’re ready to tackle the meat of the application, the definitions of the servers methods; open up “server.cpp” for editing and first add the pre-processor directives.<br></div><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdafx.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"server.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"database.h\"</span> </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> MUD ;</div></pre></td></tr></table></figure></p>\n<p>For this game since we’re not using an actual database lets declare all of our game objects first before accepting any connections from remote clients.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//BEGIN creation of the game objects</span></div><div class=\"line\"><span class=\"function\">Dungeon <span class=\"title\">caves</span><span class=\"params\">( <span class=\"number\">2</span>, <span class=\"number\">21</span> )</span> </span>;</div><div class=\"line\"></div><div class=\"line\">Item* herb_a = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_b = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_c = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_d = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_e = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_f = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* herb_g = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"herb\"</span>, Item::HEALTH, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\"></div><div class=\"line\">Item* woodsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"woodsword\"</span>, Item::WEAPON, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* steelblade = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"steelblade\"</span>, Item::WEAPON, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* crystalsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"crystalsword\"</span>, Item::WEAPON, <span class=\"number\">35</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* genjiblade = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"genjiblade\"</span>, Item::WEAPON, <span class=\"number\">60</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* angelicsword = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"angelicsword\"</span>, Item::WEAPON, <span class=\"number\">80</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Item* finalweapon = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"dragonslayer\"</span>, Item::WEAPON, <span class=\"number\">2000</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\"></div><div class=\"line\">Item* woodarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"woodarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span> ) ;</div><div class=\"line\">Item* steelarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"steelarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">20</span> ) ;</div><div class=\"line\">Item* diamondarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"diamondarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">30</span> ) ;</div><div class=\"line\">Item* crystalarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"crystalarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">35</span> ) ;</div><div class=\"line\">Item* dragonarmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"dragonarmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">100</span> ) ;</div><div class=\"line\">Item* ultimatearmor = <span class=\"keyword\">new</span> Item( <span class=\"string\">\"ultimatearmor\"</span>, Item::ARMOR, <span class=\"number\">0</span>, <span class=\"number\">1000</span>, <span class=\"number\">1000</span> ) ;</div><div class=\"line\"></div><div class=\"line\">Monster* bear = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"bear\"</span>, <span class=\"number\">15</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ) ;</div><div class=\"line\">Monster* goblin = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"goblin\"</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">Monster* imp = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"imp\"</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span> ) ;</div><div class=\"line\">Monster* redgoblin = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"redgoblin\"</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span> ) ;</div><div class=\"line\">Monster* demon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"demon\"</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span> ) ;</div><div class=\"line\">Monster* zergling = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"zergling\"</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span> ) ;</div><div class=\"line\">Monster* bats = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"bats\"</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">3</span> ) ;</div><div class=\"line\">Monster* morebats = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"morebats\"</span>, <span class=\"number\">25</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span> ) ;</div><div class=\"line\">Monster* golem = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"golem\"</span>, <span class=\"number\">50</span>, <span class=\"number\">21</span>, <span class=\"number\">9</span> ) ;</div><div class=\"line\">Monster* goatdemon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"goatdemon\"</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span> ) ;</div><div class=\"line\">Monster* cyclops = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"cyclops\"</span>, <span class=\"number\">150</span>, <span class=\"number\">90</span>, <span class=\"number\">0</span> ) ;</div><div class=\"line\">Monster* behemoth = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"behemoth\"</span>, <span class=\"number\">250</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span> ) ;</div><div class=\"line\">Monster* alien = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"alien\"</span>, <span class=\"number\">50</span>, <span class=\"number\">21</span>, <span class=\"number\">4</span> ) ;</div><div class=\"line\">Monster* giantrat = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"giantrat\"</span>, <span class=\"number\">55</span>, <span class=\"number\">40</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">Monster* fallenangel = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"fallenangel\"</span>, <span class=\"number\">300</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span> ) ;</div><div class=\"line\">Monster* greatdragon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"greatdragon\"</span>, <span class=\"number\">500</span>, <span class=\"number\">300</span>, <span class=\"number\">1</span> ) ;</div><div class=\"line\">Monster* invincibledragon = <span class=\"keyword\">new</span> Monster( <span class=\"string\">\"invincibledragon\"</span>, <span class=\"number\">999</span>, <span class=\"number\">999</span>, <span class=\"number\">999</span> ) ;</div><div class=\"line\"></div><div class=\"line\">Room* mainHall = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The main cavern\"</span>, <span class=\"string\">\"A murkey swamp cavern\"</span>, woodsword ) ;</div><div class=\"line\">Room* river = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The black river\"</span>, <span class=\"string\">\"A river with dark water\"</span>, woodarmor ) ;</div><div class=\"line\">Room* greencave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The greencave\"</span>, <span class=\"string\">\"A moss covered cave\"</span>, herb_a ) ;</div><div class=\"line\">Room* bluecave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The bluecave\"</span>, <span class=\"string\">\"A frosty cave\"</span>, steelblade ) ;</div><div class=\"line\">Room* darkpit = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The darkpit\"</span>, <span class=\"string\">\"An endless hole lies before you\"</span>, steelarmor ) ;</div><div class=\"line\">Room* morbidfield = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The morbidfield\"</span>, <span class=\"string\">\"Pitch black grass surrounds you\"</span>, herb_b ) ;</div><div class=\"line\">Room* graveyard = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The graveyard\"</span>, <span class=\"string\">\"Tombstones abound\"</span>, diamondarmor ) ;</div><div class=\"line\">Room* crypt = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The crypt\"</span>, <span class=\"string\">\"A nasty rotten crypt\"</span>, crystalsword ) ;</div><div class=\"line\">Room* evilpassage = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The evil passage\"</span>, <span class=\"string\">\"An evil pasage\"</span>, crystalarmor ) ;</div><div class=\"line\">Room* darklair = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dark lair\"</span>, <span class=\"string\">\"A dark lair\"</span>, herb_c ) ;</div><div class=\"line\">Room* firepit = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The firey pits\"</span>, <span class=\"string\">\"Fire is every where\"</span>, herb_d ) ;</div><div class=\"line\">Room* greenpasture = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The greenpastures\"</span>, <span class=\"string\">\"A meadow is before you\"</span>, genjiblade ) ;</div><div class=\"line\">Room* icecave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The icy caves\"</span>, <span class=\"string\">\"Ice everywhere you look\"</span>, herb_e ) ;</div><div class=\"line\">Room* livingroom = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The living room\"</span>, <span class=\"string\">\"The room is alive\"</span>, dragonarmor ) ;</div><div class=\"line\">Room* cellar = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The cellar\"</span>, <span class=\"string\">\"A dirty cellar filled with rats\"</span>, angelicsword ) ;</div><div class=\"line\">Room* lifespring = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The lifespring\"</span>, <span class=\"string\">\"A beautiful fountain stands\"</span>, herb_f ) ;</div><div class=\"line\">Room* waterfall = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The waterfall\"</span>, <span class=\"string\">\"Clear blue water falls\"</span>, herb_g ) ;</div><div class=\"line\">Room* hellsgate = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The gates of hell\"</span>, <span class=\"string\">\"Large rusty doors lead to hell\"</span>, ultimatearmor ) ;</div><div class=\"line\">Room* dragoncave = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dragon's cave\"</span>, <span class=\"string\">\"An ancient cave...\"</span> ) ;</div><div class=\"line\">Room* dragonsden = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The dragon's den\"</span>, <span class=\"string\">\"A powerful monster awaits\"</span> ) ;</div><div class=\"line\">Room* lostforest = <span class=\"keyword\">new</span> Room( <span class=\"string\">\"The secret forest\"</span>, <span class=\"string\">\"The strongest sword lies hidden here\"</span>, finalweapon ) ;</div><div class=\"line\"></div><div class=\"line\">Filter filter ;</div><div class=\"line\"></div><div class=\"line\">Dispatch dispatch ;</div><div class=\"line\"><span class=\"keyword\">char</span> command ;</div><div class=\"line\"><span class=\"built_in\">string</span> value ;</div><div class=\"line\"><span class=\"comment\">//END creation of the game objects</span></div></pre></td></tr></table></figure></p>\n<p>In a professional game setting it would be here where you would instantiate a connection to your MySQL or whatever database your using and not load the server code until the database connection has been verified; but for this simple game this will be good enough. Now that our game objects have been created, we’ll start by defining the Server constructor. Within the Server constructor we want to initialize the dynamic content of the game, i.e game content which will change state throughout the execution of our game.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> NetGame</div><div class=\"line\">&#123;</div><div class=\"line\">  Server::Server()</div><div class=\"line\">  &#123;  </div><div class=\"line\">    <span class=\"comment\">//BEGIN linking game objects</span></div><div class=\"line\">    mainHall-&gt;link( <span class=\"string\">'e'</span>, *river ) ;</div><div class=\"line\">    river-&gt;link( <span class=\"string\">'s'</span>, *greencave ) ;</div><div class=\"line\">    river-&gt;link( <span class=\"string\">'e'</span>, *bluecave ) ;</div><div class=\"line\">    river-&gt;link( <span class=\"string\">'w'</span>, *mainHall ) ;</div><div class=\"line\">    greencave-&gt;link( <span class=\"string\">'n'</span>, *river ) ;</div><div class=\"line\">    bluecave-&gt;link( <span class=\"string\">'w'</span>, *river ) ;</div><div class=\"line\">    bluecave-&gt;link( <span class=\"string\">'n'</span>, *darkpit ) ;</div><div class=\"line\">    darkpit-&gt;link( <span class=\"string\">'s'</span>, *bluecave ) ;</div><div class=\"line\">    darkpit-&gt;link( <span class=\"string\">'n'</span>, *morbidfield ) ;</div><div class=\"line\">    morbidfield-&gt;link( <span class=\"string\">'s'</span>, *darkpit ) ;</div><div class=\"line\">    morbidfield-&gt;link( <span class=\"string\">'e'</span>, *graveyard ) ;</div><div class=\"line\">    graveyard-&gt;link( <span class=\"string\">'w'</span>, *morbidfield ) ;</div><div class=\"line\">    graveyard-&gt;link( <span class=\"string\">'n'</span>, *crypt ) ;</div><div class=\"line\">    graveyard-&gt;link( <span class=\"string\">'e'</span>, *evilpassage ) ;</div><div class=\"line\">    crypt-&gt;link( <span class=\"string\">'s'</span>, *graveyard ) ;</div><div class=\"line\">    evilpassage-&gt;link( <span class=\"string\">'w'</span>, *graveyard ) ;</div><div class=\"line\">    evilpassage-&gt;link( <span class=\"string\">'s'</span>, *darklair ) ;</div><div class=\"line\">    darklair-&gt;link( <span class=\"string\">'n'</span>, *evilpassage ) ;</div><div class=\"line\">    darklair-&gt;link( <span class=\"string\">'s'</span>, *firepit ) ;</div><div class=\"line\">    firepit-&gt;link( <span class=\"string\">'n'</span>, *darklair ) ;</div><div class=\"line\">    firepit-&gt;link( <span class=\"string\">'e'</span>, *greenpasture ) ;</div><div class=\"line\">    greenpasture-&gt;link( <span class=\"string\">'w'</span>, *firepit ) ;</div><div class=\"line\">    greenpasture-&gt;link( <span class=\"string\">'s'</span>, *icecave ) ;</div><div class=\"line\">    greenpasture-&gt;link( <span class=\"string\">'e'</span>, *livingroom ) ;</div><div class=\"line\">    icecave-&gt;link( <span class=\"string\">'n'</span>, *greenpasture ) ;</div><div class=\"line\">    livingroom-&gt;link( <span class=\"string\">'w'</span>, *greenpasture ) ;</div><div class=\"line\">    livingroom-&gt;link( <span class=\"string\">'e'</span>, *cellar ) ;</div><div class=\"line\">    cellar-&gt;link( <span class=\"string\">'w'</span>, *livingroom ) ;</div><div class=\"line\">    cellar-&gt;link( <span class=\"string\">'n'</span>, *lifespring ) ;</div><div class=\"line\">    cellar-&gt;link( <span class=\"string\">'e'</span>, *hellsgate ) ;</div><div class=\"line\">    lifespring-&gt;link( <span class=\"string\">'s'</span>, *cellar ) ;</div><div class=\"line\">    lifespring-&gt;link( <span class=\"string\">'n'</span>, *waterfall ) ;</div><div class=\"line\">    waterfall-&gt;link( <span class=\"string\">'s'</span>, *lifespring ) ;</div><div class=\"line\">    hellsgate-&gt;link( <span class=\"string\">'w'</span>, *cellar ) ;</div><div class=\"line\">    hellsgate-&gt;link( <span class=\"string\">'e'</span>, *dragoncave ) ;</div><div class=\"line\">    dragoncave-&gt;link( <span class=\"string\">'w'</span>, *hellsgate ) ;</div><div class=\"line\">    dragoncave-&gt;link( <span class=\"string\">'e'</span>, *dragonsden ) ;</div><div class=\"line\">    dragonsden-&gt;link( <span class=\"string\">'w'</span>, *dragoncave ) ;</div><div class=\"line\">    dragonsden-&gt;link( <span class=\"string\">'e'</span>, *lostforest ) ;</div><div class=\"line\">    lostforest-&gt;link( <span class=\"string\">'w'</span>, *dragonsden ) ;</div><div class=\"line\"></div><div class=\"line\">    mainHall-&gt;addMonster( goblin ) ;</div><div class=\"line\">    mainHall-&gt;addMonster( imp ) ;</div><div class=\"line\">    river-&gt;addMonster( bear ) ;</div><div class=\"line\">    river-&gt;addMonster( redgoblin ) ;</div><div class=\"line\">    bluecave-&gt;addMonster( demon ) ;</div><div class=\"line\">    bluecave-&gt;addMonster( zergling ) ;</div><div class=\"line\">    morbidfield-&gt;addMonster( bats ) ;</div><div class=\"line\">    morbidfield-&gt;addMonster( morebats ) ;</div><div class=\"line\">    graveyard-&gt;addMonster( golem ) ;</div><div class=\"line\">    evilpassage-&gt;addMonster( goatdemon ) ;</div><div class=\"line\">    firepit-&gt;addMonster( cyclops ) ;</div><div class=\"line\">    greenpasture-&gt;addMonster( behemoth ) ;</div><div class=\"line\">    livingroom-&gt;addMonster( alien ) ;</div><div class=\"line\">    cellar-&gt;addMonster( giantrat ) ;</div><div class=\"line\">    hellsgate-&gt;addMonster( fallenangel ) ;</div><div class=\"line\">    dragoncave-&gt;addMonster( greatdragon ) ;</div><div class=\"line\">    dragonsden-&gt;addMonster( invincibledragon ) ;</div><div class=\"line\"></div><div class=\"line\">    caves.addRoom( mainHall ) ;</div><div class=\"line\">    caves.addRoom( river ) ;</div><div class=\"line\">    caves.addRoom( greencave ) ;</div><div class=\"line\">    caves.addRoom( bluecave ) ;</div><div class=\"line\">    caves.addRoom( darkpit ) ;</div><div class=\"line\">    caves.addRoom( morbidfield ) ;</div><div class=\"line\">    caves.addRoom( graveyard ) ;</div><div class=\"line\">    caves.addRoom( crypt ) ;</div><div class=\"line\">    caves.addRoom( evilpassage ) ;</div><div class=\"line\">    caves.addRoom( darklair ) ;</div><div class=\"line\">    caves.addRoom( firepit ) ;</div><div class=\"line\">    caves.addRoom( greenpasture ) ;</div><div class=\"line\">    caves.addRoom( icecave ) ;</div><div class=\"line\">    caves.addRoom( livingroom ) ;</div><div class=\"line\">    caves.addRoom( cellar ) ;</div><div class=\"line\">    caves.addRoom( lifespring ) ;</div><div class=\"line\">    caves.addRoom( waterfall ) ;</div><div class=\"line\">    caves.addRoom( hellsgate ) ;</div><div class=\"line\">    caves.addRoom( dragoncave ) ;</div><div class=\"line\">    caves.addRoom( dragonsden ) ;</div><div class=\"line\">    caves.addRoom( lostforest ) ;</div><div class=\"line\">    <span class=\"comment\">//END linking game objects</span></div></pre></td></tr></table></figure>\n<p>Next we’ll set the options for the game, open up the server on our desired port and begin accepting player connections.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// MAX_PLAYERS and PORT can be set in Common.h</span></div><div class=\"line\"><span class=\"keyword\">bool</span> running            =  <span class=\"literal\">true</span>;</div><div class=\"line\">playerNames             =  gcnew Hashtable( MAX_PLAYERS );</div><div class=\"line\">playersByConnection     =  gcnew Hashtable( MAX_PLAYERS );</div><div class=\"line\"></div><div class=\"line\">gameServer              =  gcnew TcpListener( PORT );</div><div class=\"line\">gameServer-&gt;Start();</div></pre></td></tr></table></figure></p>\n<p>Now that the server is started you want to run the servers connection loop to keep it in a pending state for new players<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">      <span class=\"comment\">// Server loop is infinite since we have to close the program</span></div><div class=\"line\">      <span class=\"comment\">// manually when we want the server to stop.</span></div><div class=\"line\">      <span class=\"keyword\">while</span> ( <span class=\"literal\">true</span> )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ( gameServer-&gt;Pending() )</div><div class=\"line\">      &#125;</div><div class=\"line\">    TcpClient^ playerConnection = gameServer-&gt;AcceptTcpClient();</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"SERVER: New player now connected! \"</span>  ); </div><div class=\"line\">    <span class=\"function\">gcnew <span class=\"title\">TcpRelayClient</span><span class=\"params\">( playerConnection )</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The next method to define is the global messaging method which can send messages from the server to all players. This is a key feature for our game because we can easily alert players of events such as when a new player connects and or other things.<br>The code might look confusing at first but all we’re doing is gathering up all the open player connections into a array of Sockets and iterating through each socket and pushing a copy of the message out. Oh and we also catch the exception if the socket connection failed, then we just remove it from the server’s list(remember the playersconnections HashTable from server.h).<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Server::MsgToAll( String^ from, String^ message )</div><div class=\"line\">&#123;</div><div class=\"line\">  StreamWriter^ serverwriter;</div><div class=\"line\">  ArrayList^ toRemove = gcnew ArrayList( <span class=\"number\">0</span> );</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;^  tcpClients =  gcnew <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;( playerNames-&gt;Count );</div><div class=\"line\"></div><div class=\"line\">  Server::playerNames-&gt;Values-&gt;CopyTo(tcpClients, <span class=\"number\">0</span>); </div><div class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>; count &lt; tcpClients-&gt;Length; ++count )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (message-&gt;Trim() == <span class=\"string\">\"\"</span> || tcpClients[count] == <span class=\"literal\">nullptr</span> )  </div><div class=\"line\">        <span class=\"keyword\">continue</span>;  </div><div class=\"line\">      serverwriter =  gcnew StreamWriter(tcpClients[ count ]-&gt;GetStream());  </div><div class=\"line\">      <span class=\"comment\">//write our message to the window  </span></div><div class=\"line\">      serverwriter-&gt;WriteLine(from + <span class=\"string\">\": \"</span> + message);  </div><div class=\"line\">      <span class=\"comment\">//make sure all bytes are written  </span></div><div class=\"line\">      serverwriter-&gt;Flush();  </div><div class=\"line\">      <span class=\"comment\">//dispose of the writer object until needed again  </span></div><div class=\"line\">      serverwriter = <span class=\"literal\">nullptr</span>;  </div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> ( Exception^ error_44 )</div><div class=\"line\">    &#123;</div><div class=\"line\">      error_44 = error_44;</div><div class=\"line\">      String^ name = (String^)playersByConnection[tcpClients[count]];  </div><div class=\"line\">      <span class=\"comment\">//send the message that the user has left  </span></div><div class=\"line\">      Server::ServerMsgToAll(<span class=\"string\">\"** \"</span> + name + <span class=\"string\">\" ** Has Left The Room.\"</span>);  </div><div class=\"line\">      <span class=\"comment\">//remove the name from playernames list</span></div><div class=\"line\">      Server::playerNames-&gt;Remove( name );</div><div class=\"line\">      <span class=\"comment\">//remove that index of the array, thus freeing it up  </span></div><div class=\"line\">      <span class=\"comment\">//for another user  </span></div><div class=\"line\">      Server::playersByConnection-&gt;Remove(tcpClients[count]);  </div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Next we’ll write the code for the ServerMsgToAll, the thing about this method is that its only used to report back to the server admin the messages sent via MsgToAll when an exception occurred. The logic behind the method is similar to MsgToAll so enter the code below.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Server::ServerMsgToAll(String^ serverMessage )</div><div class=\"line\">&#123;</div><div class=\"line\">  StreamWriter^ serverwriter;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;^  tcpClients =  gcnew <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;( playerNames-&gt;Count );</div><div class=\"line\"></div><div class=\"line\">  Server::playerNames-&gt;Values-&gt;CopyTo(tcpClients, <span class=\"number\">0</span>); </div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>; count &lt; tcpClients-&gt;Length; ++count )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (serverMessage-&gt;Trim() == <span class=\"string\">\"\"</span> || tcpClients[count] == <span class=\"literal\">nullptr</span> )  </div><div class=\"line\">        <span class=\"keyword\">continue</span>;  </div><div class=\"line\">      serverwriter =  gcnew StreamWriter(tcpClients[ count ]-&gt;GetStream());  </div><div class=\"line\">      <span class=\"comment\">//write our message to the window  </span></div><div class=\"line\">      serverwriter-&gt;WriteLine( serverMessage );  </div><div class=\"line\">      <span class=\"comment\">//make sure all bytes are written  </span></div><div class=\"line\">      serverwriter-&gt;Flush();  </div><div class=\"line\">      <span class=\"comment\">//dispose of the writer object until needed again  </span></div><div class=\"line\">      serverwriter = <span class=\"literal\">nullptr</span>;  </div><div class=\"line\">      Console::WriteLine( <span class=\"string\">\"SERVER SENT:\"</span> + <span class=\"string\">\" has joined the game\"</span> );</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> ( Exception^ error_44 )</div><div class=\"line\">    &#123;</div><div class=\"line\">      error_44 = error_44;</div><div class=\"line\">      String^ name = (String^)playersByConnection[tcpClients[count]];  </div><div class=\"line\"></div><div class=\"line\">      Server::playerNames-&gt;Remove( name );</div><div class=\"line\">      <span class=\"comment\">//remove that index of the array, thus freeing it up  </span></div><div class=\"line\">      <span class=\"comment\">//for another user  </span></div><div class=\"line\">      Server::playersByConnection-&gt;Remove(tcpClients[count]);  </div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>MsgToPlayer is similar again to the previous two methods except that the MsgToPlayer accepts an additional parameter for the player name of who you wish to direct the message at. The player name is reference by looking up the playerNames hash table using the player name as the key.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Server::MsgToPlayer(String^ serverMessage, System::String^ playername)</div><div class=\"line\">&#123;</div><div class=\"line\">  StreamWriter^ serverwriter;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;^ tcpClients = gcnew <span class=\"built_in\">array</span>&lt;Sockets::TcpClient^&gt;( playerNames-&gt;Count );</div><div class=\"line\"></div><div class=\"line\">  Server::playerNames-&gt;Values-&gt;CopyTo(tcpClients, <span class=\"number\">0</span>); </div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>; count &lt; tcpClients-&gt;Length; ++count )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (serverMessage-&gt;Trim() == <span class=\"string\">\"\"</span> || tcpClients[count] == <span class=\"literal\">nullptr</span> )  </div><div class=\"line\">        <span class=\"keyword\">continue</span>;  </div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>( playerNames-&gt;ContainsKey( playername ) )</div><div class=\"line\">      &#123;</div><div class=\"line\">        serverwriter =  gcnew StreamWriter(tcpClients[ count ]-&gt;GetStream());  </div><div class=\"line\">        <span class=\"comment\">//write our message to the window  </span></div><div class=\"line\">        serverwriter-&gt;WriteLine( serverMessage );  </div><div class=\"line\">        <span class=\"comment\">//make sure all bytes are written  </span></div><div class=\"line\">        serverwriter-&gt;Flush();  </div><div class=\"line\">        <span class=\"comment\">//dispose of the writer object until needed again  </span></div><div class=\"line\">        serverwriter = <span class=\"literal\">nullptr</span>;  </div><div class=\"line\">        Console::WriteLine( <span class=\"string\">\"SERVER SENT: \"</span> + serverMessage + <span class=\"string\">\" to \"</span> + playername );</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> ( Exception^ error_44 )</div><div class=\"line\">    &#123;</div><div class=\"line\">      error_44 = error_44;</div><div class=\"line\">      String^ name = (String^)playersByConnection[tcpClients[count]];  </div><div class=\"line\"></div><div class=\"line\">      Server::playerNames-&gt;Remove( name );</div><div class=\"line\">      <span class=\"comment\">//remove that index of the array, thus freeing it up  </span></div><div class=\"line\">      <span class=\"comment\">//for another user  </span></div><div class=\"line\">      Server::playersByConnection-&gt;Remove(tcpClients[count]);  </div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The next method just handles the case when a new player connection has been made.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// When a new player connects to the server spawn a thread that will</span></div><div class=\"line\"><span class=\"comment\">// run the game loop.</span></div><div class=\"line\">TcpRelayClient::TcpRelayClient( TcpClient^ playerConnection )</div><div class=\"line\">&#123;</div><div class=\"line\">  client =  playerConnection;</div><div class=\"line\">  Thread^   playerRelayThread   = gcnew Thread( </div><div class=\"line\">      gcnew ThreadStart( <span class=\"keyword\">this</span>, &amp; NetGame::TcpRelayClient::startRelay ) );</div><div class=\"line\"></div><div class=\"line\">  playerRelayThread-&gt;Start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>If you look at the last method you’ll notice that for each player connection we spawn a new thread on the server with the startRelay() method. The startRelay() method was chosen because its the method which runs all the logic for interacting with our game database. For the most part the startRelay() method consist of the same game loop from the test version of the game, you’ll notice it soon but before that the initialization for the game loop is where the new code is. To start we setup both a stream writer and stream reader to send and receive messages from the player on the thread.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// When we start a new thread for a player who just connected,</span></div><div class=\"line\"><span class=\"comment\">// this is the method the thread runs.</span></div><div class=\"line\"><span class=\"comment\">// In short this is the game loop the player interacts with.</span></div><div class=\"line\"><span class=\"keyword\">void</span> TcpRelayClient::startRelay( )</div><div class=\"line\">&#123;  </div><div class=\"line\">  reader = gcnew StreamReader( client-&gt;GetStream() );</div><div class=\"line\">  <span class=\"comment\">// Writer sends messages out to the client whos connection</span></div><div class=\"line\">  <span class=\"comment\">// is running on this thread.</span></div><div class=\"line\">  writer = gcnew StreamWriter( client-&gt;GetStream() );</div><div class=\"line\"></div><div class=\"line\">  NetworkStream^ netReader = client-&gt;GetStream();</div></pre></td></tr></table></figure></p>\n<p>Just before we actually let the player begin sending new commands we have to store the player’s name within our players hashtable. Please note that for this simple game we don’t double check that two players will have the exact same name because we aren’t building this game to support thousands of players, so our collision prone hashtables are good enough. Ok so lets get the players name, store it within the player hashtables and then let them play.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">writer-&gt;WriteLine( <span class=\"string\">\"New Game \"</span> );</div><div class=\"line\">Console::WriteLine( <span class=\"string\">\"SERVER: Getting the new users Name \"</span> );</div><div class=\"line\">writer-&gt;WriteLine( <span class=\"string\">\"Enter a new name for your charecter\"</span> );</div><div class=\"line\">writer-&gt;Flush();</div><div class=\"line\">Console::WriteLine( <span class=\"string\">\"SERVER SENT: Enter a new name for your character\"</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Read the player's response</span></div><div class=\"line\"><span class=\"built_in\">array</span>&lt;Byte, 1&gt;^  bytesFromClient = gcnew <span class=\"built_in\">array</span>&lt;Byte, <span class=\"number\">1</span>&gt;(<span class=\"number\">256</span>);</div><div class=\"line\">String^ strFromClient = String::Empty ;</div><div class=\"line\">Int32 bytes = <span class=\"number\">0</span> ;</div><div class=\"line\">bytes = netReader-&gt;Read( bytesFromClient, <span class=\"number\">0</span>, bytesFromClient-&gt;Length ) ;</div><div class=\"line\">strFromClient = Text::Encoding::ASCII-&gt;GetString( bytesFromClient, <span class=\"number\">0</span>, bytes );</div><div class=\"line\">player = strFromClient ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Add the player to the hash tables as a new key value pair</span></div><div class=\"line\">Console::WriteLine( player + <span class=\"string\">\" has joined the game\"</span> );</div><div class=\"line\">Server::playerNames-&gt;Add( player, client ); </div><div class=\"line\">Server::playersByConnection-&gt;Add( client, player );</div><div class=\"line\">String^ message ;</div><div class=\"line\"></div><div class=\"line\">Thread^ playerConnect = gcnew Thread( </div><div class=\"line\">    gcnew ThreadStart( <span class=\"keyword\">this</span>, &amp; NetGame::TcpRelayClient::run ) );</div><div class=\"line\"></div><div class=\"line\">playerConnect-&gt;Start();</div></pre></td></tr></table></figure></p>\n<p>Finally we can insert the code for the game loop which is directly extracted from the test game but with some slight additions to how the strings are processed. If you can recall from “server.h” there were two methods, MarshalString and toSysString. Marshal string converts a given managed string or a System::String to native std::string, while toSysString does exactly what it says it does.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//ALL THE CODE BELOW IS THE ACTUAL GAME LOOP</span></div><div class=\"line\">  <span class=\"comment\">//Create a new player and add to the Dungeon </span></div><div class=\"line\">  <span class=\"built_in\">string</span> output ;</div><div class=\"line\">  <span class=\"built_in\">string</span> input ;</div><div class=\"line\">  String^ tempStr = <span class=\"literal\">nullptr</span> ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">string</span> playerName ;</div><div class=\"line\">  <span class=\"comment\">// MarshalString converts a managed String^ to a native string</span></div><div class=\"line\">  MarshalString( player, playerName ) ; </div><div class=\"line\">  Player* thePlayer = <span class=\"keyword\">new</span> Player( playerName, mainHall ) ;</div><div class=\"line\">  output = caves.addPlayer( thePlayer ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Let all players know of the new player</span></div><div class=\"line\">  message = toSysString( output ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Display needed info for the players</span></div><div class=\"line\">  output = <span class=\"string\">\"\\nDefeat all monsters\"</span> ;</div><div class=\"line\">  output += <span class=\"string\">\"\\nEnter a new command to start, for help menu enter\"</span> ;</div><div class=\"line\">  output += <span class=\"string\">\"\\nhelp:\"</span> ;</div><div class=\"line\">  output += <span class=\"string\">\"\\nTo quit enter \\\"quit\\\"\"</span> ;</div><div class=\"line\">  message += toSysString( output ) ;</div><div class=\"line\">  Server::MsgToPlayer( message, player ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Get client command</span></div><div class=\"line\">  bytesFromClient-&gt;Clear( bytesFromClient, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\">  bytes = netReader-&gt;Read( bytesFromClient, <span class=\"number\">0</span>, bytesFromClient-&gt;Length ) ;</div><div class=\"line\">  strFromClient = Text::Encoding::ASCII-&gt;GetString( bytesFromClient, <span class=\"number\">0</span>, bytes ); </div><div class=\"line\">  MarshalString( strFromClient, input ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//Start the game loop</span></div><div class=\"line\">  <span class=\"keyword\">while</span>( input != <span class=\"string\">\"quit\"</span> )</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//Pass the users message through the filter</span></div><div class=\"line\">    <span class=\"keyword\">if</span>( filter.validateMessage( input ) )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//Split the users message into a command and value pair</span></div><div class=\"line\">      command = dispatch.extractCommand( input ) ;</div><div class=\"line\">      value = dispatch.extractValue( input ) ;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//Match the command and forward the value</span></div><div class=\"line\">      <span class=\"keyword\">switch</span>( command )</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>: <span class=\"comment\">//Attack </span></div><div class=\"line\">          <span class=\"comment\">//If the monster does not exist or the name was mispelled</span></div><div class=\"line\">          <span class=\"keyword\">if</span>( &amp;(thePlayer-&gt;mLocation-&gt;getMonsterRef( value )) == <span class=\"literal\">NULL</span> )</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"comment\">//cout &lt;&lt; \"There is no \" + value + \" at this location\" &lt;&lt; endl ;</span></div><div class=\"line\">            output = <span class=\"string\">\"There is no \"</span> + value + <span class=\"string\">\" at this location\"</span> ;</div><div class=\"line\">            message = toSysString( output ) ;</div><div class=\"line\">            Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">            <span class=\"keyword\">break</span> ;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">//If the monster is there but in combat the player cannot fight it</span></div><div class=\"line\">          <span class=\"keyword\">if</span>( thePlayer-&gt;mLocation-&gt;getMonsterRef( value ).inCombat == <span class=\"literal\">true</span> )</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"comment\">//cout &lt;&lt; \"The \" + value + \" is currently fighting\" &lt;&lt; endl ;</span></div><div class=\"line\">            output = <span class=\"string\">\"The \"</span> + value + <span class=\"string\">\" is currently fighting\"</span> ;</div><div class=\"line\">            message = toSysString( output ) ;</div><div class=\"line\">            Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">            <span class=\"keyword\">break</span> ;</div><div class=\"line\">          &#125;</div><div class=\"line\">          caves.combatLoop( *thePlayer, thePlayer-&gt;mLocation-&gt;getMonsterRef( value ) ) ;</div><div class=\"line\">          output = <span class=\"string\">\"combat has finished\"</span> ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span>: <span class=\"comment\">//Move</span></div><div class=\"line\">          <span class=\"comment\">//cout &lt;&lt; thePlayer-&gt;move( value[0] ) ;</span></div><div class=\"line\">          output = thePlayer-&gt;move( value[<span class=\"number\">0</span>] ) ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'f'</span>: <span class=\"comment\">//Find</span></div><div class=\"line\">          <span class=\"comment\">//cout &lt;&lt; thePlayer-&gt;search() ;</span></div><div class=\"line\">          output = thePlayer-&gt;search() ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'l'</span>: <span class=\"comment\">//Location</span></div><div class=\"line\">          <span class=\"comment\">//cout &lt;&lt; thePlayer-&gt;getLocation() ;</span></div><div class=\"line\">          output = thePlayer-&gt;getLocation() ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>: <span class=\"comment\">//Equip</span></div><div class=\"line\">          <span class=\"comment\">//cout &lt;&lt; thePlayer-&gt;equip( value ) ;</span></div><div class=\"line\">          output = thePlayer-&gt;equip( value ) ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span>: <span class=\"comment\">//You</span></div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"built_in\">string</span>* playerStats = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span> ;</div><div class=\"line\">            playerStats = caves.playerStatus( *thePlayer ) ;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">7</span> ; ++i )</div><div class=\"line\">            &#123;</div><div class=\"line\">              <span class=\"comment\">//cout &lt;&lt; playerStats[i] &lt;&lt; endl ;</span></div><div class=\"line\">              output = playerStats[i] ;</div><div class=\"line\">              message = toSysString( output ) ;</div><div class=\"line\">              Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            playerStats = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">            <span class=\"keyword\">delete</span> playerStats ;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'t'</span>: <span class=\"comment\">//Talk</span></div><div class=\"line\">          output = value ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToAll( player, message ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span>: <span class=\"comment\">//Help Menu</span></div><div class=\"line\">          <span class=\"comment\">//cout &lt;&lt; \"a: mv: find: loc: eq: you: t: help:\" &lt;&lt; endl ;</span></div><div class=\"line\">          output = <span class=\"string\">\"a: mv: find: loc: eq: you: t: help:\"</span> ;</div><div class=\"line\">          message = toSysString( output ) ;</div><div class=\"line\">          Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">          <span class=\"keyword\">break</span> ;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//cout &lt;&lt; \"Invalid command\" &lt;&lt; endl ;</span></div><div class=\"line\">      output = <span class=\"string\">\"Invalid command\"</span> ;</div><div class=\"line\">      message = toSysString( output ) ;</div><div class=\"line\">      Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( caves.isComplete() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//cout &lt;&lt; \"Dungeon Cleared, YOU WIN!\" &lt;&lt; endl ;</span></div><div class=\"line\">      output = <span class=\"string\">\"Dungeon Cleared, YOU WIN!\"</span> ;</div><div class=\"line\">      message = toSysString( output ) ;</div><div class=\"line\">      Server::MsgToAll( player, message ) ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>( thePlayer-&gt;death() )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//cout &lt;&lt; thePlayer-&gt;getName() + \" was slain by the \" + thePlayer-&gt;mLocation-&gt;getMonsterRef( value ).getName() &lt;&lt; endl ;</span></div><div class=\"line\">      <span class=\"comment\">//output = thePlayer-&gt;getName() + \" was slain by the \" + thePlayer-&gt;mLocation-&gt;getMonsterRef( value ).getName() ;</span></div><div class=\"line\">      output = <span class=\"string\">\"slain type quit to continue\"</span> ;</div><div class=\"line\">      message = toSysString( output ) ;</div><div class=\"line\">      Server::MsgToPlayer( message, player ) ;</div><div class=\"line\">      thePlayer-&gt;mLocation-&gt;getMonsterRef( value ).inCombat = <span class=\"literal\">false</span> ;</div><div class=\"line\">      <span class=\"keyword\">break</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"comment\">//Get the next command</span></div><div class=\"line\">      <span class=\"comment\">//cout &lt;&lt; \"\\n\\nNew Command\" &lt;&lt; endl ;</span></div><div class=\"line\">      <span class=\"comment\">//cin &gt;&gt; input ;</span></div><div class=\"line\">      <span class=\"comment\">//bytes = 0 ;</span></div><div class=\"line\">      bytesFromClient-&gt;Clear( bytesFromClient, <span class=\"number\">0</span>, <span class=\"number\">256</span> ) ;</div><div class=\"line\">      bytes = netReader-&gt;Read( bytesFromClient, <span class=\"number\">0</span>, bytesFromClient-&gt;Length ) ;</div><div class=\"line\">      strFromClient = Text::Encoding::ASCII-&gt;GetString( bytesFromClient, <span class=\"number\">0</span>, bytes ); </div><div class=\"line\">      MarshalString( strFromClient, input ) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//End of game loop</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Before we demo our fully functional multiplayer game we have to add the last utility methods for string processing and for logging of the games actions to the server’s console.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// When running is set to true during initialization of the server</span></div><div class=\"line\"><span class=\"comment\">// which happens when the server constructor is called, this will</span></div><div class=\"line\"><span class=\"comment\">// begin the loop which just displays all game info to the </span></div><div class=\"line\"><span class=\"comment\">// server admin. Think of it as a log of all the players actions.</span></div><div class=\"line\"><span class=\"keyword\">void</span>  TcpRelayClient::run()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">bool</span> running = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">try</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    String^ line = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> ( running )</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( client-&gt;Connected )</div><div class=\"line\">      &#123;</div><div class=\"line\">        line = reader-&gt;ReadLine();</div><div class=\"line\">        Server::MsgToAll( player,  line );</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span></div><div class=\"line\">      &#123;</div><div class=\"line\">        running = <span class=\"literal\">false</span>;            </div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span> ( Exception^ eRun )</div><div class=\"line\">  &#123;</div><div class=\"line\">    Console::WriteLine( <span class=\"string\">\"EXCEPTION\"</span> +  eRun-&gt;Message + <span class=\"string\">\"\\nThe player named: \"</span> + player + <span class=\"string\">\" has disconnected, the server continues\"</span> );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Converts a managed string to a native string </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MarshalString</span> <span class=\"params\">( String ^ s, <span class=\"built_in\">string</span>&amp; os )</span> </div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Runtime::InteropServices;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* chars = (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)(Marshal::StringToHGlobalAnsi(s)).ToPointer();</div><div class=\"line\">  os = chars;</div><div class=\"line\">  Marshal::FreeHGlobal(IntPtr((<span class=\"keyword\">void</span>*)chars));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Converts a native string to a managed one</span></div><div class=\"line\">String^ toSysString( <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> output )</div><div class=\"line\">&#123;</div><div class=\"line\">  String^ tempStr = gcnew String( output.c_str() ) ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> tempStr ;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now open up the file “main.cpp” and run the server, we run the server via the constructor method so as soon as you create the server it will pend for request on 127.0.0.1 port 13000 for new players.</p>\n<p>For the demo what you’ll need to do is to open up three instances of Visual Studio. One instance will run the server, so open up the server project on the first one while the second and third instances will each run clients; so open up the client project on the other two. Once you have all three open the first step is to start the server.</p>\n<p>Then launch the second client and give this new player a name.</p>\n<p>Now switch back to the first client enter the following commands, “eq:woodsword” and then “a:imp” this will have the effect of equipping the woodsword item from the Main Hall and killing the imp monster. Finally switch back over to the second client and enter the following command “find:”, you will notice that both the woodsword and the imp have cannot be found as they were both taken care of by the first player. You have just finished writing a simple text based multiplayer RPG.</p>\n<p>Once again the two files below, the one for the server and the one for the client are hosted on my dropbox account, so if at any time they aren’t accessible(I often move files around and don’t clean up dead links) and put a request into the comments section.</p>\n<p><a href=\"http://dl.dropbox.com/u/22280460/Simple_RPG_Client.rar\">Click here to download the client application</a><br><a href=\"http://dl.dropbox.com/u/22280460/Simple_RPG_Server.rar\">Click here to download the server application</a></p>"},{"title":"UDP Echo Server In C Tutorial Part I","date":"2014-11-08T08:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/udpechoinc.jpg","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/udpechoinc.jpg","comments":0,"_content":"Lately I've been getting back into C, for various reasons I haven't been impressed so far with either GoLang nor Rust and the newest additions to the C++ standard seem to be making the language increasingly harder to manage. However, because I might be developing some larger C++ projects in the future I want to revisit the C programming language in order to strengthen my fundamentals in case I need to deal with raw pointers/unsafe sections of C++ applications. What better place to start getting back into C then with sockets programming.\n\n<!-- more -->\n## Intro\n\n[Click here for Part II](/2014/11/09/udpechoincp2)\n\n As my first blog post on getting back into C/C++ programming I want to look at how one would approach building a simple echo server in C using sockets.If you aren't aware an echo server is a server which copies the client data and sends it back to them upon each request. The simplicity of the echo server is why it is often considered to be the \"Hello World\" of socket programming. Before we begin make sure you have the following...\n\n- A working C compiler, GCC(Linux), Clang(Mac OSX) and Visual Studio C++(Windows) are all great compilers that come standard with their operating systems\n\n- A text editor that can enable C syntax highlighting. I prefer to use [Vim](www.vim.org) but [SublimeText3](www.sublimetext.com/3) is a great cross-platform text-editor that is gaining popularity\n\n- IDEs are also fine to use but for this tutorial you probably won't need one. [Eclipse CDT is great for Linux](http://www.eclipse.org/cdt/), while [Visual Studio](http://www.visualstudio.com/) and [Xcode](https://developer.apple.com/xcode/) are the usual suspects on Windows and Mac OSX respectively.\n\nOnce you have your text editor or IDE setup for C/C++ development we can begin.\n\n## Part I: The Client\n\n### The C preprocessor\nOur goal is to build an echo server client. However, we want our client to be able to run on all of the major platforms Linux, OSX and Windows.\nTo accomplish this we'll need to define some [conditional compilation](http://en.wikipedia.org/wiki/Conditional_compilation) rules using C's prepreprocessor grammar.\n\n- Create a working directory called **UdpEcho**\n\n- Change into the directory *UdpEcho* and create a file called **client.c**\n\nAdd the following preprocessor code to make our echo client compile nicely on different platforms.\n```cpp\n/* client.c */\n\n/* These numbers can be anything thing as long as they are different */\n#define PLATFORM_WINDOWS  1\n#define PLATFORM_MAC      2\n#define PLATFORM_LINUX    3\n\n/* C standard headers */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#if defined(_WIN32) /* Is recognized by Visual C++ compiler */\n\n#define PLATFORM PLATFORM_WINDOWS\n\n#elif defined(__APPLE__) /* Is recognized by Clang */\n\n#define PLATFORM PLATFORM_MAC\n\n#else\n\n#define PLATFORM PLATFORM_LINUX\n\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\n\n#include <winsock2.h> /* Winsock2 is the WinAPI sockets library */\n\n#elif PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\n\n#include <sys/socket.h> /* Sockets header */\n#include <netinet/in.h> /* Internet IP address header */\n#include <fcntl.h> /*  file control options header */\n#include <arpa/inet.h> /* Internet host order to network order and vice versa operations */\n\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\n\n#pragma comment(lib,\"ws2_32.lib\") /* Necessary Winsock2 library pragma */\n\n#endif\n```\nWhat will happen when we compile this later is that depending on your operating system the C compiler will either include or exclude specific sections based on the platform detected.\n\nIf you are using an intelligent IDE the source code will fade out the preprocessor blocks not used by your system to serve as a visual explaination. For instance if we are on Linux our code will not include the winsock2 header.\n\n<blockquote>\nMany software devs tend to sometimes rant a little too much about the old WinAPI codebase especially given since in todays world you'll use the C++ friendly WinRuntimeAPI libraries instead but if you go read about the history of WinAPI you'll find that Microsoft tried very hard to address the difficulties developers had with the existing BSD libraries. For instance look at how we only had to include just a single header for Windows. Anyways if you're curious about the Winsock libraries I suggest going straight to the [MSDN pages](http://msdn.microsoft.com/en-us/library/windows/desktop/ms740673.aspx) on the topic.\n</blockquote>\n\n### Function prototypes and object macros\nAfter declaring conditional compliation macros and including header files C programs typically reserve the next section of the code for declaring object macros and function prototypes.\n\nWe won't be needing very many for the udp echo client but here they are. Add the following code to *client.c* as listed below.\n\n```cpp\n/* client.c */\n/* \n * See http://stackoverflow.com/questions/3988122/static-const-int-not-good-enough-for-array-size\n * For why we have to use #define here vs a const int\n */\n#define PORTNUM 12354\n#define BUFMAX  1024\n\n#if PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\nvoid error(const char*);\nvoid macLinuxEchoLoop(int, struct sockaddr*, socklen_t);\nvoid macLinuxEchoClient();\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\nvoid windowsEchoLoop(SOCKET, SOCKADDR*, size_t);\nint windowsEchoClient();\n#endif\n```\n\nUnder the Linux/Mac section we have a error handling function that you'll hopefully never have to use but just in case you decide to fork this code and add more features you can use it as a debug logger. Aside from the error function, both groups have two functions; the echo loop itself and the client socket setup function. We'll add the main function first and start off with the Mac/Linux section before tackling the Windows code.\n\n### Main\nHere is the main function.\n\n```cpp\n/* class.c */\nint main(int argc, char** argv) \n{\n#if PLATFORM == PLATFORM_WINDOWS\n\n  windowsEchoClient();\n\n#else\n\n  macLinuxEchoClient();\n\n#endif\n\n  puts(\"Press any key to continue\");\n  getc(stdin);\n\n  return EXIT_SUCCESS;\n}\n```\n\nAlthough its a tad bit ugly our preprocessor object macro for *PLATFORM* allows us to select the path of execution based on our operating system.\n\n## Mac and Linux Client Code\n\n```cpp\n/* client.c */\n#if PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\n\nvoid error(const char *msg) \n{\n  perror(msg);\n  exit(EXIT_FAILURE);\n}\n```\n\nOur error function is just a wrapper around the stdin function for printing messages to stderr. Its a short function and probably could have been written as a *inline* function but optimization isn't the topic of this blog post. Moving along, next up is the client socket setup function.\n\n```cpp\n/* client.c */\nvoid macLinuxEchoClient()\n{\n  int socketFileDescriptor; /* Create socket file descriptor */\n  struct sockaddr_in serverAddr; /* Struct for holding information about what server we want to connect to */\n\n  /* Initialize the struct */\n  /* http://fdiv.net/2009/01/14/memset-vs-bzero-ultimate-showdown */\n  bzero(&serverAddr, sizeof(serverAddr));\n\n  serverAddr.sin_family = AF_INET; /* Our socket will use the internet protocol */\n  serverAddr.sin_port = htons(PORTNUM); /* Convert our int to UDP/IP network byte order */\n  serverAddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\"); /* The location of the server, will be Localhost */\n\n  /* Convert the human friendly IP address string into a network binary structure */\n  inet_pton(AF_INET, \"127.0.0.1\", &serverAddr.sin_addr);\n\n  /* Establish our socket_fd as a UDP/IP socket or datagram socket using UDP over IP as the protocol */\n  socketFileDescriptor = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\n  if(socketFileDescriptor < 0)\n    error(\"socket() failed\");\n\n  /* Our message loop needs the socket and server address info, \n   * the sizeof is due to sockaddr being a fixed size struct\n   */\n  macLinuxEchoLoop(socketFileDescriptor, (struct sockaddr*)& serverAddr, sizeof(serverAddr));\n}\n```\n\nThe beauty of the [User Datagram Protocol](http://en.wikipedia.org/wiki/User_Datagram_Protocol) is that we don't need to actually confirm that our sever exists.\n\nWe give it a location, arm our packets with some data and fire away. Whether or not the server actually receives the packets and any error handling for packets dropped along the way is entirely up to the developer of the application. \n\n```cpp\n/* client.c */\nvoid macLinuxEchoLoop(int sock, struct sockaddr* serverAddr, socklen_t serverlen)\n{\n  int bytesRead;\n  int sentResult;\n  char inputBuffer[BUFMAX]  = {0};\n  char recvBuffer[BUFMAX]   = {0};\n\n  for(;;)\n  {\n    printf(\"Type message: \");\n    fgets(inputBuffer, BUFMAX, stdin);\n\n    sentResult = sendto(sock, inputBuffer, strlen(inputBuffer), 0, serverAddr, serverlen);\n\n    if(sentResult < 0)\n      error(\"sendTo() failed\");\n\n    bytesRead = recvfrom(sock, recvBuffer, BUFMAX, 0, NULL, NULL);\n\n    if(bytesRead < 0)\n      error(\"recvfrom() failed\");\n\n    recvBuffer[bytesRead] = 0; /* NULL terminates the char array */\n    printf(\"Server responds: %s\\n\", recvBuffer);\n  }\n}\n\n#endif\n```\n\nThe above function is the echo loop. Its goal is to accept user input from the keyboard, send it off to the server and spit back out the results.\n\nThe only gotcha within the echo loop is the fact that we have to use buffers for storing our data. So basically whenever you want to send data to the server, include the inputBuffer and whenever you want to read a response store it to the recvBuffer. That about wraps up the client code for Mac and Linux.\n\n### Windows client code\n\nOn Windows based platforms our code will look very similar, with the primary difference being that the Winsock library uses several predefined macros to make our code easier to read. Of course one could easily do the same with good old BSD code Mac/Linux but its nice that Winsock provides macros such as `INVALID_SOCKET` versus the C style of checking \"if the return value is negative\".\n\n```cpp\n/* client.c */\n#if PLATFORM == PLATFORM_WINDOWS\n\nint windowsEchoClient()\n{\n  SOCKET sock; /* Sockets are treated differently from file descriptors on Windows */\n  sockaddr_in serverAddr;\n  WSADATA wsaDat; /* Winsock startup data */\n\n  /* From Msdn. The WSAStartup function initiates use of the Winsock DLL by a process. */\n  int wsaError = WSAStartup( MAKEWORD(2,2), &wsaDat );\n\n  if(!wsaError)\n  {\n    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\n    if (sock == INVALID_SOCKET)\n    {\n      wprintf(L\"socket function failed with error = %d\\n\", WSAGetLastError() );\n      exit(-1);\n    }\n\n    /* ZeroMemory is the Windows version of bzero which is just a wrapper for memset using 0 as the default memory value */\n    ZeroMemory(&serverAddr, sizeof(serverAddr));\n\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(PORTNUM);\n    serverAddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\n    windowsEchoLoop(sock, (SOCKADDR*)& serverAddr, sizeof(serverAddr));\n  }\n  else\n  {\n    return EXIT_FAILURE;\n  }\n}\n```\n\nIf you understood the Mac/Linux client you shouldn't have a hard time digesting the Windows equivalent of the EchoLoop function. The one huge difference here the use of WSACleanup(); if you don't use it Windows will whine at you for being a sloppy socket programmer.\n\n```cpp\nvoid windowsEchoLoop(SOCKET sock, SOCKADDR* serverAddr, size_t serverlen)\n{\n  int bytesRead;\n  int sendToResult;\n  char inputBuffer[BUFMAX] = {0};\n  char recvBuffer[BUFMAX] = {0};\n\n  for(;;)\n  {\n    printf(\"Type message: \");\n    fgets(inputBuffer, BUFMAX, stdin);\n\n    sendToResult = sendto(sock, inputBuffer, strlen(inputBuffer), 0, serverAddr, serverlen);\n\n    if (sendToResult == SOCKET_ERROR) {\n      wprintf(L\"sendto failed with error: %d\\n\", WSAGetLastError());\n      closesocket(sock);\n      WSACleanup();\n\n      puts(\"Press any key to continue\");\n      getc(stdin);\n      exit(sendToResult);\n    }\n\n    bytesRead = recvfrom(sock, recvBuffer, BUFMAX, 0, NULL, NULL);\n\n    if (bytesRead == SOCKET_ERROR) {\n      wprintf(L\"recvfrom failed with error: %d\\n\", WSAGetLastError());\n      closesocket(sock);\n      WSACleanup();\n\n      puts(\"Press any key to continue\");\n      getc(stdin);\n      exit(bytesRead);\n    }\n\n    recvBuffer[bytesRead] = 0; /* NULL terminates the char array */\n    printf(\"Server responds: %s\\n\", recvBuffer);\n  }\n}\n\n#endif\n```\n\nThats it for today; below is the complete source code.\n\n### Complete Source Code\n\n<script src=\"https://gist.github.com/taywils/80720c98cc4b24dea9cd.js\"> </script>\n\n[Click here for Part II](/2014/11/09/udpechoincp2)\n","source":"_posts/udpechoinc.md","raw":"---\ntitle: UDP Echo Server In C Tutorial Part I\ndate: 2014-11-08\ntags: [cpp]\ncategories: [tutorial, socket-programming]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/udpechoinc.jpg\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/udpechoinc.jpg\ncomments: false\n---\nLately I've been getting back into C, for various reasons I haven't been impressed so far with either GoLang nor Rust and the newest additions to the C++ standard seem to be making the language increasingly harder to manage. However, because I might be developing some larger C++ projects in the future I want to revisit the C programming language in order to strengthen my fundamentals in case I need to deal with raw pointers/unsafe sections of C++ applications. What better place to start getting back into C then with sockets programming.\n\n<!-- more -->\n## Intro\n\n[Click here for Part II](/2014/11/09/udpechoincp2)\n\n As my first blog post on getting back into C/C++ programming I want to look at how one would approach building a simple echo server in C using sockets.If you aren't aware an echo server is a server which copies the client data and sends it back to them upon each request. The simplicity of the echo server is why it is often considered to be the \"Hello World\" of socket programming. Before we begin make sure you have the following...\n\n- A working C compiler, GCC(Linux), Clang(Mac OSX) and Visual Studio C++(Windows) are all great compilers that come standard with their operating systems\n\n- A text editor that can enable C syntax highlighting. I prefer to use [Vim](www.vim.org) but [SublimeText3](www.sublimetext.com/3) is a great cross-platform text-editor that is gaining popularity\n\n- IDEs are also fine to use but for this tutorial you probably won't need one. [Eclipse CDT is great for Linux](http://www.eclipse.org/cdt/), while [Visual Studio](http://www.visualstudio.com/) and [Xcode](https://developer.apple.com/xcode/) are the usual suspects on Windows and Mac OSX respectively.\n\nOnce you have your text editor or IDE setup for C/C++ development we can begin.\n\n## Part I: The Client\n\n### The C preprocessor\nOur goal is to build an echo server client. However, we want our client to be able to run on all of the major platforms Linux, OSX and Windows.\nTo accomplish this we'll need to define some [conditional compilation](http://en.wikipedia.org/wiki/Conditional_compilation) rules using C's prepreprocessor grammar.\n\n- Create a working directory called **UdpEcho**\n\n- Change into the directory *UdpEcho* and create a file called **client.c**\n\nAdd the following preprocessor code to make our echo client compile nicely on different platforms.\n```cpp\n/* client.c */\n\n/* These numbers can be anything thing as long as they are different */\n#define PLATFORM_WINDOWS  1\n#define PLATFORM_MAC      2\n#define PLATFORM_LINUX    3\n\n/* C standard headers */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#if defined(_WIN32) /* Is recognized by Visual C++ compiler */\n\n#define PLATFORM PLATFORM_WINDOWS\n\n#elif defined(__APPLE__) /* Is recognized by Clang */\n\n#define PLATFORM PLATFORM_MAC\n\n#else\n\n#define PLATFORM PLATFORM_LINUX\n\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\n\n#include <winsock2.h> /* Winsock2 is the WinAPI sockets library */\n\n#elif PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\n\n#include <sys/socket.h> /* Sockets header */\n#include <netinet/in.h> /* Internet IP address header */\n#include <fcntl.h> /*  file control options header */\n#include <arpa/inet.h> /* Internet host order to network order and vice versa operations */\n\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\n\n#pragma comment(lib,\"ws2_32.lib\") /* Necessary Winsock2 library pragma */\n\n#endif\n```\nWhat will happen when we compile this later is that depending on your operating system the C compiler will either include or exclude specific sections based on the platform detected.\n\nIf you are using an intelligent IDE the source code will fade out the preprocessor blocks not used by your system to serve as a visual explaination. For instance if we are on Linux our code will not include the winsock2 header.\n\n<blockquote>\nMany software devs tend to sometimes rant a little too much about the old WinAPI codebase especially given since in todays world you'll use the C++ friendly WinRuntimeAPI libraries instead but if you go read about the history of WinAPI you'll find that Microsoft tried very hard to address the difficulties developers had with the existing BSD libraries. For instance look at how we only had to include just a single header for Windows. Anyways if you're curious about the Winsock libraries I suggest going straight to the [MSDN pages](http://msdn.microsoft.com/en-us/library/windows/desktop/ms740673.aspx) on the topic.\n</blockquote>\n\n### Function prototypes and object macros\nAfter declaring conditional compliation macros and including header files C programs typically reserve the next section of the code for declaring object macros and function prototypes.\n\nWe won't be needing very many for the udp echo client but here they are. Add the following code to *client.c* as listed below.\n\n```cpp\n/* client.c */\n/* \n * See http://stackoverflow.com/questions/3988122/static-const-int-not-good-enough-for-array-size\n * For why we have to use #define here vs a const int\n */\n#define PORTNUM 12354\n#define BUFMAX  1024\n\n#if PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\nvoid error(const char*);\nvoid macLinuxEchoLoop(int, struct sockaddr*, socklen_t);\nvoid macLinuxEchoClient();\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\nvoid windowsEchoLoop(SOCKET, SOCKADDR*, size_t);\nint windowsEchoClient();\n#endif\n```\n\nUnder the Linux/Mac section we have a error handling function that you'll hopefully never have to use but just in case you decide to fork this code and add more features you can use it as a debug logger. Aside from the error function, both groups have two functions; the echo loop itself and the client socket setup function. We'll add the main function first and start off with the Mac/Linux section before tackling the Windows code.\n\n### Main\nHere is the main function.\n\n```cpp\n/* class.c */\nint main(int argc, char** argv) \n{\n#if PLATFORM == PLATFORM_WINDOWS\n\n  windowsEchoClient();\n\n#else\n\n  macLinuxEchoClient();\n\n#endif\n\n  puts(\"Press any key to continue\");\n  getc(stdin);\n\n  return EXIT_SUCCESS;\n}\n```\n\nAlthough its a tad bit ugly our preprocessor object macro for *PLATFORM* allows us to select the path of execution based on our operating system.\n\n## Mac and Linux Client Code\n\n```cpp\n/* client.c */\n#if PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\n\nvoid error(const char *msg) \n{\n  perror(msg);\n  exit(EXIT_FAILURE);\n}\n```\n\nOur error function is just a wrapper around the stdin function for printing messages to stderr. Its a short function and probably could have been written as a *inline* function but optimization isn't the topic of this blog post. Moving along, next up is the client socket setup function.\n\n```cpp\n/* client.c */\nvoid macLinuxEchoClient()\n{\n  int socketFileDescriptor; /* Create socket file descriptor */\n  struct sockaddr_in serverAddr; /* Struct for holding information about what server we want to connect to */\n\n  /* Initialize the struct */\n  /* http://fdiv.net/2009/01/14/memset-vs-bzero-ultimate-showdown */\n  bzero(&serverAddr, sizeof(serverAddr));\n\n  serverAddr.sin_family = AF_INET; /* Our socket will use the internet protocol */\n  serverAddr.sin_port = htons(PORTNUM); /* Convert our int to UDP/IP network byte order */\n  serverAddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\"); /* The location of the server, will be Localhost */\n\n  /* Convert the human friendly IP address string into a network binary structure */\n  inet_pton(AF_INET, \"127.0.0.1\", &serverAddr.sin_addr);\n\n  /* Establish our socket_fd as a UDP/IP socket or datagram socket using UDP over IP as the protocol */\n  socketFileDescriptor = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\n  if(socketFileDescriptor < 0)\n    error(\"socket() failed\");\n\n  /* Our message loop needs the socket and server address info, \n   * the sizeof is due to sockaddr being a fixed size struct\n   */\n  macLinuxEchoLoop(socketFileDescriptor, (struct sockaddr*)& serverAddr, sizeof(serverAddr));\n}\n```\n\nThe beauty of the [User Datagram Protocol](http://en.wikipedia.org/wiki/User_Datagram_Protocol) is that we don't need to actually confirm that our sever exists.\n\nWe give it a location, arm our packets with some data and fire away. Whether or not the server actually receives the packets and any error handling for packets dropped along the way is entirely up to the developer of the application. \n\n```cpp\n/* client.c */\nvoid macLinuxEchoLoop(int sock, struct sockaddr* serverAddr, socklen_t serverlen)\n{\n  int bytesRead;\n  int sentResult;\n  char inputBuffer[BUFMAX]  = {0};\n  char recvBuffer[BUFMAX]   = {0};\n\n  for(;;)\n  {\n    printf(\"Type message: \");\n    fgets(inputBuffer, BUFMAX, stdin);\n\n    sentResult = sendto(sock, inputBuffer, strlen(inputBuffer), 0, serverAddr, serverlen);\n\n    if(sentResult < 0)\n      error(\"sendTo() failed\");\n\n    bytesRead = recvfrom(sock, recvBuffer, BUFMAX, 0, NULL, NULL);\n\n    if(bytesRead < 0)\n      error(\"recvfrom() failed\");\n\n    recvBuffer[bytesRead] = 0; /* NULL terminates the char array */\n    printf(\"Server responds: %s\\n\", recvBuffer);\n  }\n}\n\n#endif\n```\n\nThe above function is the echo loop. Its goal is to accept user input from the keyboard, send it off to the server and spit back out the results.\n\nThe only gotcha within the echo loop is the fact that we have to use buffers for storing our data. So basically whenever you want to send data to the server, include the inputBuffer and whenever you want to read a response store it to the recvBuffer. That about wraps up the client code for Mac and Linux.\n\n### Windows client code\n\nOn Windows based platforms our code will look very similar, with the primary difference being that the Winsock library uses several predefined macros to make our code easier to read. Of course one could easily do the same with good old BSD code Mac/Linux but its nice that Winsock provides macros such as `INVALID_SOCKET` versus the C style of checking \"if the return value is negative\".\n\n```cpp\n/* client.c */\n#if PLATFORM == PLATFORM_WINDOWS\n\nint windowsEchoClient()\n{\n  SOCKET sock; /* Sockets are treated differently from file descriptors on Windows */\n  sockaddr_in serverAddr;\n  WSADATA wsaDat; /* Winsock startup data */\n\n  /* From Msdn. The WSAStartup function initiates use of the Winsock DLL by a process. */\n  int wsaError = WSAStartup( MAKEWORD(2,2), &wsaDat );\n\n  if(!wsaError)\n  {\n    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\n    if (sock == INVALID_SOCKET)\n    {\n      wprintf(L\"socket function failed with error = %d\\n\", WSAGetLastError() );\n      exit(-1);\n    }\n\n    /* ZeroMemory is the Windows version of bzero which is just a wrapper for memset using 0 as the default memory value */\n    ZeroMemory(&serverAddr, sizeof(serverAddr));\n\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(PORTNUM);\n    serverAddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\n    windowsEchoLoop(sock, (SOCKADDR*)& serverAddr, sizeof(serverAddr));\n  }\n  else\n  {\n    return EXIT_FAILURE;\n  }\n}\n```\n\nIf you understood the Mac/Linux client you shouldn't have a hard time digesting the Windows equivalent of the EchoLoop function. The one huge difference here the use of WSACleanup(); if you don't use it Windows will whine at you for being a sloppy socket programmer.\n\n```cpp\nvoid windowsEchoLoop(SOCKET sock, SOCKADDR* serverAddr, size_t serverlen)\n{\n  int bytesRead;\n  int sendToResult;\n  char inputBuffer[BUFMAX] = {0};\n  char recvBuffer[BUFMAX] = {0};\n\n  for(;;)\n  {\n    printf(\"Type message: \");\n    fgets(inputBuffer, BUFMAX, stdin);\n\n    sendToResult = sendto(sock, inputBuffer, strlen(inputBuffer), 0, serverAddr, serverlen);\n\n    if (sendToResult == SOCKET_ERROR) {\n      wprintf(L\"sendto failed with error: %d\\n\", WSAGetLastError());\n      closesocket(sock);\n      WSACleanup();\n\n      puts(\"Press any key to continue\");\n      getc(stdin);\n      exit(sendToResult);\n    }\n\n    bytesRead = recvfrom(sock, recvBuffer, BUFMAX, 0, NULL, NULL);\n\n    if (bytesRead == SOCKET_ERROR) {\n      wprintf(L\"recvfrom failed with error: %d\\n\", WSAGetLastError());\n      closesocket(sock);\n      WSACleanup();\n\n      puts(\"Press any key to continue\");\n      getc(stdin);\n      exit(bytesRead);\n    }\n\n    recvBuffer[bytesRead] = 0; /* NULL terminates the char array */\n    printf(\"Server responds: %s\\n\", recvBuffer);\n  }\n}\n\n#endif\n```\n\nThats it for today; below is the complete source code.\n\n### Complete Source Code\n\n<script src=\"https://gist.github.com/taywils/80720c98cc4b24dea9cd.js\"> </script>\n\n[Click here for Part II](/2014/11/09/udpechoincp2)\n","slug":"udpechoinc","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3j00024yswvlcl3tsp8","layout":"post","photos":[],"link":"","content":"<p>Lately I’ve been getting back into C, for various reasons I haven’t been impressed so far with either GoLang nor Rust and the newest additions to the C++ standard seem to be making the language increasingly harder to manage. However, because I might be developing some larger C++ projects in the future I want to revisit the C programming language in order to strengthen my fundamentals in case I need to deal with raw pointers/unsafe sections of C++ applications. What better place to start getting back into C then with sockets programming.</p>\n<a id=\"more\"></a>\n<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p><a href=\"/2014/11/09/udpechoincp2\">Click here for Part II</a></p>\n<p> As my first blog post on getting back into C/C++ programming I want to look at how one would approach building a simple echo server in C using sockets.If you aren’t aware an echo server is a server which copies the client data and sends it back to them upon each request. The simplicity of the echo server is why it is often considered to be the “Hello World” of socket programming. Before we begin make sure you have the following…</p>\n<ul>\n<li><p>A working C compiler, GCC(Linux), Clang(Mac OSX) and Visual Studio C++(Windows) are all great compilers that come standard with their operating systems</p>\n</li>\n<li><p>A text editor that can enable C syntax highlighting. I prefer to use <a href=\"www.vim.org\">Vim</a> but <a href=\"www.sublimetext.com/3\">SublimeText3</a> is a great cross-platform text-editor that is gaining popularity</p>\n</li>\n<li><p>IDEs are also fine to use but for this tutorial you probably won’t need one. <a href=\"http://www.eclipse.org/cdt/\" target=\"_blank\" rel=\"external\">Eclipse CDT is great for Linux</a>, while <a href=\"http://www.visualstudio.com/\" target=\"_blank\" rel=\"external\">Visual Studio</a> and <a href=\"https://developer.apple.com/xcode/\" target=\"_blank\" rel=\"external\">Xcode</a> are the usual suspects on Windows and Mac OSX respectively.</p>\n</li>\n</ul>\n<p>Once you have your text editor or IDE setup for C/C++ development we can begin.</p>\n<h2 id=\"Part-I-The-Client\"><a href=\"#Part-I-The-Client\" class=\"headerlink\" title=\"Part I: The Client\"></a>Part I: The Client</h2><h3 id=\"The-C-preprocessor\"><a href=\"#The-C-preprocessor\" class=\"headerlink\" title=\"The C preprocessor\"></a>The C preprocessor</h3><p>Our goal is to build an echo server client. However, we want our client to be able to run on all of the major platforms Linux, OSX and Windows.<br>To accomplish this we’ll need to define some <a href=\"http://en.wikipedia.org/wiki/Conditional_compilation\" target=\"_blank\" rel=\"external\">conditional compilation</a> rules using C’s prepreprocessor grammar.</p>\n<ul>\n<li><p>Create a working directory called <strong>UdpEcho</strong></p>\n</li>\n<li><p>Change into the directory <em>UdpEcho</em> and create a file called <strong>client.c</strong></p>\n</li>\n</ul>\n<p>Add the following preprocessor code to make our echo client compile nicely on different platforms.<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* These numbers can be anything thing as long as they are different */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_WINDOWS  1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_MAC      2</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_LINUX    3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* C standard headers */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(_WIN32) <span class=\"comment\">/* Is recognized by Visual C++ compiler */</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(__APPLE__) <span class=\"comment\">/* Is recognized by Clang */</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_MAC</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;winsock2.h&gt; /* Winsock2 is the WinAPI sockets library */</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt; /* Sockets header */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt; /* Internet IP address header */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt; /*  file control options header */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt; /* Internet host order to network order and vice versa operations */</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"ws2_32.lib\"</span>) <span class=\"comment\">/* Necessary Winsock2 library pragma */</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>What will happen when we compile this later is that depending on your operating system the C compiler will either include or exclude specific sections based on the platform detected.</p>\n<p>If you are using an intelligent IDE the source code will fade out the preprocessor blocks not used by your system to serve as a visual explaination. For instance if we are on Linux our code will not include the winsock2 header.</p>\n<blockquote><br>Many software devs tend to sometimes rant a little too much about the old WinAPI codebase especially given since in todays world you’ll use the C++ friendly WinRuntimeAPI libraries instead but if you go read about the history of WinAPI you’ll find that Microsoft tried very hard to address the difficulties developers had with the existing BSD libraries. For instance look at how we only had to include just a single header for Windows. Anyways if you’re curious about the Winsock libraries I suggest going straight to the <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms740673.aspx\" target=\"_blank\" rel=\"external\">MSDN pages</a> on the topic.<br></blockquote>\n\n<h3 id=\"Function-prototypes-and-object-macros\"><a href=\"#Function-prototypes-and-object-macros\" class=\"headerlink\" title=\"Function prototypes and object macros\"></a>Function prototypes and object macros</h3><p>After declaring conditional compliation macros and including header files C programs typically reserve the next section of the code for declaring object macros and function prototypes.</p>\n<p>We won’t be needing very many for the udp echo client but here they are. Add the following code to <em>client.c</em> as listed below.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\"> * See http://stackoverflow.com/questions/3988122/static-const-int-not-good-enough-for-array-size</div><div class=\"line\"> * For why we have to use #define here vs a const int</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PORTNUM 12354</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFMAX  1024</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoLoop</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">struct</span> sockaddr*, <span class=\"keyword\">socklen_t</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">windowsEchoLoop</span><span class=\"params\">(SOCKET, SOCKADDR*, <span class=\"keyword\">size_t</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">windowsEchoClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p>Under the Linux/Mac section we have a error handling function that you’ll hopefully never have to use but just in case you decide to fork this code and add more features you can use it as a debug logger. Aside from the error function, both groups have two functions; the echo loop itself and the client socket setup function. We’ll add the main function first and start off with the Mac/Linux section before tackling the Windows code.</p>\n<h3 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h3><p>Here is the main function.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* class.c */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\">  windowsEchoClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"></div><div class=\"line\">  macLinuxEchoClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Press any key to continue\"</span>);</div><div class=\"line\">  getc(<span class=\"built_in\">stdin</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Although its a tad bit ugly our preprocessor object macro for <em>PLATFORM</em> allows us to select the path of execution based on our operating system.</p>\n<h2 id=\"Mac-and-Linux-Client-Code\"><a href=\"#Mac-and-Linux-Client-Code\" class=\"headerlink\" title=\"Mac and Linux Client Code\"></a>Mac and Linux Client Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *msg)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">  perror(msg);</div><div class=\"line\">  <span class=\"built_in\">exit</span>(EXIT_FAILURE);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Our error function is just a wrapper around the stdin function for printing messages to stderr. Its a short function and probably could have been written as a <em>inline</em> function but optimization isn’t the topic of this blog post. Moving along, next up is the client socket setup function.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoClient</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> socketFileDescriptor; <span class=\"comment\">/* Create socket file descriptor */</span></div><div class=\"line\">  <span class=\"keyword\">struct</span> sockaddr_in serverAddr; <span class=\"comment\">/* Struct for holding information about what server we want to connect to */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* Initialize the struct */</span></div><div class=\"line\">  <span class=\"comment\">/* http://fdiv.net/2009/01/14/memset-vs-bzero-ultimate-showdown */</span></div><div class=\"line\">  bzero(&amp;serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">  serverAddr.sin_family = AF_INET; <span class=\"comment\">/* Our socket will use the internet protocol */</span></div><div class=\"line\">  serverAddr.sin_port = htons(PORTNUM); <span class=\"comment\">/* Convert our int to UDP/IP network byte order */</span></div><div class=\"line\">  serverAddr.sin_addr.s_addr = inet_addr(<span class=\"string\">\"127.0.0.1\"</span>); <span class=\"comment\">/* The location of the server, will be Localhost */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* Convert the human friendly IP address string into a network binary structure */</span></div><div class=\"line\">  inet_pton(AF_INET, <span class=\"string\">\"127.0.0.1\"</span>, &amp;serverAddr.sin_addr);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* Establish our socket_fd as a UDP/IP socket or datagram socket using UDP over IP as the protocol */</span></div><div class=\"line\">  socketFileDescriptor = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>(socketFileDescriptor &lt; <span class=\"number\">0</span>)</div><div class=\"line\">    error(<span class=\"string\">\"socket() failed\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* Our message loop needs the socket and server address info, </span></div><div class=\"line\">   * the sizeof is due to sockaddr being a fixed size struct</div><div class=\"line\">   */</div><div class=\"line\">  macLinuxEchoLoop(socketFileDescriptor, (<span class=\"keyword\">struct</span> sockaddr*)&amp; serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The beauty of the <a href=\"http://en.wikipedia.org/wiki/User_Datagram_Protocol\" target=\"_blank\" rel=\"external\">User Datagram Protocol</a> is that we don’t need to actually confirm that our sever exists.</p>\n<p>We give it a location, arm our packets with some data and fire away. Whether or not the server actually receives the packets and any error handling for packets dropped along the way is entirely up to the developer of the application. </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoLoop</span><span class=\"params\">(<span class=\"keyword\">int</span> sock, <span class=\"keyword\">struct</span> sockaddr* serverAddr, <span class=\"keyword\">socklen_t</span> serverlen)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> bytesRead;</div><div class=\"line\">  <span class=\"keyword\">int</span> sentResult;</div><div class=\"line\">  <span class=\"keyword\">char</span> inputBuffer[BUFMAX]  = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">  <span class=\"keyword\">char</span> recvBuffer[BUFMAX]   = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Type message: \"</span>);</div><div class=\"line\">    fgets(inputBuffer, BUFMAX, <span class=\"built_in\">stdin</span>);</div><div class=\"line\"></div><div class=\"line\">    sentResult = sendto(sock, inputBuffer, <span class=\"built_in\">strlen</span>(inputBuffer), <span class=\"number\">0</span>, serverAddr, serverlen);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(sentResult &lt; <span class=\"number\">0</span>)</div><div class=\"line\">      error(<span class=\"string\">\"sendTo() failed\"</span>);</div><div class=\"line\"></div><div class=\"line\">    bytesRead = recvfrom(sock, recvBuffer, BUFMAX, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(bytesRead &lt; <span class=\"number\">0</span>)</div><div class=\"line\">      error(<span class=\"string\">\"recvfrom() failed\"</span>);</div><div class=\"line\"></div><div class=\"line\">    recvBuffer[bytesRead] = <span class=\"number\">0</span>; <span class=\"comment\">/* NULL terminates the char array */</span></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Server responds: %s\\n\"</span>, recvBuffer);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p>The above function is the echo loop. Its goal is to accept user input from the keyboard, send it off to the server and spit back out the results.</p>\n<p>The only gotcha within the echo loop is the fact that we have to use buffers for storing our data. So basically whenever you want to send data to the server, include the inputBuffer and whenever you want to read a response store it to the recvBuffer. That about wraps up the client code for Mac and Linux.</p>\n<h3 id=\"Windows-client-code\"><a href=\"#Windows-client-code\" class=\"headerlink\" title=\"Windows client code\"></a>Windows client code</h3><p>On Windows based platforms our code will look very similar, with the primary difference being that the Winsock library uses several predefined macros to make our code easier to read. Of course one could easily do the same with good old BSD code Mac/Linux but its nice that Winsock provides macros such as <code>INVALID_SOCKET</code> versus the C style of checking “if the return value is negative”.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">windowsEchoClient</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  SOCKET sock; <span class=\"comment\">/* Sockets are treated differently from file descriptors on Windows */</span></div><div class=\"line\">  sockaddr_in serverAddr;</div><div class=\"line\">  WSADATA wsaDat; <span class=\"comment\">/* Winsock startup data */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* From Msdn. The WSAStartup function initiates use of the Winsock DLL by a process. */</span></div><div class=\"line\">  <span class=\"keyword\">int</span> wsaError = WSAStartup( MAKEWORD(<span class=\"number\">2</span>,<span class=\"number\">2</span>), &amp;wsaDat );</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>(!wsaError)</div><div class=\"line\">  &#123;</div><div class=\"line\">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sock == INVALID_SOCKET)</div><div class=\"line\">    &#123;</div><div class=\"line\">      wprintf(<span class=\"string\">L\"socket function failed with error = %d\\n\"</span>, WSAGetLastError() );</div><div class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* ZeroMemory is the Windows version of bzero which is just a wrapper for memset using 0 as the default memory value */</span></div><div class=\"line\">    ZeroMemory(&amp;serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">    serverAddr.sin_family = AF_INET;</div><div class=\"line\">    serverAddr.sin_port = htons(PORTNUM);</div><div class=\"line\">    serverAddr.sin_addr.s_addr = inet_addr(<span class=\"string\">\"127.0.0.1\"</span>);</div><div class=\"line\"></div><div class=\"line\">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</div><div class=\"line\"></div><div class=\"line\">    windowsEchoLoop(sock, (SOCKADDR*)&amp; serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> EXIT_FAILURE;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you understood the Mac/Linux client you shouldn’t have a hard time digesting the Windows equivalent of the EchoLoop function. The one huge difference here the use of WSACleanup(); if you don’t use it Windows will whine at you for being a sloppy socket programmer.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">windowsEchoLoop</span><span class=\"params\">(SOCKET sock, SOCKADDR* serverAddr, <span class=\"keyword\">size_t</span> serverlen)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> bytesRead;</div><div class=\"line\">  <span class=\"keyword\">int</span> sendToResult;</div><div class=\"line\">  <span class=\"keyword\">char</span> inputBuffer[BUFMAX] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">  <span class=\"keyword\">char</span> recvBuffer[BUFMAX] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Type message: \"</span>);</div><div class=\"line\">    fgets(inputBuffer, BUFMAX, <span class=\"built_in\">stdin</span>);</div><div class=\"line\"></div><div class=\"line\">    sendToResult = sendto(sock, inputBuffer, <span class=\"built_in\">strlen</span>(inputBuffer), <span class=\"number\">0</span>, serverAddr, serverlen);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sendToResult == SOCKET_ERROR) &#123;</div><div class=\"line\">      wprintf(<span class=\"string\">L\"sendto failed with error: %d\\n\"</span>, WSAGetLastError());</div><div class=\"line\">      closesocket(sock);</div><div class=\"line\">      WSACleanup();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"Press any key to continue\"</span>);</div><div class=\"line\">      getc(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">      <span class=\"built_in\">exit</span>(sendToResult);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bytesRead = recvfrom(sock, recvBuffer, BUFMAX, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (bytesRead == SOCKET_ERROR) &#123;</div><div class=\"line\">      wprintf(<span class=\"string\">L\"recvfrom failed with error: %d\\n\"</span>, WSAGetLastError());</div><div class=\"line\">      closesocket(sock);</div><div class=\"line\">      WSACleanup();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"Press any key to continue\"</span>);</div><div class=\"line\">      getc(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">      <span class=\"built_in\">exit</span>(bytesRead);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    recvBuffer[bytesRead] = <span class=\"number\">0</span>; <span class=\"comment\">/* NULL terminates the char array */</span></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Server responds: %s\\n\"</span>, recvBuffer);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p>Thats it for today; below is the complete source code.</p>\n<h3 id=\"Complete-Source-Code\"><a href=\"#Complete-Source-Code\" class=\"headerlink\" title=\"Complete Source Code\"></a>Complete Source Code</h3><script src=\"https://gist.github.com/taywils/80720c98cc4b24dea9cd.js\"> </script>\n\n<p><a href=\"/2014/11/09/udpechoincp2\">Click here for Part II</a></p>\n","site":{"data":{}},"excerpt":"<p>Lately I’ve been getting back into C, for various reasons I haven’t been impressed so far with either GoLang nor Rust and the newest additions to the C++ standard seem to be making the language increasingly harder to manage. However, because I might be developing some larger C++ projects in the future I want to revisit the C programming language in order to strengthen my fundamentals in case I need to deal with raw pointers/unsafe sections of C++ applications. What better place to start getting back into C then with sockets programming.</p>","more":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p><a href=\"/2014/11/09/udpechoincp2\">Click here for Part II</a></p>\n<p> As my first blog post on getting back into C/C++ programming I want to look at how one would approach building a simple echo server in C using sockets.If you aren’t aware an echo server is a server which copies the client data and sends it back to them upon each request. The simplicity of the echo server is why it is often considered to be the “Hello World” of socket programming. Before we begin make sure you have the following…</p>\n<ul>\n<li><p>A working C compiler, GCC(Linux), Clang(Mac OSX) and Visual Studio C++(Windows) are all great compilers that come standard with their operating systems</p>\n</li>\n<li><p>A text editor that can enable C syntax highlighting. I prefer to use <a href=\"www.vim.org\">Vim</a> but <a href=\"www.sublimetext.com/3\">SublimeText3</a> is a great cross-platform text-editor that is gaining popularity</p>\n</li>\n<li><p>IDEs are also fine to use but for this tutorial you probably won’t need one. <a href=\"http://www.eclipse.org/cdt/\">Eclipse CDT is great for Linux</a>, while <a href=\"http://www.visualstudio.com/\">Visual Studio</a> and <a href=\"https://developer.apple.com/xcode/\">Xcode</a> are the usual suspects on Windows and Mac OSX respectively.</p>\n</li>\n</ul>\n<p>Once you have your text editor or IDE setup for C/C++ development we can begin.</p>\n<h2 id=\"Part-I-The-Client\"><a href=\"#Part-I-The-Client\" class=\"headerlink\" title=\"Part I: The Client\"></a>Part I: The Client</h2><h3 id=\"The-C-preprocessor\"><a href=\"#The-C-preprocessor\" class=\"headerlink\" title=\"The C preprocessor\"></a>The C preprocessor</h3><p>Our goal is to build an echo server client. However, we want our client to be able to run on all of the major platforms Linux, OSX and Windows.<br>To accomplish this we’ll need to define some <a href=\"http://en.wikipedia.org/wiki/Conditional_compilation\">conditional compilation</a> rules using C’s prepreprocessor grammar.</p>\n<ul>\n<li><p>Create a working directory called <strong>UdpEcho</strong></p>\n</li>\n<li><p>Change into the directory <em>UdpEcho</em> and create a file called <strong>client.c</strong></p>\n</li>\n</ul>\n<p>Add the following preprocessor code to make our echo client compile nicely on different platforms.<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* These numbers can be anything thing as long as they are different */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_WINDOWS  1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_MAC      2</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_LINUX    3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* C standard headers */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(_WIN32) <span class=\"comment\">/* Is recognized by Visual C++ compiler */</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(__APPLE__) <span class=\"comment\">/* Is recognized by Clang */</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_MAC</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;winsock2.h&gt; /* Winsock2 is the WinAPI sockets library */</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt; /* Sockets header */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt; /* Internet IP address header */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt; /*  file control options header */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt; /* Internet host order to network order and vice versa operations */</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"ws2_32.lib\"</span>) <span class=\"comment\">/* Necessary Winsock2 library pragma */</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>What will happen when we compile this later is that depending on your operating system the C compiler will either include or exclude specific sections based on the platform detected.</p>\n<p>If you are using an intelligent IDE the source code will fade out the preprocessor blocks not used by your system to serve as a visual explaination. For instance if we are on Linux our code will not include the winsock2 header.</p>\n<blockquote><br>Many software devs tend to sometimes rant a little too much about the old WinAPI codebase especially given since in todays world you’ll use the C++ friendly WinRuntimeAPI libraries instead but if you go read about the history of WinAPI you’ll find that Microsoft tried very hard to address the difficulties developers had with the existing BSD libraries. For instance look at how we only had to include just a single header for Windows. Anyways if you’re curious about the Winsock libraries I suggest going straight to the <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms740673.aspx\">MSDN pages</a> on the topic.<br></blockquote>\n\n<h3 id=\"Function-prototypes-and-object-macros\"><a href=\"#Function-prototypes-and-object-macros\" class=\"headerlink\" title=\"Function prototypes and object macros\"></a>Function prototypes and object macros</h3><p>After declaring conditional compliation macros and including header files C programs typically reserve the next section of the code for declaring object macros and function prototypes.</p>\n<p>We won’t be needing very many for the udp echo client but here they are. Add the following code to <em>client.c</em> as listed below.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\"> * See http://stackoverflow.com/questions/3988122/static-const-int-not-good-enough-for-array-size</div><div class=\"line\"> * For why we have to use #define here vs a const int</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PORTNUM 12354</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFMAX  1024</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoLoop</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">struct</span> sockaddr*, <span class=\"keyword\">socklen_t</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">windowsEchoLoop</span><span class=\"params\">(SOCKET, SOCKADDR*, <span class=\"keyword\">size_t</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">windowsEchoClient</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p>Under the Linux/Mac section we have a error handling function that you’ll hopefully never have to use but just in case you decide to fork this code and add more features you can use it as a debug logger. Aside from the error function, both groups have two functions; the echo loop itself and the client socket setup function. We’ll add the main function first and start off with the Mac/Linux section before tackling the Windows code.</p>\n<h3 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h3><p>Here is the main function.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* class.c */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span> </div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\">  windowsEchoClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"></div><div class=\"line\">  macLinuxEchoClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Press any key to continue\"</span>);</div><div class=\"line\">  getc(<span class=\"built_in\">stdin</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Although its a tad bit ugly our preprocessor object macro for <em>PLATFORM</em> allows us to select the path of execution based on our operating system.</p>\n<h2 id=\"Mac-and-Linux-Client-Code\"><a href=\"#Mac-and-Linux-Client-Code\" class=\"headerlink\" title=\"Mac and Linux Client Code\"></a>Mac and Linux Client Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *msg)</span> </div><div class=\"line\"></span>&#123;</div><div class=\"line\">  perror(msg);</div><div class=\"line\">  <span class=\"built_in\">exit</span>(EXIT_FAILURE);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Our error function is just a wrapper around the stdin function for printing messages to stderr. Its a short function and probably could have been written as a <em>inline</em> function but optimization isn’t the topic of this blog post. Moving along, next up is the client socket setup function.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoClient</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> socketFileDescriptor; <span class=\"comment\">/* Create socket file descriptor */</span></div><div class=\"line\">  <span class=\"keyword\">struct</span> sockaddr_in serverAddr; <span class=\"comment\">/* Struct for holding information about what server we want to connect to */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* Initialize the struct */</span></div><div class=\"line\">  <span class=\"comment\">/* http://fdiv.net/2009/01/14/memset-vs-bzero-ultimate-showdown */</span></div><div class=\"line\">  bzero(&amp;serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">  serverAddr.sin_family = AF_INET; <span class=\"comment\">/* Our socket will use the internet protocol */</span></div><div class=\"line\">  serverAddr.sin_port = htons(PORTNUM); <span class=\"comment\">/* Convert our int to UDP/IP network byte order */</span></div><div class=\"line\">  serverAddr.sin_addr.s_addr = inet_addr(<span class=\"string\">\"127.0.0.1\"</span>); <span class=\"comment\">/* The location of the server, will be Localhost */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* Convert the human friendly IP address string into a network binary structure */</span></div><div class=\"line\">  inet_pton(AF_INET, <span class=\"string\">\"127.0.0.1\"</span>, &amp;serverAddr.sin_addr);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* Establish our socket_fd as a UDP/IP socket or datagram socket using UDP over IP as the protocol */</span></div><div class=\"line\">  socketFileDescriptor = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>(socketFileDescriptor &lt; <span class=\"number\">0</span>)</div><div class=\"line\">    error(<span class=\"string\">\"socket() failed\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* Our message loop needs the socket and server address info, </div><div class=\"line\">   * the sizeof is due to sockaddr being a fixed size struct</div><div class=\"line\">   */</span></div><div class=\"line\">  macLinuxEchoLoop(socketFileDescriptor, (<span class=\"keyword\">struct</span> sockaddr*)&amp; serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The beauty of the <a href=\"http://en.wikipedia.org/wiki/User_Datagram_Protocol\">User Datagram Protocol</a> is that we don’t need to actually confirm that our sever exists.</p>\n<p>We give it a location, arm our packets with some data and fire away. Whether or not the server actually receives the packets and any error handling for packets dropped along the way is entirely up to the developer of the application. </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoLoop</span><span class=\"params\">(<span class=\"keyword\">int</span> sock, <span class=\"keyword\">struct</span> sockaddr* serverAddr, <span class=\"keyword\">socklen_t</span> serverlen)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> bytesRead;</div><div class=\"line\">  <span class=\"keyword\">int</span> sentResult;</div><div class=\"line\">  <span class=\"keyword\">char</span> inputBuffer[BUFMAX]  = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">  <span class=\"keyword\">char</span> recvBuffer[BUFMAX]   = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Type message: \"</span>);</div><div class=\"line\">    fgets(inputBuffer, BUFMAX, <span class=\"built_in\">stdin</span>);</div><div class=\"line\"></div><div class=\"line\">    sentResult = sendto(sock, inputBuffer, <span class=\"built_in\">strlen</span>(inputBuffer), <span class=\"number\">0</span>, serverAddr, serverlen);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(sentResult &lt; <span class=\"number\">0</span>)</div><div class=\"line\">      error(<span class=\"string\">\"sendTo() failed\"</span>);</div><div class=\"line\"></div><div class=\"line\">    bytesRead = recvfrom(sock, recvBuffer, BUFMAX, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(bytesRead &lt; <span class=\"number\">0</span>)</div><div class=\"line\">      error(<span class=\"string\">\"recvfrom() failed\"</span>);</div><div class=\"line\"></div><div class=\"line\">    recvBuffer[bytesRead] = <span class=\"number\">0</span>; <span class=\"comment\">/* NULL terminates the char array */</span></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Server responds: %s\\n\"</span>, recvBuffer);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p>The above function is the echo loop. Its goal is to accept user input from the keyboard, send it off to the server and spit back out the results.</p>\n<p>The only gotcha within the echo loop is the fact that we have to use buffers for storing our data. So basically whenever you want to send data to the server, include the inputBuffer and whenever you want to read a response store it to the recvBuffer. That about wraps up the client code for Mac and Linux.</p>\n<h3 id=\"Windows-client-code\"><a href=\"#Windows-client-code\" class=\"headerlink\" title=\"Windows client code\"></a>Windows client code</h3><p>On Windows based platforms our code will look very similar, with the primary difference being that the Winsock library uses several predefined macros to make our code easier to read. Of course one could easily do the same with good old BSD code Mac/Linux but its nice that Winsock provides macros such as <code>INVALID_SOCKET</code> versus the C style of checking “if the return value is negative”.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* client.c */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">windowsEchoClient</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  SOCKET sock; <span class=\"comment\">/* Sockets are treated differently from file descriptors on Windows */</span></div><div class=\"line\">  sockaddr_in serverAddr;</div><div class=\"line\">  WSADATA wsaDat; <span class=\"comment\">/* Winsock startup data */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* From Msdn. The WSAStartup function initiates use of the Winsock DLL by a process. */</span></div><div class=\"line\">  <span class=\"keyword\">int</span> wsaError = WSAStartup( MAKEWORD(<span class=\"number\">2</span>,<span class=\"number\">2</span>), &amp;wsaDat );</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>(!wsaError)</div><div class=\"line\">  &#123;</div><div class=\"line\">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sock == INVALID_SOCKET)</div><div class=\"line\">    &#123;</div><div class=\"line\">      wprintf(<span class=\"string\">L\"socket function failed with error = %d\\n\"</span>, WSAGetLastError() );</div><div class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* ZeroMemory is the Windows version of bzero which is just a wrapper for memset using 0 as the default memory value */</span></div><div class=\"line\">    ZeroMemory(&amp;serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">    serverAddr.sin_family = AF_INET;</div><div class=\"line\">    serverAddr.sin_port = htons(PORTNUM);</div><div class=\"line\">    serverAddr.sin_addr.s_addr = inet_addr(<span class=\"string\">\"127.0.0.1\"</span>);</div><div class=\"line\"></div><div class=\"line\">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</div><div class=\"line\"></div><div class=\"line\">    windowsEchoLoop(sock, (SOCKADDR*)&amp; serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> EXIT_FAILURE;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>If you understood the Mac/Linux client you shouldn’t have a hard time digesting the Windows equivalent of the EchoLoop function. The one huge difference here the use of WSACleanup(); if you don’t use it Windows will whine at you for being a sloppy socket programmer.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">windowsEchoLoop</span><span class=\"params\">(SOCKET sock, SOCKADDR* serverAddr, <span class=\"keyword\">size_t</span> serverlen)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> bytesRead;</div><div class=\"line\">  <span class=\"keyword\">int</span> sendToResult;</div><div class=\"line\">  <span class=\"keyword\">char</span> inputBuffer[BUFMAX] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">  <span class=\"keyword\">char</span> recvBuffer[BUFMAX] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Type message: \"</span>);</div><div class=\"line\">    fgets(inputBuffer, BUFMAX, <span class=\"built_in\">stdin</span>);</div><div class=\"line\"></div><div class=\"line\">    sendToResult = sendto(sock, inputBuffer, <span class=\"built_in\">strlen</span>(inputBuffer), <span class=\"number\">0</span>, serverAddr, serverlen);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sendToResult == SOCKET_ERROR) &#123;</div><div class=\"line\">      wprintf(<span class=\"string\">L\"sendto failed with error: %d\\n\"</span>, WSAGetLastError());</div><div class=\"line\">      closesocket(sock);</div><div class=\"line\">      WSACleanup();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"Press any key to continue\"</span>);</div><div class=\"line\">      getc(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">      <span class=\"built_in\">exit</span>(sendToResult);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bytesRead = recvfrom(sock, recvBuffer, BUFMAX, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (bytesRead == SOCKET_ERROR) &#123;</div><div class=\"line\">      wprintf(<span class=\"string\">L\"recvfrom failed with error: %d\\n\"</span>, WSAGetLastError());</div><div class=\"line\">      closesocket(sock);</div><div class=\"line\">      WSACleanup();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">\"Press any key to continue\"</span>);</div><div class=\"line\">      getc(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">      <span class=\"built_in\">exit</span>(bytesRead);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    recvBuffer[bytesRead] = <span class=\"number\">0</span>; <span class=\"comment\">/* NULL terminates the char array */</span></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Server responds: %s\\n\"</span>, recvBuffer);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p>Thats it for today; below is the complete source code.</p>\n<h3 id=\"Complete-Source-Code\"><a href=\"#Complete-Source-Code\" class=\"headerlink\" title=\"Complete Source Code\"></a>Complete Source Code</h3><script src=\"https://gist.github.com/taywils/80720c98cc4b24dea9cd.js\"> </script>\n\n<p><a href=\"/2014/11/09/udpechoincp2\">Click here for Part II</a></p>"},{"title":"UDP Echo Server In C Tutorial Part II","date":"2014-11-09T08:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/udpechoincp2.jpg","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/udpechoincp2.jpg","comments":0,"_content":"The second part to the UDP Echo Server in C tutorial. In part II we add the server component of the code base and together with the client code from part I we'll have a functioning application.\n\n<!-- more -->\n## Intro\n[Click here for Part I](/2014/11/08/udpechoinc)\n\nWelcome to the second part of the how to write a echo server in C. In this short second part we'll finish up by adding the server code that our client in part I will use connect to over UDP/IP. Once again the code will work on all the major platforms Mac, Linux and Windows. Much of the socket address setup code and creation of a file descriptor is the same as the client application but the major difference with the server is that the server must bind its socket to port.\n\n- Move into the working directory created in Part I called **UdpEcho**\n- Create a file called **server.c**\n\n## Part II: The Server\n\nIf you read through Part I of this tutorial much of the code here will be instantly familiar. The server code uses the same platform object macros and selects a branch of code based on the system its being executed on.\n\n### C preprocessor setup, function prototypes and main\n\n```cpp\n/* server.c */\n#define PLATFORM_WINDOWS  1\n#define PLATFORM_MAC      2\n#define PLATFORM_LINUX    3\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#if defined(_WIN32)\n\n#define PLATFORM PLATFORM_WINDOWS\n\n#elif defined(__APPLE__)\n\n#define PLATFORM PLATFORM_MAC\n\n#else\n\n#define PLATFORM PLATFORM_LINUX\n\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\n\n#include <winsock2.h>\n\n#elif PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\n\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <fcntl.h>\n#include <arpa/inet.h>\n\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\n\n#pragma comment(lib,\"ws2_32.lib\")\n\n#endif\n\n#define PORTNUM 12354\n#define BUFMAX 1024\n\n#if PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\n  void macLinuxEchoLoop(int, struct sockaddr*, socklen_t);\n  void macLinuxEchoServer();\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\n  void windowsEchoLoop(SOCKET, sockaddr*, size_t);\n  int windowsEchoServer();\n#endif\n\nint main(int argc, char** argv)\n{\n#if PLATFORM == PLATFORM_WINDOWS\n\n  windowsEchoServer();\n\n#else\n\n  macLinuxEchoServer();\n\n#endif\n\n  puts(\"Press any key to continue\");\n  getc(stdin);\n\n  return EXIT_SUCCESS;\n}\n```\n\n### Mac and Linux Server Setup\n\n```cpp\n/* server.c */\n#if PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\n\nvoid macLinuxEchoServer()\n{\n  int socketFileDescriptor;\n  struct sockaddr_in serverAddr;\n  struct sockaddr_in clientAddr;\n\n  socketFileDescriptor = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\n  bzero(&serverAddr, sizeof(serverAddr));\n\n  serverAddr.sin_family = AF_INET;\n  serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serverAddr.sin_port = htons(PORTNUM);\n\n  bind(socketFileDescriptor, (struct sockaddr*)& serverAddr, sizeof(serverAddr));\n\n  macLinuxEchoLoop(socketFileDescriptor, (struct sockaddr*)& clientAddr, sizeof(clientAddr));\n}\n```\n\nHere we notice the one key difference between the client code and the server code; the use of bind. In a nutshell; from wikipedia [\"When a socket is created using socket(), it is only given a protocol family, but not assigned an address.\"](http://en.wikipedia.org/wiki/Berkeley_sockets#bind.28.29). The assignment of an address is crucial for our sever because without it how else will clients know where to send packets. In other words a socket by itself can identify its protocol from the arguments passed to the socket() creation function but for a process which claims a socket to receive packets based on the networked computers port, there needs to be a one to one immutable relation between IP address and port number.\n\n### Mac and Linux Server Echo Loop\n\nOur echo loop is extremely concise, read data from the bound socket, print a notification message and bounce it back to the same client address.\n\n```cpp\n/* server.c */\nvoid macLinuxEchoLoop(int sockFd, struct sockaddr* cliaddr, socklen_t clilen)\n{\n  int bytesRead;\n  socklen_t len;\n  char msg[BUFMAX] = {0};\n\n  printf(\"Waiting for datagrams on 127.0.0.1:%d\\n\", PORTNUM);\n\n  for(;;)\n  {\n    len = clilen;\n    bzero(&msg, sizeof(msg));\n\n    bytesRead = recvfrom(sockFd, msg, BUFMAX, 0, cliaddr, &len);\n\n    printf(\"Got message: %s\\n\", msg);\n\n    sendto(sockFd, msg, bytesRead, 0, cliaddr, len);\n  }\n}\n\n#endif\n```\n\n### Windows Server Setup\n\nOn Windows our server setup code is nearly identical to the Mac/Linux version, with the main difference as discussed earlier being the bind() function call.\n\n```cpp\n/* server.c */\n#if PLATFORM == PLATFORM_WINDOWS\n\nint windowsEchoServer()\n{\n  SOCKET sock;\n  sockaddr_in serverAddr;\n  sockaddr_in clientAddr;\n  WSADATA wsaDat;\n\n  int wsaError = WSAStartup( MAKEWORD(2,2), &wsaDat );\n\n  if(!wsaError)\n  {\n    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\n    ZeroMemory(&serverAddr, sizeof(serverAddr));\n\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n    serverAddr.sin_port = htons(PORTNUM);\n\n    bind(sock, (struct sockaddr*)& serverAddr, sizeof(serverAddr));\n\n    windowsEchoLoop(sock, (struct sockaddr*)& clientAddr, sizeof(clientAddr));\n  }\n  else\n  {\n    return EXIT_FAILURE;\n  }\n}\n```\n\n### Windows Server Echo Loop\n\nAt the very minimum the sever echo loop doesn't need to do much as shown in the code below; add it to server.c and finish it up.\n\n```cpp\n/* server.c */\nvoid windowsEchoLoop(SOCKET sock, sockaddr* cliaddr, size_t clilen)\n{\n  int bytesRead;\n  int len;\n  char msg[BUFMAX] = {0};\n\n  printf(\"Waiting for datagrams on 127.0.0.1:%d\\n\", PORTNUM);\n\n  for(;;)\n  {\n    len = clilen;\n    ZeroMemory(&msg, sizeof(msg));\n\n    bytesRead = recvfrom(sock, msg, BUFMAX, 0, cliaddr, &len);\n\n    printf(\"Got message: %s\\n\", msg);\n\n    sendto(sock, msg, bytesRead, 0, cliaddr, len);\n  }\n}\n\n#endif\n```\n\nNow go build and run the **server.c** once that code is running and awaiting new clients go build and run **client.c** to see the Echo server in action.\n\n### Complete Source Code\n\n<script src=\"https://gist.github.com/taywils/f656feda0bca7cbd8a78.js\"> </script>\n\n[Click here for Part I](/2014/11/08/udpechoinc)\n","source":"_posts/udpechoincp2.md","raw":"---\ntitle: UDP Echo Server In C Tutorial Part II\ndate: 2014-11-09\ntags: [cpp]\ncategories: [tutorial, socket-programming]\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/udpechoincp2.jpg\nthumbnail:  https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/udpechoincp2.jpg\ncomments: false\n---\nThe second part to the UDP Echo Server in C tutorial. In part II we add the server component of the code base and together with the client code from part I we'll have a functioning application.\n\n<!-- more -->\n## Intro\n[Click here for Part I](/2014/11/08/udpechoinc)\n\nWelcome to the second part of the how to write a echo server in C. In this short second part we'll finish up by adding the server code that our client in part I will use connect to over UDP/IP. Once again the code will work on all the major platforms Mac, Linux and Windows. Much of the socket address setup code and creation of a file descriptor is the same as the client application but the major difference with the server is that the server must bind its socket to port.\n\n- Move into the working directory created in Part I called **UdpEcho**\n- Create a file called **server.c**\n\n## Part II: The Server\n\nIf you read through Part I of this tutorial much of the code here will be instantly familiar. The server code uses the same platform object macros and selects a branch of code based on the system its being executed on.\n\n### C preprocessor setup, function prototypes and main\n\n```cpp\n/* server.c */\n#define PLATFORM_WINDOWS  1\n#define PLATFORM_MAC      2\n#define PLATFORM_LINUX    3\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#if defined(_WIN32)\n\n#define PLATFORM PLATFORM_WINDOWS\n\n#elif defined(__APPLE__)\n\n#define PLATFORM PLATFORM_MAC\n\n#else\n\n#define PLATFORM PLATFORM_LINUX\n\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\n\n#include <winsock2.h>\n\n#elif PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\n\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <fcntl.h>\n#include <arpa/inet.h>\n\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\n\n#pragma comment(lib,\"ws2_32.lib\")\n\n#endif\n\n#define PORTNUM 12354\n#define BUFMAX 1024\n\n#if PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\n  void macLinuxEchoLoop(int, struct sockaddr*, socklen_t);\n  void macLinuxEchoServer();\n#endif\n\n#if PLATFORM == PLATFORM_WINDOWS\n  void windowsEchoLoop(SOCKET, sockaddr*, size_t);\n  int windowsEchoServer();\n#endif\n\nint main(int argc, char** argv)\n{\n#if PLATFORM == PLATFORM_WINDOWS\n\n  windowsEchoServer();\n\n#else\n\n  macLinuxEchoServer();\n\n#endif\n\n  puts(\"Press any key to continue\");\n  getc(stdin);\n\n  return EXIT_SUCCESS;\n}\n```\n\n### Mac and Linux Server Setup\n\n```cpp\n/* server.c */\n#if PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX\n\nvoid macLinuxEchoServer()\n{\n  int socketFileDescriptor;\n  struct sockaddr_in serverAddr;\n  struct sockaddr_in clientAddr;\n\n  socketFileDescriptor = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\n  bzero(&serverAddr, sizeof(serverAddr));\n\n  serverAddr.sin_family = AF_INET;\n  serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serverAddr.sin_port = htons(PORTNUM);\n\n  bind(socketFileDescriptor, (struct sockaddr*)& serverAddr, sizeof(serverAddr));\n\n  macLinuxEchoLoop(socketFileDescriptor, (struct sockaddr*)& clientAddr, sizeof(clientAddr));\n}\n```\n\nHere we notice the one key difference between the client code and the server code; the use of bind. In a nutshell; from wikipedia [\"When a socket is created using socket(), it is only given a protocol family, but not assigned an address.\"](http://en.wikipedia.org/wiki/Berkeley_sockets#bind.28.29). The assignment of an address is crucial for our sever because without it how else will clients know where to send packets. In other words a socket by itself can identify its protocol from the arguments passed to the socket() creation function but for a process which claims a socket to receive packets based on the networked computers port, there needs to be a one to one immutable relation between IP address and port number.\n\n### Mac and Linux Server Echo Loop\n\nOur echo loop is extremely concise, read data from the bound socket, print a notification message and bounce it back to the same client address.\n\n```cpp\n/* server.c */\nvoid macLinuxEchoLoop(int sockFd, struct sockaddr* cliaddr, socklen_t clilen)\n{\n  int bytesRead;\n  socklen_t len;\n  char msg[BUFMAX] = {0};\n\n  printf(\"Waiting for datagrams on 127.0.0.1:%d\\n\", PORTNUM);\n\n  for(;;)\n  {\n    len = clilen;\n    bzero(&msg, sizeof(msg));\n\n    bytesRead = recvfrom(sockFd, msg, BUFMAX, 0, cliaddr, &len);\n\n    printf(\"Got message: %s\\n\", msg);\n\n    sendto(sockFd, msg, bytesRead, 0, cliaddr, len);\n  }\n}\n\n#endif\n```\n\n### Windows Server Setup\n\nOn Windows our server setup code is nearly identical to the Mac/Linux version, with the main difference as discussed earlier being the bind() function call.\n\n```cpp\n/* server.c */\n#if PLATFORM == PLATFORM_WINDOWS\n\nint windowsEchoServer()\n{\n  SOCKET sock;\n  sockaddr_in serverAddr;\n  sockaddr_in clientAddr;\n  WSADATA wsaDat;\n\n  int wsaError = WSAStartup( MAKEWORD(2,2), &wsaDat );\n\n  if(!wsaError)\n  {\n    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\n    ZeroMemory(&serverAddr, sizeof(serverAddr));\n\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n    serverAddr.sin_port = htons(PORTNUM);\n\n    bind(sock, (struct sockaddr*)& serverAddr, sizeof(serverAddr));\n\n    windowsEchoLoop(sock, (struct sockaddr*)& clientAddr, sizeof(clientAddr));\n  }\n  else\n  {\n    return EXIT_FAILURE;\n  }\n}\n```\n\n### Windows Server Echo Loop\n\nAt the very minimum the sever echo loop doesn't need to do much as shown in the code below; add it to server.c and finish it up.\n\n```cpp\n/* server.c */\nvoid windowsEchoLoop(SOCKET sock, sockaddr* cliaddr, size_t clilen)\n{\n  int bytesRead;\n  int len;\n  char msg[BUFMAX] = {0};\n\n  printf(\"Waiting for datagrams on 127.0.0.1:%d\\n\", PORTNUM);\n\n  for(;;)\n  {\n    len = clilen;\n    ZeroMemory(&msg, sizeof(msg));\n\n    bytesRead = recvfrom(sock, msg, BUFMAX, 0, cliaddr, &len);\n\n    printf(\"Got message: %s\\n\", msg);\n\n    sendto(sock, msg, bytesRead, 0, cliaddr, len);\n  }\n}\n\n#endif\n```\n\nNow go build and run the **server.c** once that code is running and awaiting new clients go build and run **client.c** to see the Echo server in action.\n\n### Complete Source Code\n\n<script src=\"https://gist.github.com/taywils/f656feda0bca7cbd8a78.js\"> </script>\n\n[Click here for Part I](/2014/11/08/udpechoinc)\n","slug":"udpechoincp2","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3j50029yswvdgvb67p4","layout":"post","photos":[],"link":"","content":"<p>The second part to the UDP Echo Server in C tutorial. In part II we add the server component of the code base and together with the client code from part I we’ll have a functioning application.</p>\n<a id=\"more\"></a>\n<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p><a href=\"/2014/11/08/udpechoinc\">Click here for Part I</a></p>\n<p>Welcome to the second part of the how to write a echo server in C. In this short second part we’ll finish up by adding the server code that our client in part I will use connect to over UDP/IP. Once again the code will work on all the major platforms Mac, Linux and Windows. Much of the socket address setup code and creation of a file descriptor is the same as the client application but the major difference with the server is that the server must bind its socket to port.</p>\n<ul>\n<li>Move into the working directory created in Part I called <strong>UdpEcho</strong></li>\n<li>Create a file called <strong>server.c</strong></li>\n</ul>\n<h2 id=\"Part-II-The-Server\"><a href=\"#Part-II-The-Server\" class=\"headerlink\" title=\"Part II: The Server\"></a>Part II: The Server</h2><p>If you read through Part I of this tutorial much of the code here will be instantly familiar. The server code uses the same platform object macros and selects a branch of code based on the system its being executed on.</p>\n<h3 id=\"C-preprocessor-setup-function-prototypes-and-main\"><a href=\"#C-preprocessor-setup-function-prototypes-and-main\" class=\"headerlink\" title=\"C preprocessor setup, function prototypes and main\"></a>C preprocessor setup, function prototypes and main</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* server.c */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_WINDOWS  1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_MAC      2</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_LINUX    3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(_WIN32)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(__APPLE__)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_MAC</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;winsock2.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"ws2_32.lib\"</span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PORTNUM 12354</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFMAX 1024</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoLoop</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">struct</span> sockaddr*, <span class=\"keyword\">socklen_t</span>)</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">windowsEchoLoop</span><span class=\"params\">(SOCKET, sockaddr*, <span class=\"keyword\">size_t</span>)</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">windowsEchoServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\">  windowsEchoServer();</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"></div><div class=\"line\">  macLinuxEchoServer();</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Press any key to continue\"</span>);</div><div class=\"line\">  getc(<span class=\"built_in\">stdin</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Mac-and-Linux-Server-Setup\"><a href=\"#Mac-and-Linux-Server-Setup\" class=\"headerlink\" title=\"Mac and Linux Server Setup\"></a>Mac and Linux Server Setup</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* server.c */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoServer</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> socketFileDescriptor;</div><div class=\"line\">  <span class=\"keyword\">struct</span> sockaddr_in serverAddr;</div><div class=\"line\">  <span class=\"keyword\">struct</span> sockaddr_in clientAddr;</div><div class=\"line\"></div><div class=\"line\">  socketFileDescriptor = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</div><div class=\"line\"></div><div class=\"line\">  bzero(&amp;serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">  serverAddr.sin_family = AF_INET;</div><div class=\"line\">  serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class=\"line\">  serverAddr.sin_port = htons(PORTNUM);</div><div class=\"line\"></div><div class=\"line\">  bind(socketFileDescriptor, (<span class=\"keyword\">struct</span> sockaddr*)&amp; serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">  macLinuxEchoLoop(socketFileDescriptor, (<span class=\"keyword\">struct</span> sockaddr*)&amp; clientAddr, <span class=\"keyword\">sizeof</span>(clientAddr));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here we notice the one key difference between the client code and the server code; the use of bind. In a nutshell; from wikipedia <a href=\"http://en.wikipedia.org/wiki/Berkeley_sockets#bind.28.29\" target=\"_blank\" rel=\"external\">“When a socket is created using socket(), it is only given a protocol family, but not assigned an address.”</a>. The assignment of an address is crucial for our sever because without it how else will clients know where to send packets. In other words a socket by itself can identify its protocol from the arguments passed to the socket() creation function but for a process which claims a socket to receive packets based on the networked computers port, there needs to be a one to one immutable relation between IP address and port number.</p>\n<h3 id=\"Mac-and-Linux-Server-Echo-Loop\"><a href=\"#Mac-and-Linux-Server-Echo-Loop\" class=\"headerlink\" title=\"Mac and Linux Server Echo Loop\"></a>Mac and Linux Server Echo Loop</h3><p>Our echo loop is extremely concise, read data from the bound socket, print a notification message and bounce it back to the same client address.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* server.c */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoLoop</span><span class=\"params\">(<span class=\"keyword\">int</span> sockFd, <span class=\"keyword\">struct</span> sockaddr* cliaddr, <span class=\"keyword\">socklen_t</span> clilen)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> bytesRead;</div><div class=\"line\">  <span class=\"keyword\">socklen_t</span> len;</div><div class=\"line\">  <span class=\"keyword\">char</span> msg[BUFMAX] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Waiting for datagrams on 127.0.0.1:%d\\n\"</span>, PORTNUM);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    len = clilen;</div><div class=\"line\">    bzero(&amp;msg, <span class=\"keyword\">sizeof</span>(msg));</div><div class=\"line\"></div><div class=\"line\">    bytesRead = recvfrom(sockFd, msg, BUFMAX, <span class=\"number\">0</span>, cliaddr, &amp;len);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Got message: %s\\n\"</span>, msg);</div><div class=\"line\"></div><div class=\"line\">    sendto(sockFd, msg, bytesRead, <span class=\"number\">0</span>, cliaddr, len);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"Windows-Server-Setup\"><a href=\"#Windows-Server-Setup\" class=\"headerlink\" title=\"Windows Server Setup\"></a>Windows Server Setup</h3><p>On Windows our server setup code is nearly identical to the Mac/Linux version, with the main difference as discussed earlier being the bind() function call.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* server.c */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">windowsEchoServer</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  SOCKET sock;</div><div class=\"line\">  sockaddr_in serverAddr;</div><div class=\"line\">  sockaddr_in clientAddr;</div><div class=\"line\">  WSADATA wsaDat;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">int</span> wsaError = WSAStartup( MAKEWORD(<span class=\"number\">2</span>,<span class=\"number\">2</span>), &amp;wsaDat );</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>(!wsaError)</div><div class=\"line\">  &#123;</div><div class=\"line\">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</div><div class=\"line\"></div><div class=\"line\">    ZeroMemory(&amp;serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">    serverAddr.sin_family = AF_INET;</div><div class=\"line\">    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class=\"line\">    serverAddr.sin_port = htons(PORTNUM);</div><div class=\"line\"></div><div class=\"line\">    bind(sock, (<span class=\"keyword\">struct</span> sockaddr*)&amp; serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">    windowsEchoLoop(sock, (<span class=\"keyword\">struct</span> sockaddr*)&amp; clientAddr, <span class=\"keyword\">sizeof</span>(clientAddr));</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> EXIT_FAILURE;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Windows-Server-Echo-Loop\"><a href=\"#Windows-Server-Echo-Loop\" class=\"headerlink\" title=\"Windows Server Echo Loop\"></a>Windows Server Echo Loop</h3><p>At the very minimum the sever echo loop doesn’t need to do much as shown in the code below; add it to server.c and finish it up.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* server.c */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">windowsEchoLoop</span><span class=\"params\">(SOCKET sock, sockaddr* cliaddr, <span class=\"keyword\">size_t</span> clilen)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> bytesRead;</div><div class=\"line\">  <span class=\"keyword\">int</span> len;</div><div class=\"line\">  <span class=\"keyword\">char</span> msg[BUFMAX] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Waiting for datagrams on 127.0.0.1:%d\\n\"</span>, PORTNUM);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    len = clilen;</div><div class=\"line\">    ZeroMemory(&amp;msg, <span class=\"keyword\">sizeof</span>(msg));</div><div class=\"line\"></div><div class=\"line\">    bytesRead = recvfrom(sock, msg, BUFMAX, <span class=\"number\">0</span>, cliaddr, &amp;len);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Got message: %s\\n\"</span>, msg);</div><div class=\"line\"></div><div class=\"line\">    sendto(sock, msg, bytesRead, <span class=\"number\">0</span>, cliaddr, len);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p>Now go build and run the <strong>server.c</strong> once that code is running and awaiting new clients go build and run <strong>client.c</strong> to see the Echo server in action.</p>\n<h3 id=\"Complete-Source-Code\"><a href=\"#Complete-Source-Code\" class=\"headerlink\" title=\"Complete Source Code\"></a>Complete Source Code</h3><script src=\"https://gist.github.com/taywils/f656feda0bca7cbd8a78.js\"> </script>\n\n<p><a href=\"/2014/11/08/udpechoinc\">Click here for Part I</a></p>\n","site":{"data":{}},"excerpt":"<p>The second part to the UDP Echo Server in C tutorial. In part II we add the server component of the code base and together with the client code from part I we’ll have a functioning application.</p>","more":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p><a href=\"/2014/11/08/udpechoinc\">Click here for Part I</a></p>\n<p>Welcome to the second part of the how to write a echo server in C. In this short second part we’ll finish up by adding the server code that our client in part I will use connect to over UDP/IP. Once again the code will work on all the major platforms Mac, Linux and Windows. Much of the socket address setup code and creation of a file descriptor is the same as the client application but the major difference with the server is that the server must bind its socket to port.</p>\n<ul>\n<li>Move into the working directory created in Part I called <strong>UdpEcho</strong></li>\n<li>Create a file called <strong>server.c</strong></li>\n</ul>\n<h2 id=\"Part-II-The-Server\"><a href=\"#Part-II-The-Server\" class=\"headerlink\" title=\"Part II: The Server\"></a>Part II: The Server</h2><p>If you read through Part I of this tutorial much of the code here will be instantly familiar. The server code uses the same platform object macros and selects a branch of code based on the system its being executed on.</p>\n<h3 id=\"C-preprocessor-setup-function-prototypes-and-main\"><a href=\"#C-preprocessor-setup-function-prototypes-and-main\" class=\"headerlink\" title=\"C preprocessor setup, function prototypes and main\"></a>C preprocessor setup, function prototypes and main</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* server.c */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_WINDOWS  1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_MAC      2</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM_LINUX    3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(_WIN32)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(__APPLE__)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_MAC</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLATFORM PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;winsock2.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"ws2_32.lib\"</span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PORTNUM 12354</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFMAX 1024</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoLoop</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">struct</span> sockaddr*, <span class=\"keyword\">socklen_t</span>)</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">windowsEchoLoop</span><span class=\"params\">(SOCKET, sockaddr*, <span class=\"keyword\">size_t</span>)</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">windowsEchoServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\">  windowsEchoServer();</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"></div><div class=\"line\">  macLinuxEchoServer();</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">\"Press any key to continue\"</span>);</div><div class=\"line\">  getc(<span class=\"built_in\">stdin</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> EXIT_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Mac-and-Linux-Server-Setup\"><a href=\"#Mac-and-Linux-Server-Setup\" class=\"headerlink\" title=\"Mac and Linux Server Setup\"></a>Mac and Linux Server Setup</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* server.c */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_MAC || PLATFORM == PLATFORM_LINUX</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoServer</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> socketFileDescriptor;</div><div class=\"line\">  <span class=\"keyword\">struct</span> sockaddr_in serverAddr;</div><div class=\"line\">  <span class=\"keyword\">struct</span> sockaddr_in clientAddr;</div><div class=\"line\"></div><div class=\"line\">  socketFileDescriptor = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</div><div class=\"line\"></div><div class=\"line\">  bzero(&amp;serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">  serverAddr.sin_family = AF_INET;</div><div class=\"line\">  serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class=\"line\">  serverAddr.sin_port = htons(PORTNUM);</div><div class=\"line\"></div><div class=\"line\">  bind(socketFileDescriptor, (<span class=\"keyword\">struct</span> sockaddr*)&amp; serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">  macLinuxEchoLoop(socketFileDescriptor, (<span class=\"keyword\">struct</span> sockaddr*)&amp; clientAddr, <span class=\"keyword\">sizeof</span>(clientAddr));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here we notice the one key difference between the client code and the server code; the use of bind. In a nutshell; from wikipedia <a href=\"http://en.wikipedia.org/wiki/Berkeley_sockets#bind.28.29\">“When a socket is created using socket(), it is only given a protocol family, but not assigned an address.”</a>. The assignment of an address is crucial for our sever because without it how else will clients know where to send packets. In other words a socket by itself can identify its protocol from the arguments passed to the socket() creation function but for a process which claims a socket to receive packets based on the networked computers port, there needs to be a one to one immutable relation between IP address and port number.</p>\n<h3 id=\"Mac-and-Linux-Server-Echo-Loop\"><a href=\"#Mac-and-Linux-Server-Echo-Loop\" class=\"headerlink\" title=\"Mac and Linux Server Echo Loop\"></a>Mac and Linux Server Echo Loop</h3><p>Our echo loop is extremely concise, read data from the bound socket, print a notification message and bounce it back to the same client address.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* server.c */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">macLinuxEchoLoop</span><span class=\"params\">(<span class=\"keyword\">int</span> sockFd, <span class=\"keyword\">struct</span> sockaddr* cliaddr, <span class=\"keyword\">socklen_t</span> clilen)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> bytesRead;</div><div class=\"line\">  <span class=\"keyword\">socklen_t</span> len;</div><div class=\"line\">  <span class=\"keyword\">char</span> msg[BUFMAX] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Waiting for datagrams on 127.0.0.1:%d\\n\"</span>, PORTNUM);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    len = clilen;</div><div class=\"line\">    bzero(&amp;msg, <span class=\"keyword\">sizeof</span>(msg));</div><div class=\"line\"></div><div class=\"line\">    bytesRead = recvfrom(sockFd, msg, BUFMAX, <span class=\"number\">0</span>, cliaddr, &amp;len);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Got message: %s\\n\"</span>, msg);</div><div class=\"line\"></div><div class=\"line\">    sendto(sockFd, msg, bytesRead, <span class=\"number\">0</span>, cliaddr, len);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"Windows-Server-Setup\"><a href=\"#Windows-Server-Setup\" class=\"headerlink\" title=\"Windows Server Setup\"></a>Windows Server Setup</h3><p>On Windows our server setup code is nearly identical to the Mac/Linux version, with the main difference as discussed earlier being the bind() function call.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* server.c */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> PLATFORM == PLATFORM_WINDOWS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">windowsEchoServer</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  SOCKET sock;</div><div class=\"line\">  sockaddr_in serverAddr;</div><div class=\"line\">  sockaddr_in clientAddr;</div><div class=\"line\">  WSADATA wsaDat;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">int</span> wsaError = WSAStartup( MAKEWORD(<span class=\"number\">2</span>,<span class=\"number\">2</span>), &amp;wsaDat );</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>(!wsaError)</div><div class=\"line\">  &#123;</div><div class=\"line\">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</div><div class=\"line\"></div><div class=\"line\">    ZeroMemory(&amp;serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">    serverAddr.sin_family = AF_INET;</div><div class=\"line\">    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class=\"line\">    serverAddr.sin_port = htons(PORTNUM);</div><div class=\"line\"></div><div class=\"line\">    bind(sock, (<span class=\"keyword\">struct</span> sockaddr*)&amp; serverAddr, <span class=\"keyword\">sizeof</span>(serverAddr));</div><div class=\"line\"></div><div class=\"line\">    windowsEchoLoop(sock, (<span class=\"keyword\">struct</span> sockaddr*)&amp; clientAddr, <span class=\"keyword\">sizeof</span>(clientAddr));</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> EXIT_FAILURE;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Windows-Server-Echo-Loop\"><a href=\"#Windows-Server-Echo-Loop\" class=\"headerlink\" title=\"Windows Server Echo Loop\"></a>Windows Server Echo Loop</h3><p>At the very minimum the sever echo loop doesn’t need to do much as shown in the code below; add it to server.c and finish it up.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* server.c */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">windowsEchoLoop</span><span class=\"params\">(SOCKET sock, sockaddr* cliaddr, <span class=\"keyword\">size_t</span> clilen)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> bytesRead;</div><div class=\"line\">  <span class=\"keyword\">int</span> len;</div><div class=\"line\">  <span class=\"keyword\">char</span> msg[BUFMAX] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Waiting for datagrams on 127.0.0.1:%d\\n\"</span>, PORTNUM);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span>(;;)</div><div class=\"line\">  &#123;</div><div class=\"line\">    len = clilen;</div><div class=\"line\">    ZeroMemory(&amp;msg, <span class=\"keyword\">sizeof</span>(msg));</div><div class=\"line\"></div><div class=\"line\">    bytesRead = recvfrom(sock, msg, BUFMAX, <span class=\"number\">0</span>, cliaddr, &amp;len);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Got message: %s\\n\"</span>, msg);</div><div class=\"line\"></div><div class=\"line\">    sendto(sock, msg, bytesRead, <span class=\"number\">0</span>, cliaddr, len);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p>Now go build and run the <strong>server.c</strong> once that code is running and awaiting new clients go build and run <strong>client.c</strong> to see the Echo server in action.</p>\n<h3 id=\"Complete-Source-Code\"><a href=\"#Complete-Source-Code\" class=\"headerlink\" title=\"Complete Source Code\"></a>Complete Source Code</h3><script src=\"https://gist.github.com/taywils/f656feda0bca7cbd8a78.js\"> </script>\n\n<p><a href=\"/2014/11/08/udpechoinc\">Click here for Part I</a></p>"},{"title":"Why I Choose To Write A Book","date":"2013-03-13T07:00:00.000Z","banner":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/writingabookandmisc.jpg","thumbnail":"https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/writingabookandmisc.jpg","comments":0,"_content":"\nLately I've gotten behind on blogging again but would like to try out some new things such as hosting all of my static content on Amazon s3. Meanwhile I've been very busy typing away on my lastest project which will be my first published book. Enough talk... just click on this stub to read the rest of my rant.\n\n<!-- more -->\n### So What's The Book Going To Be About?\n\nI was contacted by a representative from [Packt publishing](http://www.packtpub.com/) to write a book for networking programming with C++. Although initially skeptic I mean what did I really understand about network development other than a series of [blog posts](http://www.taywils.me/2011/06/04/textbasedrpgpart1.html) I did awhile back for a game I wrote for some introductory programming class I was forced to take as a graduation requirement back in college. Anyways its been pretty interesting so far having just completed the first chapter which was around 30 pages long that also included some BSD sockets as well as Winsock2 API usage I'm looking forward to writing the later chapters that will delve deeper into game design and possibly some heavy duty graphics rendering if I try to make a 3D game. Oh and by the way I've bought some books for background research on the subject of network programming in C/C++ as well as game development. However, the surprising thing is that despite the number of large scale multi-million dollar games being pushed out practically daily the amount of great tutorial/instructional books on the subject is close to nil. Is game development some sort of giant trade secret, I don't understand why companies such as Nintendo or EA games don't try to cash in on the sheer amount of indie gamers trying to create the next big hit by releasing books about their development process.  \n\nI mean when software developers outside of the games industry hear the constant moaning and complaining about the so called [stagnation crisis](http://www.economist.com/news/business/21572249-sonys-newest-console-launches-suffering-industry-all-play) thats afflicting the video games industry(the media also makes it seems as if Japanese game developers are rotting corpses just because I think Final Fantasy doesn't sell well anymore or something) and then we look at all [those quirky fun interesting titles](http://venturebeat.com/2012/12/22/the-best-indie-games-of-2012/) comming out of the indie game pipeline one has to wonder why the insane amounts of creative talent often found in successful indie titles doesn't percolate up to the big time game studios with the possible the exception of Valve software (Counter-Strike and DotA both started out as mods of popular games) and a few others I probably don't know about.\n\nIf you want my TL;DR opinion I believe the explosive growth and innovation of web development over the past decade in contrast to the so called decline of video games has been in much part due to the overall acceptance of open source practices and communication by web developers in stark contrast to the almost complete lack of open source and open communication by the game dev industry.\n\nIn short what I mean is compare the Google search results for say [how to build a web app](https://www.google.com/search?q=how+to+build+a+web+app) versus say some kid chooses to Google the term [how to write a fps game](https://www.google.com/search?q=how+to+write+a+fps+game), [notice the huge variation in content and depth of understanding from the two search results](https://yourlogicalfallacyis.com/anecdotal). Well that about wraps up my short rant on the difficulty of finding good information on game development in comparison to web development.\n\n### Offloading My Static Files And Assets\n\nOk so I just signed up for a new account on [Amazon S3](http://aws.amazon.com/s3/) and I just bookmarked this dev's [amazing tutorial](http://www.hongkiat.com/blog/amazon-s3-the-beginners-guide/) on how to leverage S3 for content hosting. In addition I'm going to start using GitHub Gist for all of my code samples, I have no clue why I wasn't doing this before. Maybe it was due to me going through this phase where I had to build everything from scratch and totally \"SELF HOST ALL THE THINGS\"  because you know I like wasting time and re-inventing the wheel every two week iteration.\n\nAs a short example of my new goal of not self hosting everything here is a preview of how all of my new code snippets will appear as; notice how I don't have to bother with loading all the google-code-prettify css and tinkering with html code tags and getting the attributes correct for the styles and language settings.\n\n<script src=\"https://gist.github.com/taywils/5164836.js\"> </script>\n\nAnd one more thing... I found this cool article on using CSS3 to draw images that would normally have to be done with Photoshop... more of that means less PNGs your browser has to pull down.\n\n### Increasing My Productivity As A Software Developer\n\nBeen doing some reading on programmer productivity lately and I have to say that I've found myself guilty of many of the pain points popular software bloggers have mentioned.\n\nFor starts CodingHorror.com mentions some things I agree with such as [ideas are worth nothing unless executed](http://www.codinghorror.com/blog/2010/01/cultivate-teams-not-ideas.html) which to me reminds myself of all the times where I had this \"super cool awesome idea\" but completly and utterly failed to actually follow through with the implementation. I mean whats the point of sitting around and talking about your so called \"next best thing\" when you can't even follow through and build anything tangible.\n\nOther than some of the excellent post on CodingHorror I've also taken an intrest in another software blogger whos written some interesting post surrounding programmer productivity and other things.\n\n[Aaronontheweb](http://www.aaronstannard.com/) and in particular his post that really got to me was [ten reasons why you're failing to become a better developer](http://www.aaronstannard.com/post/2013/02/06/10-Reasons-Why-Youe28099re-Failing-to-Realize-Your-Potential-as-a-Developer.aspx). Not sure about anyone reading this but I've fallen victum to several of the points he mentions in his elaborate post.\n\nOk that wraps up what is essentially my first _real_ blog post. What I mean by _real_ is that up until now I've been thinking that I've been sort of pseudo-blogging. I've been just kinda posting random tutorials and minor updates on my status but nothing really substantial or opinionated. It was almost as if I was afraid of people striking my arguments down or calling me out on BS. Up until now I haven't been blogging... well its time to change that. This of course doesn't mean that I'll stop writing technical articles but it more so means that I'm human and like most humans I have stuff I want to say and get out to the public as opposed to just going through code tutorials and linking to projects.\n\nBye now thanks for reading... oh yeah and Markdown lets me blog faster than writing regular HTML.\n","source":"_posts/writingabookandmisc.md","raw":"---\ntitle: Why I Choose To Write A Book \ndate: 2013-03-13\ntags: [rant]\ncategories: []\nbanner: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/writingabookandmisc.jpg\nthumbnail: https://s3-us-west-2.amazonaws.com/taywils.me.static.files/images/post_banners_thumbnails/writingabookandmisc.jpg\ncomments: false\n---\n\nLately I've gotten behind on blogging again but would like to try out some new things such as hosting all of my static content on Amazon s3. Meanwhile I've been very busy typing away on my lastest project which will be my first published book. Enough talk... just click on this stub to read the rest of my rant.\n\n<!-- more -->\n### So What's The Book Going To Be About?\n\nI was contacted by a representative from [Packt publishing](http://www.packtpub.com/) to write a book for networking programming with C++. Although initially skeptic I mean what did I really understand about network development other than a series of [blog posts](http://www.taywils.me/2011/06/04/textbasedrpgpart1.html) I did awhile back for a game I wrote for some introductory programming class I was forced to take as a graduation requirement back in college. Anyways its been pretty interesting so far having just completed the first chapter which was around 30 pages long that also included some BSD sockets as well as Winsock2 API usage I'm looking forward to writing the later chapters that will delve deeper into game design and possibly some heavy duty graphics rendering if I try to make a 3D game. Oh and by the way I've bought some books for background research on the subject of network programming in C/C++ as well as game development. However, the surprising thing is that despite the number of large scale multi-million dollar games being pushed out practically daily the amount of great tutorial/instructional books on the subject is close to nil. Is game development some sort of giant trade secret, I don't understand why companies such as Nintendo or EA games don't try to cash in on the sheer amount of indie gamers trying to create the next big hit by releasing books about their development process.  \n\nI mean when software developers outside of the games industry hear the constant moaning and complaining about the so called [stagnation crisis](http://www.economist.com/news/business/21572249-sonys-newest-console-launches-suffering-industry-all-play) thats afflicting the video games industry(the media also makes it seems as if Japanese game developers are rotting corpses just because I think Final Fantasy doesn't sell well anymore or something) and then we look at all [those quirky fun interesting titles](http://venturebeat.com/2012/12/22/the-best-indie-games-of-2012/) comming out of the indie game pipeline one has to wonder why the insane amounts of creative talent often found in successful indie titles doesn't percolate up to the big time game studios with the possible the exception of Valve software (Counter-Strike and DotA both started out as mods of popular games) and a few others I probably don't know about.\n\nIf you want my TL;DR opinion I believe the explosive growth and innovation of web development over the past decade in contrast to the so called decline of video games has been in much part due to the overall acceptance of open source practices and communication by web developers in stark contrast to the almost complete lack of open source and open communication by the game dev industry.\n\nIn short what I mean is compare the Google search results for say [how to build a web app](https://www.google.com/search?q=how+to+build+a+web+app) versus say some kid chooses to Google the term [how to write a fps game](https://www.google.com/search?q=how+to+write+a+fps+game), [notice the huge variation in content and depth of understanding from the two search results](https://yourlogicalfallacyis.com/anecdotal). Well that about wraps up my short rant on the difficulty of finding good information on game development in comparison to web development.\n\n### Offloading My Static Files And Assets\n\nOk so I just signed up for a new account on [Amazon S3](http://aws.amazon.com/s3/) and I just bookmarked this dev's [amazing tutorial](http://www.hongkiat.com/blog/amazon-s3-the-beginners-guide/) on how to leverage S3 for content hosting. In addition I'm going to start using GitHub Gist for all of my code samples, I have no clue why I wasn't doing this before. Maybe it was due to me going through this phase where I had to build everything from scratch and totally \"SELF HOST ALL THE THINGS\"  because you know I like wasting time and re-inventing the wheel every two week iteration.\n\nAs a short example of my new goal of not self hosting everything here is a preview of how all of my new code snippets will appear as; notice how I don't have to bother with loading all the google-code-prettify css and tinkering with html code tags and getting the attributes correct for the styles and language settings.\n\n<script src=\"https://gist.github.com/taywils/5164836.js\"> </script>\n\nAnd one more thing... I found this cool article on using CSS3 to draw images that would normally have to be done with Photoshop... more of that means less PNGs your browser has to pull down.\n\n### Increasing My Productivity As A Software Developer\n\nBeen doing some reading on programmer productivity lately and I have to say that I've found myself guilty of many of the pain points popular software bloggers have mentioned.\n\nFor starts CodingHorror.com mentions some things I agree with such as [ideas are worth nothing unless executed](http://www.codinghorror.com/blog/2010/01/cultivate-teams-not-ideas.html) which to me reminds myself of all the times where I had this \"super cool awesome idea\" but completly and utterly failed to actually follow through with the implementation. I mean whats the point of sitting around and talking about your so called \"next best thing\" when you can't even follow through and build anything tangible.\n\nOther than some of the excellent post on CodingHorror I've also taken an intrest in another software blogger whos written some interesting post surrounding programmer productivity and other things.\n\n[Aaronontheweb](http://www.aaronstannard.com/) and in particular his post that really got to me was [ten reasons why you're failing to become a better developer](http://www.aaronstannard.com/post/2013/02/06/10-Reasons-Why-Youe28099re-Failing-to-Realize-Your-Potential-as-a-Developer.aspx). Not sure about anyone reading this but I've fallen victum to several of the points he mentions in his elaborate post.\n\nOk that wraps up what is essentially my first _real_ blog post. What I mean by _real_ is that up until now I've been thinking that I've been sort of pseudo-blogging. I've been just kinda posting random tutorials and minor updates on my status but nothing really substantial or opinionated. It was almost as if I was afraid of people striking my arguments down or calling me out on BS. Up until now I haven't been blogging... well its time to change that. This of course doesn't mean that I'll stop writing technical articles but it more so means that I'm human and like most humans I have stuff I want to say and get out to the public as opposed to just going through code tutorials and linking to projects.\n\nBye now thanks for reading... oh yeah and Markdown lets me blog faster than writing regular HTML.\n","slug":"writingabookandmisc","published":1,"updated":"2017-05-01T06:31:10.000Z","_id":"cj25qv3jh002cyswve6a0g745","layout":"post","photos":[],"link":"","content":"<p>Lately I’ve gotten behind on blogging again but would like to try out some new things such as hosting all of my static content on Amazon s3. Meanwhile I’ve been very busy typing away on my lastest project which will be my first published book. Enough talk… just click on this stub to read the rest of my rant.</p>\n<a id=\"more\"></a>\n<h3 id=\"So-What’s-The-Book-Going-To-Be-About\"><a href=\"#So-What’s-The-Book-Going-To-Be-About\" class=\"headerlink\" title=\"So What’s The Book Going To Be About?\"></a>So What’s The Book Going To Be About?</h3><p>I was contacted by a representative from <a href=\"http://www.packtpub.com/\" target=\"_blank\" rel=\"external\">Packt publishing</a> to write a book for networking programming with C++. Although initially skeptic I mean what did I really understand about network development other than a series of <a href=\"http://www.taywils.me/2011/06/04/textbasedrpgpart1.html\" target=\"_blank\" rel=\"external\">blog posts</a> I did awhile back for a game I wrote for some introductory programming class I was forced to take as a graduation requirement back in college. Anyways its been pretty interesting so far having just completed the first chapter which was around 30 pages long that also included some BSD sockets as well as Winsock2 API usage I’m looking forward to writing the later chapters that will delve deeper into game design and possibly some heavy duty graphics rendering if I try to make a 3D game. Oh and by the way I’ve bought some books for background research on the subject of network programming in C/C++ as well as game development. However, the surprising thing is that despite the number of large scale multi-million dollar games being pushed out practically daily the amount of great tutorial/instructional books on the subject is close to nil. Is game development some sort of giant trade secret, I don’t understand why companies such as Nintendo or EA games don’t try to cash in on the sheer amount of indie gamers trying to create the next big hit by releasing books about their development process.  </p>\n<p>I mean when software developers outside of the games industry hear the constant moaning and complaining about the so called <a href=\"http://www.economist.com/news/business/21572249-sonys-newest-console-launches-suffering-industry-all-play\" target=\"_blank\" rel=\"external\">stagnation crisis</a> thats afflicting the video games industry(the media also makes it seems as if Japanese game developers are rotting corpses just because I think Final Fantasy doesn’t sell well anymore or something) and then we look at all <a href=\"http://venturebeat.com/2012/12/22/the-best-indie-games-of-2012/\" target=\"_blank\" rel=\"external\">those quirky fun interesting titles</a> comming out of the indie game pipeline one has to wonder why the insane amounts of creative talent often found in successful indie titles doesn’t percolate up to the big time game studios with the possible the exception of Valve software (Counter-Strike and DotA both started out as mods of popular games) and a few others I probably don’t know about.</p>\n<p>If you want my TL;DR opinion I believe the explosive growth and innovation of web development over the past decade in contrast to the so called decline of video games has been in much part due to the overall acceptance of open source practices and communication by web developers in stark contrast to the almost complete lack of open source and open communication by the game dev industry.</p>\n<p>In short what I mean is compare the Google search results for say <a href=\"https://www.google.com/search?q=how+to+build+a+web+app\" target=\"_blank\" rel=\"external\">how to build a web app</a> versus say some kid chooses to Google the term <a href=\"https://www.google.com/search?q=how+to+write+a+fps+game\" target=\"_blank\" rel=\"external\">how to write a fps game</a>, <a href=\"https://yourlogicalfallacyis.com/anecdotal\" target=\"_blank\" rel=\"external\">notice the huge variation in content and depth of understanding from the two search results</a>. Well that about wraps up my short rant on the difficulty of finding good information on game development in comparison to web development.</p>\n<h3 id=\"Offloading-My-Static-Files-And-Assets\"><a href=\"#Offloading-My-Static-Files-And-Assets\" class=\"headerlink\" title=\"Offloading My Static Files And Assets\"></a>Offloading My Static Files And Assets</h3><p>Ok so I just signed up for a new account on <a href=\"http://aws.amazon.com/s3/\" target=\"_blank\" rel=\"external\">Amazon S3</a> and I just bookmarked this dev’s <a href=\"http://www.hongkiat.com/blog/amazon-s3-the-beginners-guide/\" target=\"_blank\" rel=\"external\">amazing tutorial</a> on how to leverage S3 for content hosting. In addition I’m going to start using GitHub Gist for all of my code samples, I have no clue why I wasn’t doing this before. Maybe it was due to me going through this phase where I had to build everything from scratch and totally “SELF HOST ALL THE THINGS”  because you know I like wasting time and re-inventing the wheel every two week iteration.</p>\n<p>As a short example of my new goal of not self hosting everything here is a preview of how all of my new code snippets will appear as; notice how I don’t have to bother with loading all the google-code-prettify css and tinkering with html code tags and getting the attributes correct for the styles and language settings.</p>\n<script src=\"https://gist.github.com/taywils/5164836.js\"> </script>\n\n<p>And one more thing… I found this cool article on using CSS3 to draw images that would normally have to be done with Photoshop… more of that means less PNGs your browser has to pull down.</p>\n<h3 id=\"Increasing-My-Productivity-As-A-Software-Developer\"><a href=\"#Increasing-My-Productivity-As-A-Software-Developer\" class=\"headerlink\" title=\"Increasing My Productivity As A Software Developer\"></a>Increasing My Productivity As A Software Developer</h3><p>Been doing some reading on programmer productivity lately and I have to say that I’ve found myself guilty of many of the pain points popular software bloggers have mentioned.</p>\n<p>For starts CodingHorror.com mentions some things I agree with such as <a href=\"http://www.codinghorror.com/blog/2010/01/cultivate-teams-not-ideas.html\" target=\"_blank\" rel=\"external\">ideas are worth nothing unless executed</a> which to me reminds myself of all the times where I had this “super cool awesome idea” but completly and utterly failed to actually follow through with the implementation. I mean whats the point of sitting around and talking about your so called “next best thing” when you can’t even follow through and build anything tangible.</p>\n<p>Other than some of the excellent post on CodingHorror I’ve also taken an intrest in another software blogger whos written some interesting post surrounding programmer productivity and other things.</p>\n<p><a href=\"http://www.aaronstannard.com/\" target=\"_blank\" rel=\"external\">Aaronontheweb</a> and in particular his post that really got to me was <a href=\"http://www.aaronstannard.com/post/2013/02/06/10-Reasons-Why-Youe28099re-Failing-to-Realize-Your-Potential-as-a-Developer.aspx\" target=\"_blank\" rel=\"external\">ten reasons why you’re failing to become a better developer</a>. Not sure about anyone reading this but I’ve fallen victum to several of the points he mentions in his elaborate post.</p>\n<p>Ok that wraps up what is essentially my first <em>real</em> blog post. What I mean by <em>real</em> is that up until now I’ve been thinking that I’ve been sort of pseudo-blogging. I’ve been just kinda posting random tutorials and minor updates on my status but nothing really substantial or opinionated. It was almost as if I was afraid of people striking my arguments down or calling me out on BS. Up until now I haven’t been blogging… well its time to change that. This of course doesn’t mean that I’ll stop writing technical articles but it more so means that I’m human and like most humans I have stuff I want to say and get out to the public as opposed to just going through code tutorials and linking to projects.</p>\n<p>Bye now thanks for reading… oh yeah and Markdown lets me blog faster than writing regular HTML.</p>\n","site":{"data":{}},"excerpt":"<p>Lately I’ve gotten behind on blogging again but would like to try out some new things such as hosting all of my static content on Amazon s3. Meanwhile I’ve been very busy typing away on my lastest project which will be my first published book. Enough talk… just click on this stub to read the rest of my rant.</p>","more":"<h3 id=\"So-What’s-The-Book-Going-To-Be-About\"><a href=\"#So-What’s-The-Book-Going-To-Be-About\" class=\"headerlink\" title=\"So What’s The Book Going To Be About?\"></a>So What’s The Book Going To Be About?</h3><p>I was contacted by a representative from <a href=\"http://www.packtpub.com/\">Packt publishing</a> to write a book for networking programming with C++. Although initially skeptic I mean what did I really understand about network development other than a series of <a href=\"http://www.taywils.me/2011/06/04/textbasedrpgpart1.html\">blog posts</a> I did awhile back for a game I wrote for some introductory programming class I was forced to take as a graduation requirement back in college. Anyways its been pretty interesting so far having just completed the first chapter which was around 30 pages long that also included some BSD sockets as well as Winsock2 API usage I’m looking forward to writing the later chapters that will delve deeper into game design and possibly some heavy duty graphics rendering if I try to make a 3D game. Oh and by the way I’ve bought some books for background research on the subject of network programming in C/C++ as well as game development. However, the surprising thing is that despite the number of large scale multi-million dollar games being pushed out practically daily the amount of great tutorial/instructional books on the subject is close to nil. Is game development some sort of giant trade secret, I don’t understand why companies such as Nintendo or EA games don’t try to cash in on the sheer amount of indie gamers trying to create the next big hit by releasing books about their development process.  </p>\n<p>I mean when software developers outside of the games industry hear the constant moaning and complaining about the so called <a href=\"http://www.economist.com/news/business/21572249-sonys-newest-console-launches-suffering-industry-all-play\">stagnation crisis</a> thats afflicting the video games industry(the media also makes it seems as if Japanese game developers are rotting corpses just because I think Final Fantasy doesn’t sell well anymore or something) and then we look at all <a href=\"http://venturebeat.com/2012/12/22/the-best-indie-games-of-2012/\">those quirky fun interesting titles</a> comming out of the indie game pipeline one has to wonder why the insane amounts of creative talent often found in successful indie titles doesn’t percolate up to the big time game studios with the possible the exception of Valve software (Counter-Strike and DotA both started out as mods of popular games) and a few others I probably don’t know about.</p>\n<p>If you want my TL;DR opinion I believe the explosive growth and innovation of web development over the past decade in contrast to the so called decline of video games has been in much part due to the overall acceptance of open source practices and communication by web developers in stark contrast to the almost complete lack of open source and open communication by the game dev industry.</p>\n<p>In short what I mean is compare the Google search results for say <a href=\"https://www.google.com/search?q=how+to+build+a+web+app\">how to build a web app</a> versus say some kid chooses to Google the term <a href=\"https://www.google.com/search?q=how+to+write+a+fps+game\">how to write a fps game</a>, <a href=\"https://yourlogicalfallacyis.com/anecdotal\">notice the huge variation in content and depth of understanding from the two search results</a>. Well that about wraps up my short rant on the difficulty of finding good information on game development in comparison to web development.</p>\n<h3 id=\"Offloading-My-Static-Files-And-Assets\"><a href=\"#Offloading-My-Static-Files-And-Assets\" class=\"headerlink\" title=\"Offloading My Static Files And Assets\"></a>Offloading My Static Files And Assets</h3><p>Ok so I just signed up for a new account on <a href=\"http://aws.amazon.com/s3/\">Amazon S3</a> and I just bookmarked this dev’s <a href=\"http://www.hongkiat.com/blog/amazon-s3-the-beginners-guide/\">amazing tutorial</a> on how to leverage S3 for content hosting. In addition I’m going to start using GitHub Gist for all of my code samples, I have no clue why I wasn’t doing this before. Maybe it was due to me going through this phase where I had to build everything from scratch and totally “SELF HOST ALL THE THINGS”  because you know I like wasting time and re-inventing the wheel every two week iteration.</p>\n<p>As a short example of my new goal of not self hosting everything here is a preview of how all of my new code snippets will appear as; notice how I don’t have to bother with loading all the google-code-prettify css and tinkering with html code tags and getting the attributes correct for the styles and language settings.</p>\n<script src=\"https://gist.github.com/taywils/5164836.js\"> </script>\n\n<p>And one more thing… I found this cool article on using CSS3 to draw images that would normally have to be done with Photoshop… more of that means less PNGs your browser has to pull down.</p>\n<h3 id=\"Increasing-My-Productivity-As-A-Software-Developer\"><a href=\"#Increasing-My-Productivity-As-A-Software-Developer\" class=\"headerlink\" title=\"Increasing My Productivity As A Software Developer\"></a>Increasing My Productivity As A Software Developer</h3><p>Been doing some reading on programmer productivity lately and I have to say that I’ve found myself guilty of many of the pain points popular software bloggers have mentioned.</p>\n<p>For starts CodingHorror.com mentions some things I agree with such as <a href=\"http://www.codinghorror.com/blog/2010/01/cultivate-teams-not-ideas.html\">ideas are worth nothing unless executed</a> which to me reminds myself of all the times where I had this “super cool awesome idea” but completly and utterly failed to actually follow through with the implementation. I mean whats the point of sitting around and talking about your so called “next best thing” when you can’t even follow through and build anything tangible.</p>\n<p>Other than some of the excellent post on CodingHorror I’ve also taken an intrest in another software blogger whos written some interesting post surrounding programmer productivity and other things.</p>\n<p><a href=\"http://www.aaronstannard.com/\">Aaronontheweb</a> and in particular his post that really got to me was <a href=\"http://www.aaronstannard.com/post/2013/02/06/10-Reasons-Why-Youe28099re-Failing-to-Realize-Your-Potential-as-a-Developer.aspx\">ten reasons why you’re failing to become a better developer</a>. Not sure about anyone reading this but I’ve fallen victum to several of the points he mentions in his elaborate post.</p>\n<p>Ok that wraps up what is essentially my first <em>real</em> blog post. What I mean by <em>real</em> is that up until now I’ve been thinking that I’ve been sort of pseudo-blogging. I’ve been just kinda posting random tutorials and minor updates on my status but nothing really substantial or opinionated. It was almost as if I was afraid of people striking my arguments down or calling me out on BS. Up until now I haven’t been blogging… well its time to change that. This of course doesn’t mean that I’ll stop writing technical articles but it more so means that I’m human and like most humans I have stuff I want to say and get out to the public as opposed to just going through code tutorials and linking to projects.</p>\n<p>Bye now thanks for reading… oh yeah and Markdown lets me blog faster than writing regular HTML.</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj25qv3h4000cyswvw5qecn61","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3hg000lyswvvpyyga8a"},{"post_id":"cj25qv3hh000myswveswmd96j","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3ho000tyswvfklab2rr"},{"post_id":"cj25qv3hj000oyswv8sj9fr4z","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3hr000yyswvnirnb36s"},{"post_id":"cj25qv3gw0008yswvnz2id1fq","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3hy0012yswvqgm6gag7"},{"post_id":"cj25qv3hv0011yswv2s613swx","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3i60019yswvfjzbwsjk"},{"post_id":"cj25qv3i30017yswvy0azhdo5","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3id001gyswv5u6ceyns"},{"post_id":"cj25qv3ia001eyswvrfzffi7a","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3il001myswvcbbh8qi5"},{"post_id":"cj25qv3g80000yswv196f1v9d","category_id":"cj25qv3gj0004yswvnwt2b2ah","_id":"cj25qv3ip001ryswvrypeqlbd"},{"post_id":"cj25qv3g80000yswv196f1v9d","category_id":"cj25qv3hf000jyswv97hbf1n2","_id":"cj25qv3it001uyswvt8u1m9p2"},{"post_id":"cj25qv3g80000yswv196f1v9d","category_id":"cj25qv3i6001ayswvbypaiqbx","_id":"cj25qv3ix001zyswvcila6j88"},{"post_id":"cj25qv3ie001hyswv2edvj98s","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3j00022yswv9v85silp"},{"post_id":"cj25qv3ig001lyswvpxru4c1t","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3j40027yswveo9lk52e"},{"post_id":"cj25qv3im001oyswvyo7tl0on","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3jh002ayswvadgepxn0"},{"post_id":"cj25qv3ip001tyswvhzlrbivv","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3jj002eyswvmi1vkgoa"},{"post_id":"cj25qv3it001wyswvabxsjv73","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3jk002hyswvnowwsqgj"},{"post_id":"cj25qv3ix0021yswv0pifxnb2","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3jl002kyswvpxk3f7ea"},{"post_id":"cj25qv3j00024yswvlcl3tsp8","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3jl002nyswv38urx4t6"},{"post_id":"cj25qv3j00024yswvlcl3tsp8","category_id":"cj25qv3hr000wyswvram91qn0","_id":"cj25qv3jm002qyswvh3lztmtw"},{"post_id":"cj25qv3j50029yswvdgvb67p4","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3jm002tyswvmcmdrswn"},{"post_id":"cj25qv3j50029yswvdgvb67p4","category_id":"cj25qv3hr000wyswvram91qn0","_id":"cj25qv3jo002wyswvj7nxn8e4"},{"post_id":"cj25qv3gf0002yswv5zjk3axd","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3jo002zyswvui4cfgdb"},{"post_id":"cj25qv3gf0002yswv5zjk3axd","category_id":"cj25qv3hr000wyswvram91qn0","_id":"cj25qv3jp0032yswvzduzaih7"},{"post_id":"cj25qv3gf0002yswv5zjk3axd","category_id":"cj25qv3j20025yswvidhyibq0","_id":"cj25qv3jp0035yswvfzdzdb9z"},{"post_id":"cj25qv3gs0007yswvbfpwqdvg","category_id":"cj25qv3gz0009yswvpjheonm2","_id":"cj25qv3jq0038yswvh3suk1yb"},{"post_id":"cj25qv3gs0007yswvbfpwqdvg","category_id":"cj25qv3hr000wyswvram91qn0","_id":"cj25qv3jq003byswvtreyz9jd"},{"post_id":"cj25qv3gs0007yswvbfpwqdvg","category_id":"cj25qv3j20025yswvidhyibq0","_id":"cj25qv3jr003dyswvajmzgawk"},{"post_id":"cj25qv3i7001cyswve0t44ex8","category_id":"cj25qv3jm002syswv2dzn9xjb","_id":"cj25qv3jr003gyswv1apz1lzn"},{"post_id":"cj25qv3hp000vyswv73ppehsr","category_id":"cj25qv3io001pyswvxnpez95o","_id":"cj25qv3js003jyswv0xd4x2lr"},{"post_id":"cj25qv3hp000vyswv73ppehsr","category_id":"cj25qv3jp0034yswvmi7xhjd8","_id":"cj25qv3jt003myswvj3yranlx"},{"post_id":"cj25qv3hs000zyswvxim84c6f","category_id":"cj25qv3io001pyswvxnpez95o","_id":"cj25qv3jv003oyswv4ki0gcox"},{"post_id":"cj25qv3hs000zyswvxim84c6f","category_id":"cj25qv3jq003ayswv4996dl6s","_id":"cj25qv3jw003qyswv267satjn"},{"post_id":"cj25qv3hz0015yswv647z0vox","category_id":"cj25qv3if001iyswvcpybsscq","_id":"cj25qv3jw003syswvq7rupsy5"},{"post_id":"cj25qv3hz0015yswv647z0vox","category_id":"cj25qv3jo002yyswvjn04taj5","_id":"cj25qv3jw003uyswvh1xej65c"},{"post_id":"cj25qv3hm000syswvqh5y81lx","category_id":"cj25qv3if001iyswvcpybsscq","_id":"cj25qv3jx003vyswv93e08qwe"},{"post_id":"cj25qv3hm000syswvqh5y81lx","category_id":"cj25qv3jo002yyswvjn04taj5","_id":"cj25qv3jy003xyswvbbn5uh6n"},{"post_id":"cj25qv3hm000syswvqh5y81lx","category_id":"cj25qv3ju003nyswv6zam6ula","_id":"cj25qv3jz003zyswv43m4e4kr"}],"PostTag":[{"post_id":"cj25qv3g80000yswv196f1v9d","tag_id":"cj25qv3go0005yswv17uazf16","_id":"cj25qv3hb000gyswvh3w9rfxl"},{"post_id":"cj25qv3g80000yswv196f1v9d","tag_id":"cj25qv3gz000ayswvav81j2tl","_id":"cj25qv3he000iyswvzaok1p09"},{"post_id":"cj25qv3gf0002yswv5zjk3axd","tag_id":"cj25qv3h7000eyswvrgxvj1z0","_id":"cj25qv3hj000nyswv0p9cga4b"},{"post_id":"cj25qv3hh000myswveswmd96j","tag_id":"cj25qv3go0005yswv17uazf16","_id":"cj25qv3hm000ryswv11idibdv"},{"post_id":"cj25qv3hh000myswveswmd96j","tag_id":"cj25qv3gz000ayswvav81j2tl","_id":"cj25qv3ho000uyswvrnhi7l4g"},{"post_id":"cj25qv3hp000vyswv73ppehsr","tag_id":"cj25qv3go0005yswv17uazf16","_id":"cj25qv3hu0010yswvowiknpgp"},{"post_id":"cj25qv3gp0006yswvfp898eti","tag_id":"cj25qv3go0005yswv17uazf16","_id":"cj25qv3i20016yswvcsedtas7"},{"post_id":"cj25qv3gp0006yswvfp898eti","tag_id":"cj25qv3gz000ayswvav81j2tl","_id":"cj25qv3i60018yswvel87rdn1"},{"post_id":"cj25qv3gp0006yswvfp898eti","tag_id":"cj25qv3hr000xyswv506vbyw9","_id":"cj25qv3ia001dyswvanxah2m2"},{"post_id":"cj25qv3gs0007yswvbfpwqdvg","tag_id":"cj25qv3h7000eyswvrgxvj1z0","_id":"cj25qv3id001fyswvdzf8jb0s"},{"post_id":"cj25qv3ia001eyswvrfzffi7a","tag_id":"cj25qv3h7000eyswvrgxvj1z0","_id":"cj25qv3ig001kyswvtldahi20"},{"post_id":"cj25qv3ie001hyswv2edvj98s","tag_id":"cj25qv3h7000eyswvrgxvj1z0","_id":"cj25qv3il001nyswv14mqvewn"},{"post_id":"cj25qv3ig001lyswvpxru4c1t","tag_id":"cj25qv3h7000eyswvrgxvj1z0","_id":"cj25qv3ip001syswvy1qjllur"},{"post_id":"cj25qv3gw0008yswvnz2id1fq","tag_id":"cj25qv3i7001byswvgv47wpiw","_id":"cj25qv3it001vyswvsdfv93en"},{"post_id":"cj25qv3gw0008yswvnz2id1fq","tag_id":"cj25qv3ig001jyswvrmxro5sf","_id":"cj25qv3ix0020yswvsoboffgn"},{"post_id":"cj25qv3im001oyswvyo7tl0on","tag_id":"cj25qv3h7000eyswvrgxvj1z0","_id":"cj25qv3j00023yswvgceqgucj"},{"post_id":"cj25qv3ip001tyswvhzlrbivv","tag_id":"cj25qv3h7000eyswvrgxvj1z0","_id":"cj25qv3j40028yswvdghht4dw"},{"post_id":"cj25qv3it001wyswvabxsjv73","tag_id":"cj25qv3h7000eyswvrgxvj1z0","_id":"cj25qv3jh002byswvx8hnw2wv"},{"post_id":"cj25qv3ix0021yswv0pifxnb2","tag_id":"cj25qv3h7000eyswvrgxvj1z0","_id":"cj25qv3jj002fyswvz5lrxwry"},{"post_id":"cj25qv3h3000byswvkq01yyrg","tag_id":"cj25qv3i7001byswvgv47wpiw","_id":"cj25qv3jk002iyswvpvw8qowe"},{"post_id":"cj25qv3h3000byswvkq01yyrg","tag_id":"cj25qv3iw001xyswvlb88b0h4","_id":"cj25qv3jl002lyswvwzp7lfqq"},{"post_id":"cj25qv3j00024yswvlcl3tsp8","tag_id":"cj25qv3h7000eyswvrgxvj1z0","_id":"cj25qv3jl002oyswvt1ikm35d"},{"post_id":"cj25qv3j50029yswvdgvb67p4","tag_id":"cj25qv3h7000eyswvrgxvj1z0","_id":"cj25qv3jm002ryswvd0ls5kk2"},{"post_id":"cj25qv3h4000cyswvw5qecn61","tag_id":"cj25qv3go0005yswv17uazf16","_id":"cj25qv3jn002uyswv4flzfnep"},{"post_id":"cj25qv3h4000cyswvw5qecn61","tag_id":"cj25qv3gz000ayswvav81j2tl","_id":"cj25qv3jo002xyswvddh4k599"},{"post_id":"cj25qv3h4000cyswvw5qecn61","tag_id":"cj25qv3hr000xyswv506vbyw9","_id":"cj25qv3jo0030yswvaqk7x7sd"},{"post_id":"cj25qv3h9000fyswvi22wzn9m","tag_id":"cj25qv3iw001xyswvlb88b0h4","_id":"cj25qv3jp0033yswvxu2kbmpt"},{"post_id":"cj25qv3h9000fyswvi22wzn9m","tag_id":"cj25qv3i7001byswvgv47wpiw","_id":"cj25qv3jp0036yswv78z0yue2"},{"post_id":"cj25qv3hb000hyswv2l5uy4eh","tag_id":"cj25qv3iw001xyswvlb88b0h4","_id":"cj25qv3jq0039yswvtxuwu4zm"},{"post_id":"cj25qv3hb000hyswv2l5uy4eh","tag_id":"cj25qv3i7001byswvgv47wpiw","_id":"cj25qv3jq003cyswvtv7rt73j"},{"post_id":"cj25qv3hj000oyswv8sj9fr4z","tag_id":"cj25qv3i7001byswvgv47wpiw","_id":"cj25qv3jr003eyswvf2s6eawc"},{"post_id":"cj25qv3hm000syswvqh5y81lx","tag_id":"cj25qv3jq0037yswvqzsupxnm","_id":"cj25qv3js003hyswvow38seez"},{"post_id":"cj25qv3hs000zyswvxim84c6f","tag_id":"cj25qv3jq0037yswvqzsupxnm","_id":"cj25qv3jt003lyswvq99bkn8b"},{"post_id":"cj25qv3hv0011yswv2s613swx","tag_id":"cj25qv3js003kyswvlnthricl","_id":"cj25qv3jw003ryswviadxb45y"},{"post_id":"cj25qv3hz0015yswv647z0vox","tag_id":"cj25qv3jq0037yswvqzsupxnm","_id":"cj25qv3jy003yyswvtcqwa0me"},{"post_id":"cj25qv3hz0015yswv647z0vox","tag_id":"cj25qv3i7001byswvgv47wpiw","_id":"cj25qv3jz0040yswvx9r2pyip"},{"post_id":"cj25qv3i30017yswvy0azhdo5","tag_id":"cj25qv3iw001xyswvlb88b0h4","_id":"cj25qv3k10043yswvrm5p80dd"},{"post_id":"cj25qv3i30017yswvy0azhdo5","tag_id":"cj25qv3k00041yswv7sa1udhl","_id":"cj25qv3k10044yswv1l8vbtns"},{"post_id":"cj25qv3i7001cyswve0t44ex8","tag_id":"cj25qv3iw001xyswvlb88b0h4","_id":"cj25qv3k20047yswvrqike6u6"},{"post_id":"cj25qv3i7001cyswve0t44ex8","tag_id":"cj25qv3i7001byswvgv47wpiw","_id":"cj25qv3k20048yswvk21prxos"},{"post_id":"cj25qv3jh002cyswve6a0g745","tag_id":"cj25qv3k20046yswvu3mlilcu","_id":"cj25qv3k30049yswvj9m19c2q"}],"Tag":[{"name":"java","_id":"cj25qv3go0005yswv17uazf16"},{"name":"android","_id":"cj25qv3gz000ayswvav81j2tl"},{"name":"cpp","_id":"cj25qv3h7000eyswvrgxvj1z0"},{"name":"mobile","_id":"cj25qv3hr000xyswv506vbyw9"},{"name":"javascript","_id":"cj25qv3i7001byswvgv47wpiw"},{"name":"nodejs","_id":"cj25qv3ig001jyswvrmxro5sf"},{"name":"ruby","_id":"cj25qv3iw001xyswvlb88b0h4"},{"name":"php","_id":"cj25qv3jq0037yswvqzsupxnm"},{"name":"python","_id":"cj25qv3js003kyswvlnthricl"},{"name":"redis","_id":"cj25qv3k00041yswv7sa1udhl"},{"name":"rant","_id":"cj25qv3k20046yswvu3mlilcu"}]}}